package org.slizaa.neo4j.opencypher.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.slizaa.neo4j.opencypher.services.OpenCypherGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalOpenCypherParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLSHORTESTPATHS", "FIELDTERMINATOR", "RELATIONSHIP", "SHORTESTPATH", "CONSTRAINT", "DESCENDING", "ASCENDING", "CONTAINS", "DISTINCT", "OPTIONAL", "PERIODIC", "EXPLAIN", "EXTRACT", "FOREACH", "HEADERS", "PROFILE", "ASSERT", "COMMIT", "CREATE", "CYPHER", "DELETE", "DETACH", "EXISTS", "FILTER", "REDUCE", "REMOVE", "RETURN", "SINGLE", "STARTS", "UNIQUE", "UNWIND", "COUNT", "FALSE", "INDEX", "LIMIT", "MATCH", "MERGE", "ORDER", "START", "UNION", "USING", "WHERE", "YIELD", "CALL", "CASE", "DESC", "DROP", "ELSE", "ENDS", "FROM", "JOIN", "LOAD", "NODE", "NONE", "NULL", "SCAN", "SKIP", "THEN", "TRUE", "WHEN", "WITH", "ALL", "AND", "ANY", "ASC", "CSV", "END", "NOT", "REL", "SET", "XOR", "PlusSignEqualsSign", "FullStopFullStop", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignTilde", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "ExclamationMark", "DollarSign", "PercentSign", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_STRING_LITERAL", "RULE_HEX", "RULE_INT", "RULE_DECIMAL"
    };
    public static final int LessThanSignGreaterThanSign=78;
    public static final int RULE_HEX=115;
    public static final int CREATE=22;
    public static final int JOIN=54;
    public static final int LessThanSign=100;
    public static final int WHEN=63;
    public static final int LeftParenthesis=90;
    public static final int EXPLAIN=15;
    public static final int PERIODIC=14;
    public static final int ELSE=51;
    public static final int EqualsSignTilde=79;
    public static final int NONE=57;
    public static final int ExclamationMark=87;
    public static final int GreaterThanSign=102;
    public static final int RULE_ID=110;
    public static final int IN=83;
    public static final int NODE=56;
    public static final int DISTINCT=12;
    public static final int IS=84;
    public static final int WHERE=45;
    public static final int CASE=48;
    public static final int GreaterThanSignEqualsSign=80;
    public static final int FIELDTERMINATOR=5;
    public static final int STARTS=32;
    public static final int AS=81;
    public static final int VerticalLine=108;
    public static final int PlusSign=93;
    public static final int RULE_INT=116;
    public static final int RULE_ML_COMMENT=111;
    public static final int COUNT=35;
    public static final int THEN=61;
    public static final int XOR=74;
    public static final int LeftSquareBracket=104;
    public static final int CALL=47;
    public static final int SET=73;
    public static final int MERGE=40;
    public static final int CONSTRAINT=8;
    public static final int FOREACH=17;
    public static final int ORDER=41;
    public static final int ASC=68;
    public static final int Comma=94;
    public static final int DELETE=24;
    public static final int HyphenMinus=95;
    public static final int HEADERS=18;
    public static final int BY=82;
    public static final int REMOVE=29;
    public static final int SKIP=60;
    public static final int SCAN=59;
    public static final int LessThanSignEqualsSign=77;
    public static final int Solidus=97;
    public static final int RightCurlyBracket=109;
    public static final int UNWIND=34;
    public static final int FullStop=96;
    public static final int YIELD=46;
    public static final int DETACH=25;
    public static final int Semicolon=99;
    public static final int ASCENDING=10;
    public static final int QuestionMark=103;
    public static final int SHORTESTPATH=7;
    public static final int REL=72;
    public static final int CYPHER=23;
    public static final int UNION=43;
    public static final int ALL=65;
    public static final int SINGLE=31;
    public static final int FROM=53;
    public static final int DESC=49;
    public static final int OPTIONAL=13;
    public static final int PercentSign=89;
    public static final int ALLSHORTESTPATHS=4;
    public static final int FullStopFullStop=76;
    public static final int DESCENDING=9;
    public static final int INDEX=37;
    public static final int RightSquareBracket=105;
    public static final int EXTRACT=16;
    public static final int NULL=58;
    public static final int UNIQUE=33;
    public static final int RightParenthesis=91;
    public static final int TRUE=62;
    public static final int USING=44;
    public static final int RULE_DECIMAL=117;
    public static final int NOT=71;
    public static final int AND=66;
    public static final int END=70;
    public static final int RELATIONSHIP=6;
    public static final int REDUCE=28;
    public static final int LOAD=55;
    public static final int LIMIT=38;
    public static final int CONTAINS=11;
    public static final int ANY=67;
    public static final int RULE_STRING_LITERAL=114;
    public static final int DROP=50;
    public static final int RULE_SL_COMMENT=112;
    public static final int RETURN=30;
    public static final int EqualsSign=101;
    public static final int PROFILE=19;
    public static final int ENDS=52;
    public static final int Colon=98;
    public static final int EOF=-1;
    public static final int Asterisk=92;
    public static final int PlusSignEqualsSign=75;
    public static final int ON=85;
    public static final int FILTER=27;
    public static final int OR=86;
    public static final int EXISTS=26;
    public static final int ASSERT=20;
    public static final int COMMIT=21;
    public static final int RULE_WS=113;
    public static final int CSV=69;
    public static final int LeftCurlyBracket=107;
    public static final int WITH=64;
    public static final int CircumflexAccent=106;
    public static final int DollarSign=88;
    public static final int FALSE=36;
    public static final int START=42;
    public static final int MATCH=39;

    // delegates
    // delegators


        public InternalOpenCypherParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalOpenCypherParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalOpenCypherParser.tokenNames; }
    public String getGrammarFileName() { return "InternalOpenCypherParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private OpenCypherGrammarAccess grammarAccess;

        public InternalOpenCypherParser(TokenStream input, OpenCypherGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Cypher";
       	}

       	@Override
       	protected OpenCypherGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleCypher"
    // InternalOpenCypherParser.g:64:1: entryRuleCypher returns [EObject current=null] : iv_ruleCypher= ruleCypher EOF ;
    public final EObject entryRuleCypher() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCypher = null;


        try {
            // InternalOpenCypherParser.g:64:47: (iv_ruleCypher= ruleCypher EOF )
            // InternalOpenCypherParser.g:65:2: iv_ruleCypher= ruleCypher EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCypherRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCypher=ruleCypher();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCypher; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCypher"


    // $ANTLR start "ruleCypher"
    // InternalOpenCypherParser.g:71:1: ruleCypher returns [EObject current=null] : ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? ) ;
    public final EObject ruleCypher() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        EObject lv_queryOptions_1_0 = null;

        EObject lv_statement_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:77:2: ( ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? ) )
            // InternalOpenCypherParser.g:78:2: ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )
            {
            // InternalOpenCypherParser.g:78:2: ( () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )? )
            // InternalOpenCypherParser.g:79:3: () ( (lv_queryOptions_1_0= ruleQueryOptions ) ) ( (lv_statement_2_0= ruleStatement ) ) (otherlv_3= Semicolon )?
            {
            // InternalOpenCypherParser.g:79:3: ()
            // InternalOpenCypherParser.g:80:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCypherAccess().getCypherAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:89:3: ( (lv_queryOptions_1_0= ruleQueryOptions ) )
            // InternalOpenCypherParser.g:90:4: (lv_queryOptions_1_0= ruleQueryOptions )
            {
            // InternalOpenCypherParser.g:90:4: (lv_queryOptions_1_0= ruleQueryOptions )
            // InternalOpenCypherParser.g:91:5: lv_queryOptions_1_0= ruleQueryOptions
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_3);
            lv_queryOptions_1_0=ruleQueryOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCypherRule());
              					}
              					set(
              						current,
              						"queryOptions",
              						lv_queryOptions_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.QueryOptions");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:108:3: ( (lv_statement_2_0= ruleStatement ) )
            // InternalOpenCypherParser.g:109:4: (lv_statement_2_0= ruleStatement )
            {
            // InternalOpenCypherParser.g:109:4: (lv_statement_2_0= ruleStatement )
            // InternalOpenCypherParser.g:110:5: lv_statement_2_0= ruleStatement
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCypherAccess().getStatementStatementParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_4);
            lv_statement_2_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCypherRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:127:3: (otherlv_3= Semicolon )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==Semicolon) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // InternalOpenCypherParser.g:128:4: otherlv_3= Semicolon
                    {
                    otherlv_3=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getCypherAccess().getSemicolonKeyword_3());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCypher"


    // $ANTLR start "entryRuleQueryOptions"
    // InternalOpenCypherParser.g:137:1: entryRuleQueryOptions returns [EObject current=null] : iv_ruleQueryOptions= ruleQueryOptions EOF ;
    public final EObject entryRuleQueryOptions() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryOptions = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalOpenCypherParser.g:141:2: (iv_ruleQueryOptions= ruleQueryOptions EOF )
            // InternalOpenCypherParser.g:142:2: iv_ruleQueryOptions= ruleQueryOptions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQueryOptions=ruleQueryOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQueryOptions; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleQueryOptions"


    // $ANTLR start "ruleQueryOptions"
    // InternalOpenCypherParser.g:151:1: ruleQueryOptions returns [EObject current=null] : ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) ) ;
    public final EObject ruleQueryOptions() throws RecognitionException {
        EObject current = null;

        Token lv_explain_2_0=null;
        Token lv_profile_3_0=null;
        EObject lv_cypherOption_4_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalOpenCypherParser.g:160:2: ( ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) ) )
            // InternalOpenCypherParser.g:161:2: ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) )
            {
            // InternalOpenCypherParser.g:161:2: ( () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) ) )
            // InternalOpenCypherParser.g:162:3: () ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) )
            {
            // InternalOpenCypherParser.g:162:3: ()
            // InternalOpenCypherParser.g:163:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:172:3: ( ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) ) )
            // InternalOpenCypherParser.g:173:4: ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) )
            {
            // InternalOpenCypherParser.g:173:4: ( ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* ) )
            // InternalOpenCypherParser.g:174:5: ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* )
            {
            getUnorderedGroupHelper().enter(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            // InternalOpenCypherParser.g:177:5: ( ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )* )
            // InternalOpenCypherParser.g:178:6: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )*
            {
            // InternalOpenCypherParser.g:178:6: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )*
            loop3:
            do {
                int alt3=4;
                int LA3_0 = input.LA(1);

                if ( LA3_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                    alt3=1;
                }
                else if ( LA3_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                    alt3=2;
                }
                else if ( LA3_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                    alt3=3;
                }


                switch (alt3) {
            	case 1 :
            	    // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
            	    {
            	    // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
            	    // InternalOpenCypherParser.g:180:5: {...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
            	    }
            	    // InternalOpenCypherParser.g:180:109: ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
            	    // InternalOpenCypherParser.g:181:6: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
            	    // InternalOpenCypherParser.g:184:9: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
            	    // InternalOpenCypherParser.g:184:10: {...}? => ( (lv_explain_2_0= EXPLAIN ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    }
            	    // InternalOpenCypherParser.g:184:19: ( (lv_explain_2_0= EXPLAIN ) )
            	    // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
            	    {
            	    // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
            	    // InternalOpenCypherParser.g:185:10: lv_explain_2_0= EXPLAIN
            	    {
            	    lv_explain_2_0=(Token)match(input,EXPLAIN,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_explain_2_0, grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getQueryOptionsRule());
            	      										}
            	      										setWithLastConsumed(current, "explain", true, "EXPLAIN");
            	      									
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
            	    {
            	    // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
            	    // InternalOpenCypherParser.g:203:5: {...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
            	    }
            	    // InternalOpenCypherParser.g:203:109: ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
            	    // InternalOpenCypherParser.g:204:6: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
            	    // InternalOpenCypherParser.g:207:9: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
            	    // InternalOpenCypherParser.g:207:10: {...}? => ( (lv_profile_3_0= PROFILE ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    }
            	    // InternalOpenCypherParser.g:207:19: ( (lv_profile_3_0= PROFILE ) )
            	    // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
            	    {
            	    // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
            	    // InternalOpenCypherParser.g:208:10: lv_profile_3_0= PROFILE
            	    {
            	    lv_profile_3_0=(Token)match(input,PROFILE,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_profile_3_0, grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getQueryOptionsRule());
            	      										}
            	      										setWithLastConsumed(current, "profile", true, "PROFILE");
            	      									
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
            	    {
            	    // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
            	    // InternalOpenCypherParser.g:226:5: {...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleQueryOptions", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
            	    }
            	    // InternalOpenCypherParser.g:226:109: ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
            	    // InternalOpenCypherParser.g:227:6: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
            	    // InternalOpenCypherParser.g:230:9: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
            	    int cnt2=0;
            	    loop2:
            	    do {
            	        int alt2=2;
            	        int LA2_0 = input.LA(1);

            	        if ( (LA2_0==CYPHER) ) {
            	            int LA2_2 = input.LA(2);

            	            if ( ((synpred4_InternalOpenCypherParser()&&(true))) ) {
            	                alt2=1;
            	            }


            	        }


            	        switch (alt2) {
            	    	case 1 :
            	    	    // InternalOpenCypherParser.g:230:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleQueryOptions", "true");
            	    	    }
            	    	    // InternalOpenCypherParser.g:230:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
            	    	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
            	    	    {
            	    	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
            	    	    // InternalOpenCypherParser.g:231:10: lv_cypherOption_4_0= ruleCypherOption
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_5);
            	    	    lv_cypherOption_4_0=ruleCypherOption();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getQueryOptionsRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"cypherOption",
            	    	      											lv_cypherOption_4_0,
            	    	      											"org.slizaa.neo4j.opencypher.OpenCypher.CypherOption");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt2 >= 1 ) break loop2;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(2, input);
            	                throw eee;
            	        }
            	        cnt2++;
            	    } while (true);

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleQueryOptions"


    // $ANTLR start "entryRuleCypherOption"
    // InternalOpenCypherParser.g:267:1: entryRuleCypherOption returns [EObject current=null] : iv_ruleCypherOption= ruleCypherOption EOF ;
    public final EObject entryRuleCypherOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCypherOption = null;


        try {
            // InternalOpenCypherParser.g:267:53: (iv_ruleCypherOption= ruleCypherOption EOF )
            // InternalOpenCypherParser.g:268:2: iv_ruleCypherOption= ruleCypherOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCypherOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCypherOption=ruleCypherOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCypherOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCypherOption"


    // $ANTLR start "ruleCypherOption"
    // InternalOpenCypherParser.g:274:1: ruleCypherOption returns [EObject current=null] : ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* ) ;
    public final EObject ruleCypherOption() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_versionNumber_2_0 = null;

        EObject lv_configurationOption_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:280:2: ( ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* ) )
            // InternalOpenCypherParser.g:281:2: ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* )
            {
            // InternalOpenCypherParser.g:281:2: ( () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )* )
            // InternalOpenCypherParser.g:282:3: () otherlv_1= CYPHER ( (lv_versionNumber_2_0= ruleVersionNumber ) )? ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*
            {
            // InternalOpenCypherParser.g:282:3: ()
            // InternalOpenCypherParser.g:283:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCypherOptionAccess().getCypherOptionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,CYPHER,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:296:3: ( (lv_versionNumber_2_0= ruleVersionNumber ) )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( ((LA4_0>=RULE_HEX && LA4_0<=RULE_DECIMAL)) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // InternalOpenCypherParser.g:297:4: (lv_versionNumber_2_0= ruleVersionNumber )
                    {
                    // InternalOpenCypherParser.g:297:4: (lv_versionNumber_2_0= ruleVersionNumber )
                    // InternalOpenCypherParser.g:298:5: lv_versionNumber_2_0= ruleVersionNumber
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_7);
                    lv_versionNumber_2_0=ruleVersionNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCypherOptionRule());
                      					}
                      					set(
                      						current,
                      						"versionNumber",
                      						lv_versionNumber_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.VersionNumber");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:315:3: ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*
            loop5:
            do {
                int alt5=2;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // InternalOpenCypherParser.g:316:4: (lv_configurationOption_3_0= ruleConfigurationOption )
            	    {
            	    // InternalOpenCypherParser.g:316:4: (lv_configurationOption_3_0= ruleConfigurationOption )
            	    // InternalOpenCypherParser.g:317:5: lv_configurationOption_3_0= ruleConfigurationOption
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_configurationOption_3_0=ruleConfigurationOption();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCypherOptionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"configurationOption",
            	      						lv_configurationOption_3_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.ConfigurationOption");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCypherOption"


    // $ANTLR start "entryRuleVersionNumber"
    // InternalOpenCypherParser.g:338:1: entryRuleVersionNumber returns [EObject current=null] : iv_ruleVersionNumber= ruleVersionNumber EOF ;
    public final EObject entryRuleVersionNumber() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVersionNumber = null;


        try {
            // InternalOpenCypherParser.g:338:54: (iv_ruleVersionNumber= ruleVersionNumber EOF )
            // InternalOpenCypherParser.g:339:2: iv_ruleVersionNumber= ruleVersionNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVersionNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVersionNumber=ruleVersionNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVersionNumber; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVersionNumber"


    // $ANTLR start "ruleVersionNumber"
    // InternalOpenCypherParser.g:345:1: ruleVersionNumber returns [EObject current=null] : ( (lv_versionNumber_0_0= ruleNumber ) ) ;
    public final EObject ruleVersionNumber() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_versionNumber_0_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:351:2: ( ( (lv_versionNumber_0_0= ruleNumber ) ) )
            // InternalOpenCypherParser.g:352:2: ( (lv_versionNumber_0_0= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:352:2: ( (lv_versionNumber_0_0= ruleNumber ) )
            // InternalOpenCypherParser.g:353:3: (lv_versionNumber_0_0= ruleNumber )
            {
            // InternalOpenCypherParser.g:353:3: (lv_versionNumber_0_0= ruleNumber )
            // InternalOpenCypherParser.g:354:4: lv_versionNumber_0_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_versionNumber_0_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getVersionNumberRule());
              				}
              				set(
              					current,
              					"versionNumber",
              					lv_versionNumber_0_0,
              					"org.slizaa.neo4j.opencypher.OpenCypher.Number");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVersionNumber"


    // $ANTLR start "entryRuleConfigurationOption"
    // InternalOpenCypherParser.g:374:1: entryRuleConfigurationOption returns [EObject current=null] : iv_ruleConfigurationOption= ruleConfigurationOption EOF ;
    public final EObject entryRuleConfigurationOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConfigurationOption = null;


        try {
            // InternalOpenCypherParser.g:374:60: (iv_ruleConfigurationOption= ruleConfigurationOption EOF )
            // InternalOpenCypherParser.g:375:2: iv_ruleConfigurationOption= ruleConfigurationOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConfigurationOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConfigurationOption=ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConfigurationOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConfigurationOption"


    // $ANTLR start "ruleConfigurationOption"
    // InternalOpenCypherParser.g:381:1: ruleConfigurationOption returns [EObject current=null] : ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) ) ;
    public final EObject ruleConfigurationOption() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_key_0_0 = null;

        AntlrDatatypeRuleToken lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:387:2: ( ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) ) )
            // InternalOpenCypherParser.g:388:2: ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) )
            {
            // InternalOpenCypherParser.g:388:2: ( ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:389:3: ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) ) otherlv_1= EqualsSign ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:389:3: ( (lv_key_0_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:390:4: (lv_key_0_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:390:4: (lv_key_0_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:391:5: lv_key_0_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_key_0_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConfigurationOptionRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:412:3: ( (lv_value_2_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:413:4: (lv_value_2_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:413:4: (lv_value_2_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:414:5: lv_value_2_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_2_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConfigurationOptionRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConfigurationOption"


    // $ANTLR start "entryRuleStatement"
    // InternalOpenCypherParser.g:435:1: entryRuleStatement returns [EObject current=null] : iv_ruleStatement= ruleStatement EOF ;
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStatement = null;


        try {
            // InternalOpenCypherParser.g:435:50: (iv_ruleStatement= ruleStatement EOF )
            // InternalOpenCypherParser.g:436:2: iv_ruleStatement= ruleStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStatement"


    // $ANTLR start "ruleStatement"
    // InternalOpenCypherParser.g:442:1: ruleStatement returns [EObject current=null] : (this_Command_0= ruleCommand | this_Query_1= ruleQuery ) ;
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Command_0 = null;

        EObject this_Query_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:448:2: ( (this_Command_0= ruleCommand | this_Query_1= ruleQuery ) )
            // InternalOpenCypherParser.g:449:2: (this_Command_0= ruleCommand | this_Query_1= ruleQuery )
            {
            // InternalOpenCypherParser.g:449:2: (this_Command_0= ruleCommand | this_Query_1= ruleQuery )
            int alt6=2;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case CONSTRAINT:
                    {
                    int LA6_4 = input.LA(3);

                    if ( (LA6_4==ON) ) {
                        alt6=1;
                    }
                    else if ( (LA6_4==EqualsSign) ) {
                        alt6=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case ALLSHORTESTPATHS:
                case FIELDTERMINATOR:
                case RELATIONSHIP:
                case SHORTESTPATH:
                case DESCENDING:
                case ASCENDING:
                case CONTAINS:
                case DISTINCT:
                case OPTIONAL:
                case PERIODIC:
                case EXPLAIN:
                case EXTRACT:
                case FOREACH:
                case HEADERS:
                case PROFILE:
                case ASSERT:
                case COMMIT:
                case CREATE:
                case CYPHER:
                case DELETE:
                case DETACH:
                case EXISTS:
                case FILTER:
                case REDUCE:
                case REMOVE:
                case RETURN:
                case SINGLE:
                case STARTS:
                case UNIQUE:
                case UNWIND:
                case COUNT:
                case FALSE:
                case LIMIT:
                case MATCH:
                case MERGE:
                case ORDER:
                case START:
                case UNION:
                case USING:
                case WHERE:
                case CASE:
                case DESC:
                case DROP:
                case ELSE:
                case ENDS:
                case FROM:
                case JOIN:
                case LOAD:
                case NODE:
                case NONE:
                case NULL:
                case SCAN:
                case SKIP:
                case THEN:
                case TRUE:
                case WHEN:
                case WITH:
                case ALL:
                case AND:
                case ANY:
                case ASC:
                case CSV:
                case END:
                case NOT:
                case REL:
                case SET:
                case XOR:
                case AS:
                case BY:
                case IN:
                case IS:
                case ON:
                case OR:
                case LeftParenthesis:
                case RULE_ID:
                    {
                    alt6=2;
                    }
                    break;
                case INDEX:
                    {
                    int LA6_5 = input.LA(3);

                    if ( (LA6_5==ON) ) {
                        alt6=1;
                    }
                    else if ( (LA6_5==EqualsSign) ) {
                        alt6=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;
                }

                }
                break;
            case DROP:
                {
                alt6=1;
                }
                break;
            case OPTIONAL:
            case FOREACH:
            case DELETE:
            case DETACH:
            case REMOVE:
            case RETURN:
            case UNWIND:
            case MATCH:
            case MERGE:
            case START:
            case USING:
            case CALL:
            case LOAD:
            case WITH:
            case SET:
                {
                alt6=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // InternalOpenCypherParser.g:450:3: this_Command_0= ruleCommand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getCommandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Command_0=ruleCommand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Command_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:462:3: this_Query_1= ruleQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getQueryParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Query_1=ruleQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Query_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStatement"


    // $ANTLR start "entryRuleQuery"
    // InternalOpenCypherParser.g:477:1: entryRuleQuery returns [EObject current=null] : iv_ruleQuery= ruleQuery EOF ;
    public final EObject entryRuleQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQuery = null;


        try {
            // InternalOpenCypherParser.g:477:46: (iv_ruleQuery= ruleQuery EOF )
            // InternalOpenCypherParser.g:478:2: iv_ruleQuery= ruleQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQuery=ruleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQuery"


    // $ANTLR start "ruleQuery"
    // InternalOpenCypherParser.g:484:1: ruleQuery returns [EObject current=null] : (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery ) ;
    public final EObject ruleQuery() throws RecognitionException {
        EObject current = null;

        EObject this_RegularQuery_0 = null;

        EObject this_StandaloneCall_1 = null;

        EObject this_BulkImportQuery_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:490:2: ( (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery ) )
            // InternalOpenCypherParser.g:491:2: (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery )
            {
            // InternalOpenCypherParser.g:491:2: (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery )
            int alt7=3;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // InternalOpenCypherParser.g:492:3: this_RegularQuery_0= ruleRegularQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularQuery_0=ruleRegularQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RegularQuery_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:504:3: this_StandaloneCall_1= ruleStandaloneCall
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StandaloneCall_1=ruleStandaloneCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StandaloneCall_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:516:3: this_BulkImportQuery_2= ruleBulkImportQuery
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BulkImportQuery_2=ruleBulkImportQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BulkImportQuery_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQuery"


    // $ANTLR start "entryRuleRegularQuery"
    // InternalOpenCypherParser.g:531:1: entryRuleRegularQuery returns [EObject current=null] : iv_ruleRegularQuery= ruleRegularQuery EOF ;
    public final EObject entryRuleRegularQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegularQuery = null;


        try {
            // InternalOpenCypherParser.g:531:53: (iv_ruleRegularQuery= ruleRegularQuery EOF )
            // InternalOpenCypherParser.g:532:2: iv_ruleRegularQuery= ruleRegularQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularQuery=ruleRegularQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRegularQuery"


    // $ANTLR start "ruleRegularQuery"
    // InternalOpenCypherParser.g:538:1: ruleRegularQuery returns [EObject current=null] : (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? ) ;
    public final EObject ruleRegularQuery() throws RecognitionException {
        EObject current = null;

        EObject this_SingleQuery_0 = null;

        EObject lv_union_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:544:2: ( (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? ) )
            // InternalOpenCypherParser.g:545:2: (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? )
            {
            // InternalOpenCypherParser.g:545:2: (this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )? )
            // InternalOpenCypherParser.g:546:3: this_SingleQuery_0= ruleSingleQuery ( () ( (lv_union_2_0= ruleUnion ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_10);
            this_SingleQuery_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_SingleQuery_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:557:3: ( () ( (lv_union_2_0= ruleUnion ) )+ )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==UNION) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // InternalOpenCypherParser.g:558:4: () ( (lv_union_2_0= ruleUnion ) )+
                    {
                    // InternalOpenCypherParser.g:558:4: ()
                    // InternalOpenCypherParser.g:559:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:568:4: ( (lv_union_2_0= ruleUnion ) )+
                    int cnt8=0;
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==UNION) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:569:5: (lv_union_2_0= ruleUnion )
                    	    {
                    	    // InternalOpenCypherParser.g:569:5: (lv_union_2_0= ruleUnion )
                    	    // InternalOpenCypherParser.g:570:6: lv_union_2_0= ruleUnion
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_union_2_0=ruleUnion();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getRegularQueryRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"union",
                    	      							lv_union_2_0,
                    	      							"org.slizaa.neo4j.opencypher.OpenCypher.Union");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt8 >= 1 ) break loop8;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(8, input);
                                throw eee;
                        }
                        cnt8++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRegularQuery"


    // $ANTLR start "entryRuleBulkImportQuery"
    // InternalOpenCypherParser.g:592:1: entryRuleBulkImportQuery returns [EObject current=null] : iv_ruleBulkImportQuery= ruleBulkImportQuery EOF ;
    public final EObject entryRuleBulkImportQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBulkImportQuery = null;


        try {
            // InternalOpenCypherParser.g:592:56: (iv_ruleBulkImportQuery= ruleBulkImportQuery EOF )
            // InternalOpenCypherParser.g:593:2: iv_ruleBulkImportQuery= ruleBulkImportQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBulkImportQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBulkImportQuery=ruleBulkImportQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBulkImportQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBulkImportQuery"


    // $ANTLR start "ruleBulkImportQuery"
    // InternalOpenCypherParser.g:599:1: ruleBulkImportQuery returns [EObject current=null] : ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) ) ;
    public final EObject ruleBulkImportQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_periodicCommitHint_0_0 = null;

        EObject lv_loadCSVQuery_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:605:2: ( ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) ) )
            // InternalOpenCypherParser.g:606:2: ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) )
            {
            // InternalOpenCypherParser.g:606:2: ( ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) ) )
            // InternalOpenCypherParser.g:607:3: ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) ) ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) )
            {
            // InternalOpenCypherParser.g:607:3: ( (lv_periodicCommitHint_0_0= rulePeriodicCommitHint ) )
            // InternalOpenCypherParser.g:608:4: (lv_periodicCommitHint_0_0= rulePeriodicCommitHint )
            {
            // InternalOpenCypherParser.g:608:4: (lv_periodicCommitHint_0_0= rulePeriodicCommitHint )
            // InternalOpenCypherParser.g:609:5: lv_periodicCommitHint_0_0= rulePeriodicCommitHint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_periodicCommitHint_0_0=rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBulkImportQueryRule());
              					}
              					set(
              						current,
              						"periodicCommitHint",
              						lv_periodicCommitHint_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PeriodicCommitHint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:626:3: ( (lv_loadCSVQuery_1_0= ruleLoadCSVQuery ) )
            // InternalOpenCypherParser.g:627:4: (lv_loadCSVQuery_1_0= ruleLoadCSVQuery )
            {
            // InternalOpenCypherParser.g:627:4: (lv_loadCSVQuery_1_0= ruleLoadCSVQuery )
            // InternalOpenCypherParser.g:628:5: lv_loadCSVQuery_1_0= ruleLoadCSVQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_loadCSVQuery_1_0=ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBulkImportQueryRule());
              					}
              					set(
              						current,
              						"loadCSVQuery",
              						lv_loadCSVQuery_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.LoadCSVQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBulkImportQuery"


    // $ANTLR start "entryRuleSingleQuery"
    // InternalOpenCypherParser.g:649:1: entryRuleSingleQuery returns [EObject current=null] : iv_ruleSingleQuery= ruleSingleQuery EOF ;
    public final EObject entryRuleSingleQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSingleQuery = null;


        try {
            // InternalOpenCypherParser.g:649:52: (iv_ruleSingleQuery= ruleSingleQuery EOF )
            // InternalOpenCypherParser.g:650:2: iv_ruleSingleQuery= ruleSingleQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleQuery=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSingleQuery"


    // $ANTLR start "ruleSingleQuery"
    // InternalOpenCypherParser.g:656:1: ruleSingleQuery returns [EObject current=null] : ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* ) ;
    public final EObject ruleSingleQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_clauses_0_0 = null;

        EObject lv_clauses_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:662:2: ( ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* ) )
            // InternalOpenCypherParser.g:663:2: ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            {
            // InternalOpenCypherParser.g:663:2: ( ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            // InternalOpenCypherParser.g:664:3: ( (lv_clauses_0_0= ruleClause ) ) ( (lv_clauses_1_0= ruleClause ) )*
            {
            // InternalOpenCypherParser.g:664:3: ( (lv_clauses_0_0= ruleClause ) )
            // InternalOpenCypherParser.g:665:4: (lv_clauses_0_0= ruleClause )
            {
            // InternalOpenCypherParser.g:665:4: (lv_clauses_0_0= ruleClause )
            // InternalOpenCypherParser.g:666:5: lv_clauses_0_0= ruleClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_12);
            lv_clauses_0_0=ruleClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSingleQueryRule());
              					}
              					add(
              						current,
              						"clauses",
              						lv_clauses_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:683:3: ( (lv_clauses_1_0= ruleClause ) )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==OPTIONAL||LA10_0==FOREACH||LA10_0==CREATE||(LA10_0>=DELETE && LA10_0<=DETACH)||(LA10_0>=REMOVE && LA10_0<=RETURN)||LA10_0==UNWIND||(LA10_0>=MATCH && LA10_0<=MERGE)||LA10_0==START||LA10_0==CALL||LA10_0==LOAD||LA10_0==WITH||LA10_0==SET) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // InternalOpenCypherParser.g:684:4: (lv_clauses_1_0= ruleClause )
            	    {
            	    // InternalOpenCypherParser.g:684:4: (lv_clauses_1_0= ruleClause )
            	    // InternalOpenCypherParser.g:685:5: lv_clauses_1_0= ruleClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_12);
            	    lv_clauses_1_0=ruleClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSingleQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"clauses",
            	      						lv_clauses_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSingleQuery"


    // $ANTLR start "entryRulePeriodicCommitHint"
    // InternalOpenCypherParser.g:706:1: entryRulePeriodicCommitHint returns [EObject current=null] : iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF ;
    public final EObject entryRulePeriodicCommitHint() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePeriodicCommitHint = null;


        try {
            // InternalOpenCypherParser.g:706:59: (iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF )
            // InternalOpenCypherParser.g:707:2: iv_rulePeriodicCommitHint= rulePeriodicCommitHint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPeriodicCommitHintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePeriodicCommitHint=rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePeriodicCommitHint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePeriodicCommitHint"


    // $ANTLR start "rulePeriodicCommitHint"
    // InternalOpenCypherParser.g:713:1: rulePeriodicCommitHint returns [EObject current=null] : ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? ) ;
    public final EObject rulePeriodicCommitHint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_numberOfRowsPerCommit_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:719:2: ( ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? ) )
            // InternalOpenCypherParser.g:720:2: ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? )
            {
            // InternalOpenCypherParser.g:720:2: ( () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )? )
            // InternalOpenCypherParser.g:721:3: () otherlv_1= USING otherlv_2= PERIODIC otherlv_3= COMMIT ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )?
            {
            // InternalOpenCypherParser.g:721:3: ()
            // InternalOpenCypherParser.g:722:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,USING,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,PERIODIC,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,COMMIT,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:743:3: ( (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger ) )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( ((LA11_0>=RULE_HEX && LA11_0<=RULE_DECIMAL)) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // InternalOpenCypherParser.g:744:4: (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger )
                    {
                    // InternalOpenCypherParser.g:744:4: (lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger )
                    // InternalOpenCypherParser.g:745:5: lv_numberOfRowsPerCommit_4_0= ruleDecimalInteger
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_numberOfRowsPerCommit_4_0=ruleDecimalInteger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPeriodicCommitHintRule());
                      					}
                      					set(
                      						current,
                      						"numberOfRowsPerCommit",
                      						lv_numberOfRowsPerCommit_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.DecimalInteger");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePeriodicCommitHint"


    // $ANTLR start "entryRuleLoadCSVQuery"
    // InternalOpenCypherParser.g:766:1: entryRuleLoadCSVQuery returns [EObject current=null] : iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF ;
    public final EObject entryRuleLoadCSVQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoadCSVQuery = null;


        try {
            // InternalOpenCypherParser.g:766:53: (iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF )
            // InternalOpenCypherParser.g:767:2: iv_ruleLoadCSVQuery= ruleLoadCSVQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSVQuery=ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSVQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSVQuery"


    // $ANTLR start "ruleLoadCSVQuery"
    // InternalOpenCypherParser.g:773:1: ruleLoadCSVQuery returns [EObject current=null] : ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* ) ;
    public final EObject ruleLoadCSVQuery() throws RecognitionException {
        EObject current = null;

        EObject lv_loadCSV_0_0 = null;

        EObject lv_clauses_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:779:2: ( ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* ) )
            // InternalOpenCypherParser.g:780:2: ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            {
            // InternalOpenCypherParser.g:780:2: ( ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )* )
            // InternalOpenCypherParser.g:781:3: ( (lv_loadCSV_0_0= ruleLoadCSV ) ) ( (lv_clauses_1_0= ruleClause ) )*
            {
            // InternalOpenCypherParser.g:781:3: ( (lv_loadCSV_0_0= ruleLoadCSV ) )
            // InternalOpenCypherParser.g:782:4: (lv_loadCSV_0_0= ruleLoadCSV )
            {
            // InternalOpenCypherParser.g:782:4: (lv_loadCSV_0_0= ruleLoadCSV )
            // InternalOpenCypherParser.g:783:5: lv_loadCSV_0_0= ruleLoadCSV
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_12);
            lv_loadCSV_0_0=ruleLoadCSV();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVQueryRule());
              					}
              					set(
              						current,
              						"loadCSV",
              						lv_loadCSV_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.LoadCSV");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:800:3: ( (lv_clauses_1_0= ruleClause ) )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==OPTIONAL||LA12_0==FOREACH||LA12_0==CREATE||(LA12_0>=DELETE && LA12_0<=DETACH)||(LA12_0>=REMOVE && LA12_0<=RETURN)||LA12_0==UNWIND||(LA12_0>=MATCH && LA12_0<=MERGE)||LA12_0==START||LA12_0==CALL||LA12_0==LOAD||LA12_0==WITH||LA12_0==SET) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // InternalOpenCypherParser.g:801:4: (lv_clauses_1_0= ruleClause )
            	    {
            	    // InternalOpenCypherParser.g:801:4: (lv_clauses_1_0= ruleClause )
            	    // InternalOpenCypherParser.g:802:5: lv_clauses_1_0= ruleClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getLoadCSVQueryAccess().getClausesClauseParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_12);
            	    lv_clauses_1_0=ruleClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getLoadCSVQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"clauses",
            	      						lv_clauses_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSVQuery"


    // $ANTLR start "entryRuleUnion"
    // InternalOpenCypherParser.g:823:1: entryRuleUnion returns [EObject current=null] : iv_ruleUnion= ruleUnion EOF ;
    public final EObject entryRuleUnion() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnion = null;


        try {
            // InternalOpenCypherParser.g:823:46: (iv_ruleUnion= ruleUnion EOF )
            // InternalOpenCypherParser.g:824:2: iv_ruleUnion= ruleUnion EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnion=ruleUnion();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnion; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnion"


    // $ANTLR start "ruleUnion"
    // InternalOpenCypherParser.g:830:1: ruleUnion returns [EObject current=null] : (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) ) ;
    public final EObject ruleUnion() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_all_1_0=null;
        EObject lv_singleQuery_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:836:2: ( (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) ) )
            // InternalOpenCypherParser.g:837:2: (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) )
            {
            // InternalOpenCypherParser.g:837:2: (otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) ) )
            // InternalOpenCypherParser.g:838:3: otherlv_0= UNION ( (lv_all_1_0= ALL ) )? ( (lv_singleQuery_2_0= ruleSingleQuery ) )
            {
            otherlv_0=(Token)match(input,UNION,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnionAccess().getUNIONKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:842:3: ( (lv_all_1_0= ALL ) )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ALL) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // InternalOpenCypherParser.g:843:4: (lv_all_1_0= ALL )
                    {
                    // InternalOpenCypherParser.g:843:4: (lv_all_1_0= ALL )
                    // InternalOpenCypherParser.g:844:5: lv_all_1_0= ALL
                    {
                    lv_all_1_0=(Token)match(input,ALL,FOLLOW_17); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_all_1_0, grammarAccess.getUnionAccess().getAllALLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getUnionRule());
                      					}
                      					setWithLastConsumed(current, "all", true, "ALL");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:856:3: ( (lv_singleQuery_2_0= ruleSingleQuery ) )
            // InternalOpenCypherParser.g:857:4: (lv_singleQuery_2_0= ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:857:4: (lv_singleQuery_2_0= ruleSingleQuery )
            // InternalOpenCypherParser.g:858:5: lv_singleQuery_2_0= ruleSingleQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_singleQuery_2_0=ruleSingleQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionRule());
              					}
              					set(
              						current,
              						"singleQuery",
              						lv_singleQuery_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SingleQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnion"


    // $ANTLR start "entryRuleClause"
    // InternalOpenCypherParser.g:879:1: entryRuleClause returns [EObject current=null] : iv_ruleClause= ruleClause EOF ;
    public final EObject entryRuleClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleClause = null;


        try {
            // InternalOpenCypherParser.g:879:47: (iv_ruleClause= ruleClause EOF )
            // InternalOpenCypherParser.g:880:2: iv_ruleClause= ruleClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleClause=ruleClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleClause"


    // $ANTLR start "ruleClause"
    // InternalOpenCypherParser.g:886:1: ruleClause returns [EObject current=null] : (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn | this_InQueryCall_12= ruleInQueryCall ) ;
    public final EObject ruleClause() throws RecognitionException {
        EObject current = null;

        EObject this_LoadCSV_0 = null;

        EObject this_Start_1 = null;

        EObject this_Match_2 = null;

        EObject this_Unwind_3 = null;

        EObject this_Merge_4 = null;

        EObject this_Create_5 = null;

        EObject this_Set_6 = null;

        EObject this_Delete_7 = null;

        EObject this_Remove_8 = null;

        EObject this_Foreach_9 = null;

        EObject this_With_10 = null;

        EObject this_Return_11 = null;

        EObject this_InQueryCall_12 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:892:2: ( (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn | this_InQueryCall_12= ruleInQueryCall ) )
            // InternalOpenCypherParser.g:893:2: (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn | this_InQueryCall_12= ruleInQueryCall )
            {
            // InternalOpenCypherParser.g:893:2: (this_LoadCSV_0= ruleLoadCSV | this_Start_1= ruleStart | this_Match_2= ruleMatch | this_Unwind_3= ruleUnwind | this_Merge_4= ruleMerge | this_Create_5= ruleCreate | this_Set_6= ruleSet | this_Delete_7= ruleDelete | this_Remove_8= ruleRemove | this_Foreach_9= ruleForeach | this_With_10= ruleWith | this_Return_11= ruleReturn | this_InQueryCall_12= ruleInQueryCall )
            int alt14=13;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt14=1;
                }
                break;
            case START:
                {
                alt14=2;
                }
                break;
            case OPTIONAL:
            case MATCH:
                {
                alt14=3;
                }
                break;
            case UNWIND:
                {
                alt14=4;
                }
                break;
            case MERGE:
                {
                alt14=5;
                }
                break;
            case CREATE:
                {
                alt14=6;
                }
                break;
            case SET:
                {
                alt14=7;
                }
                break;
            case DELETE:
            case DETACH:
                {
                alt14=8;
                }
                break;
            case REMOVE:
                {
                alt14=9;
                }
                break;
            case FOREACH:
                {
                alt14=10;
                }
                break;
            case WITH:
                {
                alt14=11;
                }
                break;
            case RETURN:
                {
                alt14=12;
                }
                break;
            case CALL:
                {
                alt14=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // InternalOpenCypherParser.g:894:3: this_LoadCSV_0= ruleLoadCSV
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getLoadCSVParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LoadCSV_0=ruleLoadCSV();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LoadCSV_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:906:3: this_Start_1= ruleStart
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getStartParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Start_1=ruleStart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Start_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:918:3: this_Match_2= ruleMatch
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getMatchParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Match_2=ruleMatch();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Match_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:930:3: this_Unwind_3= ruleUnwind
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getUnwindParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Unwind_3=ruleUnwind();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Unwind_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:942:3: this_Merge_4= ruleMerge
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getMergeParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Merge_4=ruleMerge();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Merge_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:954:3: this_Create_5= ruleCreate
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getCreateParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Create_5=ruleCreate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Create_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:966:3: this_Set_6= ruleSet
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getSetParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Set_6=ruleSet();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Set_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:978:3: this_Delete_7= ruleDelete
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getDeleteParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Delete_7=ruleDelete();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Delete_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:990:3: this_Remove_8= ruleRemove
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getRemoveParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Remove_8=ruleRemove();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Remove_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:1002:3: this_Foreach_9= ruleForeach
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getForeachParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Foreach_9=ruleForeach();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Foreach_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:1014:3: this_With_10= ruleWith
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getWithParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_With_10=ruleWith();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_With_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:1026:3: this_Return_11= ruleReturn
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getReturnParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Return_11=ruleReturn();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Return_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:1038:3: this_InQueryCall_12= ruleInQueryCall
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getClauseAccess().getInQueryCallParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_InQueryCall_12=ruleInQueryCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_InQueryCall_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleClause"


    // $ANTLR start "entryRuleCommand"
    // InternalOpenCypherParser.g:1053:1: entryRuleCommand returns [EObject current=null] : iv_ruleCommand= ruleCommand EOF ;
    public final EObject entryRuleCommand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCommand = null;


        try {
            // InternalOpenCypherParser.g:1053:48: (iv_ruleCommand= ruleCommand EOF )
            // InternalOpenCypherParser.g:1054:2: iv_ruleCommand= ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCommand=ruleCommand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCommand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalOpenCypherParser.g:1060:1: ruleCommand returns [EObject current=null] : (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint ) ;
    public final EObject ruleCommand() throws RecognitionException {
        EObject current = null;

        EObject this_CreateIndex_0 = null;

        EObject this_DropIndex_1 = null;

        EObject this_CreateUniqueConstraint_2 = null;

        EObject this_DropUniqueConstraint_3 = null;

        EObject this_CreateNodePropertyExistenceConstraint_4 = null;

        EObject this_DropNodePropertyExistenceConstraint_5 = null;

        EObject this_CreateRelationshipPropertyExistenceConstraint_6 = null;

        EObject this_DropRelationshipPropertyExistenceConstraint_7 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1066:2: ( (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1067:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1067:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )
            int alt15=8;
            alt15 = dfa15.predict(input);
            switch (alt15) {
                case 1 :
                    // InternalOpenCypherParser.g:1068:3: this_CreateIndex_0= ruleCreateIndex
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateIndex_0=ruleCreateIndex();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateIndex_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:1080:3: this_DropIndex_1= ruleDropIndex
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropIndex_1=ruleDropIndex();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropIndex_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:1092:3: this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateUniqueConstraint_2=ruleCreateUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateUniqueConstraint_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:1104:3: this_DropUniqueConstraint_3= ruleDropUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropUniqueConstraint_3=ruleDropUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropUniqueConstraint_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:1116:3: this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateNodePropertyExistenceConstraint_4=ruleCreateNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateNodePropertyExistenceConstraint_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:1128:3: this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropNodePropertyExistenceConstraint_5=ruleDropNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropNodePropertyExistenceConstraint_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:1140:3: this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateRelationshipPropertyExistenceConstraint_6=ruleCreateRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateRelationshipPropertyExistenceConstraint_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:1152:3: this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DropRelationshipPropertyExistenceConstraint_7=ruleDropRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DropRelationshipPropertyExistenceConstraint_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRuleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:1167:1: entryRuleCreateUniqueConstraint returns [EObject current=null] : iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF ;
    public final EObject entryRuleCreateUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateUniqueConstraint = null;


        try {
            // InternalOpenCypherParser.g:1167:63: (iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF )
            // InternalOpenCypherParser.g:1168:2: iv_ruleCreateUniqueConstraint= ruleCreateUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateUniqueConstraint=ruleCreateUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateUniqueConstraint"


    // $ANTLR start "ruleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:1174:1: ruleCreateUniqueConstraint returns [EObject current=null] : (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint ) ;
    public final EObject ruleCreateUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_UniqueConstraint_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1180:2: ( (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:1181:2: (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:1181:2: (otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint )
            // InternalOpenCypherParser.g:1182:3: otherlv_0= CREATE this_UniqueConstraint_1= ruleUniqueConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_UniqueConstraint_1=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UniqueConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateUniqueConstraint"


    // $ANTLR start "entryRuleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1201:1: entryRuleCreateNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateNodePropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1201:78: (iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1202:2: iv_ruleCreateNodePropertyExistenceConstraint= ruleCreateNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateNodePropertyExistenceConstraint=ruleCreateNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "ruleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1208:1: ruleCreateNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint ) ;
    public final EObject ruleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_NodePropertyExistenceConstraint_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1214:2: ( (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1215:2: (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1215:2: (otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1216:3: otherlv_0= CREATE this_NodePropertyExistenceConstraint_1= ruleNodePropertyExistenceConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_NodePropertyExistenceConstraint_1=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_NodePropertyExistenceConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1235:1: entryRuleCreateRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1235:86: (iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1236:2: iv_ruleCreateRelationshipPropertyExistenceConstraint= ruleCreateRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateRelationshipPropertyExistenceConstraint=ruleCreateRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1242:1: ruleCreateRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint ) ;
    public final EObject ruleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_RelationshipPropertyExistenceConstraint_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1248:2: ( (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1249:2: (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1249:2: (otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1250:3: otherlv_0= CREATE this_RelationshipPropertyExistenceConstraint_1= ruleRelationshipPropertyExistenceConstraint
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_RelationshipPropertyExistenceConstraint_1=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationshipPropertyExistenceConstraint_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateIndex"
    // InternalOpenCypherParser.g:1269:1: entryRuleCreateIndex returns [EObject current=null] : iv_ruleCreateIndex= ruleCreateIndex EOF ;
    public final EObject entryRuleCreateIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateIndex = null;


        try {
            // InternalOpenCypherParser.g:1269:52: (iv_ruleCreateIndex= ruleCreateIndex EOF )
            // InternalOpenCypherParser.g:1270:2: iv_ruleCreateIndex= ruleCreateIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateIndex=ruleCreateIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateIndex"


    // $ANTLR start "ruleCreateIndex"
    // InternalOpenCypherParser.g:1276:1: ruleCreateIndex returns [EObject current=null] : (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) ) ;
    public final EObject ruleCreateIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1282:2: ( (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) ) )
            // InternalOpenCypherParser.g:1283:2: (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) )
            {
            // InternalOpenCypherParser.g:1283:2: (otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) ) )
            // InternalOpenCypherParser.g:1284:3: otherlv_0= CREATE ( (lv_index_1_0= ruleIndex ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateIndexAccess().getCREATEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1288:3: ( (lv_index_1_0= ruleIndex ) )
            // InternalOpenCypherParser.g:1289:4: (lv_index_1_0= ruleIndex )
            {
            // InternalOpenCypherParser.g:1289:4: (lv_index_1_0= ruleIndex )
            // InternalOpenCypherParser.g:1290:5: lv_index_1_0= ruleIndex
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_index_1_0=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateIndexRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Index");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateIndex"


    // $ANTLR start "entryRuleDropUniqueConstraint"
    // InternalOpenCypherParser.g:1311:1: entryRuleDropUniqueConstraint returns [EObject current=null] : iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF ;
    public final EObject entryRuleDropUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropUniqueConstraint = null;


        try {
            // InternalOpenCypherParser.g:1311:61: (iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF )
            // InternalOpenCypherParser.g:1312:2: iv_ruleDropUniqueConstraint= ruleDropUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropUniqueConstraint=ruleDropUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropUniqueConstraint"


    // $ANTLR start "ruleDropUniqueConstraint"
    // InternalOpenCypherParser.g:1318:1: ruleDropUniqueConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) ) ;
    public final EObject ruleDropUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_uniqueConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1324:2: ( (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) ) )
            // InternalOpenCypherParser.g:1325:2: (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) )
            {
            // InternalOpenCypherParser.g:1325:2: (otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) ) )
            // InternalOpenCypherParser.g:1326:3: otherlv_0= DROP ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1330:3: ( (lv_uniqueConstraint_1_0= ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:1331:4: (lv_uniqueConstraint_1_0= ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:1331:4: (lv_uniqueConstraint_1_0= ruleUniqueConstraint )
            // InternalOpenCypherParser.g:1332:5: lv_uniqueConstraint_1_0= ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_uniqueConstraint_1_0=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropUniqueConstraintRule());
              					}
              					set(
              						current,
              						"uniqueConstraint",
              						lv_uniqueConstraint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.UniqueConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropUniqueConstraint"


    // $ANTLR start "entryRuleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1353:1: entryRuleDropNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleDropNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropNodePropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1353:76: (iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1354:2: iv_ruleDropNodePropertyExistenceConstraint= ruleDropNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropNodePropertyExistenceConstraint=ruleDropNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropNodePropertyExistenceConstraint"


    // $ANTLR start "ruleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1360:1: ruleDropNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) ) ;
    public final EObject ruleDropNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_nodePropertyExistenceConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1366:2: ( (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) ) )
            // InternalOpenCypherParser.g:1367:2: (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) )
            {
            // InternalOpenCypherParser.g:1367:2: (otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) ) )
            // InternalOpenCypherParser.g:1368:3: otherlv_0= DROP ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1372:3: ( (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1373:4: (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1373:4: (lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1374:5: lv_nodePropertyExistenceConstraint_1_0= ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_nodePropertyExistenceConstraint_1_0=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"nodePropertyExistenceConstraint",
              						lv_nodePropertyExistenceConstraint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodePropertyExistenceConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1395:1: entryRuleDropRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1395:84: (iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1396:2: iv_ruleDropRelationshipPropertyExistenceConstraint= ruleDropRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropRelationshipPropertyExistenceConstraint=ruleDropRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1402:1: ruleDropRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) ) ;
    public final EObject ruleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_relationshipPropertyExistenceConstraint_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1408:2: ( (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) ) )
            // InternalOpenCypherParser.g:1409:2: (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) )
            {
            // InternalOpenCypherParser.g:1409:2: (otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) ) )
            // InternalOpenCypherParser.g:1410:3: otherlv_0= DROP ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1414:3: ( (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:1415:4: (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:1415:4: (lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:1416:5: lv_relationshipPropertyExistenceConstraint_1_0= ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_relationshipPropertyExistenceConstraint_1_0=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"relationshipPropertyExistenceConstraint",
              						lv_relationshipPropertyExistenceConstraint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipPropertyExistenceConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropIndex"
    // InternalOpenCypherParser.g:1437:1: entryRuleDropIndex returns [EObject current=null] : iv_ruleDropIndex= ruleDropIndex EOF ;
    public final EObject entryRuleDropIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDropIndex = null;


        try {
            // InternalOpenCypherParser.g:1437:50: (iv_ruleDropIndex= ruleDropIndex EOF )
            // InternalOpenCypherParser.g:1438:2: iv_ruleDropIndex= ruleDropIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDropIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDropIndex=ruleDropIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDropIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDropIndex"


    // $ANTLR start "ruleDropIndex"
    // InternalOpenCypherParser.g:1444:1: ruleDropIndex returns [EObject current=null] : (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) ) ;
    public final EObject ruleDropIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_index_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1450:2: ( (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) ) )
            // InternalOpenCypherParser.g:1451:2: (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) )
            {
            // InternalOpenCypherParser.g:1451:2: (otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) ) )
            // InternalOpenCypherParser.g:1452:3: otherlv_0= DROP ( (lv_index_1_0= ruleIndex ) )
            {
            otherlv_0=(Token)match(input,DROP,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDropIndexAccess().getDROPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:1456:3: ( (lv_index_1_0= ruleIndex ) )
            // InternalOpenCypherParser.g:1457:4: (lv_index_1_0= ruleIndex )
            {
            // InternalOpenCypherParser.g:1457:4: (lv_index_1_0= ruleIndex )
            // InternalOpenCypherParser.g:1458:5: lv_index_1_0= ruleIndex
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_index_1_0=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDropIndexRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Index");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDropIndex"


    // $ANTLR start "entryRuleIndex"
    // InternalOpenCypherParser.g:1479:1: entryRuleIndex returns [EObject current=null] : iv_ruleIndex= ruleIndex EOF ;
    public final EObject entryRuleIndex() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIndex = null;


        try {
            // InternalOpenCypherParser.g:1479:46: (iv_ruleIndex= ruleIndex EOF )
            // InternalOpenCypherParser.g:1480:2: iv_ruleIndex= ruleIndex EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIndex=ruleIndex();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIndex; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndex"


    // $ANTLR start "ruleIndex"
    // InternalOpenCypherParser.g:1486:1: ruleIndex returns [EObject current=null] : (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleIndex() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_nodeLabel_2_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1492:2: ( (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:1493:2: (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1493:2: (otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:1494:3: otherlv_0= INDEX otherlv_1= ON ( (lv_nodeLabel_2_0= ruleNodeLabel ) ) otherlv_3= LeftParenthesis ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,INDEX,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getINDEXKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIndexAccess().getONKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:1502:3: ( (lv_nodeLabel_2_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:1503:4: (lv_nodeLabel_2_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:1503:4: (lv_nodeLabel_2_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:1504:5: lv_nodeLabel_2_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_nodeLabel_2_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:1525:3: ( (lv_propertyKeyName_4_0= rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:1526:4: (lv_propertyKeyName_4_0= rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:1526:4: (lv_propertyKeyName_4_0= rulePropertyKeyName )
            // InternalOpenCypherParser.g:1527:5: lv_propertyKeyName_4_0= rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_propertyKeyName_4_0=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexRule());
              					}
              					set(
              						current,
              						"propertyKeyName",
              						lv_propertyKeyName_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getIndexAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndex"


    // $ANTLR start "entryRuleUniqueConstraint"
    // InternalOpenCypherParser.g:1552:1: entryRuleUniqueConstraint returns [EObject current=null] : iv_ruleUniqueConstraint= ruleUniqueConstraint EOF ;
    public final EObject entryRuleUniqueConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUniqueConstraint = null;


        try {
            // InternalOpenCypherParser.g:1552:57: (iv_ruleUniqueConstraint= ruleUniqueConstraint EOF )
            // InternalOpenCypherParser.g:1553:2: iv_ruleUniqueConstraint= ruleUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUniqueConstraint=ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUniqueConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUniqueConstraint"


    // $ANTLR start "ruleUniqueConstraint"
    // InternalOpenCypherParser.g:1559:1: ruleUniqueConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE ) ;
    public final EObject ruleUniqueConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_variable_3_0 = null;

        EObject lv_nodeLabel_4_0 = null;

        EObject lv_propertyExpression_7_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1565:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE ) )
            // InternalOpenCypherParser.g:1566:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE )
            {
            // InternalOpenCypherParser.g:1566:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE )
            // InternalOpenCypherParser.g:1567:3: otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT ( (lv_propertyExpression_7_0= rulePropertyExpression ) ) otherlv_8= IS otherlv_9= UNIQUE
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUniqueConstraintAccess().getONKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:1579:3: ( (lv_variable_3_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:1580:4: (lv_variable_3_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:1580:4: (lv_variable_3_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:1581:5: lv_variable_3_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_variable_3_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:1598:3: ( (lv_nodeLabel_4_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:1599:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:1599:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:1600:5: lv_nodeLabel_4_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_nodeLabel_4_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,ASSERT,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6());
              		
            }
            // InternalOpenCypherParser.g:1625:3: ( (lv_propertyExpression_7_0= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:1626:4: (lv_propertyExpression_7_0= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:1626:4: (lv_propertyExpression_7_0= rulePropertyExpression )
            // InternalOpenCypherParser.g:1627:5: lv_propertyExpression_7_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_propertyExpression_7_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUniqueConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_7_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,IS,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getUniqueConstraintAccess().getISKeyword_8());
              		
            }
            otherlv_9=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUniqueConstraint"


    // $ANTLR start "entryRuleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1656:1: entryRuleNodePropertyExistenceConstraint returns [EObject current=null] : iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF ;
    public final EObject entryRuleNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodePropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1656:72: (iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1657:2: iv_ruleNodePropertyExistenceConstraint= ruleNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodePropertyExistenceConstraint=ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodePropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodePropertyExistenceConstraint"


    // $ANTLR start "ruleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1663:1: ruleNodePropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis ) ;
    public final EObject ruleNodePropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        EObject lv_variable_3_0 = null;

        EObject lv_nodeLabel_4_0 = null;

        EObject lv_propertyExpression_9_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1669:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis ) )
            // InternalOpenCypherParser.g:1670:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1670:2: (otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis )
            // InternalOpenCypherParser.g:1671:3: otherlv_0= CONSTRAINT otherlv_1= ON otherlv_2= LeftParenthesis ( (lv_variable_3_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_4_0= ruleNodeLabel ) ) otherlv_5= RightParenthesis otherlv_6= ASSERT otherlv_7= EXISTS otherlv_8= LeftParenthesis ( (lv_propertyExpression_9_0= rulePropertyExpression ) ) otherlv_10= RightParenthesis
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:1683:3: ( (lv_variable_3_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:1684:4: (lv_variable_3_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:1684:4: (lv_variable_3_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:1685:5: lv_variable_3_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_variable_3_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:1702:3: ( (lv_nodeLabel_4_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:1703:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:1703:4: (lv_nodeLabel_4_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:1704:5: lv_nodeLabel_4_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_nodeLabel_4_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"nodeLabel",
              						lv_nodeLabel_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,ASSERT,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6());
              		
            }
            otherlv_7=(Token)match(input,EXISTS,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7());
              		
            }
            otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8());
              		
            }
            // InternalOpenCypherParser.g:1737:3: ( (lv_propertyExpression_9_0= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:1738:4: (lv_propertyExpression_9_0= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:1738:4: (lv_propertyExpression_9_0= rulePropertyExpression )
            // InternalOpenCypherParser.g:1739:5: lv_propertyExpression_9_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_propertyExpression_9_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodePropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_9_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1764:1: entryRuleRelationshipPropertyExistenceConstraint returns [EObject current=null] : iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF ;
    public final EObject entryRuleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPropertyExistenceConstraint = null;


        try {
            // InternalOpenCypherParser.g:1764:80: (iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:1765:2: iv_ruleRelationshipPropertyExistenceConstraint= ruleRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPropertyExistenceConstraint=ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPropertyExistenceConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:1771:1: ruleRelationshipPropertyExistenceConstraint returns [EObject current=null] : (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis ) ;
    public final EObject ruleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_relationshipPattern_2_0 = null;

        EObject lv_propertyExpression_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1777:2: ( (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis ) )
            // InternalOpenCypherParser.g:1778:2: (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1778:2: (otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis )
            // InternalOpenCypherParser.g:1779:3: otherlv_0= CONSTRAINT otherlv_1= ON ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) ) otherlv_3= ASSERT otherlv_4= EXISTS otherlv_5= LeftParenthesis ( (lv_propertyExpression_6_0= rulePropertyExpression ) ) otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,CONSTRAINT,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,ON,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:1787:3: ( (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax ) )
            // InternalOpenCypherParser.g:1788:4: (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax )
            {
            // InternalOpenCypherParser.g:1788:4: (lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax )
            // InternalOpenCypherParser.g:1789:5: lv_relationshipPattern_2_0= ruleRelationshipPatternSyntax
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_relationshipPattern_2_0=ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"relationshipPattern",
              						lv_relationshipPattern_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipPatternSyntax");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,ASSERT,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,EXISTS,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5());
              		
            }
            // InternalOpenCypherParser.g:1818:3: ( (lv_propertyExpression_6_0= rulePropertyExpression ) )
            // InternalOpenCypherParser.g:1819:4: (lv_propertyExpression_6_0= rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:1819:4: (lv_propertyExpression_6_0= rulePropertyExpression )
            // InternalOpenCypherParser.g:1820:5: lv_propertyExpression_6_0= rulePropertyExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_propertyExpression_6_0=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPropertyExistenceConstraintRule());
              					}
              					set(
              						current,
              						"propertyExpression",
              						lv_propertyExpression_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:1845:1: entryRuleRelationshipPatternSyntax returns [EObject current=null] : iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF ;
    public final EObject entryRuleRelationshipPatternSyntax() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPatternSyntax = null;


        try {
            // InternalOpenCypherParser.g:1845:66: (iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF )
            // InternalOpenCypherParser.g:1846:2: iv_ruleRelationshipPatternSyntax= ruleRelationshipPatternSyntax EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPatternSyntax=ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPatternSyntax; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPatternSyntax"


    // $ANTLR start "ruleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:1852:1: ruleRelationshipPatternSyntax returns [EObject current=null] : (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis ) ;
    public final EObject ruleRelationshipPatternSyntax() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        AntlrDatatypeRuleToken lv_incoming_2_0 = null;

        EObject lv_variable_5_0 = null;

        AntlrDatatypeRuleToken lv_relType_6_0 = null;

        AntlrDatatypeRuleToken lv_outgoing_9_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1858:2: ( (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis ) )
            // InternalOpenCypherParser.g:1859:2: (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis )
            {
            // InternalOpenCypherParser.g:1859:2: (otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis )
            // InternalOpenCypherParser.g:1860:3: otherlv_0= LeftParenthesis otherlv_1= RightParenthesis ( (lv_incoming_2_0= ruleLeftArrowHead ) )? ruleDash otherlv_4= LeftSquareBracket ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_relType_6_0= ruleRelType ) ) otherlv_7= RightSquareBracket ruleDash ( (lv_outgoing_9_0= ruleRightArrowHead ) )? otherlv_10= LeftParenthesis otherlv_11= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,RightParenthesis,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:1868:3: ( (lv_incoming_2_0= ruleLeftArrowHead ) )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==LessThanSign) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // InternalOpenCypherParser.g:1869:4: (lv_incoming_2_0= ruleLeftArrowHead )
                    {
                    // InternalOpenCypherParser.g:1869:4: (lv_incoming_2_0= ruleLeftArrowHead )
                    // InternalOpenCypherParser.g:1870:5: lv_incoming_2_0= ruleLeftArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_29);
                    lv_incoming_2_0=ruleLeftArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
                      					}
                      					set(
                      						current,
                      						"incoming",
                      						true,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.LeftArrowHead");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_30);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:1901:3: ( (lv_variable_5_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:1902:4: (lv_variable_5_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:1902:4: (lv_variable_5_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:1903:5: lv_variable_5_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_variable_5_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_5_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:1920:3: ( (lv_relType_6_0= ruleRelType ) )
            // InternalOpenCypherParser.g:1921:4: (lv_relType_6_0= ruleRelType )
            {
            // InternalOpenCypherParser.g:1921:4: (lv_relType_6_0= ruleRelType )
            // InternalOpenCypherParser.g:1922:5: lv_relType_6_0= ruleRelType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_31);
            lv_relType_6_0=ruleRelType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
              					}
              					set(
              						current,
              						"relType",
              						lv_relType_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8());
              		
            }
            pushFollow(FOLLOW_32);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:1953:3: ( (lv_outgoing_9_0= ruleRightArrowHead ) )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==GreaterThanSign) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // InternalOpenCypherParser.g:1954:4: (lv_outgoing_9_0= ruleRightArrowHead )
                    {
                    // InternalOpenCypherParser.g:1954:4: (lv_outgoing_9_0= ruleRightArrowHead )
                    // InternalOpenCypherParser.g:1955:5: lv_outgoing_9_0= ruleRightArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0());
                      				
                    }
                    pushFollow(FOLLOW_22);
                    lv_outgoing_9_0=ruleRightArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipPatternSyntaxRule());
                      					}
                      					set(
                      						current,
                      						"outgoing",
                      						true,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.RightArrowHead");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_10=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10());
              		
            }
            otherlv_11=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPatternSyntax"


    // $ANTLR start "entryRuleLoadCSV"
    // InternalOpenCypherParser.g:1984:1: entryRuleLoadCSV returns [EObject current=null] : iv_ruleLoadCSV= ruleLoadCSV EOF ;
    public final EObject entryRuleLoadCSV() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoadCSV = null;


        try {
            // InternalOpenCypherParser.g:1984:48: (iv_ruleLoadCSV= ruleLoadCSV EOF )
            // InternalOpenCypherParser.g:1985:2: iv_ruleLoadCSV= ruleLoadCSV EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSV=ruleLoadCSV();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSV; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSV"


    // $ANTLR start "ruleLoadCSV"
    // InternalOpenCypherParser.g:1991:1: ruleLoadCSV returns [EObject current=null] : ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? ) ;
    public final EObject ruleLoadCSV() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token lv_fieldterminator_9_0=null;
        AntlrDatatypeRuleToken lv_withHeaders_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject lv_variable_7_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:1997:2: ( ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? ) )
            // InternalOpenCypherParser.g:1998:2: ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? )
            {
            // InternalOpenCypherParser.g:1998:2: ( () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )? )
            // InternalOpenCypherParser.g:1999:3: () otherlv_1= LOAD otherlv_2= CSV ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )? otherlv_4= FROM ( (lv_expression_5_0= ruleExpression ) ) otherlv_6= AS ( (lv_variable_7_0= ruleVariableDeclaration ) ) (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )?
            {
            // InternalOpenCypherParser.g:1999:3: ()
            // InternalOpenCypherParser.g:2000:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLoadCSVAccess().getLoadCSVAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LOAD,FOLLOW_33); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getLoadCSVAccess().getLOADKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,CSV,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getLoadCSVAccess().getCSVKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:2017:3: ( (lv_withHeaders_3_0= ruleLoadCSVWithHeaders ) )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==WITH) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // InternalOpenCypherParser.g:2018:4: (lv_withHeaders_3_0= ruleLoadCSVWithHeaders )
                    {
                    // InternalOpenCypherParser.g:2018:4: (lv_withHeaders_3_0= ruleLoadCSVWithHeaders )
                    // InternalOpenCypherParser.g:2019:5: lv_withHeaders_3_0= ruleLoadCSVWithHeaders
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_35);
                    lv_withHeaders_3_0=ruleLoadCSVWithHeaders();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
                      					}
                      					set(
                      						current,
                      						"withHeaders",
                      						true,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.LoadCSVWithHeaders");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,FROM,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getLoadCSVAccess().getFROMKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:2040:3: ( (lv_expression_5_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2041:4: (lv_expression_5_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2041:4: (lv_expression_5_0= ruleExpression )
            // InternalOpenCypherParser.g:2042:5: lv_expression_5_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_37);
            lv_expression_5_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getLoadCSVAccess().getASKeyword_6());
              		
            }
            // InternalOpenCypherParser.g:2063:3: ( (lv_variable_7_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:2064:4: (lv_variable_7_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:2064:4: (lv_variable_7_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:2065:5: lv_variable_7_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_38);
            lv_variable_7_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLoadCSVRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_7_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2082:3: (otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) ) )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==FIELDTERMINATOR) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // InternalOpenCypherParser.g:2083:4: otherlv_8= FIELDTERMINATOR ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) )
                    {
                    otherlv_8=(Token)match(input,FIELDTERMINATOR,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0());
                      			
                    }
                    // InternalOpenCypherParser.g:2087:4: ( (lv_fieldterminator_9_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:2088:5: (lv_fieldterminator_9_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:2088:5: (lv_fieldterminator_9_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:2089:6: lv_fieldterminator_9_0= RULE_STRING_LITERAL
                    {
                    lv_fieldterminator_9_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_fieldterminator_9_0, grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLoadCSVRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"fieldterminator",
                      							lv_fieldterminator_9_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSV"


    // $ANTLR start "entryRuleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:2110:1: entryRuleLoadCSVWithHeaders returns [String current=null] : iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF ;
    public final String entryRuleLoadCSVWithHeaders() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLoadCSVWithHeaders = null;


        try {
            // InternalOpenCypherParser.g:2110:58: (iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF )
            // InternalOpenCypherParser.g:2111:2: iv_ruleLoadCSVWithHeaders= ruleLoadCSVWithHeaders EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoadCSVWithHeaders=ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoadCSVWithHeaders.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoadCSVWithHeaders"


    // $ANTLR start "ruleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:2117:1: ruleLoadCSVWithHeaders returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= WITH kw= HEADERS ) ;
    public final AntlrDatatypeRuleToken ruleLoadCSVWithHeaders() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:2123:2: ( (kw= WITH kw= HEADERS ) )
            // InternalOpenCypherParser.g:2124:2: (kw= WITH kw= HEADERS )
            {
            // InternalOpenCypherParser.g:2124:2: (kw= WITH kw= HEADERS )
            // InternalOpenCypherParser.g:2125:3: kw= WITH kw= HEADERS
            {
            kw=(Token)match(input,WITH,FOLLOW_40); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0());
              		
            }
            kw=(Token)match(input,HEADERS,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoadCSVWithHeaders"


    // $ANTLR start "entryRuleMatch"
    // InternalOpenCypherParser.g:2139:1: entryRuleMatch returns [EObject current=null] : iv_ruleMatch= ruleMatch EOF ;
    public final EObject entryRuleMatch() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatch = null;


        try {
            // InternalOpenCypherParser.g:2139:46: (iv_ruleMatch= ruleMatch EOF )
            // InternalOpenCypherParser.g:2140:2: iv_ruleMatch= ruleMatch EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatchRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatch=ruleMatch();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatch; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatch"


    // $ANTLR start "ruleMatch"
    // InternalOpenCypherParser.g:2146:1: ruleMatch returns [EObject current=null] : ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? ) ;
    public final EObject ruleMatch() throws RecognitionException {
        EObject current = null;

        Token lv_optional_0_0=null;
        Token otherlv_1=null;
        EObject lv_pattern_2_0 = null;

        EObject lv_hints_3_0 = null;

        EObject lv_where_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2152:2: ( ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:2153:2: ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:2153:2: ( ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:2154:3: ( (lv_optional_0_0= OPTIONAL ) )? otherlv_1= MATCH ( (lv_pattern_2_0= rulePattern ) ) ( (lv_hints_3_0= ruleHint ) )* ( (lv_where_4_0= ruleWhere ) )?
            {
            // InternalOpenCypherParser.g:2154:3: ( (lv_optional_0_0= OPTIONAL ) )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==OPTIONAL) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // InternalOpenCypherParser.g:2155:4: (lv_optional_0_0= OPTIONAL )
                    {
                    // InternalOpenCypherParser.g:2155:4: (lv_optional_0_0= OPTIONAL )
                    // InternalOpenCypherParser.g:2156:5: lv_optional_0_0= OPTIONAL
                    {
                    lv_optional_0_0=(Token)match(input,OPTIONAL,FOLLOW_41); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_0_0, grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getMatchRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "OPTIONAL");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,MATCH,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMatchAccess().getMATCHKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:2172:3: ( (lv_pattern_2_0= rulePattern ) )
            // InternalOpenCypherParser.g:2173:4: (lv_pattern_2_0= rulePattern )
            {
            // InternalOpenCypherParser.g:2173:4: (lv_pattern_2_0= rulePattern )
            // InternalOpenCypherParser.g:2174:5: lv_pattern_2_0= rulePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_pattern_2_0=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMatchRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Pattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2191:3: ( (lv_hints_3_0= ruleHint ) )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==USING) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2192:4: (lv_hints_3_0= ruleHint )
            	    {
            	    // InternalOpenCypherParser.g:2192:4: (lv_hints_3_0= ruleHint )
            	    // InternalOpenCypherParser.g:2193:5: lv_hints_3_0= ruleHint
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_43);
            	    lv_hints_3_0=ruleHint();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMatchRule());
            	      					}
            	      					add(
            	      						current,
            	      						"hints",
            	      						lv_hints_3_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Hint");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);

            // InternalOpenCypherParser.g:2210:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==WHERE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // InternalOpenCypherParser.g:2211:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:2211:4: (lv_where_4_0= ruleWhere )
                    // InternalOpenCypherParser.g:2212:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMatchRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatch"


    // $ANTLR start "entryRuleUnwind"
    // InternalOpenCypherParser.g:2233:1: entryRuleUnwind returns [EObject current=null] : iv_ruleUnwind= ruleUnwind EOF ;
    public final EObject entryRuleUnwind() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnwind = null;


        try {
            // InternalOpenCypherParser.g:2233:47: (iv_ruleUnwind= ruleUnwind EOF )
            // InternalOpenCypherParser.g:2234:2: iv_ruleUnwind= ruleUnwind EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnwindRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnwind=ruleUnwind();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnwind; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnwind"


    // $ANTLR start "ruleUnwind"
    // InternalOpenCypherParser.g:2240:1: ruleUnwind returns [EObject current=null] : (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) ) ;
    public final EObject ruleUnwind() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_variable_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2246:2: ( (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) ) )
            // InternalOpenCypherParser.g:2247:2: (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) )
            {
            // InternalOpenCypherParser.g:2247:2: (otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) ) )
            // InternalOpenCypherParser.g:2248:3: otherlv_0= UNWIND ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= AS ( (lv_variable_3_0= ruleVariableDeclaration ) )
            {
            otherlv_0=(Token)match(input,UNWIND,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnwindAccess().getUNWINDKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2252:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2253:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2253:4: (lv_expression_1_0= ruleExpression )
            // InternalOpenCypherParser.g:2254:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_37);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnwindRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnwindAccess().getASKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:2275:3: ( (lv_variable_3_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:2276:4: (lv_variable_3_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:2276:4: (lv_variable_3_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:2277:5: lv_variable_3_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_variable_3_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnwindRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnwind"


    // $ANTLR start "entryRuleMerge"
    // InternalOpenCypherParser.g:2298:1: entryRuleMerge returns [EObject current=null] : iv_ruleMerge= ruleMerge EOF ;
    public final EObject entryRuleMerge() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMerge = null;


        try {
            // InternalOpenCypherParser.g:2298:46: (iv_ruleMerge= ruleMerge EOF )
            // InternalOpenCypherParser.g:2299:2: iv_ruleMerge= ruleMerge EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMergeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMerge=ruleMerge();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMerge; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMerge"


    // $ANTLR start "ruleMerge"
    // InternalOpenCypherParser.g:2305:1: ruleMerge returns [EObject current=null] : (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* ) ;
    public final EObject ruleMerge() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_patternPart_1_0 = null;

        EObject lv_mergeActions_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2311:2: ( (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* ) )
            // InternalOpenCypherParser.g:2312:2: (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* )
            {
            // InternalOpenCypherParser.g:2312:2: (otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )* )
            // InternalOpenCypherParser.g:2313:3: otherlv_0= MERGE ( (lv_patternPart_1_0= rulePatternPart ) ) ( (lv_mergeActions_2_0= ruleMergeAction ) )*
            {
            otherlv_0=(Token)match(input,MERGE,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMergeAccess().getMERGEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2317:3: ( (lv_patternPart_1_0= rulePatternPart ) )
            // InternalOpenCypherParser.g:2318:4: (lv_patternPart_1_0= rulePatternPart )
            {
            // InternalOpenCypherParser.g:2318:4: (lv_patternPart_1_0= rulePatternPart )
            // InternalOpenCypherParser.g:2319:5: lv_patternPart_1_0= rulePatternPart
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_44);
            lv_patternPart_1_0=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMergeRule());
              					}
              					set(
              						current,
              						"patternPart",
              						lv_patternPart_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PatternPart");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2336:3: ( (lv_mergeActions_2_0= ruleMergeAction ) )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==ON) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2337:4: (lv_mergeActions_2_0= ruleMergeAction )
            	    {
            	    // InternalOpenCypherParser.g:2337:4: (lv_mergeActions_2_0= ruleMergeAction )
            	    // InternalOpenCypherParser.g:2338:5: lv_mergeActions_2_0= ruleMergeAction
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_44);
            	    lv_mergeActions_2_0=ruleMergeAction();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMergeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"mergeActions",
            	      						lv_mergeActions_2_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.MergeAction");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMerge"


    // $ANTLR start "entryRuleMergeAction"
    // InternalOpenCypherParser.g:2359:1: entryRuleMergeAction returns [EObject current=null] : iv_ruleMergeAction= ruleMergeAction EOF ;
    public final EObject entryRuleMergeAction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMergeAction = null;


        try {
            // InternalOpenCypherParser.g:2359:52: (iv_ruleMergeAction= ruleMergeAction EOF )
            // InternalOpenCypherParser.g:2360:2: iv_ruleMergeAction= ruleMergeAction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMergeActionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMergeAction=ruleMergeAction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMergeAction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMergeAction"


    // $ANTLR start "ruleMergeAction"
    // InternalOpenCypherParser.g:2366:1: ruleMergeAction returns [EObject current=null] : (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) ) ;
    public final EObject ruleMergeAction() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_action_1_1=null;
        Token lv_action_1_2=null;
        EObject lv_set_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2372:2: ( (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) ) )
            // InternalOpenCypherParser.g:2373:2: (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) )
            {
            // InternalOpenCypherParser.g:2373:2: (otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) ) )
            // InternalOpenCypherParser.g:2374:3: otherlv_0= ON ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) ) ( (lv_set_2_0= ruleSet ) )
            {
            otherlv_0=(Token)match(input,ON,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMergeActionAccess().getONKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2378:3: ( ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) ) )
            // InternalOpenCypherParser.g:2379:4: ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) )
            {
            // InternalOpenCypherParser.g:2379:4: ( (lv_action_1_1= MATCH | lv_action_1_2= CREATE ) )
            // InternalOpenCypherParser.g:2380:5: (lv_action_1_1= MATCH | lv_action_1_2= CREATE )
            {
            // InternalOpenCypherParser.g:2380:5: (lv_action_1_1= MATCH | lv_action_1_2= CREATE )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==MATCH) ) {
                alt24=1;
            }
            else if ( (LA24_0==CREATE) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // InternalOpenCypherParser.g:2381:6: lv_action_1_1= MATCH
                    {
                    lv_action_1_1=(Token)match(input,MATCH,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_action_1_1, grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getMergeActionRule());
                      						}
                      						setWithLastConsumed(current, "action", lv_action_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:2392:6: lv_action_1_2= CREATE
                    {
                    lv_action_1_2=(Token)match(input,CREATE,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_action_1_2, grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getMergeActionRule());
                      						}
                      						setWithLastConsumed(current, "action", lv_action_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalOpenCypherParser.g:2405:3: ( (lv_set_2_0= ruleSet ) )
            // InternalOpenCypherParser.g:2406:4: (lv_set_2_0= ruleSet )
            {
            // InternalOpenCypherParser.g:2406:4: (lv_set_2_0= ruleSet )
            // InternalOpenCypherParser.g:2407:5: lv_set_2_0= ruleSet
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_set_2_0=ruleSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMergeActionRule());
              					}
              					set(
              						current,
              						"set",
              						lv_set_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Set");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMergeAction"


    // $ANTLR start "entryRuleCreate"
    // InternalOpenCypherParser.g:2428:1: entryRuleCreate returns [EObject current=null] : iv_ruleCreate= ruleCreate EOF ;
    public final EObject entryRuleCreate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreate = null;


        try {
            // InternalOpenCypherParser.g:2428:47: (iv_ruleCreate= ruleCreate EOF )
            // InternalOpenCypherParser.g:2429:2: iv_ruleCreate= ruleCreate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreate=ruleCreate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreate"


    // $ANTLR start "ruleCreate"
    // InternalOpenCypherParser.g:2435:1: ruleCreate returns [EObject current=null] : (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) ) ;
    public final EObject ruleCreate() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_unique_1_0=null;
        EObject lv_pattern_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2441:2: ( (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) ) )
            // InternalOpenCypherParser.g:2442:2: (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) )
            {
            // InternalOpenCypherParser.g:2442:2: (otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) ) )
            // InternalOpenCypherParser.g:2443:3: otherlv_0= CREATE ( (lv_unique_1_0= UNIQUE ) )? ( (lv_pattern_2_0= rulePattern ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateAccess().getCREATEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2447:3: ( (lv_unique_1_0= UNIQUE ) )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==UNIQUE) ) {
                int LA25_1 = input.LA(2);

                if ( ((LA25_1>=ALLSHORTESTPATHS && LA25_1<=WHERE)||(LA25_1>=CASE && LA25_1<=XOR)||(LA25_1>=AS && LA25_1<=OR)||LA25_1==LeftParenthesis||LA25_1==RULE_ID) ) {
                    alt25=1;
                }
            }
            switch (alt25) {
                case 1 :
                    // InternalOpenCypherParser.g:2448:4: (lv_unique_1_0= UNIQUE )
                    {
                    // InternalOpenCypherParser.g:2448:4: (lv_unique_1_0= UNIQUE )
                    // InternalOpenCypherParser.g:2449:5: lv_unique_1_0= UNIQUE
                    {
                    lv_unique_1_0=(Token)match(input,UNIQUE,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_unique_1_0, grammarAccess.getCreateAccess().getUniqueUNIQUEKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getCreateRule());
                      					}
                      					setWithLastConsumed(current, "unique", true, "UNIQUE");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:2461:3: ( (lv_pattern_2_0= rulePattern ) )
            // InternalOpenCypherParser.g:2462:4: (lv_pattern_2_0= rulePattern )
            {
            // InternalOpenCypherParser.g:2462:4: (lv_pattern_2_0= rulePattern )
            // InternalOpenCypherParser.g:2463:5: lv_pattern_2_0= rulePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_pattern_2_0=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Pattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreate"


    // $ANTLR start "entryRuleSet"
    // InternalOpenCypherParser.g:2484:1: entryRuleSet returns [EObject current=null] : iv_ruleSet= ruleSet EOF ;
    public final EObject entryRuleSet() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSet = null;


        try {
            // InternalOpenCypherParser.g:2484:44: (iv_ruleSet= ruleSet EOF )
            // InternalOpenCypherParser.g:2485:2: iv_ruleSet= ruleSet EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSet=ruleSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSet; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSet"


    // $ANTLR start "ruleSet"
    // InternalOpenCypherParser.g:2491:1: ruleSet returns [EObject current=null] : (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* ) ;
    public final EObject ruleSet() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_setItems_1_0 = null;

        EObject lv_setItems_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2497:2: ( (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* ) )
            // InternalOpenCypherParser.g:2498:2: (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* )
            {
            // InternalOpenCypherParser.g:2498:2: (otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )* )
            // InternalOpenCypherParser.g:2499:3: otherlv_0= SET ( (lv_setItems_1_0= ruleSetItem ) ) (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )*
            {
            otherlv_0=(Token)match(input,SET,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSetAccess().getSETKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2503:3: ( (lv_setItems_1_0= ruleSetItem ) )
            // InternalOpenCypherParser.g:2504:4: (lv_setItems_1_0= ruleSetItem )
            {
            // InternalOpenCypherParser.g:2504:4: (lv_setItems_1_0= ruleSetItem )
            // InternalOpenCypherParser.g:2505:5: lv_setItems_1_0= ruleSetItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_setItems_1_0=ruleSetItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSetRule());
              					}
              					add(
              						current,
              						"setItems",
              						lv_setItems_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SetItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2522:3: (otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) ) )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==Comma) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2523:4: otherlv_2= Comma ( (lv_setItems_3_0= ruleSetItem ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getSetAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:2527:4: ( (lv_setItems_3_0= ruleSetItem ) )
            	    // InternalOpenCypherParser.g:2528:5: (lv_setItems_3_0= ruleSetItem )
            	    {
            	    // InternalOpenCypherParser.g:2528:5: (lv_setItems_3_0= ruleSetItem )
            	    // InternalOpenCypherParser.g:2529:6: lv_setItems_3_0= ruleSetItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_setItems_3_0=ruleSetItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getSetRule());
            	      						}
            	      						add(
            	      							current,
            	      							"setItems",
            	      							lv_setItems_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.SetItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSet"


    // $ANTLR start "entryRuleSetItem"
    // InternalOpenCypherParser.g:2551:1: entryRuleSetItem returns [EObject current=null] : iv_ruleSetItem= ruleSetItem EOF ;
    public final EObject entryRuleSetItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSetItem = null;


        try {
            // InternalOpenCypherParser.g:2551:48: (iv_ruleSetItem= ruleSetItem EOF )
            // InternalOpenCypherParser.g:2552:2: iv_ruleSetItem= ruleSetItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSetItem=ruleSetItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSetItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSetItem"


    // $ANTLR start "ruleSetItem"
    // InternalOpenCypherParser.g:2558:1: ruleSetItem returns [EObject current=null] : ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) ) ;
    public final EObject ruleSetItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        EObject lv_propertyExpression_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_variable_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject lv_variable_6_0 = null;

        EObject lv_expression_8_0 = null;

        EObject lv_variable_9_0 = null;

        EObject lv_nodeLabels_10_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2564:2: ( ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) ) )
            // InternalOpenCypherParser.g:2565:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) )
            {
            // InternalOpenCypherParser.g:2565:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) )
            int alt27=4;
            alt27 = dfa27.predict(input);
            switch (alt27) {
                case 1 :
                    // InternalOpenCypherParser.g:2566:3: ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2566:3: ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) )
                    // InternalOpenCypherParser.g:2567:4: ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) )
                    {
                    // InternalOpenCypherParser.g:2567:4: ( (lv_propertyExpression_0_0= rulePropertyExpression ) )
                    // InternalOpenCypherParser.g:2568:5: (lv_propertyExpression_0_0= rulePropertyExpression )
                    {
                    // InternalOpenCypherParser.g:2568:5: (lv_propertyExpression_0_0= rulePropertyExpression )
                    // InternalOpenCypherParser.g:2569:6: lv_propertyExpression_0_0= rulePropertyExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_propertyExpression_0_0=rulePropertyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"propertyExpression",
                      							lv_propertyExpression_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1());
                      			
                    }
                    // InternalOpenCypherParser.g:2590:4: ( (lv_expression_2_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:2591:5: (lv_expression_2_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:2591:5: (lv_expression_2_0= ruleExpression )
                    // InternalOpenCypherParser.g:2592:6: lv_expression_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:2611:3: ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2611:3: ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) )
                    // InternalOpenCypherParser.g:2612:4: ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) )
                    {
                    // InternalOpenCypherParser.g:2612:4: ( (lv_variable_3_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:2613:5: (lv_variable_3_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:2613:5: (lv_variable_3_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:2614:6: lv_variable_3_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_variable_3_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1());
                      			
                    }
                    // InternalOpenCypherParser.g:2635:4: ( (lv_expression_5_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:2636:5: (lv_expression_5_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:2636:5: (lv_expression_5_0= ruleExpression )
                    // InternalOpenCypherParser.g:2637:6: lv_expression_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:2656:3: ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2656:3: ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) )
                    // InternalOpenCypherParser.g:2657:4: ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) )
                    {
                    // InternalOpenCypherParser.g:2657:4: ( (lv_variable_6_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:2658:5: (lv_variable_6_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:2658:5: (lv_variable_6_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:2659:6: lv_variable_6_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_48);
                    lv_variable_6_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_7=(Token)match(input,PlusSignEqualsSign,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1());
                      			
                    }
                    // InternalOpenCypherParser.g:2680:4: ( (lv_expression_8_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:2681:5: (lv_expression_8_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:2681:5: (lv_expression_8_0= ruleExpression )
                    // InternalOpenCypherParser.g:2682:6: lv_expression_8_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_8_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_8_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:2701:3: ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) )
                    {
                    // InternalOpenCypherParser.g:2701:3: ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) )
                    // InternalOpenCypherParser.g:2702:4: ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) )
                    {
                    // InternalOpenCypherParser.g:2702:4: ( (lv_variable_9_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:2703:5: (lv_variable_9_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:2703:5: (lv_variable_9_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:2704:6: lv_variable_9_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_9_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_9_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:2721:4: ( (lv_nodeLabels_10_0= ruleNodeLabels ) )
                    // InternalOpenCypherParser.g:2722:5: (lv_nodeLabels_10_0= ruleNodeLabels )
                    {
                    // InternalOpenCypherParser.g:2722:5: (lv_nodeLabels_10_0= ruleNodeLabels )
                    // InternalOpenCypherParser.g:2723:6: lv_nodeLabels_10_0= ruleNodeLabels
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSetItemAccess().getNodeLabelsNodeLabelsParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabels_10_0=ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSetItemRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabels",
                      							lv_nodeLabels_10_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabels");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSetItem"


    // $ANTLR start "entryRuleDelete"
    // InternalOpenCypherParser.g:2745:1: entryRuleDelete returns [EObject current=null] : iv_ruleDelete= ruleDelete EOF ;
    public final EObject entryRuleDelete() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDelete = null;


        try {
            // InternalOpenCypherParser.g:2745:47: (iv_ruleDelete= ruleDelete EOF )
            // InternalOpenCypherParser.g:2746:2: iv_ruleDelete= ruleDelete EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDeleteRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDelete=ruleDelete();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDelete; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDelete"


    // $ANTLR start "ruleDelete"
    // InternalOpenCypherParser.g:2752:1: ruleDelete returns [EObject current=null] : ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* ) ;
    public final EObject ruleDelete() throws RecognitionException {
        EObject current = null;

        Token lv_detach_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expressions_2_0 = null;

        EObject lv_expressions_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2758:2: ( ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* ) )
            // InternalOpenCypherParser.g:2759:2: ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )
            {
            // InternalOpenCypherParser.g:2759:2: ( ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )* )
            // InternalOpenCypherParser.g:2760:3: ( (lv_detach_0_0= DETACH ) )? otherlv_1= DELETE ( (lv_expressions_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
            {
            // InternalOpenCypherParser.g:2760:3: ( (lv_detach_0_0= DETACH ) )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==DETACH) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // InternalOpenCypherParser.g:2761:4: (lv_detach_0_0= DETACH )
                    {
                    // InternalOpenCypherParser.g:2761:4: (lv_detach_0_0= DETACH )
                    // InternalOpenCypherParser.g:2762:5: lv_detach_0_0= DETACH
                    {
                    lv_detach_0_0=(Token)match(input,DETACH,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_detach_0_0, grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDeleteRule());
                      					}
                      					setWithLastConsumed(current, "detach", true, "DETACH");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,DELETE,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDeleteAccess().getDELETEKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:2778:3: ( (lv_expressions_2_0= ruleExpression ) )
            // InternalOpenCypherParser.g:2779:4: (lv_expressions_2_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:2779:4: (lv_expressions_2_0= ruleExpression )
            // InternalOpenCypherParser.g:2780:5: lv_expressions_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_expressions_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDeleteRule());
              					}
              					add(
              						current,
              						"expressions",
              						lv_expressions_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2797:3: (otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) ) )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==Comma) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2798:4: otherlv_3= Comma ( (lv_expressions_4_0= ruleExpression ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getDeleteAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:2802:4: ( (lv_expressions_4_0= ruleExpression ) )
            	    // InternalOpenCypherParser.g:2803:5: (lv_expressions_4_0= ruleExpression )
            	    {
            	    // InternalOpenCypherParser.g:2803:5: (lv_expressions_4_0= ruleExpression )
            	    // InternalOpenCypherParser.g:2804:6: lv_expressions_4_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_expressions_4_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDeleteRule());
            	      						}
            	      						add(
            	      							current,
            	      							"expressions",
            	      							lv_expressions_4_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDelete"


    // $ANTLR start "entryRuleRemove"
    // InternalOpenCypherParser.g:2826:1: entryRuleRemove returns [EObject current=null] : iv_ruleRemove= ruleRemove EOF ;
    public final EObject entryRuleRemove() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRemove = null;


        try {
            // InternalOpenCypherParser.g:2826:47: (iv_ruleRemove= ruleRemove EOF )
            // InternalOpenCypherParser.g:2827:2: iv_ruleRemove= ruleRemove EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRemoveRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRemove=ruleRemove();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRemove; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRemove"


    // $ANTLR start "ruleRemove"
    // InternalOpenCypherParser.g:2833:1: ruleRemove returns [EObject current=null] : (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* ) ;
    public final EObject ruleRemove() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_removeItems_1_0 = null;

        EObject lv_removeItems_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2839:2: ( (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* ) )
            // InternalOpenCypherParser.g:2840:2: (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* )
            {
            // InternalOpenCypherParser.g:2840:2: (otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )* )
            // InternalOpenCypherParser.g:2841:3: otherlv_0= REMOVE ( (lv_removeItems_1_0= ruleRemoveItem ) ) (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )*
            {
            otherlv_0=(Token)match(input,REMOVE,FOLLOW_25); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRemoveAccess().getREMOVEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:2845:3: ( (lv_removeItems_1_0= ruleRemoveItem ) )
            // InternalOpenCypherParser.g:2846:4: (lv_removeItems_1_0= ruleRemoveItem )
            {
            // InternalOpenCypherParser.g:2846:4: (lv_removeItems_1_0= ruleRemoveItem )
            // InternalOpenCypherParser.g:2847:5: lv_removeItems_1_0= ruleRemoveItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_removeItems_1_0=ruleRemoveItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRemoveRule());
              					}
              					add(
              						current,
              						"removeItems",
              						lv_removeItems_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RemoveItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:2864:3: (otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) ) )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==Comma) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2865:4: otherlv_2= Comma ( (lv_removeItems_3_0= ruleRemoveItem ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getRemoveAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:2869:4: ( (lv_removeItems_3_0= ruleRemoveItem ) )
            	    // InternalOpenCypherParser.g:2870:5: (lv_removeItems_3_0= ruleRemoveItem )
            	    {
            	    // InternalOpenCypherParser.g:2870:5: (lv_removeItems_3_0= ruleRemoveItem )
            	    // InternalOpenCypherParser.g:2871:6: lv_removeItems_3_0= ruleRemoveItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_removeItems_3_0=ruleRemoveItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRemoveRule());
            	      						}
            	      						add(
            	      							current,
            	      							"removeItems",
            	      							lv_removeItems_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.RemoveItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRemove"


    // $ANTLR start "entryRuleRemoveItem"
    // InternalOpenCypherParser.g:2893:1: entryRuleRemoveItem returns [EObject current=null] : iv_ruleRemoveItem= ruleRemoveItem EOF ;
    public final EObject entryRuleRemoveItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRemoveItem = null;


        try {
            // InternalOpenCypherParser.g:2893:51: (iv_ruleRemoveItem= ruleRemoveItem EOF )
            // InternalOpenCypherParser.g:2894:2: iv_ruleRemoveItem= ruleRemoveItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRemoveItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRemoveItem=ruleRemoveItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRemoveItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRemoveItem"


    // $ANTLR start "ruleRemoveItem"
    // InternalOpenCypherParser.g:2900:1: ruleRemoveItem returns [EObject current=null] : ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) ) ;
    public final EObject ruleRemoveItem() throws RecognitionException {
        EObject current = null;

        EObject lv_variable_1_0 = null;

        EObject lv_nodeLabels_2_0 = null;

        EObject lv_propertyExpression_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:2906:2: ( ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) ) )
            // InternalOpenCypherParser.g:2907:2: ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) )
            {
            // InternalOpenCypherParser.g:2907:2: ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // InternalOpenCypherParser.g:2908:3: ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) )
                    {
                    // InternalOpenCypherParser.g:2908:3: ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) )
                    // InternalOpenCypherParser.g:2909:4: () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) )
                    {
                    // InternalOpenCypherParser.g:2909:4: ()
                    // InternalOpenCypherParser.g:2910:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:2919:4: ( (lv_variable_1_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:2920:5: (lv_variable_1_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:2920:5: (lv_variable_1_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:2921:6: lv_variable_1_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_1_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:2938:4: ( (lv_nodeLabels_2_0= ruleNodeLabels ) )
                    // InternalOpenCypherParser.g:2939:5: (lv_nodeLabels_2_0= ruleNodeLabels )
                    {
                    // InternalOpenCypherParser.g:2939:5: (lv_nodeLabels_2_0= ruleNodeLabels )
                    // InternalOpenCypherParser.g:2940:6: lv_nodeLabels_2_0= ruleNodeLabels
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getNodeLabelsNodeLabelsParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabels_2_0=ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabels",
                      							lv_nodeLabels_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabels");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:2959:3: ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) )
                    {
                    // InternalOpenCypherParser.g:2959:3: ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) )
                    // InternalOpenCypherParser.g:2960:4: () ( (lv_propertyExpression_4_0= rulePropertyExpression ) )
                    {
                    // InternalOpenCypherParser.g:2960:4: ()
                    // InternalOpenCypherParser.g:2961:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:2970:4: ( (lv_propertyExpression_4_0= rulePropertyExpression ) )
                    // InternalOpenCypherParser.g:2971:5: (lv_propertyExpression_4_0= rulePropertyExpression )
                    {
                    // InternalOpenCypherParser.g:2971:5: (lv_propertyExpression_4_0= rulePropertyExpression )
                    // InternalOpenCypherParser.g:2972:6: lv_propertyExpression_4_0= rulePropertyExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_propertyExpression_4_0=rulePropertyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRemoveItemRule());
                      						}
                      						set(
                      							current,
                      							"propertyExpression",
                      							lv_propertyExpression_4_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRemoveItem"


    // $ANTLR start "entryRuleForeach"
    // InternalOpenCypherParser.g:2994:1: entryRuleForeach returns [EObject current=null] : iv_ruleForeach= ruleForeach EOF ;
    public final EObject entryRuleForeach() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleForeach = null;


        try {
            // InternalOpenCypherParser.g:2994:48: (iv_ruleForeach= ruleForeach EOF )
            // InternalOpenCypherParser.g:2995:2: iv_ruleForeach= ruleForeach EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForeachRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForeach=ruleForeach();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForeach; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleForeach"


    // $ANTLR start "ruleForeach"
    // InternalOpenCypherParser.g:3001:1: ruleForeach returns [EObject current=null] : (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clauses_6_0= ruleClause ) )+ otherlv_7= RightParenthesis ) ;
    public final EObject ruleForeach() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_variable_2_0 = null;

        EObject lv_expression_4_0 = null;

        EObject lv_clauses_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3007:2: ( (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clauses_6_0= ruleClause ) )+ otherlv_7= RightParenthesis ) )
            // InternalOpenCypherParser.g:3008:2: (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clauses_6_0= ruleClause ) )+ otherlv_7= RightParenthesis )
            {
            // InternalOpenCypherParser.g:3008:2: (otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clauses_6_0= ruleClause ) )+ otherlv_7= RightParenthesis )
            // InternalOpenCypherParser.g:3009:3: otherlv_0= FOREACH otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) ) otherlv_3= IN ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= VerticalLine ( (lv_clauses_6_0= ruleClause ) )+ otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,FOREACH,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getFOREACHKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:3017:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:3018:4: (lv_variable_2_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:3018:4: (lv_variable_2_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:3019:5: lv_variable_2_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_variable_2_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForeachRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,IN,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getForeachAccess().getINKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:3040:3: ( (lv_expression_4_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3041:4: (lv_expression_4_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3041:4: (lv_expression_4_0= ruleExpression )
            // InternalOpenCypherParser.g:3042:5: lv_expression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_expression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForeachRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,VerticalLine,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getForeachAccess().getVerticalLineKeyword_5());
              		
            }
            // InternalOpenCypherParser.g:3063:3: ( (lv_clauses_6_0= ruleClause ) )+
            int cnt32=0;
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==OPTIONAL||LA32_0==FOREACH||LA32_0==CREATE||(LA32_0>=DELETE && LA32_0<=DETACH)||(LA32_0>=REMOVE && LA32_0<=RETURN)||LA32_0==UNWIND||(LA32_0>=MATCH && LA32_0<=MERGE)||LA32_0==START||LA32_0==CALL||LA32_0==LOAD||LA32_0==WITH||LA32_0==SET) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // InternalOpenCypherParser.g:3064:4: (lv_clauses_6_0= ruleClause )
            	    {
            	    // InternalOpenCypherParser.g:3064:4: (lv_clauses_6_0= ruleClause )
            	    // InternalOpenCypherParser.g:3065:5: lv_clauses_6_0= ruleClause
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getForeachAccess().getClausesClauseParserRuleCall_6_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_clauses_6_0=ruleClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getForeachRule());
            	      					}
            	      					add(
            	      						current,
            	      						"clauses",
            	      						lv_clauses_6_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.Clause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt32 >= 1 ) break loop32;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(32, input);
                        throw eee;
                }
                cnt32++;
            } while (true);

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getForeachAccess().getRightParenthesisKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleForeach"


    // $ANTLR start "entryRuleInQueryCall"
    // InternalOpenCypherParser.g:3090:1: entryRuleInQueryCall returns [EObject current=null] : iv_ruleInQueryCall= ruleInQueryCall EOF ;
    public final EObject entryRuleInQueryCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInQueryCall = null;


        try {
            // InternalOpenCypherParser.g:3090:52: (iv_ruleInQueryCall= ruleInQueryCall EOF )
            // InternalOpenCypherParser.g:3091:2: iv_ruleInQueryCall= ruleInQueryCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInQueryCallRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInQueryCall=ruleInQueryCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInQueryCall; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInQueryCall"


    // $ANTLR start "ruleInQueryCall"
    // InternalOpenCypherParser.g:3097:1: ruleInQueryCall returns [EObject current=null] : (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) ;
    public final EObject ruleInQueryCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_invocation_1_0 = null;

        EObject lv_yieldItems_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3103:2: ( (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) )
            // InternalOpenCypherParser.g:3104:2: (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            {
            // InternalOpenCypherParser.g:3104:2: (otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            // InternalOpenCypherParser.g:3105:3: otherlv_0= CALL ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            {
            otherlv_0=(Token)match(input,CALL,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInQueryCallAccess().getCALLKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3109:3: ( (lv_invocation_1_0= ruleExplicitProcedureInvocation ) )
            // InternalOpenCypherParser.g:3110:4: (lv_invocation_1_0= ruleExplicitProcedureInvocation )
            {
            // InternalOpenCypherParser.g:3110:4: (lv_invocation_1_0= ruleExplicitProcedureInvocation )
            // InternalOpenCypherParser.g:3111:5: lv_invocation_1_0= ruleExplicitProcedureInvocation
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_53);
            lv_invocation_1_0=ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInQueryCallRule());
              					}
              					set(
              						current,
              						"invocation",
              						lv_invocation_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ExplicitProcedureInvocation");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3128:3: (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==YIELD) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalOpenCypherParser.g:3129:4: otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    {
                    otherlv_2=(Token)match(input,YIELD,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0());
                      			
                    }
                    // InternalOpenCypherParser.g:3133:4: ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    // InternalOpenCypherParser.g:3134:5: (lv_yieldItems_3_0= ruleYieldItems )
                    {
                    // InternalOpenCypherParser.g:3134:5: (lv_yieldItems_3_0= ruleYieldItems )
                    // InternalOpenCypherParser.g:3135:6: lv_yieldItems_3_0= ruleYieldItems
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_yieldItems_3_0=ruleYieldItems();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInQueryCallRule());
                      						}
                      						set(
                      							current,
                      							"yieldItems",
                      							lv_yieldItems_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.YieldItems");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInQueryCall"


    // $ANTLR start "entryRuleStandaloneCall"
    // InternalOpenCypherParser.g:3157:1: entryRuleStandaloneCall returns [EObject current=null] : iv_ruleStandaloneCall= ruleStandaloneCall EOF ;
    public final EObject entryRuleStandaloneCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStandaloneCall = null;


        try {
            // InternalOpenCypherParser.g:3157:55: (iv_ruleStandaloneCall= ruleStandaloneCall EOF )
            // InternalOpenCypherParser.g:3158:2: iv_ruleStandaloneCall= ruleStandaloneCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStandaloneCallRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStandaloneCall=ruleStandaloneCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStandaloneCall; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStandaloneCall"


    // $ANTLR start "ruleStandaloneCall"
    // InternalOpenCypherParser.g:3164:1: ruleStandaloneCall returns [EObject current=null] : (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) ;
    public final EObject ruleStandaloneCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_invocation_1_1 = null;

        EObject lv_invocation_1_2 = null;

        EObject lv_yieldItems_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3170:2: ( (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? ) )
            // InternalOpenCypherParser.g:3171:2: (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            {
            // InternalOpenCypherParser.g:3171:2: (otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )? )
            // InternalOpenCypherParser.g:3172:3: otherlv_0= CALL ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) ) (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            {
            otherlv_0=(Token)match(input,CALL,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStandaloneCallAccess().getCALLKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3176:3: ( ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) ) )
            // InternalOpenCypherParser.g:3177:4: ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) )
            {
            // InternalOpenCypherParser.g:3177:4: ( (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation ) )
            // InternalOpenCypherParser.g:3178:5: (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation )
            {
            // InternalOpenCypherParser.g:3178:5: (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation )
            int alt34=2;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // InternalOpenCypherParser.g:3179:6: lv_invocation_1_1= ruleExplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_53);
                    lv_invocation_1_1=ruleExplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStandaloneCallRule());
                      						}
                      						set(
                      							current,
                      							"invocation",
                      							lv_invocation_1_1,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ExplicitProcedureInvocation");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3195:6: lv_invocation_1_2= ruleImplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_53);
                    lv_invocation_1_2=ruleImplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStandaloneCallRule());
                      						}
                      						set(
                      							current,
                      							"invocation",
                      							lv_invocation_1_2,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ImplicitProcedureInvocation");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalOpenCypherParser.g:3213:3: (otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) ) )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==YIELD) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // InternalOpenCypherParser.g:3214:4: otherlv_2= YIELD ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    {
                    otherlv_2=(Token)match(input,YIELD,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0());
                      			
                    }
                    // InternalOpenCypherParser.g:3218:4: ( (lv_yieldItems_3_0= ruleYieldItems ) )
                    // InternalOpenCypherParser.g:3219:5: (lv_yieldItems_3_0= ruleYieldItems )
                    {
                    // InternalOpenCypherParser.g:3219:5: (lv_yieldItems_3_0= ruleYieldItems )
                    // InternalOpenCypherParser.g:3220:6: lv_yieldItems_3_0= ruleYieldItems
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_yieldItems_3_0=ruleYieldItems();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStandaloneCallRule());
                      						}
                      						set(
                      							current,
                      							"yieldItems",
                      							lv_yieldItems_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.YieldItems");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStandaloneCall"


    // $ANTLR start "entryRuleYieldItems"
    // InternalOpenCypherParser.g:3242:1: entryRuleYieldItems returns [EObject current=null] : iv_ruleYieldItems= ruleYieldItems EOF ;
    public final EObject entryRuleYieldItems() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleYieldItems = null;


        try {
            // InternalOpenCypherParser.g:3242:51: (iv_ruleYieldItems= ruleYieldItems EOF )
            // InternalOpenCypherParser.g:3243:2: iv_ruleYieldItems= ruleYieldItems EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldItems=ruleYieldItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldItems; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleYieldItems"


    // $ANTLR start "ruleYieldItems"
    // InternalOpenCypherParser.g:3249:1: ruleYieldItems returns [EObject current=null] : ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) ) ;
    public final EObject ruleYieldItems() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_items_1_0 = null;

        EObject lv_items_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3255:2: ( ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) ) )
            // InternalOpenCypherParser.g:3256:2: ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) )
            {
            // InternalOpenCypherParser.g:3256:2: ( () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus ) )
            // InternalOpenCypherParser.g:3257:3: () ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus )
            {
            // InternalOpenCypherParser.g:3257:3: ()
            // InternalOpenCypherParser.g:3258:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getYieldItemsAccess().getYieldItemsAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:3267:3: ( ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* ) | otherlv_4= HyphenMinus )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=ALLSHORTESTPATHS && LA37_0<=WHERE)||(LA37_0>=CASE && LA37_0<=XOR)||(LA37_0>=AS && LA37_0<=OR)||LA37_0==RULE_ID) ) {
                alt37=1;
            }
            else if ( (LA37_0==HyphenMinus) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // InternalOpenCypherParser.g:3268:4: ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* )
                    {
                    // InternalOpenCypherParser.g:3268:4: ( ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )* )
                    // InternalOpenCypherParser.g:3269:5: ( (lv_items_1_0= ruleYieldItem ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )*
                    {
                    // InternalOpenCypherParser.g:3269:5: ( (lv_items_1_0= ruleYieldItem ) )
                    // InternalOpenCypherParser.g:3270:6: (lv_items_1_0= ruleYieldItem )
                    {
                    // InternalOpenCypherParser.g:3270:6: (lv_items_1_0= ruleYieldItem )
                    // InternalOpenCypherParser.g:3271:7: lv_items_1_0= ruleYieldItem
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_47);
                    lv_items_1_0=ruleYieldItem();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getYieldItemsRule());
                      							}
                      							add(
                      								current,
                      								"items",
                      								lv_items_1_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.YieldItem");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3288:5: (otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) ) )*
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( (LA36_0==Comma) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:3289:6: otherlv_2= Comma ( (lv_items_3_0= ruleYieldItem ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_2, grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0());
                    	      					
                    	    }
                    	    // InternalOpenCypherParser.g:3293:6: ( (lv_items_3_0= ruleYieldItem ) )
                    	    // InternalOpenCypherParser.g:3294:7: (lv_items_3_0= ruleYieldItem )
                    	    {
                    	    // InternalOpenCypherParser.g:3294:7: (lv_items_3_0= ruleYieldItem )
                    	    // InternalOpenCypherParser.g:3295:8: lv_items_3_0= ruleYieldItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_47);
                    	    lv_items_3_0=ruleYieldItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getYieldItemsRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"items",
                    	      									lv_items_3_0,
                    	      									"org.slizaa.neo4j.opencypher.OpenCypher.YieldItem");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3315:4: otherlv_4= HyphenMinus
                    {
                    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleYieldItems"


    // $ANTLR start "entryRuleYieldItem"
    // InternalOpenCypherParser.g:3324:1: entryRuleYieldItem returns [EObject current=null] : iv_ruleYieldItem= ruleYieldItem EOF ;
    public final EObject entryRuleYieldItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleYieldItem = null;


        try {
            // InternalOpenCypherParser.g:3324:50: (iv_ruleYieldItem= ruleYieldItem EOF )
            // InternalOpenCypherParser.g:3325:2: iv_ruleYieldItem= ruleYieldItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldItem=ruleYieldItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleYieldItem"


    // $ANTLR start "ruleYieldItem"
    // InternalOpenCypherParser.g:3331:1: ruleYieldItem returns [EObject current=null] : ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) ) ;
    public final EObject ruleYieldItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_field_0_0 = null;

        EObject lv_variable_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3337:2: ( ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) ) )
            // InternalOpenCypherParser.g:3338:2: ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) )
            {
            // InternalOpenCypherParser.g:3338:2: ( ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) ) )
            // InternalOpenCypherParser.g:3339:3: ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )? ( (lv_variable_2_0= ruleVariableDeclaration ) )
            {
            // InternalOpenCypherParser.g:3339:3: ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )?
            int alt38=2;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // InternalOpenCypherParser.g:3340:4: ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS
                    {
                    // InternalOpenCypherParser.g:3340:4: ( (lv_field_0_0= ruleProcedureResultField ) )
                    // InternalOpenCypherParser.g:3341:5: (lv_field_0_0= ruleProcedureResultField )
                    {
                    // InternalOpenCypherParser.g:3341:5: (lv_field_0_0= ruleProcedureResultField )
                    // InternalOpenCypherParser.g:3342:6: lv_field_0_0= ruleProcedureResultField
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_37);
                    lv_field_0_0=ruleProcedureResultField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getYieldItemRule());
                      						}
                      						set(
                      							current,
                      							"field",
                      							lv_field_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ProcedureResultField");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getYieldItemAccess().getASKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalOpenCypherParser.g:3364:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:3365:4: (lv_variable_2_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:3365:4: (lv_variable_2_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:3366:5: lv_variable_2_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_variable_2_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getYieldItemRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleYieldItem"


    // $ANTLR start "entryRuleWith"
    // InternalOpenCypherParser.g:3387:1: entryRuleWith returns [EObject current=null] : iv_ruleWith= ruleWith EOF ;
    public final EObject entryRuleWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWith = null;


        try {
            // InternalOpenCypherParser.g:3387:45: (iv_ruleWith= ruleWith EOF )
            // InternalOpenCypherParser.g:3388:2: iv_ruleWith= ruleWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWith=ruleWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWith"


    // $ANTLR start "ruleWith"
    // InternalOpenCypherParser.g:3394:1: ruleWith returns [EObject current=null] : (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? ) ;
    public final EObject ruleWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_distint_1_0=null;
        EObject lv_returnBody_2_0 = null;

        EObject lv_where_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3400:2: ( (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:3401:2: (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:3401:2: (otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:3402:3: otherlv_0= WITH ( (lv_distint_1_0= DISTINCT ) )? ( (lv_returnBody_2_0= ruleReturnBody ) ) ( (lv_where_3_0= ruleWhere ) )?
            {
            otherlv_0=(Token)match(input,WITH,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithAccess().getWITHKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3406:3: ( (lv_distint_1_0= DISTINCT ) )?
            int alt39=2;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // InternalOpenCypherParser.g:3407:4: (lv_distint_1_0= DISTINCT )
                    {
                    // InternalOpenCypherParser.g:3407:4: (lv_distint_1_0= DISTINCT )
                    // InternalOpenCypherParser.g:3408:5: lv_distint_1_0= DISTINCT
                    {
                    lv_distint_1_0=(Token)match(input,DISTINCT,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distint_1_0, grammarAccess.getWithAccess().getDistintDISTINCTKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getWithRule());
                      					}
                      					setWithLastConsumed(current, "distint", true, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3420:3: ( (lv_returnBody_2_0= ruleReturnBody ) )
            // InternalOpenCypherParser.g:3421:4: (lv_returnBody_2_0= ruleReturnBody )
            {
            // InternalOpenCypherParser.g:3421:4: (lv_returnBody_2_0= ruleReturnBody )
            // InternalOpenCypherParser.g:3422:5: lv_returnBody_2_0= ruleReturnBody
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_56);
            lv_returnBody_2_0=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithRule());
              					}
              					set(
              						current,
              						"returnBody",
              						lv_returnBody_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ReturnBody");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3439:3: ( (lv_where_3_0= ruleWhere ) )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==WHERE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // InternalOpenCypherParser.g:3440:4: (lv_where_3_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:3440:4: (lv_where_3_0= ruleWhere )
                    // InternalOpenCypherParser.g:3441:5: lv_where_3_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_3_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWithRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_3_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWith"


    // $ANTLR start "entryRuleReturn"
    // InternalOpenCypherParser.g:3462:1: entryRuleReturn returns [EObject current=null] : iv_ruleReturn= ruleReturn EOF ;
    public final EObject entryRuleReturn() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturn = null;


        try {
            // InternalOpenCypherParser.g:3462:47: (iv_ruleReturn= ruleReturn EOF )
            // InternalOpenCypherParser.g:3463:2: iv_ruleReturn= ruleReturn EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturn=ruleReturn();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturn; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturn"


    // $ANTLR start "ruleReturn"
    // InternalOpenCypherParser.g:3469:1: ruleReturn returns [EObject current=null] : ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) ) ;
    public final EObject ruleReturn() throws RecognitionException {
        EObject current = null;

        Token lv_return_0_0=null;
        Token lv_distinct_1_0=null;
        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3475:2: ( ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) ) )
            // InternalOpenCypherParser.g:3476:2: ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) )
            {
            // InternalOpenCypherParser.g:3476:2: ( ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) ) )
            // InternalOpenCypherParser.g:3477:3: ( (lv_return_0_0= RETURN ) ) ( (lv_distinct_1_0= DISTINCT ) )? ( (lv_body_2_0= ruleReturnBody ) )
            {
            // InternalOpenCypherParser.g:3477:3: ( (lv_return_0_0= RETURN ) )
            // InternalOpenCypherParser.g:3478:4: (lv_return_0_0= RETURN )
            {
            // InternalOpenCypherParser.g:3478:4: (lv_return_0_0= RETURN )
            // InternalOpenCypherParser.g:3479:5: lv_return_0_0= RETURN
            {
            lv_return_0_0=(Token)match(input,RETURN,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_return_0_0, grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getReturnRule());
              					}
              					setWithLastConsumed(current, "return", lv_return_0_0, "RETURN");
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3491:3: ( (lv_distinct_1_0= DISTINCT ) )?
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // InternalOpenCypherParser.g:3492:4: (lv_distinct_1_0= DISTINCT )
                    {
                    // InternalOpenCypherParser.g:3492:4: (lv_distinct_1_0= DISTINCT )
                    // InternalOpenCypherParser.g:3493:5: lv_distinct_1_0= DISTINCT
                    {
                    lv_distinct_1_0=(Token)match(input,DISTINCT,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distinct_1_0, grammarAccess.getReturnAccess().getDistinctDISTINCTKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getReturnRule());
                      					}
                      					setWithLastConsumed(current, "distinct", true, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3505:3: ( (lv_body_2_0= ruleReturnBody ) )
            // InternalOpenCypherParser.g:3506:4: (lv_body_2_0= ruleReturnBody )
            {
            // InternalOpenCypherParser.g:3506:4: (lv_body_2_0= ruleReturnBody )
            // InternalOpenCypherParser.g:3507:5: lv_body_2_0= ruleReturnBody
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ReturnBody");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturn"


    // $ANTLR start "entryRuleReturnBody"
    // InternalOpenCypherParser.g:3528:1: entryRuleReturnBody returns [EObject current=null] : iv_ruleReturnBody= ruleReturnBody EOF ;
    public final EObject entryRuleReturnBody() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnBody = null;


        try {
            // InternalOpenCypherParser.g:3528:51: (iv_ruleReturnBody= ruleReturnBody EOF )
            // InternalOpenCypherParser.g:3529:2: iv_ruleReturnBody= ruleReturnBody EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnBodyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnBody=ruleReturnBody();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnBody; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnBody"


    // $ANTLR start "ruleReturnBody"
    // InternalOpenCypherParser.g:3535:1: ruleReturnBody returns [EObject current=null] : ( ( (lv_returnItems_0_0= ruleReturnItems ) ) ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? ) ;
    public final EObject ruleReturnBody() throws RecognitionException {
        EObject current = null;

        EObject lv_returnItems_0_0 = null;

        EObject lv_order_1_0 = null;

        EObject lv_skip_2_0 = null;

        EObject lv_limit_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3541:2: ( ( ( (lv_returnItems_0_0= ruleReturnItems ) ) ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? ) )
            // InternalOpenCypherParser.g:3542:2: ( ( (lv_returnItems_0_0= ruleReturnItems ) ) ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? )
            {
            // InternalOpenCypherParser.g:3542:2: ( ( (lv_returnItems_0_0= ruleReturnItems ) ) ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )? )
            // InternalOpenCypherParser.g:3543:3: ( (lv_returnItems_0_0= ruleReturnItems ) ) ( (lv_order_1_0= ruleOrder ) )? ( (lv_skip_2_0= ruleSkip ) )? ( (lv_limit_3_0= ruleLimit ) )?
            {
            // InternalOpenCypherParser.g:3543:3: ( (lv_returnItems_0_0= ruleReturnItems ) )
            // InternalOpenCypherParser.g:3544:4: (lv_returnItems_0_0= ruleReturnItems )
            {
            // InternalOpenCypherParser.g:3544:4: (lv_returnItems_0_0= ruleReturnItems )
            // InternalOpenCypherParser.g:3545:5: lv_returnItems_0_0= ruleReturnItems
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_57);
            lv_returnItems_0_0=ruleReturnItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
              					}
              					set(
              						current,
              						"returnItems",
              						lv_returnItems_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItems");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3562:3: ( (lv_order_1_0= ruleOrder ) )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalOpenCypherParser.g:3563:4: (lv_order_1_0= ruleOrder )
                    {
                    // InternalOpenCypherParser.g:3563:4: (lv_order_1_0= ruleOrder )
                    // InternalOpenCypherParser.g:3564:5: lv_order_1_0= ruleOrder
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_58);
                    lv_order_1_0=ruleOrder();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"order",
                      						lv_order_1_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Order");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3581:3: ( (lv_skip_2_0= ruleSkip ) )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==SKIP) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // InternalOpenCypherParser.g:3582:4: (lv_skip_2_0= ruleSkip )
                    {
                    // InternalOpenCypherParser.g:3582:4: (lv_skip_2_0= ruleSkip )
                    // InternalOpenCypherParser.g:3583:5: lv_skip_2_0= ruleSkip
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_59);
                    lv_skip_2_0=ruleSkip();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"skip",
                      						lv_skip_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Skip");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:3600:3: ( (lv_limit_3_0= ruleLimit ) )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==LIMIT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalOpenCypherParser.g:3601:4: (lv_limit_3_0= ruleLimit )
                    {
                    // InternalOpenCypherParser.g:3601:4: (lv_limit_3_0= ruleLimit )
                    // InternalOpenCypherParser.g:3602:5: lv_limit_3_0= ruleLimit
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_limit_3_0=ruleLimit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnBodyRule());
                      					}
                      					set(
                      						current,
                      						"limit",
                      						lv_limit_3_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Limit");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnBody"


    // $ANTLR start "entryRuleReturnItems"
    // InternalOpenCypherParser.g:3623:1: entryRuleReturnItems returns [EObject current=null] : iv_ruleReturnItems= ruleReturnItems EOF ;
    public final EObject entryRuleReturnItems() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnItems = null;


        try {
            // InternalOpenCypherParser.g:3623:52: (iv_ruleReturnItems= ruleReturnItems EOF )
            // InternalOpenCypherParser.g:3624:2: iv_ruleReturnItems= ruleReturnItems EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnItems=ruleReturnItems();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnItems; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnItems"


    // $ANTLR start "ruleReturnItems"
    // InternalOpenCypherParser.g:3630:1: ruleReturnItems returns [EObject current=null] : ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) ) ;
    public final EObject ruleReturnItems() throws RecognitionException {
        EObject current = null;

        Token lv_all_1_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        EObject lv_items_3_0 = null;

        EObject lv_items_4_0 = null;

        EObject lv_items_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3636:2: ( ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) ) )
            // InternalOpenCypherParser.g:3637:2: ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) )
            {
            // InternalOpenCypherParser.g:3637:2: ( ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) ) | ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* ) )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Asterisk) ) {
                alt47=1;
            }
            else if ( ((LA47_0>=ALLSHORTESTPATHS && LA47_0<=WHERE)||(LA47_0>=CASE && LA47_0<=XOR)||(LA47_0>=AS && LA47_0<=OR)||LA47_0==DollarSign||LA47_0==LeftParenthesis||LA47_0==PlusSign||LA47_0==HyphenMinus||LA47_0==LeftSquareBracket||LA47_0==LeftCurlyBracket||LA47_0==RULE_ID||(LA47_0>=RULE_STRING_LITERAL && LA47_0<=RULE_DECIMAL)) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // InternalOpenCypherParser.g:3638:3: ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) )
                    {
                    // InternalOpenCypherParser.g:3638:3: ( () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* ) )
                    // InternalOpenCypherParser.g:3639:4: () ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* )
                    {
                    // InternalOpenCypherParser.g:3639:4: ()
                    // InternalOpenCypherParser.g:3640:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:3649:4: ( ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )* )
                    // InternalOpenCypherParser.g:3650:5: ( (lv_all_1_0= Asterisk ) ) (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )*
                    {
                    // InternalOpenCypherParser.g:3650:5: ( (lv_all_1_0= Asterisk ) )
                    // InternalOpenCypherParser.g:3651:6: (lv_all_1_0= Asterisk )
                    {
                    // InternalOpenCypherParser.g:3651:6: (lv_all_1_0= Asterisk )
                    // InternalOpenCypherParser.g:3652:7: lv_all_1_0= Asterisk
                    {
                    lv_all_1_0=(Token)match(input,Asterisk,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_all_1_0, grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getReturnItemsRule());
                      							}
                      							setWithLastConsumed(current, "all", lv_all_1_0, "*");
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3664:5: (otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) ) )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==Comma) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:3665:6: otherlv_2= Comma ( (lv_items_3_0= ruleReturnItem ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_2, grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0());
                    	      					
                    	    }
                    	    // InternalOpenCypherParser.g:3669:6: ( (lv_items_3_0= ruleReturnItem ) )
                    	    // InternalOpenCypherParser.g:3670:7: (lv_items_3_0= ruleReturnItem )
                    	    {
                    	    // InternalOpenCypherParser.g:3670:7: (lv_items_3_0= ruleReturnItem )
                    	    // InternalOpenCypherParser.g:3671:8: lv_items_3_0= ruleReturnItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_47);
                    	    lv_items_3_0=ruleReturnItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"items",
                    	      									lv_items_3_0,
                    	      									"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItem");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3692:3: ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* )
                    {
                    // InternalOpenCypherParser.g:3692:3: ( ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )* )
                    // InternalOpenCypherParser.g:3693:4: ( (lv_items_4_0= ruleReturnItem ) ) (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )*
                    {
                    // InternalOpenCypherParser.g:3693:4: ( (lv_items_4_0= ruleReturnItem ) )
                    // InternalOpenCypherParser.g:3694:5: (lv_items_4_0= ruleReturnItem )
                    {
                    // InternalOpenCypherParser.g:3694:5: (lv_items_4_0= ruleReturnItem )
                    // InternalOpenCypherParser.g:3695:6: lv_items_4_0= ruleReturnItem
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_47);
                    lv_items_4_0=ruleReturnItem();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                      						}
                      						add(
                      							current,
                      							"items",
                      							lv_items_4_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItem");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:3712:4: (otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) ) )*
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==Comma) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:3713:5: otherlv_5= Comma ( (lv_items_6_0= ruleReturnItem ) )
                    	    {
                    	    otherlv_5=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_5, grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:3717:5: ( (lv_items_6_0= ruleReturnItem ) )
                    	    // InternalOpenCypherParser.g:3718:6: (lv_items_6_0= ruleReturnItem )
                    	    {
                    	    // InternalOpenCypherParser.g:3718:6: (lv_items_6_0= ruleReturnItem )
                    	    // InternalOpenCypherParser.g:3719:7: lv_items_6_0= ruleReturnItem
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_47);
                    	    lv_items_6_0=ruleReturnItem();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getReturnItemsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"items",
                    	      								lv_items_6_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.ReturnItem");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnItems"


    // $ANTLR start "entryRuleReturnItem"
    // InternalOpenCypherParser.g:3742:1: entryRuleReturnItem returns [EObject current=null] : iv_ruleReturnItem= ruleReturnItem EOF ;
    public final EObject entryRuleReturnItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnItem = null;


        try {
            // InternalOpenCypherParser.g:3742:51: (iv_ruleReturnItem= ruleReturnItem EOF )
            // InternalOpenCypherParser.g:3743:2: iv_ruleReturnItem= ruleReturnItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnItem=ruleReturnItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnItem"


    // $ANTLR start "ruleReturnItem"
    // InternalOpenCypherParser.g:3749:1: ruleReturnItem returns [EObject current=null] : ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? ) ;
    public final EObject ruleReturnItem() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_0_0 = null;

        EObject lv_alias_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3755:2: ( ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? ) )
            // InternalOpenCypherParser.g:3756:2: ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? )
            {
            // InternalOpenCypherParser.g:3756:2: ( ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )? )
            // InternalOpenCypherParser.g:3757:3: ( (lv_expression_0_0= ruleExpression ) ) (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )?
            {
            // InternalOpenCypherParser.g:3757:3: ( (lv_expression_0_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3758:4: (lv_expression_0_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3758:4: (lv_expression_0_0= ruleExpression )
            // InternalOpenCypherParser.g:3759:5: lv_expression_0_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_expression_0_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnItemRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3776:3: (otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) ) )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==AS) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // InternalOpenCypherParser.g:3777:4: otherlv_1= AS ( (lv_alias_2_0= ruleVariableDeclaration ) )
                    {
                    otherlv_1=(Token)match(input,AS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getReturnItemAccess().getASKeyword_1_0());
                      			
                    }
                    // InternalOpenCypherParser.g:3781:4: ( (lv_alias_2_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:3782:5: (lv_alias_2_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:3782:5: (lv_alias_2_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:3783:6: lv_alias_2_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getReturnItemRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnItem"


    // $ANTLR start "entryRuleOrder"
    // InternalOpenCypherParser.g:3805:1: entryRuleOrder returns [EObject current=null] : iv_ruleOrder= ruleOrder EOF ;
    public final EObject entryRuleOrder() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrder = null;


        try {
            // InternalOpenCypherParser.g:3805:46: (iv_ruleOrder= ruleOrder EOF )
            // InternalOpenCypherParser.g:3806:2: iv_ruleOrder= ruleOrder EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrder=ruleOrder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrder; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrder"


    // $ANTLR start "ruleOrder"
    // InternalOpenCypherParser.g:3812:1: ruleOrder returns [EObject current=null] : (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* ) ;
    public final EObject ruleOrder() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_orderBy_2_0 = null;

        EObject lv_orderBy_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3818:2: ( (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* ) )
            // InternalOpenCypherParser.g:3819:2: (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* )
            {
            // InternalOpenCypherParser.g:3819:2: (otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )* )
            // InternalOpenCypherParser.g:3820:3: otherlv_0= ORDER otherlv_1= BY ( (lv_orderBy_2_0= ruleSortItem ) ) (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )*
            {
            otherlv_0=(Token)match(input,ORDER,FOLLOW_61); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOrderAccess().getORDERKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,BY,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOrderAccess().getBYKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:3828:3: ( (lv_orderBy_2_0= ruleSortItem ) )
            // InternalOpenCypherParser.g:3829:4: (lv_orderBy_2_0= ruleSortItem )
            {
            // InternalOpenCypherParser.g:3829:4: (lv_orderBy_2_0= ruleSortItem )
            // InternalOpenCypherParser.g:3830:5: lv_orderBy_2_0= ruleSortItem
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_orderBy_2_0=ruleSortItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderRule());
              					}
              					add(
              						current,
              						"orderBy",
              						lv_orderBy_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SortItem");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3847:3: (otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) ) )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==Comma) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // InternalOpenCypherParser.g:3848:4: otherlv_3= Comma ( (lv_orderBy_4_0= ruleSortItem ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getOrderAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:3852:4: ( (lv_orderBy_4_0= ruleSortItem ) )
            	    // InternalOpenCypherParser.g:3853:5: (lv_orderBy_4_0= ruleSortItem )
            	    {
            	    // InternalOpenCypherParser.g:3853:5: (lv_orderBy_4_0= ruleSortItem )
            	    // InternalOpenCypherParser.g:3854:6: lv_orderBy_4_0= ruleSortItem
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_orderBy_4_0=ruleSortItem();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOrderRule());
            	      						}
            	      						add(
            	      							current,
            	      							"orderBy",
            	      							lv_orderBy_4_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.SortItem");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrder"


    // $ANTLR start "entryRuleSkip"
    // InternalOpenCypherParser.g:3876:1: entryRuleSkip returns [EObject current=null] : iv_ruleSkip= ruleSkip EOF ;
    public final EObject entryRuleSkip() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSkip = null;


        try {
            // InternalOpenCypherParser.g:3876:45: (iv_ruleSkip= ruleSkip EOF )
            // InternalOpenCypherParser.g:3877:2: iv_ruleSkip= ruleSkip EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSkipRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSkip=ruleSkip();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSkip; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSkip"


    // $ANTLR start "ruleSkip"
    // InternalOpenCypherParser.g:3883:1: ruleSkip returns [EObject current=null] : (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) ) ;
    public final EObject ruleSkip() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_skip_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3889:2: ( (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:3890:2: (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:3890:2: (otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:3891:3: otherlv_0= SKIP ( (lv_skip_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,SKIP,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSkipAccess().getSKIPKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3895:3: ( (lv_skip_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3896:4: (lv_skip_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3896:4: (lv_skip_1_0= ruleExpression )
            // InternalOpenCypherParser.g:3897:5: lv_skip_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_skip_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSkipRule());
              					}
              					set(
              						current,
              						"skip",
              						lv_skip_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSkip"


    // $ANTLR start "entryRuleLimit"
    // InternalOpenCypherParser.g:3918:1: entryRuleLimit returns [EObject current=null] : iv_ruleLimit= ruleLimit EOF ;
    public final EObject entryRuleLimit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLimit = null;


        try {
            // InternalOpenCypherParser.g:3918:46: (iv_ruleLimit= ruleLimit EOF )
            // InternalOpenCypherParser.g:3919:2: iv_ruleLimit= ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLimit=ruleLimit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLimit; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalOpenCypherParser.g:3925:1: ruleLimit returns [EObject current=null] : (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) ) ;
    public final EObject ruleLimit() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_limit_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3931:2: ( (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:3932:2: (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:3932:2: (otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:3933:3: otherlv_0= LIMIT ( (lv_limit_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,LIMIT,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getLimitAccess().getLIMITKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:3937:3: ( (lv_limit_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3938:4: (lv_limit_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3938:4: (lv_limit_1_0= ruleExpression )
            // InternalOpenCypherParser.g:3939:5: lv_limit_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_limit_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLimitRule());
              					}
              					set(
              						current,
              						"limit",
              						lv_limit_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSortItem"
    // InternalOpenCypherParser.g:3960:1: entryRuleSortItem returns [EObject current=null] : iv_ruleSortItem= ruleSortItem EOF ;
    public final EObject entryRuleSortItem() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSortItem = null;


        try {
            // InternalOpenCypherParser.g:3960:49: (iv_ruleSortItem= ruleSortItem EOF )
            // InternalOpenCypherParser.g:3961:2: iv_ruleSortItem= ruleSortItem EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSortItemRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSortItem=ruleSortItem();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSortItem; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSortItem"


    // $ANTLR start "ruleSortItem"
    // InternalOpenCypherParser.g:3967:1: ruleSortItem returns [EObject current=null] : ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? ) ;
    public final EObject ruleSortItem() throws RecognitionException {
        EObject current = null;

        Token lv_sort_1_1=null;
        Token lv_sort_1_2=null;
        Token lv_sort_1_3=null;
        Token lv_sort_1_4=null;
        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:3973:2: ( ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? ) )
            // InternalOpenCypherParser.g:3974:2: ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? )
            {
            // InternalOpenCypherParser.g:3974:2: ( ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )? )
            // InternalOpenCypherParser.g:3975:3: ( (lv_expression_0_0= ruleExpression ) ) ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )?
            {
            // InternalOpenCypherParser.g:3975:3: ( (lv_expression_0_0= ruleExpression ) )
            // InternalOpenCypherParser.g:3976:4: (lv_expression_0_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:3976:4: (lv_expression_0_0= ruleExpression )
            // InternalOpenCypherParser.g:3977:5: lv_expression_0_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_62);
            lv_expression_0_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSortItemRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:3994:3: ( ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) ) )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=DESCENDING && LA51_0<=ASCENDING)||LA51_0==DESC||LA51_0==ASC) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // InternalOpenCypherParser.g:3995:4: ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) )
                    {
                    // InternalOpenCypherParser.g:3995:4: ( (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC ) )
                    // InternalOpenCypherParser.g:3996:5: (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC )
                    {
                    // InternalOpenCypherParser.g:3996:5: (lv_sort_1_1= DESCENDING | lv_sort_1_2= DESC | lv_sort_1_3= ASCENDING | lv_sort_1_4= ASC )
                    int alt50=4;
                    switch ( input.LA(1) ) {
                    case DESCENDING:
                        {
                        alt50=1;
                        }
                        break;
                    case DESC:
                        {
                        alt50=2;
                        }
                        break;
                    case ASCENDING:
                        {
                        alt50=3;
                        }
                        break;
                    case ASC:
                        {
                        alt50=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 0, input);

                        throw nvae;
                    }

                    switch (alt50) {
                        case 1 :
                            // InternalOpenCypherParser.g:3997:6: lv_sort_1_1= DESCENDING
                            {
                            lv_sort_1_1=(Token)match(input,DESCENDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_1, grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:4008:6: lv_sort_1_2= DESC
                            {
                            lv_sort_1_2=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_2, grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_2, null);
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalOpenCypherParser.g:4019:6: lv_sort_1_3= ASCENDING
                            {
                            lv_sort_1_3=(Token)match(input,ASCENDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_3, grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_3, null);
                              					
                            }

                            }
                            break;
                        case 4 :
                            // InternalOpenCypherParser.g:4030:6: lv_sort_1_4= ASC
                            {
                            lv_sort_1_4=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_sort_1_4, grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getSortItemRule());
                              						}
                              						setWithLastConsumed(current, "sort", lv_sort_1_4, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSortItem"


    // $ANTLR start "entryRuleHint"
    // InternalOpenCypherParser.g:4047:1: entryRuleHint returns [EObject current=null] : iv_ruleHint= ruleHint EOF ;
    public final EObject entryRuleHint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHint = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:4049:2: (iv_ruleHint= ruleHint EOF )
            // InternalOpenCypherParser.g:4050:2: iv_ruleHint= ruleHint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHint=ruleHint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleHint"


    // $ANTLR start "ruleHint"
    // InternalOpenCypherParser.g:4059:1: ruleHint returns [EObject current=null] : ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) ) ;
    public final EObject ruleHint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_WS_2=null;
        Token otherlv_3=null;
        Token this_WS_4=null;
        Token this_WS_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token this_WS_13=null;
        Token otherlv_14=null;
        Token this_WS_15=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_21=null;
        Token this_WS_22=null;
        Token otherlv_23=null;
        Token this_WS_24=null;
        EObject lv_variable_5_0 = null;

        EObject lv_nodeLabel_6_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_9_0 = null;

        EObject lv_variables_17_0 = null;

        EObject lv_variables_19_0 = null;

        EObject lv_variable_25_0 = null;

        EObject lv_nodeLabel_26_0 = null;



        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:4066:2: ( ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) ) )
            // InternalOpenCypherParser.g:4067:2: ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) )
            {
            // InternalOpenCypherParser.g:4067:2: ( ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis ) | ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) ) | ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) ) )
            int alt53=3;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==USING) ) {
                int LA53_1 = input.LA(2);

                if ( (LA53_1==RULE_WS) ) {
                    switch ( input.LA(3) ) {
                    case SCAN:
                        {
                        alt53=3;
                        }
                        break;
                    case INDEX:
                        {
                        alt53=1;
                        }
                        break;
                    case JOIN:
                        {
                        alt53=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // InternalOpenCypherParser.g:4068:3: ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:4068:3: ( () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis )
                    // InternalOpenCypherParser.g:4069:4: () otherlv_1= USING this_WS_2= RULE_WS otherlv_3= INDEX this_WS_4= RULE_WS ( (lv_variable_5_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_6_0= ruleNodeLabel ) ) this_WS_7= RULE_WS otherlv_8= LeftParenthesis ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) ) otherlv_10= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:4069:4: ()
                    // InternalOpenCypherParser.g:4070:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getIndexHintAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,USING,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getHintAccess().getUSINGKeyword_0_1());
                      			
                    }
                    this_WS_2=(Token)match(input,RULE_WS,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_2, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2());
                      			
                    }
                    otherlv_3=(Token)match(input,INDEX,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getHintAccess().getINDEXKeyword_0_3());
                      			
                    }
                    this_WS_4=(Token)match(input,RULE_WS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_4, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4());
                      			
                    }
                    // InternalOpenCypherParser.g:4095:4: ( (lv_variable_5_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:4096:5: (lv_variable_5_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:4096:5: (lv_variable_5_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:4097:6: lv_variable_5_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0());
                      					
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_5_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"variable",
                      							lv_variable_5_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:4114:4: ( (lv_nodeLabel_6_0= ruleNodeLabel ) )
                    // InternalOpenCypherParser.g:4115:5: (lv_nodeLabel_6_0= ruleNodeLabel )
                    {
                    // InternalOpenCypherParser.g:4115:5: (lv_nodeLabel_6_0= ruleNodeLabel )
                    // InternalOpenCypherParser.g:4116:6: lv_nodeLabel_6_0= ruleNodeLabel
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0());
                      					
                    }
                    pushFollow(FOLLOW_63);
                    lv_nodeLabel_6_0=ruleNodeLabel();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"nodeLabel",
                      							lv_nodeLabel_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    this_WS_7=(Token)match(input,RULE_WS,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_WS_7, grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7());
                      			
                    }
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8());
                      			
                    }
                    // InternalOpenCypherParser.g:4141:4: ( (lv_propertyKeyName_9_0= rulePropertyKeyName ) )
                    // InternalOpenCypherParser.g:4142:5: (lv_propertyKeyName_9_0= rulePropertyKeyName )
                    {
                    // InternalOpenCypherParser.g:4142:5: (lv_propertyKeyName_9_0= rulePropertyKeyName )
                    // InternalOpenCypherParser.g:4143:6: lv_propertyKeyName_9_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_propertyKeyName_9_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getHintRule());
                      						}
                      						set(
                      							current,
                      							"propertyKeyName",
                      							lv_propertyKeyName_9_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4166:3: ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) )
                    {
                    // InternalOpenCypherParser.g:4166:3: ( () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* ) )
                    // InternalOpenCypherParser.g:4167:4: () (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* )
                    {
                    // InternalOpenCypherParser.g:4167:4: ()
                    // InternalOpenCypherParser.g:4168:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getJoinHintAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:4177:4: (otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )* )
                    // InternalOpenCypherParser.g:4178:5: otherlv_12= USING this_WS_13= RULE_WS otherlv_14= JOIN this_WS_15= RULE_WS otherlv_16= ON ( (lv_variables_17_0= ruleVariableDeclaration ) ) (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )*
                    {
                    otherlv_12=(Token)match(input,USING,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_12, grammarAccess.getHintAccess().getUSINGKeyword_1_1_0());
                      				
                    }
                    this_WS_13=(Token)match(input,RULE_WS,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_13, grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1());
                      				
                    }
                    otherlv_14=(Token)match(input,JOIN,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_14, grammarAccess.getHintAccess().getJOINKeyword_1_1_2());
                      				
                    }
                    this_WS_15=(Token)match(input,RULE_WS,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_15, grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3());
                      				
                    }
                    otherlv_16=(Token)match(input,ON,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_16, grammarAccess.getHintAccess().getONKeyword_1_1_4());
                      				
                    }
                    // InternalOpenCypherParser.g:4198:5: ( (lv_variables_17_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:4199:6: (lv_variables_17_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:4199:6: (lv_variables_17_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:4200:7: lv_variables_17_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0());
                      						
                    }
                    pushFollow(FOLLOW_47);
                    lv_variables_17_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							add(
                      								current,
                      								"variables",
                      								lv_variables_17_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:4217:5: (otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) ) )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==Comma) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:4218:6: otherlv_18= Comma ( (lv_variables_19_0= ruleVariableDeclaration ) )
                    	    {
                    	    otherlv_18=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_18, grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0());
                    	      					
                    	    }
                    	    // InternalOpenCypherParser.g:4222:6: ( (lv_variables_19_0= ruleVariableDeclaration ) )
                    	    // InternalOpenCypherParser.g:4223:7: (lv_variables_19_0= ruleVariableDeclaration )
                    	    {
                    	    // InternalOpenCypherParser.g:4223:7: (lv_variables_19_0= ruleVariableDeclaration )
                    	    // InternalOpenCypherParser.g:4224:8: lv_variables_19_0= ruleVariableDeclaration
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_47);
                    	    lv_variables_19_0=ruleVariableDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getHintRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"variables",
                    	      									lv_variables_19_0,
                    	      									"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4245:3: ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) )
                    {
                    // InternalOpenCypherParser.g:4245:3: ( () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) ) )
                    // InternalOpenCypherParser.g:4246:4: () (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) )
                    {
                    // InternalOpenCypherParser.g:4246:4: ()
                    // InternalOpenCypherParser.g:4247:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getHintAccess().getScanHintAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:4256:4: (otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) ) )
                    // InternalOpenCypherParser.g:4257:5: otherlv_21= USING this_WS_22= RULE_WS otherlv_23= SCAN this_WS_24= RULE_WS ( (lv_variable_25_0= ruleVariableDeclaration ) ) ( (lv_nodeLabel_26_0= ruleNodeLabel ) )
                    {
                    otherlv_21=(Token)match(input,USING,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_21, grammarAccess.getHintAccess().getUSINGKeyword_2_1_0());
                      				
                    }
                    this_WS_22=(Token)match(input,RULE_WS,FOLLOW_65); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_22, grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1());
                      				
                    }
                    otherlv_23=(Token)match(input,SCAN,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_23, grammarAccess.getHintAccess().getSCANKeyword_2_1_2());
                      				
                    }
                    this_WS_24=(Token)match(input,RULE_WS,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_WS_24, grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3());
                      				
                    }
                    // InternalOpenCypherParser.g:4273:5: ( (lv_variable_25_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:4274:6: (lv_variable_25_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:4274:6: (lv_variable_25_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:4275:7: lv_variable_25_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_21);
                    lv_variable_25_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							set(
                      								current,
                      								"variable",
                      								lv_variable_25_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:4292:5: ( (lv_nodeLabel_26_0= ruleNodeLabel ) )
                    // InternalOpenCypherParser.g:4293:6: (lv_nodeLabel_26_0= ruleNodeLabel )
                    {
                    // InternalOpenCypherParser.g:4293:6: (lv_nodeLabel_26_0= ruleNodeLabel )
                    // InternalOpenCypherParser.g:4294:7: lv_nodeLabel_26_0= ruleNodeLabel
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_nodeLabel_26_0=ruleNodeLabel();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getHintRule());
                      							}
                      							set(
                      								current,
                      								"nodeLabel",
                      								lv_nodeLabel_26_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleHint"


    // $ANTLR start "entryRuleStart"
    // InternalOpenCypherParser.g:4320:1: entryRuleStart returns [EObject current=null] : iv_ruleStart= ruleStart EOF ;
    public final EObject entryRuleStart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStart = null;


        try {
            // InternalOpenCypherParser.g:4320:46: (iv_ruleStart= ruleStart EOF )
            // InternalOpenCypherParser.g:4321:2: iv_ruleStart= ruleStart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStart=ruleStart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStart"


    // $ANTLR start "ruleStart"
    // InternalOpenCypherParser.g:4327:1: ruleStart returns [EObject current=null] : (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? ) ;
    public final EObject ruleStart() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_startPoint_1_0 = null;

        EObject lv_startPoint_3_0 = null;

        EObject lv_where_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4333:2: ( (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:4334:2: (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:4334:2: (otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:4335:3: otherlv_0= START ( (lv_startPoint_1_0= ruleStartPoint ) ) (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )* ( (lv_where_4_0= ruleWhere ) )?
            {
            otherlv_0=(Token)match(input,START,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStartAccess().getSTARTKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4339:3: ( (lv_startPoint_1_0= ruleStartPoint ) )
            // InternalOpenCypherParser.g:4340:4: (lv_startPoint_1_0= ruleStartPoint )
            {
            // InternalOpenCypherParser.g:4340:4: (lv_startPoint_1_0= ruleStartPoint )
            // InternalOpenCypherParser.g:4341:5: lv_startPoint_1_0= ruleStartPoint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_66);
            lv_startPoint_1_0=ruleStartPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartRule());
              					}
              					add(
              						current,
              						"startPoint",
              						lv_startPoint_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.StartPoint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:4358:3: (otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) ) )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==Comma) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // InternalOpenCypherParser.g:4359:4: otherlv_2= Comma ( (lv_startPoint_3_0= ruleStartPoint ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getStartAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:4363:4: ( (lv_startPoint_3_0= ruleStartPoint ) )
            	    // InternalOpenCypherParser.g:4364:5: (lv_startPoint_3_0= ruleStartPoint )
            	    {
            	    // InternalOpenCypherParser.g:4364:5: (lv_startPoint_3_0= ruleStartPoint )
            	    // InternalOpenCypherParser.g:4365:6: lv_startPoint_3_0= ruleStartPoint
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_66);
            	    lv_startPoint_3_0=ruleStartPoint();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getStartRule());
            	      						}
            	      						add(
            	      							current,
            	      							"startPoint",
            	      							lv_startPoint_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.StartPoint");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            // InternalOpenCypherParser.g:4383:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==WHERE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalOpenCypherParser.g:4384:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:4384:4: (lv_where_4_0= ruleWhere )
                    // InternalOpenCypherParser.g:4385:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getStartRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStart"


    // $ANTLR start "entryRuleStartPoint"
    // InternalOpenCypherParser.g:4406:1: entryRuleStartPoint returns [EObject current=null] : iv_ruleStartPoint= ruleStartPoint EOF ;
    public final EObject entryRuleStartPoint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStartPoint = null;


        try {
            // InternalOpenCypherParser.g:4406:51: (iv_ruleStartPoint= ruleStartPoint EOF )
            // InternalOpenCypherParser.g:4407:2: iv_ruleStartPoint= ruleStartPoint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartPointRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStartPoint=ruleStartPoint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStartPoint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStartPoint"


    // $ANTLR start "ruleStartPoint"
    // InternalOpenCypherParser.g:4413:1: ruleStartPoint returns [EObject current=null] : ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) ) ;
    public final EObject ruleStartPoint() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_variable_0_0 = null;

        EObject lv_lookup_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4419:2: ( ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) ) )
            // InternalOpenCypherParser.g:4420:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) )
            {
            // InternalOpenCypherParser.g:4420:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) ) )
            // InternalOpenCypherParser.g:4421:3: ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_lookup_2_0= ruleLookup ) )
            {
            // InternalOpenCypherParser.g:4421:3: ( (lv_variable_0_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:4422:4: (lv_variable_0_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:4422:4: (lv_variable_0_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:4423:5: lv_variable_0_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_variable_0_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartPointRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_67); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStartPointAccess().getEqualsSignKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:4444:3: ( (lv_lookup_2_0= ruleLookup ) )
            // InternalOpenCypherParser.g:4445:4: (lv_lookup_2_0= ruleLookup )
            {
            // InternalOpenCypherParser.g:4445:4: (lv_lookup_2_0= ruleLookup )
            // InternalOpenCypherParser.g:4446:5: lv_lookup_2_0= ruleLookup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_lookup_2_0=ruleLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartPointRule());
              					}
              					set(
              						current,
              						"lookup",
              						lv_lookup_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Lookup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStartPoint"


    // $ANTLR start "entryRuleLookup"
    // InternalOpenCypherParser.g:4467:1: entryRuleLookup returns [EObject current=null] : iv_ruleLookup= ruleLookup EOF ;
    public final EObject entryRuleLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLookup = null;


        try {
            // InternalOpenCypherParser.g:4467:47: (iv_ruleLookup= ruleLookup EOF )
            // InternalOpenCypherParser.g:4468:2: iv_ruleLookup= ruleLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLookup=ruleLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLookup"


    // $ANTLR start "ruleLookup"
    // InternalOpenCypherParser.g:4474:1: ruleLookup returns [EObject current=null] : (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup ) ;
    public final EObject ruleLookup() throws RecognitionException {
        EObject current = null;

        EObject this_NodeLookup_0 = null;

        EObject this_RelationshipLookup_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4480:2: ( (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup ) )
            // InternalOpenCypherParser.g:4481:2: (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup )
            {
            // InternalOpenCypherParser.g:4481:2: (this_NodeLookup_0= ruleNodeLookup | this_RelationshipLookup_1= ruleRelationshipLookup )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==NODE) ) {
                alt56=1;
            }
            else if ( (LA56_0==RELATIONSHIP||LA56_0==REL) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // InternalOpenCypherParser.g:4482:3: this_NodeLookup_0= ruleNodeLookup
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NodeLookup_0=ruleNodeLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NodeLookup_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4494:3: this_RelationshipLookup_1= ruleRelationshipLookup
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RelationshipLookup_1=ruleRelationshipLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RelationshipLookup_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLookup"


    // $ANTLR start "entryRuleNodeLookup"
    // InternalOpenCypherParser.g:4509:1: entryRuleNodeLookup returns [EObject current=null] : iv_ruleNodeLookup= ruleNodeLookup EOF ;
    public final EObject entryRuleNodeLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLookup = null;


        try {
            // InternalOpenCypherParser.g:4509:51: (iv_ruleNodeLookup= ruleNodeLookup EOF )
            // InternalOpenCypherParser.g:4510:2: iv_ruleNodeLookup= ruleNodeLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLookup=ruleNodeLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLookup"


    // $ANTLR start "ruleNodeLookup"
    // InternalOpenCypherParser.g:4516:1: ruleNodeLookup returns [EObject current=null] : (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) ) ;
    public final EObject ruleNodeLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_IdentifiedIndexLookup_1 = null;

        EObject this_IndexQuery_2 = null;

        EObject this_IdLookup_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4522:2: ( (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) ) )
            // InternalOpenCypherParser.g:4523:2: (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) )
            {
            // InternalOpenCypherParser.g:4523:2: (otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup ) )
            // InternalOpenCypherParser.g:4524:3: otherlv_0= NODE (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )
            {
            otherlv_0=(Token)match(input,NODE,FOLLOW_68); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodeLookupAccess().getNODEKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4528:3: (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )
            int alt57=3;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // InternalOpenCypherParser.g:4529:4: this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifiedIndexLookup_1=ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdentifiedIndexLookup_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4541:4: this_IndexQuery_2= ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IndexQuery_2=ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IndexQuery_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4553:4: this_IdLookup_3= ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdLookup_3=ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdLookup_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLookup"


    // $ANTLR start "entryRuleRelationshipLookup"
    // InternalOpenCypherParser.g:4569:1: entryRuleRelationshipLookup returns [EObject current=null] : iv_ruleRelationshipLookup= ruleRelationshipLookup EOF ;
    public final EObject entryRuleRelationshipLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipLookup = null;


        try {
            // InternalOpenCypherParser.g:4569:59: (iv_ruleRelationshipLookup= ruleRelationshipLookup EOF )
            // InternalOpenCypherParser.g:4570:2: iv_ruleRelationshipLookup= ruleRelationshipLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipLookup=ruleRelationshipLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipLookup"


    // $ANTLR start "ruleRelationshipLookup"
    // InternalOpenCypherParser.g:4576:1: ruleRelationshipLookup returns [EObject current=null] : ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) ) ;
    public final EObject ruleRelationshipLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_IdentifiedIndexLookup_2 = null;

        EObject this_IndexQuery_3 = null;

        EObject this_IdLookup_4 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4582:2: ( ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) ) )
            // InternalOpenCypherParser.g:4583:2: ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) )
            {
            // InternalOpenCypherParser.g:4583:2: ( (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup ) )
            // InternalOpenCypherParser.g:4584:3: (otherlv_0= RELATIONSHIP | otherlv_1= REL ) (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )
            {
            // InternalOpenCypherParser.g:4584:3: (otherlv_0= RELATIONSHIP | otherlv_1= REL )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==RELATIONSHIP) ) {
                alt58=1;
            }
            else if ( (LA58_0==REL) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    // InternalOpenCypherParser.g:4585:4: otherlv_0= RELATIONSHIP
                    {
                    otherlv_0=(Token)match(input,RELATIONSHIP,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4590:4: otherlv_1= REL
                    {
                    otherlv_1=(Token)match(input,REL,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalOpenCypherParser.g:4595:3: (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )
            int alt59=3;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // InternalOpenCypherParser.g:4596:4: this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifiedIndexLookup_2=ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdentifiedIndexLookup_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4608:4: this_IndexQuery_3= ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IndexQuery_3=ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IndexQuery_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4620:4: this_IdLookup_4= ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_IdLookup_4=ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IdLookup_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipLookup"


    // $ANTLR start "entryRuleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:4636:1: entryRuleIdentifiedIndexLookup returns [EObject current=null] : iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF ;
    public final EObject entryRuleIdentifiedIndexLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentifiedIndexLookup = null;


        try {
            // InternalOpenCypherParser.g:4636:62: (iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF )
            // InternalOpenCypherParser.g:4637:2: iv_ruleIdentifiedIndexLookup= ruleIdentifiedIndexLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifiedIndexLookup=ruleIdentifiedIndexLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifiedIndexLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdentifiedIndexLookup"


    // $ANTLR start "ruleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:4643:1: ruleIdentifiedIndexLookup returns [EObject current=null] : (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis ) ;
    public final EObject ruleIdentifiedIndexLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token lv_value_5_0=null;
        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_indexName_1_0 = null;

        AntlrDatatypeRuleToken lv_key_3_0 = null;

        EObject lv_legacyParameter_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4649:2: ( (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis ) )
            // InternalOpenCypherParser.g:4650:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis )
            {
            // InternalOpenCypherParser.g:4650:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis )
            // InternalOpenCypherParser.g:4651:3: otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) ) otherlv_4= EqualsSign ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) ) otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4655:3: ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:4656:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:4656:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:4657:5: lv_indexName_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_indexName_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
              					}
              					set(
              						current,
              						"indexName",
              						lv_indexName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:4678:3: ( (lv_key_3_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:4679:4: (lv_key_3_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:4679:4: (lv_key_3_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:4680:5: lv_key_3_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_key_3_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:4701:3: ( ( (lv_value_5_0= RULE_STRING_LITERAL ) ) | ( (lv_legacyParameter_6_0= ruleLegacyParameter ) ) )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==RULE_STRING_LITERAL) ) {
                alt60=1;
            }
            else if ( (LA60_0==LeftCurlyBracket) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // InternalOpenCypherParser.g:4702:4: ( (lv_value_5_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalOpenCypherParser.g:4702:4: ( (lv_value_5_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:4703:5: (lv_value_5_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:4703:5: (lv_value_5_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:4704:6: lv_value_5_0= RULE_STRING_LITERAL
                    {
                    lv_value_5_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_5_0, grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifiedIndexLookupRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_5_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4721:4: ( (lv_legacyParameter_6_0= ruleLegacyParameter ) )
                    {
                    // InternalOpenCypherParser.g:4721:4: ( (lv_legacyParameter_6_0= ruleLegacyParameter ) )
                    // InternalOpenCypherParser.g:4722:5: (lv_legacyParameter_6_0= ruleLegacyParameter )
                    {
                    // InternalOpenCypherParser.g:4722:5: (lv_legacyParameter_6_0= ruleLegacyParameter )
                    // InternalOpenCypherParser.g:4723:6: lv_legacyParameter_6_0= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_legacyParameter_6_0=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdentifiedIndexLookupRule());
                      						}
                      						set(
                      							current,
                      							"legacyParameter",
                      							lv_legacyParameter_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.LegacyParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdentifiedIndexLookup"


    // $ANTLR start "entryRuleIndexQuery"
    // InternalOpenCypherParser.g:4749:1: entryRuleIndexQuery returns [EObject current=null] : iv_ruleIndexQuery= ruleIndexQuery EOF ;
    public final EObject entryRuleIndexQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIndexQuery = null;


        try {
            // InternalOpenCypherParser.g:4749:51: (iv_ruleIndexQuery= ruleIndexQuery EOF )
            // InternalOpenCypherParser.g:4750:2: iv_ruleIndexQuery= ruleIndexQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIndexQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIndexQuery=ruleIndexQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIndexQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndexQuery"


    // $ANTLR start "ruleIndexQuery"
    // InternalOpenCypherParser.g:4756:1: ruleIndexQuery returns [EObject current=null] : (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleIndexQuery() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token lv_query_3_0=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_indexName_1_0 = null;

        EObject lv_parameter_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4762:2: ( (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:4763:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:4763:2: (otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:4764:3: otherlv_0= Colon ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) ) otherlv_2= LeftParenthesis ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIndexQueryAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4768:3: ( (lv_indexName_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:4769:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:4769:4: (lv_indexName_1_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:4770:5: lv_indexName_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_indexName_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexQueryRule());
              					}
              					set(
              						current,
              						"indexName",
              						lv_indexName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:4791:3: ( ( (lv_query_3_0= RULE_STRING_LITERAL ) ) | ( (lv_parameter_4_0= ruleParameter ) ) )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==RULE_STRING_LITERAL) ) {
                alt61=1;
            }
            else if ( (LA61_0==DollarSign) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // InternalOpenCypherParser.g:4792:4: ( (lv_query_3_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalOpenCypherParser.g:4792:4: ( (lv_query_3_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:4793:5: (lv_query_3_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:4793:5: (lv_query_3_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:4794:6: lv_query_3_0= RULE_STRING_LITERAL
                    {
                    lv_query_3_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_query_3_0, grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIndexQueryRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"query",
                      							lv_query_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4811:4: ( (lv_parameter_4_0= ruleParameter ) )
                    {
                    // InternalOpenCypherParser.g:4811:4: ( (lv_parameter_4_0= ruleParameter ) )
                    // InternalOpenCypherParser.g:4812:5: (lv_parameter_4_0= ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4812:5: (lv_parameter_4_0= ruleParameter )
                    // InternalOpenCypherParser.g:4813:6: lv_parameter_4_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_parameter_4_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIndexQueryRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_4_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndexQuery"


    // $ANTLR start "entryRuleIdLookup"
    // InternalOpenCypherParser.g:4839:1: entryRuleIdLookup returns [EObject current=null] : iv_ruleIdLookup= ruleIdLookup EOF ;
    public final EObject entryRuleIdLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdLookup = null;


        try {
            // InternalOpenCypherParser.g:4839:49: (iv_ruleIdLookup= ruleIdLookup EOF )
            // InternalOpenCypherParser.g:4840:2: iv_ruleIdLookup= ruleIdLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdLookup=ruleIdLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdLookup"


    // $ANTLR start "ruleIdLookup"
    // InternalOpenCypherParser.g:4846:1: ruleIdLookup returns [EObject current=null] : (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleIdLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_wildcard_3_0=null;
        Token otherlv_4=null;
        EObject lv_ids_1_0 = null;

        EObject lv_legacyParameter_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4852:2: ( (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis ) )
            // InternalOpenCypherParser.g:4853:2: (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis )
            {
            // InternalOpenCypherParser.g:4853:2: (otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis )
            // InternalOpenCypherParser.g:4854:3: otherlv_0= LeftParenthesis ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) ) otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:4858:3: ( ( (lv_ids_1_0= ruleLiteralIds ) ) | ( (lv_legacyParameter_2_0= ruleParameter ) ) | ( (lv_wildcard_3_0= Asterisk ) ) )
            int alt62=3;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt62=1;
                }
                break;
            case DollarSign:
                {
                alt62=2;
                }
                break;
            case Asterisk:
                {
                alt62=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }

            switch (alt62) {
                case 1 :
                    // InternalOpenCypherParser.g:4859:4: ( (lv_ids_1_0= ruleLiteralIds ) )
                    {
                    // InternalOpenCypherParser.g:4859:4: ( (lv_ids_1_0= ruleLiteralIds ) )
                    // InternalOpenCypherParser.g:4860:5: (lv_ids_1_0= ruleLiteralIds )
                    {
                    // InternalOpenCypherParser.g:4860:5: (lv_ids_1_0= ruleLiteralIds )
                    // InternalOpenCypherParser.g:4861:6: lv_ids_1_0= ruleLiteralIds
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_ids_1_0=ruleLiteralIds();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdLookupRule());
                      						}
                      						set(
                      							current,
                      							"ids",
                      							lv_ids_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.LiteralIds");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4879:4: ( (lv_legacyParameter_2_0= ruleParameter ) )
                    {
                    // InternalOpenCypherParser.g:4879:4: ( (lv_legacyParameter_2_0= ruleParameter ) )
                    // InternalOpenCypherParser.g:4880:5: (lv_legacyParameter_2_0= ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4880:5: (lv_legacyParameter_2_0= ruleParameter )
                    // InternalOpenCypherParser.g:4881:6: lv_legacyParameter_2_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_legacyParameter_2_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIdLookupRule());
                      						}
                      						set(
                      							current,
                      							"legacyParameter",
                      							lv_legacyParameter_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4899:4: ( (lv_wildcard_3_0= Asterisk ) )
                    {
                    // InternalOpenCypherParser.g:4899:4: ( (lv_wildcard_3_0= Asterisk ) )
                    // InternalOpenCypherParser.g:4900:5: (lv_wildcard_3_0= Asterisk )
                    {
                    // InternalOpenCypherParser.g:4900:5: (lv_wildcard_3_0= Asterisk )
                    // InternalOpenCypherParser.g:4901:6: lv_wildcard_3_0= Asterisk
                    {
                    lv_wildcard_3_0=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_wildcard_3_0, grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdLookupRule());
                      						}
                      						setWithLastConsumed(current, "wildcard", lv_wildcard_3_0, "*");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdLookup"


    // $ANTLR start "entryRuleLiteralIds"
    // InternalOpenCypherParser.g:4922:1: entryRuleLiteralIds returns [EObject current=null] : iv_ruleLiteralIds= ruleLiteralIds EOF ;
    public final EObject entryRuleLiteralIds() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralIds = null;


        try {
            // InternalOpenCypherParser.g:4922:51: (iv_ruleLiteralIds= ruleLiteralIds EOF )
            // InternalOpenCypherParser.g:4923:2: iv_ruleLiteralIds= ruleLiteralIds EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralIdsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralIds=ruleLiteralIds();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralIds; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteralIds"


    // $ANTLR start "ruleLiteralIds"
    // InternalOpenCypherParser.g:4929:1: ruleLiteralIds returns [EObject current=null] : ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* ) ;
    public final EObject ruleLiteralIds() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_ids_0_0 = null;

        EObject lv_ids_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4935:2: ( ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* ) )
            // InternalOpenCypherParser.g:4936:2: ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* )
            {
            // InternalOpenCypherParser.g:4936:2: ( ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )* )
            // InternalOpenCypherParser.g:4937:3: ( (lv_ids_0_0= ruleDecimalInteger ) ) (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )*
            {
            // InternalOpenCypherParser.g:4937:3: ( (lv_ids_0_0= ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:4938:4: (lv_ids_0_0= ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:4938:4: (lv_ids_0_0= ruleDecimalInteger )
            // InternalOpenCypherParser.g:4939:5: lv_ids_0_0= ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_ids_0_0=ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLiteralIdsRule());
              					}
              					add(
              						current,
              						"ids",
              						lv_ids_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.DecimalInteger");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:4956:3: (otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) ) )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==Comma) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // InternalOpenCypherParser.g:4957:4: otherlv_1= Comma ( (lv_ids_2_0= ruleDecimalInteger ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_72); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:4961:4: ( (lv_ids_2_0= ruleDecimalInteger ) )
            	    // InternalOpenCypherParser.g:4962:5: (lv_ids_2_0= ruleDecimalInteger )
            	    {
            	    // InternalOpenCypherParser.g:4962:5: (lv_ids_2_0= ruleDecimalInteger )
            	    // InternalOpenCypherParser.g:4963:6: lv_ids_2_0= ruleDecimalInteger
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_ids_2_0=ruleDecimalInteger();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLiteralIdsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"ids",
            	      							lv_ids_2_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.DecimalInteger");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteralIds"


    // $ANTLR start "entryRuleWhere"
    // InternalOpenCypherParser.g:4985:1: entryRuleWhere returns [EObject current=null] : iv_ruleWhere= ruleWhere EOF ;
    public final EObject entryRuleWhere() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhere = null;


        try {
            // InternalOpenCypherParser.g:4985:46: (iv_ruleWhere= ruleWhere EOF )
            // InternalOpenCypherParser.g:4986:2: iv_ruleWhere= ruleWhere EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhereRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhere=ruleWhere();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhere; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWhere"


    // $ANTLR start "ruleWhere"
    // InternalOpenCypherParser.g:4992:1: ruleWhere returns [EObject current=null] : (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) ) ;
    public final EObject ruleWhere() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:4998:2: ( (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:4999:2: (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:4999:2: (otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:5000:3: otherlv_0= WHERE ( (lv_expression_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,WHERE,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWHEREKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:5004:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:5005:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:5005:4: (lv_expression_1_0= ruleExpression )
            // InternalOpenCypherParser.g:5006:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhereRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWhere"


    // $ANTLR start "entryRulePattern"
    // InternalOpenCypherParser.g:5027:1: entryRulePattern returns [EObject current=null] : iv_rulePattern= rulePattern EOF ;
    public final EObject entryRulePattern() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePattern = null;


        try {
            // InternalOpenCypherParser.g:5027:48: (iv_rulePattern= rulePattern EOF )
            // InternalOpenCypherParser.g:5028:2: iv_rulePattern= rulePattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePattern=rulePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePattern"


    // $ANTLR start "rulePattern"
    // InternalOpenCypherParser.g:5034:1: rulePattern returns [EObject current=null] : ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* ) ;
    public final EObject rulePattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_patterns_0_0 = null;

        EObject lv_patterns_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5040:2: ( ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* ) )
            // InternalOpenCypherParser.g:5041:2: ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* )
            {
            // InternalOpenCypherParser.g:5041:2: ( ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )* )
            // InternalOpenCypherParser.g:5042:3: ( (lv_patterns_0_0= rulePatternPart ) ) (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )*
            {
            // InternalOpenCypherParser.g:5042:3: ( (lv_patterns_0_0= rulePatternPart ) )
            // InternalOpenCypherParser.g:5043:4: (lv_patterns_0_0= rulePatternPart )
            {
            // InternalOpenCypherParser.g:5043:4: (lv_patterns_0_0= rulePatternPart )
            // InternalOpenCypherParser.g:5044:5: lv_patterns_0_0= rulePatternPart
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_47);
            lv_patterns_0_0=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternRule());
              					}
              					add(
              						current,
              						"patterns",
              						lv_patterns_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PatternPart");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5061:3: (otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) ) )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==Comma) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5062:4: otherlv_1= Comma ( (lv_patterns_2_0= rulePatternPart ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_42); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:5066:4: ( (lv_patterns_2_0= rulePatternPart ) )
            	    // InternalOpenCypherParser.g:5067:5: (lv_patterns_2_0= rulePatternPart )
            	    {
            	    // InternalOpenCypherParser.g:5067:5: (lv_patterns_2_0= rulePatternPart )
            	    // InternalOpenCypherParser.g:5068:6: lv_patterns_2_0= rulePatternPart
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_47);
            	    lv_patterns_2_0=rulePatternPart();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getPatternRule());
            	      						}
            	      						add(
            	      							current,
            	      							"patterns",
            	      							lv_patterns_2_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternPart");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePattern"


    // $ANTLR start "entryRulePatternPart"
    // InternalOpenCypherParser.g:5090:1: entryRulePatternPart returns [EObject current=null] : iv_rulePatternPart= rulePatternPart EOF ;
    public final EObject entryRulePatternPart() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternPart = null;


        try {
            // InternalOpenCypherParser.g:5090:52: (iv_rulePatternPart= rulePatternPart EOF )
            // InternalOpenCypherParser.g:5091:2: iv_rulePatternPart= rulePatternPart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternPart=rulePatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternPart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternPart"


    // $ANTLR start "rulePatternPart"
    // InternalOpenCypherParser.g:5097:1: rulePatternPart returns [EObject current=null] : ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart ) ;
    public final EObject rulePatternPart() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_var_0_0 = null;

        EObject lv_part_2_0 = null;

        EObject this_AnonymousPatternPart_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5103:2: ( ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart ) )
            // InternalOpenCypherParser.g:5104:2: ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart )
            {
            // InternalOpenCypherParser.g:5104:2: ( ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) ) | this_AnonymousPatternPart_3= ruleAnonymousPatternPart )
            int alt65=2;
            switch ( input.LA(1) ) {
            case FIELDTERMINATOR:
            case RELATIONSHIP:
            case CONSTRAINT:
            case DESCENDING:
            case ASCENDING:
            case CONTAINS:
            case DISTINCT:
            case OPTIONAL:
            case PERIODIC:
            case EXPLAIN:
            case EXTRACT:
            case FOREACH:
            case HEADERS:
            case PROFILE:
            case ASSERT:
            case COMMIT:
            case CREATE:
            case CYPHER:
            case DELETE:
            case DETACH:
            case EXISTS:
            case FILTER:
            case REDUCE:
            case REMOVE:
            case RETURN:
            case SINGLE:
            case STARTS:
            case UNIQUE:
            case UNWIND:
            case COUNT:
            case FALSE:
            case INDEX:
            case LIMIT:
            case MATCH:
            case MERGE:
            case ORDER:
            case START:
            case UNION:
            case USING:
            case WHERE:
            case CASE:
            case DESC:
            case DROP:
            case ELSE:
            case ENDS:
            case FROM:
            case JOIN:
            case LOAD:
            case NODE:
            case NONE:
            case NULL:
            case SCAN:
            case SKIP:
            case THEN:
            case TRUE:
            case WHEN:
            case WITH:
            case ALL:
            case AND:
            case ANY:
            case ASC:
            case CSV:
            case END:
            case NOT:
            case REL:
            case SET:
            case XOR:
            case AS:
            case BY:
            case IN:
            case IS:
            case ON:
            case OR:
            case RULE_ID:
                {
                alt65=1;
                }
                break;
            case SHORTESTPATH:
                {
                int LA65_2 = input.LA(2);

                if ( (LA65_2==EqualsSign) ) {
                    alt65=1;
                }
                else if ( (LA65_2==LeftParenthesis) ) {
                    alt65=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 2, input);

                    throw nvae;
                }
                }
                break;
            case ALLSHORTESTPATHS:
                {
                int LA65_3 = input.LA(2);

                if ( (LA65_3==LeftParenthesis) ) {
                    alt65=2;
                }
                else if ( (LA65_3==EqualsSign) ) {
                    alt65=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 3, input);

                    throw nvae;
                }
                }
                break;
            case LeftParenthesis:
                {
                alt65=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // InternalOpenCypherParser.g:5105:3: ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) )
                    {
                    // InternalOpenCypherParser.g:5105:3: ( ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) ) )
                    // InternalOpenCypherParser.g:5106:4: ( (lv_var_0_0= ruleVariableDeclaration ) ) otherlv_1= EqualsSign ( (lv_part_2_0= ruleAnonymousPatternPart ) )
                    {
                    // InternalOpenCypherParser.g:5106:4: ( (lv_var_0_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:5107:5: (lv_var_0_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:5107:5: (lv_var_0_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:5108:6: lv_var_0_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_var_0_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternPartRule());
                      						}
                      						set(
                      							current,
                      							"var",
                      							lv_var_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1());
                      			
                    }
                    // InternalOpenCypherParser.g:5129:4: ( (lv_part_2_0= ruleAnonymousPatternPart ) )
                    // InternalOpenCypherParser.g:5130:5: (lv_part_2_0= ruleAnonymousPatternPart )
                    {
                    // InternalOpenCypherParser.g:5130:5: (lv_part_2_0= ruleAnonymousPatternPart )
                    // InternalOpenCypherParser.g:5131:6: lv_part_2_0= ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_part_2_0=ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternPartRule());
                      						}
                      						set(
                      							current,
                      							"part",
                      							lv_part_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.AnonymousPatternPart");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5150:3: this_AnonymousPatternPart_3= ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnonymousPatternPart_3=ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnonymousPatternPart_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternPart"


    // $ANTLR start "entryRuleAnonymousPatternPart"
    // InternalOpenCypherParser.g:5165:1: entryRuleAnonymousPatternPart returns [EObject current=null] : iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF ;
    public final EObject entryRuleAnonymousPatternPart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnonymousPatternPart = null;


        try {
            // InternalOpenCypherParser.g:5165:61: (iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF )
            // InternalOpenCypherParser.g:5166:2: iv_ruleAnonymousPatternPart= ruleAnonymousPatternPart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnonymousPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnonymousPatternPart=ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnonymousPatternPart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnonymousPatternPart"


    // $ANTLR start "ruleAnonymousPatternPart"
    // InternalOpenCypherParser.g:5172:1: ruleAnonymousPatternPart returns [EObject current=null] : (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement ) ;
    public final EObject ruleAnonymousPatternPart() throws RecognitionException {
        EObject current = null;

        EObject this_ShortestPathPattern_0 = null;

        EObject this_PatternElement_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5178:2: ( (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement ) )
            // InternalOpenCypherParser.g:5179:2: (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement )
            {
            // InternalOpenCypherParser.g:5179:2: (this_ShortestPathPattern_0= ruleShortestPathPattern | this_PatternElement_1= rulePatternElement )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ALLSHORTESTPATHS||LA66_0==SHORTESTPATH) ) {
                alt66=1;
            }
            else if ( (LA66_0==LeftParenthesis) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // InternalOpenCypherParser.g:5180:3: this_ShortestPathPattern_0= ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ShortestPathPattern_0=ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortestPathPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5192:3: this_PatternElement_1= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PatternElement_1=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PatternElement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnonymousPatternPart"


    // $ANTLR start "entryRuleShortestPathPattern"
    // InternalOpenCypherParser.g:5207:1: entryRuleShortestPathPattern returns [EObject current=null] : iv_ruleShortestPathPattern= ruleShortestPathPattern EOF ;
    public final EObject entryRuleShortestPathPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShortestPathPattern = null;


        try {
            // InternalOpenCypherParser.g:5207:60: (iv_ruleShortestPathPattern= ruleShortestPathPattern EOF )
            // InternalOpenCypherParser.g:5208:2: iv_ruleShortestPathPattern= ruleShortestPathPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShortestPathPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShortestPathPattern=ruleShortestPathPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShortestPathPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleShortestPathPattern"


    // $ANTLR start "ruleShortestPathPattern"
    // InternalOpenCypherParser.g:5214:1: ruleShortestPathPattern returns [EObject current=null] : ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) ) ;
    public final EObject ruleShortestPathPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_patternElement_3_0 = null;

        EObject lv_patternElement_8_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5220:2: ( ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) ) )
            // InternalOpenCypherParser.g:5221:2: ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) )
            {
            // InternalOpenCypherParser.g:5221:2: ( ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis ) | ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==SHORTESTPATH) ) {
                alt67=1;
            }
            else if ( (LA67_0==ALLSHORTESTPATHS) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // InternalOpenCypherParser.g:5222:3: ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:5222:3: ( () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis )
                    // InternalOpenCypherParser.g:5223:4: () otherlv_1= SHORTESTPATH otherlv_2= LeftParenthesis ( (lv_patternElement_3_0= rulePatternElement ) ) otherlv_4= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:5223:4: ()
                    // InternalOpenCypherParser.g:5224:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,SHORTESTPATH,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1());
                      			
                    }
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2());
                      			
                    }
                    // InternalOpenCypherParser.g:5241:4: ( (lv_patternElement_3_0= rulePatternElement ) )
                    // InternalOpenCypherParser.g:5242:5: (lv_patternElement_3_0= rulePatternElement )
                    {
                    // InternalOpenCypherParser.g:5242:5: (lv_patternElement_3_0= rulePatternElement )
                    // InternalOpenCypherParser.g:5243:6: lv_patternElement_3_0= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_patternElement_3_0=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getShortestPathPatternRule());
                      						}
                      						set(
                      							current,
                      							"patternElement",
                      							lv_patternElement_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5266:3: ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:5266:3: ( () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis )
                    // InternalOpenCypherParser.g:5267:4: () otherlv_6= ALLSHORTESTPATHS otherlv_7= LeftParenthesis ( (lv_patternElement_8_0= rulePatternElement ) ) otherlv_9= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:5267:4: ()
                    // InternalOpenCypherParser.g:5268:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_6=(Token)match(input,ALLSHORTESTPATHS,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1());
                      			
                    }
                    otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2());
                      			
                    }
                    // InternalOpenCypherParser.g:5285:4: ( (lv_patternElement_8_0= rulePatternElement ) )
                    // InternalOpenCypherParser.g:5286:5: (lv_patternElement_8_0= rulePatternElement )
                    {
                    // InternalOpenCypherParser.g:5286:5: (lv_patternElement_8_0= rulePatternElement )
                    // InternalOpenCypherParser.g:5287:6: lv_patternElement_8_0= rulePatternElement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_patternElement_8_0=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getShortestPathPatternRule());
                      						}
                      						set(
                      							current,
                      							"patternElement",
                      							lv_patternElement_8_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleShortestPathPattern"


    // $ANTLR start "entryRulePatternElement"
    // InternalOpenCypherParser.g:5313:1: entryRulePatternElement returns [EObject current=null] : iv_rulePatternElement= rulePatternElement EOF ;
    public final EObject entryRulePatternElement() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternElement = null;


        try {
            // InternalOpenCypherParser.g:5313:55: (iv_rulePatternElement= rulePatternElement EOF )
            // InternalOpenCypherParser.g:5314:2: iv_rulePatternElement= rulePatternElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternElement=rulePatternElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternElement"


    // $ANTLR start "rulePatternElement"
    // InternalOpenCypherParser.g:5320:1: rulePatternElement returns [EObject current=null] : ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) ) ;
    public final EObject rulePatternElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_nodepattern_0_0 = null;

        EObject lv_chain_1_0 = null;

        EObject this_PatternElement_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5326:2: ( ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) ) )
            // InternalOpenCypherParser.g:5327:2: ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) )
            {
            // InternalOpenCypherParser.g:5327:2: ( ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* ) | (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LeftParenthesis) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==LeftParenthesis) ) {
                    alt69=2;
                }
                else if ( ((LA69_1>=ALLSHORTESTPATHS && LA69_1<=WHERE)||(LA69_1>=CASE && LA69_1<=XOR)||(LA69_1>=AS && LA69_1<=OR)||LA69_1==DollarSign||LA69_1==RightParenthesis||LA69_1==Colon||LA69_1==LeftCurlyBracket||LA69_1==RULE_ID) ) {
                    alt69=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // InternalOpenCypherParser.g:5328:3: ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* )
                    {
                    // InternalOpenCypherParser.g:5328:3: ( ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )* )
                    // InternalOpenCypherParser.g:5329:4: ( (lv_nodepattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )*
                    {
                    // InternalOpenCypherParser.g:5329:4: ( (lv_nodepattern_0_0= ruleNodePattern ) )
                    // InternalOpenCypherParser.g:5330:5: (lv_nodepattern_0_0= ruleNodePattern )
                    {
                    // InternalOpenCypherParser.g:5330:5: (lv_nodepattern_0_0= ruleNodePattern )
                    // InternalOpenCypherParser.g:5331:6: lv_nodepattern_0_0= ruleNodePattern
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_73);
                    lv_nodepattern_0_0=ruleNodePattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternElementRule());
                      						}
                      						set(
                      							current,
                      							"nodepattern",
                      							lv_nodepattern_0_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.NodePattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:5348:4: ( (lv_chain_1_0= rulePatternElementChain ) )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==HyphenMinus||LA68_0==LessThanSign) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:5349:5: (lv_chain_1_0= rulePatternElementChain )
                    	    {
                    	    // InternalOpenCypherParser.g:5349:5: (lv_chain_1_0= rulePatternElementChain )
                    	    // InternalOpenCypherParser.g:5350:6: lv_chain_1_0= rulePatternElementChain
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_73);
                    	    lv_chain_1_0=rulePatternElementChain();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getPatternElementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"chain",
                    	      							lv_chain_1_0,
                    	      							"org.slizaa.neo4j.opencypher.OpenCypher.PatternElementChain");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5369:3: (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:5369:3: (otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis )
                    // InternalOpenCypherParser.g:5370:4: otherlv_2= LeftParenthesis this_PatternElement_3= rulePatternElement otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_23);
                    this_PatternElement_3=rulePatternElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PatternElement_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternElement"


    // $ANTLR start "entryRuleNodePattern"
    // InternalOpenCypherParser.g:5394:1: entryRuleNodePattern returns [EObject current=null] : iv_ruleNodePattern= ruleNodePattern EOF ;
    public final EObject entryRuleNodePattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodePattern = null;


        try {
            // InternalOpenCypherParser.g:5394:52: (iv_ruleNodePattern= ruleNodePattern EOF )
            // InternalOpenCypherParser.g:5395:2: iv_ruleNodePattern= ruleNodePattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodePatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodePattern=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodePattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodePattern"


    // $ANTLR start "ruleNodePattern"
    // InternalOpenCypherParser.g:5401:1: ruleNodePattern returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleNodePattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject lv_variable_2_0 = null;

        EObject lv_nodeLabels_3_0 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5407:2: ( ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:5408:2: ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:5408:2: ( () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:5409:3: () otherlv_1= LeftParenthesis ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_nodeLabels_3_0= ruleNodeLabels ) )? ( (lv_properties_4_0= ruleProperties ) )? otherlv_5= RightParenthesis
            {
            // InternalOpenCypherParser.g:5409:3: ()
            // InternalOpenCypherParser.g:5410:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNodePatternAccess().getNodePatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:5423:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( ((LA70_0>=ALLSHORTESTPATHS && LA70_0<=WHERE)||(LA70_0>=CASE && LA70_0<=XOR)||(LA70_0>=AS && LA70_0<=OR)||LA70_0==RULE_ID) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalOpenCypherParser.g:5424:4: (lv_variable_2_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:5424:4: (lv_variable_2_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:5425:5: lv_variable_2_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_75);
                    lv_variable_2_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"variable",
                      						lv_variable_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5442:3: ( (lv_nodeLabels_3_0= ruleNodeLabels ) )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==Colon) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // InternalOpenCypherParser.g:5443:4: (lv_nodeLabels_3_0= ruleNodeLabels )
                    {
                    // InternalOpenCypherParser.g:5443:4: (lv_nodeLabels_3_0= ruleNodeLabels )
                    // InternalOpenCypherParser.g:5444:5: lv_nodeLabels_3_0= ruleNodeLabels
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getNodeLabelsNodeLabelsParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_76);
                    lv_nodeLabels_3_0=ruleNodeLabels();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"nodeLabels",
                      						lv_nodeLabels_3_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabels");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5461:3: ( (lv_properties_4_0= ruleProperties ) )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==DollarSign||LA72_0==LeftCurlyBracket) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalOpenCypherParser.g:5462:4: (lv_properties_4_0= ruleProperties )
                    {
                    // InternalOpenCypherParser.g:5462:4: (lv_properties_4_0= ruleProperties )
                    // InternalOpenCypherParser.g:5463:5: lv_properties_4_0= ruleProperties
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_23);
                    lv_properties_4_0=ruleProperties();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getNodePatternRule());
                      					}
                      					set(
                      						current,
                      						"properties",
                      						lv_properties_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Properties");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodePattern"


    // $ANTLR start "entryRulePatternElementChain"
    // InternalOpenCypherParser.g:5488:1: entryRulePatternElementChain returns [EObject current=null] : iv_rulePatternElementChain= rulePatternElementChain EOF ;
    public final EObject entryRulePatternElementChain() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternElementChain = null;


        try {
            // InternalOpenCypherParser.g:5488:60: (iv_rulePatternElementChain= rulePatternElementChain EOF )
            // InternalOpenCypherParser.g:5489:2: iv_rulePatternElementChain= rulePatternElementChain EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternElementChainRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternElementChain=rulePatternElementChain();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternElementChain; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternElementChain"


    // $ANTLR start "rulePatternElementChain"
    // InternalOpenCypherParser.g:5495:1: rulePatternElementChain returns [EObject current=null] : ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) ) ;
    public final EObject rulePatternElementChain() throws RecognitionException {
        EObject current = null;

        EObject lv_relationshipPattern_0_0 = null;

        EObject lv_nodePattern_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5501:2: ( ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) ) )
            // InternalOpenCypherParser.g:5502:2: ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) )
            {
            // InternalOpenCypherParser.g:5502:2: ( ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) ) )
            // InternalOpenCypherParser.g:5503:3: ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) ) ( (lv_nodePattern_1_0= ruleNodePattern ) )
            {
            // InternalOpenCypherParser.g:5503:3: ( (lv_relationshipPattern_0_0= ruleRelationshipPattern ) )
            // InternalOpenCypherParser.g:5504:4: (lv_relationshipPattern_0_0= ruleRelationshipPattern )
            {
            // InternalOpenCypherParser.g:5504:4: (lv_relationshipPattern_0_0= ruleRelationshipPattern )
            // InternalOpenCypherParser.g:5505:5: lv_relationshipPattern_0_0= ruleRelationshipPattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_relationshipPattern_0_0=ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternElementChainRule());
              					}
              					set(
              						current,
              						"relationshipPattern",
              						lv_relationshipPattern_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5522:3: ( (lv_nodePattern_1_0= ruleNodePattern ) )
            // InternalOpenCypherParser.g:5523:4: (lv_nodePattern_1_0= ruleNodePattern )
            {
            // InternalOpenCypherParser.g:5523:4: (lv_nodePattern_1_0= ruleNodePattern )
            // InternalOpenCypherParser.g:5524:5: lv_nodePattern_1_0= ruleNodePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_nodePattern_1_0=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternElementChainRule());
              					}
              					set(
              						current,
              						"nodePattern",
              						lv_nodePattern_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodePattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternElementChain"


    // $ANTLR start "entryRuleRelationshipPattern"
    // InternalOpenCypherParser.g:5545:1: entryRuleRelationshipPattern returns [EObject current=null] : iv_ruleRelationshipPattern= ruleRelationshipPattern EOF ;
    public final EObject entryRuleRelationshipPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipPattern = null;


        try {
            // InternalOpenCypherParser.g:5545:60: (iv_ruleRelationshipPattern= ruleRelationshipPattern EOF )
            // InternalOpenCypherParser.g:5546:2: iv_ruleRelationshipPattern= ruleRelationshipPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipPattern=ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipPattern"


    // $ANTLR start "ruleRelationshipPattern"
    // InternalOpenCypherParser.g:5552:1: ruleRelationshipPattern returns [EObject current=null] : ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) ) ;
    public final EObject ruleRelationshipPattern() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_incoming_1_0 = null;

        EObject lv_detail_3_0 = null;

        AntlrDatatypeRuleToken lv_outgoing_5_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5558:2: ( ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) ) )
            // InternalOpenCypherParser.g:5559:2: ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) )
            {
            // InternalOpenCypherParser.g:5559:2: ( () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? ) )
            // InternalOpenCypherParser.g:5560:3: () ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? )
            {
            // InternalOpenCypherParser.g:5560:3: ()
            // InternalOpenCypherParser.g:5561:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:5570:3: ( ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )? )
            // InternalOpenCypherParser.g:5571:4: ( (lv_incoming_1_0= ruleLeftArrowHead ) )? ruleDash ( (lv_detail_3_0= ruleRelationshipDetail ) )? ruleDash ( (lv_outgoing_5_0= ruleRightArrowHead ) )?
            {
            // InternalOpenCypherParser.g:5571:4: ( (lv_incoming_1_0= ruleLeftArrowHead ) )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==LessThanSign) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalOpenCypherParser.g:5572:5: (lv_incoming_1_0= ruleLeftArrowHead )
                    {
                    // InternalOpenCypherParser.g:5572:5: (lv_incoming_1_0= ruleLeftArrowHead )
                    // InternalOpenCypherParser.g:5573:6: lv_incoming_1_0= ruleLeftArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_29);
                    lv_incoming_1_0=ruleLeftArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"incoming",
                      							true,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.LeftArrowHead");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1());
              			
            }
            pushFollow(FOLLOW_77);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }
            // InternalOpenCypherParser.g:5600:4: ( (lv_detail_3_0= ruleRelationshipDetail ) )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LeftSquareBracket) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // InternalOpenCypherParser.g:5601:5: (lv_detail_3_0= ruleRelationshipDetail )
                    {
                    // InternalOpenCypherParser.g:5601:5: (lv_detail_3_0= ruleRelationshipDetail )
                    // InternalOpenCypherParser.g:5602:6: lv_detail_3_0= ruleRelationshipDetail
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_29);
                    lv_detail_3_0=ruleRelationshipDetail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"detail",
                      							lv_detail_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipDetail");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3());
              			
            }
            pushFollow(FOLLOW_78);
            ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }
            // InternalOpenCypherParser.g:5629:4: ( (lv_outgoing_5_0= ruleRightArrowHead ) )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==GreaterThanSign) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // InternalOpenCypherParser.g:5630:5: (lv_outgoing_5_0= ruleRightArrowHead )
                    {
                    // InternalOpenCypherParser.g:5630:5: (lv_outgoing_5_0= ruleRightArrowHead )
                    // InternalOpenCypherParser.g:5631:6: lv_outgoing_5_0= ruleRightArrowHead
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_outgoing_5_0=ruleRightArrowHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRelationshipPatternRule());
                      						}
                      						set(
                      							current,
                      							"outgoing",
                      							true,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.RightArrowHead");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipPattern"


    // $ANTLR start "entryRuleRelationshipDetail"
    // InternalOpenCypherParser.g:5653:1: entryRuleRelationshipDetail returns [EObject current=null] : iv_ruleRelationshipDetail= ruleRelationshipDetail EOF ;
    public final EObject entryRuleRelationshipDetail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipDetail = null;


        try {
            // InternalOpenCypherParser.g:5653:59: (iv_ruleRelationshipDetail= ruleRelationshipDetail EOF )
            // InternalOpenCypherParser.g:5654:2: iv_ruleRelationshipDetail= ruleRelationshipDetail EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipDetailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipDetail=ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipDetail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipDetail"


    // $ANTLR start "ruleRelationshipDetail"
    // InternalOpenCypherParser.g:5660:1: ruleRelationshipDetail returns [EObject current=null] : ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket ) ;
    public final EObject ruleRelationshipDetail() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_7=null;
        EObject lv_variable_2_0 = null;

        EObject lv_types_4_0 = null;

        EObject lv_range_5_0 = null;

        EObject lv_properties_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5666:2: ( ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket ) )
            // InternalOpenCypherParser.g:5667:2: ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket )
            {
            // InternalOpenCypherParser.g:5667:2: ( () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket )
            // InternalOpenCypherParser.g:5668:3: () otherlv_1= LeftSquareBracket ( (lv_variable_2_0= ruleVariableDeclaration ) )? ( (lv_optional_3_0= QuestionMark ) )? ( (lv_types_4_0= ruleRelationshipTypes ) )? ( (lv_range_5_0= ruleRangeLiteral ) )? ( (lv_properties_6_0= ruleProperties ) )? otherlv_7= RightSquareBracket
            {
            // InternalOpenCypherParser.g:5668:3: ()
            // InternalOpenCypherParser.g:5669:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_79); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:5682:3: ( (lv_variable_2_0= ruleVariableDeclaration ) )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=ALLSHORTESTPATHS && LA76_0<=WHERE)||(LA76_0>=CASE && LA76_0<=XOR)||(LA76_0>=AS && LA76_0<=OR)||LA76_0==RULE_ID) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalOpenCypherParser.g:5683:4: (lv_variable_2_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:5683:4: (lv_variable_2_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:5684:5: lv_variable_2_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_80);
                    lv_variable_2_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"variable",
                      						lv_variable_2_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5701:3: ( (lv_optional_3_0= QuestionMark ) )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==QuestionMark) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // InternalOpenCypherParser.g:5702:4: (lv_optional_3_0= QuestionMark )
                    {
                    // InternalOpenCypherParser.g:5702:4: (lv_optional_3_0= QuestionMark )
                    // InternalOpenCypherParser.g:5703:5: lv_optional_3_0= QuestionMark
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getRelationshipDetailRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5715:3: ( (lv_types_4_0= ruleRelationshipTypes ) )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Colon) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalOpenCypherParser.g:5716:4: (lv_types_4_0= ruleRelationshipTypes )
                    {
                    // InternalOpenCypherParser.g:5716:4: (lv_types_4_0= ruleRelationshipTypes )
                    // InternalOpenCypherParser.g:5717:5: lv_types_4_0= ruleRelationshipTypes
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getTypesRelationshipTypesParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_82);
                    lv_types_4_0=ruleRelationshipTypes();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"types",
                      						lv_types_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipTypes");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5734:3: ( (lv_range_5_0= ruleRangeLiteral ) )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Asterisk) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalOpenCypherParser.g:5735:4: (lv_range_5_0= ruleRangeLiteral )
                    {
                    // InternalOpenCypherParser.g:5735:4: (lv_range_5_0= ruleRangeLiteral )
                    // InternalOpenCypherParser.g:5736:5: lv_range_5_0= ruleRangeLiteral
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_83);
                    lv_range_5_0=ruleRangeLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"range",
                      						lv_range_5_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.RangeLiteral");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:5753:3: ( (lv_properties_6_0= ruleProperties ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==DollarSign||LA80_0==LeftCurlyBracket) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // InternalOpenCypherParser.g:5754:4: (lv_properties_6_0= ruleProperties )
                    {
                    // InternalOpenCypherParser.g:5754:4: (lv_properties_6_0= ruleProperties )
                    // InternalOpenCypherParser.g:5755:5: lv_properties_6_0= ruleProperties
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0());
                      				
                    }
                    pushFollow(FOLLOW_31);
                    lv_properties_6_0=ruleProperties();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getRelationshipDetailRule());
                      					}
                      					set(
                      						current,
                      						"properties",
                      						lv_properties_6_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Properties");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipDetail"


    // $ANTLR start "entryRuleProperties"
    // InternalOpenCypherParser.g:5780:1: entryRuleProperties returns [EObject current=null] : iv_ruleProperties= ruleProperties EOF ;
    public final EObject entryRuleProperties() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleProperties = null;


        try {
            // InternalOpenCypherParser.g:5780:51: (iv_ruleProperties= ruleProperties EOF )
            // InternalOpenCypherParser.g:5781:2: iv_ruleProperties= ruleProperties EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertiesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProperties=ruleProperties();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProperties; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProperties"


    // $ANTLR start "ruleProperties"
    // InternalOpenCypherParser.g:5787:1: ruleProperties returns [EObject current=null] : (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter ) ;
    public final EObject ruleProperties() throws RecognitionException {
        EObject current = null;

        EObject this_MapLiteral_0 = null;

        EObject this_Parameter_1 = null;

        EObject this_LegacyParameter_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5793:2: ( (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter ) )
            // InternalOpenCypherParser.g:5794:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )
            {
            // InternalOpenCypherParser.g:5794:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )
            int alt81=3;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // InternalOpenCypherParser.g:5795:3: this_MapLiteral_0= ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MapLiteral_0=ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MapLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:5807:3: this_Parameter_1= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Parameter_1=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Parameter_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:5819:3: this_LegacyParameter_2= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyParameter_2=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyParameter_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProperties"


    // $ANTLR start "entryRuleRelType"
    // InternalOpenCypherParser.g:5834:1: entryRuleRelType returns [String current=null] : iv_ruleRelType= ruleRelType EOF ;
    public final String entryRuleRelType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelType = null;


        try {
            // InternalOpenCypherParser.g:5834:47: (iv_ruleRelType= ruleRelType EOF )
            // InternalOpenCypherParser.g:5835:2: iv_ruleRelType= ruleRelType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelType=ruleRelType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelType"


    // $ANTLR start "ruleRelType"
    // InternalOpenCypherParser.g:5841:1: ruleRelType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= Colon this_RelTypeName_1= ruleRelTypeName ) ;
    public final AntlrDatatypeRuleToken ruleRelType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_RelTypeName_1 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5847:2: ( (kw= Colon this_RelTypeName_1= ruleRelTypeName ) )
            // InternalOpenCypherParser.g:5848:2: (kw= Colon this_RelTypeName_1= ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:5848:2: (kw= Colon this_RelTypeName_1= ruleRelTypeName )
            // InternalOpenCypherParser.g:5849:3: kw= Colon this_RelTypeName_1= ruleRelTypeName
            {
            kw=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getRelTypeAccess().getColonKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_RelTypeName_1=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_RelTypeName_1);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelType"


    // $ANTLR start "entryRuleRelationshipTypes"
    // InternalOpenCypherParser.g:5868:1: entryRuleRelationshipTypes returns [EObject current=null] : iv_ruleRelationshipTypes= ruleRelationshipTypes EOF ;
    public final EObject entryRuleRelationshipTypes() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipTypes = null;


        try {
            // InternalOpenCypherParser.g:5868:58: (iv_ruleRelationshipTypes= ruleRelationshipTypes EOF )
            // InternalOpenCypherParser.g:5869:2: iv_ruleRelationshipTypes= ruleRelationshipTypes EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipTypesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipTypes=ruleRelationshipTypes();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipTypes; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipTypes"


    // $ANTLR start "ruleRelationshipTypes"
    // InternalOpenCypherParser.g:5875:1: ruleRelationshipTypes returns [EObject current=null] : (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* ) ;
    public final EObject ruleRelationshipTypes() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_relTypeName_1_0 = null;

        AntlrDatatypeRuleToken lv_relTypeName_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5881:2: ( (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* ) )
            // InternalOpenCypherParser.g:5882:2: (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* )
            {
            // InternalOpenCypherParser.g:5882:2: (otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )* )
            // InternalOpenCypherParser.g:5883:3: otherlv_0= Colon ( (lv_relTypeName_1_0= ruleRelTypeName ) ) (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )*
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipTypesAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:5887:3: ( (lv_relTypeName_1_0= ruleRelTypeName ) )
            // InternalOpenCypherParser.g:5888:4: (lv_relTypeName_1_0= ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:5888:4: (lv_relTypeName_1_0= ruleRelTypeName )
            // InternalOpenCypherParser.g:5889:5: lv_relTypeName_1_0= ruleRelTypeName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_84);
            lv_relTypeName_1_0=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipTypesRule());
              					}
              					add(
              						current,
              						"relTypeName",
              						lv_relTypeName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelTypeName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5906:3: (otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) ) )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==VerticalLine) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5907:4: otherlv_2= VerticalLine (otherlv_3= Colon )? ( (lv_relTypeName_4_0= ruleRelTypeName ) )
            	    {
            	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_85); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0());
            	      			
            	    }
            	    // InternalOpenCypherParser.g:5911:4: (otherlv_3= Colon )?
            	    int alt82=2;
            	    int LA82_0 = input.LA(1);

            	    if ( (LA82_0==Colon) ) {
            	        alt82=1;
            	    }
            	    switch (alt82) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:5912:5: otherlv_3= Colon
            	            {
            	            otherlv_3=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    // InternalOpenCypherParser.g:5917:4: ( (lv_relTypeName_4_0= ruleRelTypeName ) )
            	    // InternalOpenCypherParser.g:5918:5: (lv_relTypeName_4_0= ruleRelTypeName )
            	    {
            	    // InternalOpenCypherParser.g:5918:5: (lv_relTypeName_4_0= ruleRelTypeName )
            	    // InternalOpenCypherParser.g:5919:6: lv_relTypeName_4_0= ruleRelTypeName
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_2_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_84);
            	    lv_relTypeName_4_0=ruleRelTypeName();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRelationshipTypesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"relTypeName",
            	      							lv_relTypeName_4_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.RelTypeName");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipTypes"


    // $ANTLR start "entryRuleNodeLabels"
    // InternalOpenCypherParser.g:5941:1: entryRuleNodeLabels returns [EObject current=null] : iv_ruleNodeLabels= ruleNodeLabels EOF ;
    public final EObject entryRuleNodeLabels() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLabels = null;


        try {
            // InternalOpenCypherParser.g:5941:51: (iv_ruleNodeLabels= ruleNodeLabels EOF )
            // InternalOpenCypherParser.g:5942:2: iv_ruleNodeLabels= ruleNodeLabels EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLabelsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLabels=ruleNodeLabels();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLabels; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLabels"


    // $ANTLR start "ruleNodeLabels"
    // InternalOpenCypherParser.g:5948:1: ruleNodeLabels returns [EObject current=null] : ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* ) ;
    public final EObject ruleNodeLabels() throws RecognitionException {
        EObject current = null;

        EObject lv_nodeLabels_0_0 = null;

        EObject lv_nodeLabels_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:5954:2: ( ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* ) )
            // InternalOpenCypherParser.g:5955:2: ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* )
            {
            // InternalOpenCypherParser.g:5955:2: ( ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )* )
            // InternalOpenCypherParser.g:5956:3: ( (lv_nodeLabels_0_0= ruleNodeLabel ) ) ( (lv_nodeLabels_1_0= ruleNodeLabel ) )*
            {
            // InternalOpenCypherParser.g:5956:3: ( (lv_nodeLabels_0_0= ruleNodeLabel ) )
            // InternalOpenCypherParser.g:5957:4: (lv_nodeLabels_0_0= ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:5957:4: (lv_nodeLabels_0_0= ruleNodeLabel )
            // InternalOpenCypherParser.g:5958:5: lv_nodeLabels_0_0= ruleNodeLabel
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_86);
            lv_nodeLabels_0_0=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodeLabelsRule());
              					}
              					add(
              						current,
              						"nodeLabels",
              						lv_nodeLabels_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:5975:3: ( (lv_nodeLabels_1_0= ruleNodeLabel ) )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==Colon) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5976:4: (lv_nodeLabels_1_0= ruleNodeLabel )
            	    {
            	    // InternalOpenCypherParser.g:5976:4: (lv_nodeLabels_1_0= ruleNodeLabel )
            	    // InternalOpenCypherParser.g:5977:5: lv_nodeLabels_1_0= ruleNodeLabel
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_nodeLabels_1_0=ruleNodeLabel();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getNodeLabelsRule());
            	      					}
            	      					add(
            	      						current,
            	      						"nodeLabels",
            	      						lv_nodeLabels_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLabels"


    // $ANTLR start "entryRuleNodeLabel"
    // InternalOpenCypherParser.g:5998:1: entryRuleNodeLabel returns [EObject current=null] : iv_ruleNodeLabel= ruleNodeLabel EOF ;
    public final EObject entryRuleNodeLabel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNodeLabel = null;


        try {
            // InternalOpenCypherParser.g:5998:50: (iv_ruleNodeLabel= ruleNodeLabel EOF )
            // InternalOpenCypherParser.g:5999:2: iv_ruleNodeLabel= ruleNodeLabel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNodeLabelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNodeLabel=ruleNodeLabel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNodeLabel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNodeLabel"


    // $ANTLR start "ruleNodeLabel"
    // InternalOpenCypherParser.g:6005:1: ruleNodeLabel returns [EObject current=null] : (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) ) ;
    public final EObject ruleNodeLabel() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        AntlrDatatypeRuleToken lv_labelName_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6011:2: ( (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) ) )
            // InternalOpenCypherParser.g:6012:2: (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) )
            {
            // InternalOpenCypherParser.g:6012:2: (otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) ) )
            // InternalOpenCypherParser.g:6013:3: otherlv_0= Colon ( (lv_labelName_1_0= ruleLabelName ) )
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNodeLabelAccess().getColonKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:6017:3: ( (lv_labelName_1_0= ruleLabelName ) )
            // InternalOpenCypherParser.g:6018:4: (lv_labelName_1_0= ruleLabelName )
            {
            // InternalOpenCypherParser.g:6018:4: (lv_labelName_1_0= ruleLabelName )
            // InternalOpenCypherParser.g:6019:5: lv_labelName_1_0= ruleLabelName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_labelName_1_0=ruleLabelName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNodeLabelRule());
              					}
              					set(
              						current,
              						"labelName",
              						lv_labelName_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.LabelName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNodeLabel"


    // $ANTLR start "entryRuleRangeLiteral"
    // InternalOpenCypherParser.g:6040:1: entryRuleRangeLiteral returns [EObject current=null] : iv_ruleRangeLiteral= ruleRangeLiteral EOF ;
    public final EObject entryRuleRangeLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeLiteral = null;


        try {
            // InternalOpenCypherParser.g:6040:53: (iv_ruleRangeLiteral= ruleRangeLiteral EOF )
            // InternalOpenCypherParser.g:6041:2: iv_ruleRangeLiteral= ruleRangeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRangeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRangeLiteral=ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRangeLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRangeLiteral"


    // $ANTLR start "ruleRangeLiteral"
    // InternalOpenCypherParser.g:6047:1: ruleRangeLiteral returns [EObject current=null] : ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )? ) ;
    public final EObject ruleRangeLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_lower_2_0 = null;

        AntlrDatatypeRuleToken lv_upper_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6053:2: ( ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )? ) )
            // InternalOpenCypherParser.g:6054:2: ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )? )
            {
            // InternalOpenCypherParser.g:6054:2: ( () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )? )
            // InternalOpenCypherParser.g:6055:3: () otherlv_1= Asterisk ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )?
            {
            // InternalOpenCypherParser.g:6055:3: ()
            // InternalOpenCypherParser.g:6056:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Asterisk,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:6069:3: ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )?
            int alt88=2;
            switch ( input.LA(1) ) {
                case FullStopFullStop:
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                    {
                    alt88=1;
                    }
                    break;
                case LeftCurlyBracket:
                    {
                    int LA88_2 = input.LA(2);

                    if ( (synpred117_InternalOpenCypherParser()) ) {
                        alt88=1;
                    }
                    }
                    break;
                case DollarSign:
                    {
                    int LA88_3 = input.LA(2);

                    if ( (synpred117_InternalOpenCypherParser()) ) {
                        alt88=1;
                    }
                    }
                    break;
                case RightSquareBracket:
                    {
                    int LA88_4 = input.LA(2);

                    if ( (synpred117_InternalOpenCypherParser()) ) {
                        alt88=1;
                    }
                    }
                    break;
                case EOF:
                    {
                    int LA88_5 = input.LA(2);

                    if ( (synpred117_InternalOpenCypherParser()) ) {
                        alt88=1;
                    }
                    }
                    break;
            }

            switch (alt88) {
                case 1 :
                    // InternalOpenCypherParser.g:6070:4: ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )?
                    {
                    // InternalOpenCypherParser.g:6070:4: ( (lv_lower_2_0= ruleNumber ) )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( ((LA85_0>=RULE_HEX && LA85_0<=RULE_DECIMAL)) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // InternalOpenCypherParser.g:6071:5: (lv_lower_2_0= ruleNumber )
                            {
                            // InternalOpenCypherParser.g:6071:5: (lv_lower_2_0= ruleNumber )
                            // InternalOpenCypherParser.g:6072:6: lv_lower_2_0= ruleNumber
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0());
                              					
                            }
                            pushFollow(FOLLOW_88);
                            lv_lower_2_0=ruleNumber();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getRangeLiteralRule());
                              						}
                              						set(
                              							current,
                              							"lower",
                              							lv_lower_2_0,
                              							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    // InternalOpenCypherParser.g:6089:4: (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==FullStopFullStop) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // InternalOpenCypherParser.g:6090:5: otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )?
                            {
                            otherlv_3=(Token)match(input,FullStopFullStop,FOLLOW_15); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getRangeLiteralAccess().getFullStopFullStopKeyword_2_1_0());
                              				
                            }
                            // InternalOpenCypherParser.g:6094:5: ( (lv_upper_4_0= ruleNumber ) )?
                            int alt86=2;
                            int LA86_0 = input.LA(1);

                            if ( ((LA86_0>=RULE_HEX && LA86_0<=RULE_DECIMAL)) ) {
                                alt86=1;
                            }
                            switch (alt86) {
                                case 1 :
                                    // InternalOpenCypherParser.g:6095:6: (lv_upper_4_0= ruleNumber )
                                    {
                                    // InternalOpenCypherParser.g:6095:6: (lv_upper_4_0= ruleNumber )
                                    // InternalOpenCypherParser.g:6096:7: lv_upper_4_0= ruleNumber
                                    {
                                    if ( state.backtracking==0 ) {

                                      							newCompositeNode(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0());
                                      						
                                    }
                                    pushFollow(FOLLOW_2);
                                    lv_upper_4_0=ruleNumber();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							if (current==null) {
                                      								current = createModelElementForParent(grammarAccess.getRangeLiteralRule());
                                      							}
                                      							set(
                                      								current,
                                      								"upper",
                                      								lv_upper_4_0,
                                      								"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                                      							afterParserOrEnumRuleCall();
                                      						
                                    }

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRangeLiteral"


    // $ANTLR start "entryRuleLabelName"
    // InternalOpenCypherParser.g:6119:1: entryRuleLabelName returns [String current=null] : iv_ruleLabelName= ruleLabelName EOF ;
    public final String entryRuleLabelName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLabelName = null;


        try {
            // InternalOpenCypherParser.g:6119:49: (iv_ruleLabelName= ruleLabelName EOF )
            // InternalOpenCypherParser.g:6120:2: iv_ruleLabelName= ruleLabelName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelName=ruleLabelName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLabelName"


    // $ANTLR start "ruleLabelName"
    // InternalOpenCypherParser.g:6126:1: ruleLabelName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleLabelName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6132:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:6133:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLabelName"


    // $ANTLR start "entryRuleRelTypeName"
    // InternalOpenCypherParser.g:6146:1: entryRuleRelTypeName returns [String current=null] : iv_ruleRelTypeName= ruleRelTypeName EOF ;
    public final String entryRuleRelTypeName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelTypeName = null;


        try {
            // InternalOpenCypherParser.g:6146:51: (iv_ruleRelTypeName= ruleRelTypeName EOF )
            // InternalOpenCypherParser.g:6147:2: iv_ruleRelTypeName= ruleRelTypeName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelTypeNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelTypeName=ruleRelTypeName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelTypeName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelTypeName"


    // $ANTLR start "ruleRelTypeName"
    // InternalOpenCypherParser.g:6153:1: ruleRelTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleRelTypeName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6159:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:6160:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelTypeName"


    // $ANTLR start "entryRuleExpression"
    // InternalOpenCypherParser.g:6173:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalOpenCypherParser.g:6173:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalOpenCypherParser.g:6174:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalOpenCypherParser.g:6180:1: ruleExpression returns [EObject current=null] : this_ExpressionOr_0= ruleExpressionOr ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ExpressionOr_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6186:2: (this_ExpressionOr_0= ruleExpressionOr )
            // InternalOpenCypherParser.g:6187:2: this_ExpressionOr_0= ruleExpressionOr
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExpressionAccess().getExpressionOrParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_ExpressionOr_0=ruleExpressionOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_ExpressionOr_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleExpressionOr"
    // InternalOpenCypherParser.g:6201:1: entryRuleExpressionOr returns [EObject current=null] : iv_ruleExpressionOr= ruleExpressionOr EOF ;
    public final EObject entryRuleExpressionOr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionOr = null;


        try {
            // InternalOpenCypherParser.g:6201:53: (iv_ruleExpressionOr= ruleExpressionOr EOF )
            // InternalOpenCypherParser.g:6202:2: iv_ruleExpressionOr= ruleExpressionOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionOrRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionOr=ruleExpressionOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionOr; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionOr"


    // $ANTLR start "ruleExpressionOr"
    // InternalOpenCypherParser.g:6208:1: ruleExpressionOr returns [EObject current=null] : (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* ) ;
    public final EObject ruleExpressionOr() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionXor_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6214:2: ( (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* ) )
            // InternalOpenCypherParser.g:6215:2: (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* )
            {
            // InternalOpenCypherParser.g:6215:2: (this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )* )
            // InternalOpenCypherParser.g:6216:3: this_ExpressionXor_0= ruleExpressionXor ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionOrAccess().getExpressionXorParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_89);
            this_ExpressionXor_0=ruleExpressionXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionXor_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6227:3: ( () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) ) )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==OR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6228:4: () ( (lv_operator_2_0= OR ) ) ( (lv_right_3_0= ruleExpressionXor ) )
            	    {
            	    // InternalOpenCypherParser.g:6228:4: ()
            	    // InternalOpenCypherParser.g:6229:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionOrAccess().getExpressionOrLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6238:4: ( (lv_operator_2_0= OR ) )
            	    // InternalOpenCypherParser.g:6239:5: (lv_operator_2_0= OR )
            	    {
            	    // InternalOpenCypherParser.g:6239:5: (lv_operator_2_0= OR )
            	    // InternalOpenCypherParser.g:6240:6: lv_operator_2_0= OR
            	    {
            	    lv_operator_2_0=(Token)match(input,OR,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionOrAccess().getOperatorORKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionOrRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "OR");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:6252:4: ( (lv_right_3_0= ruleExpressionXor ) )
            	    // InternalOpenCypherParser.g:6253:5: (lv_right_3_0= ruleExpressionXor )
            	    {
            	    // InternalOpenCypherParser.g:6253:5: (lv_right_3_0= ruleExpressionXor )
            	    // InternalOpenCypherParser.g:6254:6: lv_right_3_0= ruleExpressionXor
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionOrAccess().getRightExpressionXorParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_89);
            	    lv_right_3_0=ruleExpressionXor();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionOrRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionXor");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionOr"


    // $ANTLR start "entryRuleExpressionXor"
    // InternalOpenCypherParser.g:6276:1: entryRuleExpressionXor returns [EObject current=null] : iv_ruleExpressionXor= ruleExpressionXor EOF ;
    public final EObject entryRuleExpressionXor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionXor = null;


        try {
            // InternalOpenCypherParser.g:6276:54: (iv_ruleExpressionXor= ruleExpressionXor EOF )
            // InternalOpenCypherParser.g:6277:2: iv_ruleExpressionXor= ruleExpressionXor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionXorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionXor=ruleExpressionXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionXor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionXor"


    // $ANTLR start "ruleExpressionXor"
    // InternalOpenCypherParser.g:6283:1: ruleExpressionXor returns [EObject current=null] : (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* ) ;
    public final EObject ruleExpressionXor() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionAnd_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6289:2: ( (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* ) )
            // InternalOpenCypherParser.g:6290:2: (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* )
            {
            // InternalOpenCypherParser.g:6290:2: (this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )* )
            // InternalOpenCypherParser.g:6291:3: this_ExpressionAnd_0= ruleExpressionAnd ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionXorAccess().getExpressionAndParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_90);
            this_ExpressionAnd_0=ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionAnd_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6302:3: ( () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) ) )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==XOR) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6303:4: () ( (lv_operator_2_0= XOR ) ) ( (lv_right_3_0= ruleExpressionAnd ) )
            	    {
            	    // InternalOpenCypherParser.g:6303:4: ()
            	    // InternalOpenCypherParser.g:6304:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionXorAccess().getExpressionXorLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6313:4: ( (lv_operator_2_0= XOR ) )
            	    // InternalOpenCypherParser.g:6314:5: (lv_operator_2_0= XOR )
            	    {
            	    // InternalOpenCypherParser.g:6314:5: (lv_operator_2_0= XOR )
            	    // InternalOpenCypherParser.g:6315:6: lv_operator_2_0= XOR
            	    {
            	    lv_operator_2_0=(Token)match(input,XOR,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionXorAccess().getOperatorXORKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionXorRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "XOR");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:6327:4: ( (lv_right_3_0= ruleExpressionAnd ) )
            	    // InternalOpenCypherParser.g:6328:5: (lv_right_3_0= ruleExpressionAnd )
            	    {
            	    // InternalOpenCypherParser.g:6328:5: (lv_right_3_0= ruleExpressionAnd )
            	    // InternalOpenCypherParser.g:6329:6: lv_right_3_0= ruleExpressionAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionXorAccess().getRightExpressionAndParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_90);
            	    lv_right_3_0=ruleExpressionAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionXorRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionAnd");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionXor"


    // $ANTLR start "entryRuleExpressionAnd"
    // InternalOpenCypherParser.g:6351:1: entryRuleExpressionAnd returns [EObject current=null] : iv_ruleExpressionAnd= ruleExpressionAnd EOF ;
    public final EObject entryRuleExpressionAnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionAnd = null;


        try {
            // InternalOpenCypherParser.g:6351:54: (iv_ruleExpressionAnd= ruleExpressionAnd EOF )
            // InternalOpenCypherParser.g:6352:2: iv_ruleExpressionAnd= ruleExpressionAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnd=ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionAnd"


    // $ANTLR start "ruleExpressionAnd"
    // InternalOpenCypherParser.g:6358:1: ruleExpressionAnd returns [EObject current=null] : (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* ) ;
    public final EObject ruleExpressionAnd() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionNot_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6364:2: ( (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* ) )
            // InternalOpenCypherParser.g:6365:2: (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* )
            {
            // InternalOpenCypherParser.g:6365:2: (this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )* )
            // InternalOpenCypherParser.g:6366:3: this_ExpressionNot_0= ruleExpressionNot ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAndAccess().getExpressionNotParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_91);
            this_ExpressionNot_0=ruleExpressionNot();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionNot_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6377:3: ( () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) ) )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==AND) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6378:4: () ( (lv_operator_2_0= AND ) ) ( (lv_right_3_0= ruleExpressionNot ) )
            	    {
            	    // InternalOpenCypherParser.g:6378:4: ()
            	    // InternalOpenCypherParser.g:6379:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionAndAccess().getExpressionAndLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6388:4: ( (lv_operator_2_0= AND ) )
            	    // InternalOpenCypherParser.g:6389:5: (lv_operator_2_0= AND )
            	    {
            	    // InternalOpenCypherParser.g:6389:5: (lv_operator_2_0= AND )
            	    // InternalOpenCypherParser.g:6390:6: lv_operator_2_0= AND
            	    {
            	    lv_operator_2_0=(Token)match(input,AND,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionAndAccess().getOperatorANDKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionAndRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "AND");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:6402:4: ( (lv_right_3_0= ruleExpressionNot ) )
            	    // InternalOpenCypherParser.g:6403:5: (lv_right_3_0= ruleExpressionNot )
            	    {
            	    // InternalOpenCypherParser.g:6403:5: (lv_right_3_0= ruleExpressionNot )
            	    // InternalOpenCypherParser.g:6404:6: lv_right_3_0= ruleExpressionNot
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionAndAccess().getRightExpressionNotParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_91);
            	    lv_right_3_0=ruleExpressionNot();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionAndRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNot");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionAnd"


    // $ANTLR start "entryRuleExpressionNot"
    // InternalOpenCypherParser.g:6426:1: entryRuleExpressionNot returns [EObject current=null] : iv_ruleExpressionNot= ruleExpressionNot EOF ;
    public final EObject entryRuleExpressionNot() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionNot = null;


        try {
            // InternalOpenCypherParser.g:6426:54: (iv_ruleExpressionNot= ruleExpressionNot EOF )
            // InternalOpenCypherParser.g:6427:2: iv_ruleExpressionNot= ruleExpressionNot EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionNotRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionNot=ruleExpressionNot();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionNot; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionNot"


    // $ANTLR start "ruleExpressionNot"
    // InternalOpenCypherParser.g:6433:1: ruleExpressionNot returns [EObject current=null] : ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_3= ruleExpressionComparison ) ;
    public final EObject ruleExpressionNot() throws RecognitionException {
        EObject current = null;

        Token lv_operator_1_0=null;
        EObject lv_left_2_0 = null;

        EObject this_ExpressionComparison_3 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6439:2: ( ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_3= ruleExpressionComparison ) )
            // InternalOpenCypherParser.g:6440:2: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_3= ruleExpressionComparison )
            {
            // InternalOpenCypherParser.g:6440:2: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_3= ruleExpressionComparison )
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // InternalOpenCypherParser.g:6441:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) )
                    {
                    // InternalOpenCypherParser.g:6441:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) )
                    // InternalOpenCypherParser.g:6442:4: () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) )
                    {
                    // InternalOpenCypherParser.g:6442:4: ()
                    // InternalOpenCypherParser.g:6443:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpressionNotAccess().getExpressionNotAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6452:4: ( (lv_operator_1_0= NOT ) )
                    // InternalOpenCypherParser.g:6453:5: (lv_operator_1_0= NOT )
                    {
                    // InternalOpenCypherParser.g:6453:5: (lv_operator_1_0= NOT )
                    // InternalOpenCypherParser.g:6454:6: lv_operator_1_0= NOT
                    {
                    lv_operator_1_0=(Token)match(input,NOT,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_1_0, grammarAccess.getExpressionNotAccess().getOperatorNOTKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getExpressionNotRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_1_0, "NOT");
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:6466:4: ( (lv_left_2_0= ruleExpressionNot ) )
                    // InternalOpenCypherParser.g:6467:5: (lv_left_2_0= ruleExpressionNot )
                    {
                    // InternalOpenCypherParser.g:6467:5: (lv_left_2_0= ruleExpressionNot )
                    // InternalOpenCypherParser.g:6468:6: lv_left_2_0= ruleExpressionNot
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionNotAccess().getLeftExpressionNotParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_2_0=ruleExpressionNot();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionNotRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNot");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:6487:3: this_ExpressionComparison_3= ruleExpressionComparison
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExpressionNotAccess().getExpressionComparisonParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionComparison_3=ruleExpressionComparison();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExpressionComparison_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionNot"


    // $ANTLR start "entryRuleExpressionComparison"
    // InternalOpenCypherParser.g:6502:1: entryRuleExpressionComparison returns [EObject current=null] : iv_ruleExpressionComparison= ruleExpressionComparison EOF ;
    public final EObject entryRuleExpressionComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionComparison = null;


        try {
            // InternalOpenCypherParser.g:6502:61: (iv_ruleExpressionComparison= ruleExpressionComparison EOF )
            // InternalOpenCypherParser.g:6503:2: iv_ruleExpressionComparison= ruleExpressionComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionComparison=ruleExpressionComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionComparison"


    // $ANTLR start "ruleExpressionComparison"
    // InternalOpenCypherParser.g:6509:1: ruleExpressionComparison returns [EObject current=null] : (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* ) ;
    public final EObject ruleExpressionComparison() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        Token lv_operator_2_5=null;
        Token lv_operator_2_6=null;
        EObject this_ExpressionPlusMinus_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6515:2: ( (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* ) )
            // InternalOpenCypherParser.g:6516:2: (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* )
            {
            // InternalOpenCypherParser.g:6516:2: (this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )* )
            // InternalOpenCypherParser.g:6517:3: this_ExpressionPlusMinus_0= ruleExpressionPlusMinus ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionComparisonAccess().getExpressionPlusMinusParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_92);
            this_ExpressionPlusMinus_0=ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionPlusMinus_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6528:3: ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) ) )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( ((LA94_0>=LessThanSignEqualsSign && LA94_0<=LessThanSignGreaterThanSign)||LA94_0==GreaterThanSignEqualsSign||(LA94_0>=LessThanSign && LA94_0<=GreaterThanSign)) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6529:4: () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) ) ( (lv_right_3_0= ruleExpressionPlusMinus ) )
            	    {
            	    // InternalOpenCypherParser.g:6529:4: ()
            	    // InternalOpenCypherParser.g:6530:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionComparisonAccess().getExpressionComparisonLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6539:4: ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) ) )
            	    // InternalOpenCypherParser.g:6540:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) )
            	    {
            	    // InternalOpenCypherParser.g:6540:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign ) )
            	    // InternalOpenCypherParser.g:6541:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign )
            	    {
            	    // InternalOpenCypherParser.g:6541:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= LessThanSignGreaterThanSign | lv_operator_2_3= LessThanSign | lv_operator_2_4= GreaterThanSign | lv_operator_2_5= LessThanSignEqualsSign | lv_operator_2_6= GreaterThanSignEqualsSign )
            	    int alt93=6;
            	    switch ( input.LA(1) ) {
            	    case EqualsSign:
            	        {
            	        alt93=1;
            	        }
            	        break;
            	    case LessThanSignGreaterThanSign:
            	        {
            	        alt93=2;
            	        }
            	        break;
            	    case LessThanSign:
            	        {
            	        alt93=3;
            	        }
            	        break;
            	    case GreaterThanSign:
            	        {
            	        alt93=4;
            	        }
            	        break;
            	    case LessThanSignEqualsSign:
            	        {
            	        alt93=5;
            	        }
            	        break;
            	    case GreaterThanSignEqualsSign:
            	        {
            	        alt93=6;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 93, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt93) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:6542:7: lv_operator_2_1= EqualsSign
            	            {
            	            lv_operator_2_1=(Token)match(input,EqualsSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionComparisonAccess().getOperatorEqualsSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalOpenCypherParser.g:6553:7: lv_operator_2_2= LessThanSignGreaterThanSign
            	            {
            	            lv_operator_2_2=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalOpenCypherParser.g:6564:7: lv_operator_2_3= LessThanSign
            	            {
            	            lv_operator_2_3=(Token)match(input,LessThanSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalOpenCypherParser.g:6575:7: lv_operator_2_4= GreaterThanSign
            	            {
            	            lv_operator_2_4=(Token)match(input,GreaterThanSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_4, grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_3());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // InternalOpenCypherParser.g:6586:7: lv_operator_2_5= LessThanSignEqualsSign
            	            {
            	            lv_operator_2_5=(Token)match(input,LessThanSignEqualsSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_5, grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_5, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // InternalOpenCypherParser.g:6597:7: lv_operator_2_6= GreaterThanSignEqualsSign
            	            {
            	            lv_operator_2_6=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_6, grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionComparisonRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_6, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalOpenCypherParser.g:6610:4: ( (lv_right_3_0= ruleExpressionPlusMinus ) )
            	    // InternalOpenCypherParser.g:6611:5: (lv_right_3_0= ruleExpressionPlusMinus )
            	    {
            	    // InternalOpenCypherParser.g:6611:5: (lv_right_3_0= ruleExpressionPlusMinus )
            	    // InternalOpenCypherParser.g:6612:6: lv_right_3_0= ruleExpressionPlusMinus
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionComparisonAccess().getRightExpressionPlusMinusParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_right_3_0=ruleExpressionPlusMinus();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionComparisonRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionPlusMinus");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionComparison"


    // $ANTLR start "entryRuleExpressionPlusMinus"
    // InternalOpenCypherParser.g:6634:1: entryRuleExpressionPlusMinus returns [EObject current=null] : iv_ruleExpressionPlusMinus= ruleExpressionPlusMinus EOF ;
    public final EObject entryRuleExpressionPlusMinus() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionPlusMinus = null;


        try {
            // InternalOpenCypherParser.g:6634:60: (iv_ruleExpressionPlusMinus= ruleExpressionPlusMinus EOF )
            // InternalOpenCypherParser.g:6635:2: iv_ruleExpressionPlusMinus= ruleExpressionPlusMinus EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionPlusMinusRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionPlusMinus=ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionPlusMinus; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionPlusMinus"


    // $ANTLR start "ruleExpressionPlusMinus"
    // InternalOpenCypherParser.g:6641:1: ruleExpressionPlusMinus returns [EObject current=null] : (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* ) ;
    public final EObject ruleExpressionPlusMinus() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_ExpressionMulDiv_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6647:2: ( (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* ) )
            // InternalOpenCypherParser.g:6648:2: (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* )
            {
            // InternalOpenCypherParser.g:6648:2: (this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )* )
            // InternalOpenCypherParser.g:6649:3: this_ExpressionMulDiv_0= ruleExpressionMulDiv ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionPlusMinusAccess().getExpressionMulDivParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_93);
            this_ExpressionMulDiv_0=ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionMulDiv_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6660:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) ) )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==PlusSign||LA96_0==HyphenMinus) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6661:4: () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_right_3_0= ruleExpressionMulDiv ) )
            	    {
            	    // InternalOpenCypherParser.g:6661:4: ()
            	    // InternalOpenCypherParser.g:6662:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionPlusMinusAccess().getExpressionPlusMinusLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6671:4: ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) )
            	    // InternalOpenCypherParser.g:6672:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
            	    {
            	    // InternalOpenCypherParser.g:6672:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
            	    // InternalOpenCypherParser.g:6673:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
            	    {
            	    // InternalOpenCypherParser.g:6673:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
            	    int alt95=2;
            	    int LA95_0 = input.LA(1);

            	    if ( (LA95_0==PlusSign) ) {
            	        alt95=1;
            	    }
            	    else if ( (LA95_0==HyphenMinus) ) {
            	        alt95=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 95, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt95) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:6674:7: lv_operator_2_1= PlusSign
            	            {
            	            lv_operator_2_1=(Token)match(input,PlusSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionPlusMinusRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalOpenCypherParser.g:6685:7: lv_operator_2_2= HyphenMinus
            	            {
            	            lv_operator_2_2=(Token)match(input,HyphenMinus,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionPlusMinusRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalOpenCypherParser.g:6698:4: ( (lv_right_3_0= ruleExpressionMulDiv ) )
            	    // InternalOpenCypherParser.g:6699:5: (lv_right_3_0= ruleExpressionMulDiv )
            	    {
            	    // InternalOpenCypherParser.g:6699:5: (lv_right_3_0= ruleExpressionMulDiv )
            	    // InternalOpenCypherParser.g:6700:6: lv_right_3_0= ruleExpressionMulDiv
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionPlusMinusAccess().getRightExpressionMulDivParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_93);
            	    lv_right_3_0=ruleExpressionMulDiv();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionPlusMinusRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionMulDiv");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionPlusMinus"


    // $ANTLR start "entryRuleExpressionMulDiv"
    // InternalOpenCypherParser.g:6722:1: entryRuleExpressionMulDiv returns [EObject current=null] : iv_ruleExpressionMulDiv= ruleExpressionMulDiv EOF ;
    public final EObject entryRuleExpressionMulDiv() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionMulDiv = null;


        try {
            // InternalOpenCypherParser.g:6722:57: (iv_ruleExpressionMulDiv= ruleExpressionMulDiv EOF )
            // InternalOpenCypherParser.g:6723:2: iv_ruleExpressionMulDiv= ruleExpressionMulDiv EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionMulDivRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionMulDiv=ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionMulDiv; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionMulDiv"


    // $ANTLR start "ruleExpressionMulDiv"
    // InternalOpenCypherParser.g:6729:1: ruleExpressionMulDiv returns [EObject current=null] : (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* ) ;
    public final EObject ruleExpressionMulDiv() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        EObject this_ExpressionPower_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6735:2: ( (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* ) )
            // InternalOpenCypherParser.g:6736:2: (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* )
            {
            // InternalOpenCypherParser.g:6736:2: (this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )* )
            // InternalOpenCypherParser.g:6737:3: this_ExpressionPower_0= ruleExpressionPower ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionMulDivAccess().getExpressionPowerParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_94);
            this_ExpressionPower_0=ruleExpressionPower();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionPower_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6748:3: ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) ) )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==PercentSign||LA98_0==Asterisk||LA98_0==Solidus) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6749:4: () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) ) ( (lv_right_3_0= ruleExpressionPower ) )
            	    {
            	    // InternalOpenCypherParser.g:6749:4: ()
            	    // InternalOpenCypherParser.g:6750:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionMulDivAccess().getExpressionMulDivLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6759:4: ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) ) )
            	    // InternalOpenCypherParser.g:6760:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) )
            	    {
            	    // InternalOpenCypherParser.g:6760:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign ) )
            	    // InternalOpenCypherParser.g:6761:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign )
            	    {
            	    // InternalOpenCypherParser.g:6761:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= PercentSign )
            	    int alt97=3;
            	    switch ( input.LA(1) ) {
            	    case Asterisk:
            	        {
            	        alt97=1;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt97=2;
            	        }
            	        break;
            	    case PercentSign:
            	        {
            	        alt97=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 97, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt97) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:6762:7: lv_operator_2_1= Asterisk
            	            {
            	            lv_operator_2_1=(Token)match(input,Asterisk,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionMulDivAccess().getOperatorAsteriskKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionMulDivRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalOpenCypherParser.g:6773:7: lv_operator_2_2= Solidus
            	            {
            	            lv_operator_2_2=(Token)match(input,Solidus,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionMulDivAccess().getOperatorSolidusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionMulDivRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalOpenCypherParser.g:6784:7: lv_operator_2_3= PercentSign
            	            {
            	            lv_operator_2_3=(Token)match(input,PercentSign,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getExpressionMulDivAccess().getOperatorPercentSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getExpressionMulDivRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalOpenCypherParser.g:6797:4: ( (lv_right_3_0= ruleExpressionPower ) )
            	    // InternalOpenCypherParser.g:6798:5: (lv_right_3_0= ruleExpressionPower )
            	    {
            	    // InternalOpenCypherParser.g:6798:5: (lv_right_3_0= ruleExpressionPower )
            	    // InternalOpenCypherParser.g:6799:6: lv_right_3_0= ruleExpressionPower
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionMulDivAccess().getRightExpressionPowerParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_94);
            	    lv_right_3_0=ruleExpressionPower();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionMulDivRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionPower");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionMulDiv"


    // $ANTLR start "entryRuleExpressionPower"
    // InternalOpenCypherParser.g:6821:1: entryRuleExpressionPower returns [EObject current=null] : iv_ruleExpressionPower= ruleExpressionPower EOF ;
    public final EObject entryRuleExpressionPower() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionPower = null;


        try {
            // InternalOpenCypherParser.g:6821:56: (iv_ruleExpressionPower= ruleExpressionPower EOF )
            // InternalOpenCypherParser.g:6822:2: iv_ruleExpressionPower= ruleExpressionPower EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionPowerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionPower=ruleExpressionPower();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionPower; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionPower"


    // $ANTLR start "ruleExpressionPower"
    // InternalOpenCypherParser.g:6828:1: ruleExpressionPower returns [EObject current=null] : (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* ) ;
    public final EObject ruleExpressionPower() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_ExpressionUnaryPlusMinus_0 = null;

        EObject lv_right_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6834:2: ( (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* ) )
            // InternalOpenCypherParser.g:6835:2: (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* )
            {
            // InternalOpenCypherParser.g:6835:2: (this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )* )
            // InternalOpenCypherParser.g:6836:3: this_ExpressionUnaryPlusMinus_0= ruleExpressionUnaryPlusMinus ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionPowerAccess().getExpressionUnaryPlusMinusParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_95);
            this_ExpressionUnaryPlusMinus_0=ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionUnaryPlusMinus_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:6847:3: ( () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) ) )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==CircumflexAccent) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // InternalOpenCypherParser.g:6848:4: () ( (lv_operator_2_0= CircumflexAccent ) ) ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) )
            	    {
            	    // InternalOpenCypherParser.g:6848:4: ()
            	    // InternalOpenCypherParser.g:6849:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getExpressionPowerAccess().getExpressionPowerLeftAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalOpenCypherParser.g:6858:4: ( (lv_operator_2_0= CircumflexAccent ) )
            	    // InternalOpenCypherParser.g:6859:5: (lv_operator_2_0= CircumflexAccent )
            	    {
            	    // InternalOpenCypherParser.g:6859:5: (lv_operator_2_0= CircumflexAccent )
            	    // InternalOpenCypherParser.g:6860:6: lv_operator_2_0= CircumflexAccent
            	    {
            	    lv_operator_2_0=(Token)match(input,CircumflexAccent,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getExpressionPowerAccess().getOperatorCircumflexAccentKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getExpressionPowerRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "^");
            	      					
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:6872:4: ( (lv_right_3_0= ruleExpressionUnaryPlusMinus ) )
            	    // InternalOpenCypherParser.g:6873:5: (lv_right_3_0= ruleExpressionUnaryPlusMinus )
            	    {
            	    // InternalOpenCypherParser.g:6873:5: (lv_right_3_0= ruleExpressionUnaryPlusMinus )
            	    // InternalOpenCypherParser.g:6874:6: lv_right_3_0= ruleExpressionUnaryPlusMinus
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExpressionPowerAccess().getRightExpressionUnaryPlusMinusParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_95);
            	    lv_right_3_0=ruleExpressionUnaryPlusMinus();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExpressionPowerRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_3_0,
            	      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionUnaryPlusMinus");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionPower"


    // $ANTLR start "entryRuleExpressionUnaryPlusMinus"
    // InternalOpenCypherParser.g:6896:1: entryRuleExpressionUnaryPlusMinus returns [EObject current=null] : iv_ruleExpressionUnaryPlusMinus= ruleExpressionUnaryPlusMinus EOF ;
    public final EObject entryRuleExpressionUnaryPlusMinus() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionUnaryPlusMinus = null;


        try {
            // InternalOpenCypherParser.g:6896:65: (iv_ruleExpressionUnaryPlusMinus= ruleExpressionUnaryPlusMinus EOF )
            // InternalOpenCypherParser.g:6897:2: iv_ruleExpressionUnaryPlusMinus= ruleExpressionUnaryPlusMinus EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionUnaryPlusMinus=ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionUnaryPlusMinus; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionUnaryPlusMinus"


    // $ANTLR start "ruleExpressionUnaryPlusMinus"
    // InternalOpenCypherParser.g:6903:1: ruleExpressionUnaryPlusMinus returns [EObject current=null] : (this_Expression3_0= ruleExpression3 | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) ) ) ) ;
    public final EObject ruleExpressionUnaryPlusMinus() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_Expression3_0 = null;

        EObject lv_left_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6909:2: ( (this_Expression3_0= ruleExpression3 | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) ) ) ) )
            // InternalOpenCypherParser.g:6910:2: (this_Expression3_0= ruleExpression3 | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) ) ) )
            {
            // InternalOpenCypherParser.g:6910:2: (this_Expression3_0= ruleExpression3 | ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) ) ) )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( ((LA101_0>=ALLSHORTESTPATHS && LA101_0<=WHERE)||(LA101_0>=CASE && LA101_0<=XOR)||(LA101_0>=AS && LA101_0<=OR)||LA101_0==DollarSign||LA101_0==LeftParenthesis||LA101_0==LeftSquareBracket||LA101_0==LeftCurlyBracket||LA101_0==RULE_ID||(LA101_0>=RULE_STRING_LITERAL && LA101_0<=RULE_DECIMAL)) ) {
                alt101=1;
            }
            else if ( (LA101_0==PlusSign||LA101_0==HyphenMinus) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    // InternalOpenCypherParser.g:6911:3: this_Expression3_0= ruleExpression3
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusAccess().getExpression3ParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Expression3_0=ruleExpression3();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Expression3_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:6923:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) ) )
                    {
                    // InternalOpenCypherParser.g:6923:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) ) )
                    // InternalOpenCypherParser.g:6924:4: () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) ) ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) )
                    {
                    // InternalOpenCypherParser.g:6924:4: ()
                    // InternalOpenCypherParser.g:6925:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getExpressionUnaryPlusMinusAccess().getExpressionUnaryPlusMinusAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:6934:4: ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) ) )
                    // InternalOpenCypherParser.g:6935:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
                    {
                    // InternalOpenCypherParser.g:6935:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus ) )
                    // InternalOpenCypherParser.g:6936:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:6936:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==PlusSign) ) {
                        alt100=1;
                    }
                    else if ( (LA100_0==HyphenMinus) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;
                    }
                    switch (alt100) {
                        case 1 :
                            // InternalOpenCypherParser.g:6937:7: lv_operator_2_1= PlusSign
                            {
                            lv_operator_2_1=(Token)match(input,PlusSign,FOLLOW_36); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_1, grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionUnaryPlusMinusRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:6948:7: lv_operator_2_2= HyphenMinus
                            {
                            lv_operator_2_2=(Token)match(input,HyphenMinus,FOLLOW_36); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_2, grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionUnaryPlusMinusRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalOpenCypherParser.g:6961:4: ( (lv_left_3_0= ruleExpressionUnaryPlusMinus ) )
                    // InternalOpenCypherParser.g:6962:5: (lv_left_3_0= ruleExpressionUnaryPlusMinus )
                    {
                    // InternalOpenCypherParser.g:6962:5: (lv_left_3_0= ruleExpressionUnaryPlusMinus )
                    // InternalOpenCypherParser.g:6963:6: lv_left_3_0= ruleExpressionUnaryPlusMinus
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftExpressionUnaryPlusMinusParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_left_3_0=ruleExpressionUnaryPlusMinus();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionUnaryPlusMinusRule());
                      						}
                      						set(
                      							current,
                      							"left",
                      							lv_left_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionUnaryPlusMinus");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionUnaryPlusMinus"


    // $ANTLR start "entryRuleExpression3"
    // InternalOpenCypherParser.g:6985:1: entryRuleExpression3 returns [EObject current=null] : iv_ruleExpression3= ruleExpression3 EOF ;
    public final EObject entryRuleExpression3() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression3 = null;


        try {
            // InternalOpenCypherParser.g:6985:52: (iv_ruleExpression3= ruleExpression3 EOF )
            // InternalOpenCypherParser.g:6986:2: iv_ruleExpression3= ruleExpression3 EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpression3Rule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression3=ruleExpression3();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression3; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression3"


    // $ANTLR start "ruleExpression3"
    // InternalOpenCypherParser.g:6992:1: ruleExpression3 returns [EObject current=null] : (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )* ) ;
    public final EObject ruleExpression3() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_11=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token otherlv_22=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token otherlv_30=null;
        EObject this_ExpressionNodeLabelsAndPropertyLookup_0 = null;

        EObject lv_expression_3_0 = null;

        EObject lv_upper_5_0 = null;

        EObject lv_right_9_0 = null;

        EObject lv_right_12_0 = null;

        EObject lv_right_16_0 = null;

        EObject lv_right_20_0 = null;

        EObject lv_right_23_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:6998:2: ( (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )* ) )
            // InternalOpenCypherParser.g:6999:2: (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )* )
            {
            // InternalOpenCypherParser.g:6999:2: (this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )* )
            // InternalOpenCypherParser.g:7000:3: this_ExpressionNodeLabelsAndPropertyLookup_0= ruleExpressionNodeLabelsAndPropertyLookup ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpression3Access().getExpressionNodeLabelsAndPropertyLookupParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_96);
            this_ExpressionNodeLabelsAndPropertyLookup_0=ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionNodeLabelsAndPropertyLookup_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:7011:3: ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )*
            loop103:
            do {
                int alt103=9;
                alt103 = dfa103.predict(input);
                switch (alt103) {
            	case 1 :
            	    // InternalOpenCypherParser.g:7012:4: ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket )
            	    {
            	    // InternalOpenCypherParser.g:7012:4: ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket )
            	    // InternalOpenCypherParser.g:7013:5: () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket
            	    {
            	    // InternalOpenCypherParser.g:7013:5: ()
            	    // InternalOpenCypherParser.g:7014:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getIndexExpressionLeftAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_2=(Token)match(input,LeftSquareBracket,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_2, grammarAccess.getExpression3Access().getLeftSquareBracketKeyword_1_0_1());
            	      				
            	    }
            	    // InternalOpenCypherParser.g:7027:5: ( (lv_expression_3_0= ruleExpression ) )
            	    // InternalOpenCypherParser.g:7028:6: (lv_expression_3_0= ruleExpression )
            	    {
            	    // InternalOpenCypherParser.g:7028:6: (lv_expression_3_0= ruleExpression )
            	    // InternalOpenCypherParser.g:7029:7: lv_expression_3_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpression3Access().getExpressionExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_97);
            	    lv_expression_3_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      							}
            	      							set(
            	      								current,
            	      								"expression",
            	      								lv_expression_3_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    // InternalOpenCypherParser.g:7046:5: (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )?
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==FullStopFullStop) ) {
            	        alt102=1;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // InternalOpenCypherParser.g:7047:6: otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) )
            	            {
            	            otherlv_4=(Token)match(input,FullStopFullStop,FOLLOW_36); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_4, grammarAccess.getExpression3Access().getFullStopFullStopKeyword_1_0_3_0());
            	              					
            	            }
            	            // InternalOpenCypherParser.g:7051:6: ( (lv_upper_5_0= ruleExpression ) )
            	            // InternalOpenCypherParser.g:7052:7: (lv_upper_5_0= ruleExpression )
            	            {
            	            // InternalOpenCypherParser.g:7052:7: (lv_upper_5_0= ruleExpression )
            	            // InternalOpenCypherParser.g:7053:8: lv_upper_5_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getExpression3Access().getUpperExpressionParserRuleCall_1_0_3_1_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_31);
            	            lv_upper_5_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	              								}
            	              								set(
            	              									current,
            	              									"upper",
            	              									lv_upper_5_0,
            	              									"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_96); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_6, grammarAccess.getExpression3Access().getRightSquareBracketKeyword_1_0_4());
            	      				
            	    }

            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalOpenCypherParser.g:7077:4: ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    {
            	    // InternalOpenCypherParser.g:7077:4: ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    // InternalOpenCypherParser.g:7078:5: () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    {
            	    // InternalOpenCypherParser.g:7078:5: ()
            	    // InternalOpenCypherParser.g:7079:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getRegExpMatchingExpressionLeftAction_1_1_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_8=(Token)match(input,EqualsSignTilde,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_8, grammarAccess.getExpression3Access().getEqualsSignTildeKeyword_1_1_1());
            	      				
            	    }
            	    // InternalOpenCypherParser.g:7092:5: ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    // InternalOpenCypherParser.g:7093:6: (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:7093:6: (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    // InternalOpenCypherParser.g:7094:7: lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_1_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_right_9_0=ruleExpressionNodeLabelsAndPropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      							}
            	      							set(
            	      								current,
            	      								"right",
            	      								lv_right_9_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalOpenCypherParser.g:7113:4: ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    {
            	    // InternalOpenCypherParser.g:7113:4: ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    // InternalOpenCypherParser.g:7114:5: () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    {
            	    // InternalOpenCypherParser.g:7114:5: ()
            	    // InternalOpenCypherParser.g:7115:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getInCollectionExpressionLeftAction_1_2_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_11=(Token)match(input,IN,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_11, grammarAccess.getExpression3Access().getINKeyword_1_2_1());
            	      				
            	    }
            	    // InternalOpenCypherParser.g:7128:5: ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    // InternalOpenCypherParser.g:7129:6: (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:7129:6: (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    // InternalOpenCypherParser.g:7130:7: lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_2_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_right_12_0=ruleExpressionNodeLabelsAndPropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      							}
            	      							set(
            	      								current,
            	      								"right",
            	      								lv_right_12_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalOpenCypherParser.g:7149:4: ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    {
            	    // InternalOpenCypherParser.g:7149:4: ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    // InternalOpenCypherParser.g:7150:5: () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    {
            	    // InternalOpenCypherParser.g:7150:5: ()
            	    // InternalOpenCypherParser.g:7151:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getStartsWithExpressionLeftAction_1_3_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_14=(Token)match(input,STARTS,FOLLOW_98); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_14, grammarAccess.getExpression3Access().getSTARTSKeyword_1_3_1());
            	      				
            	    }
            	    otherlv_15=(Token)match(input,WITH,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_15, grammarAccess.getExpression3Access().getWITHKeyword_1_3_2());
            	      				
            	    }
            	    // InternalOpenCypherParser.g:7168:5: ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    // InternalOpenCypherParser.g:7169:6: (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:7169:6: (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    // InternalOpenCypherParser.g:7170:7: lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_3_3_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_right_16_0=ruleExpressionNodeLabelsAndPropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      							}
            	      							set(
            	      								current,
            	      								"right",
            	      								lv_right_16_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalOpenCypherParser.g:7189:4: ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    {
            	    // InternalOpenCypherParser.g:7189:4: ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    // InternalOpenCypherParser.g:7190:5: () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    {
            	    // InternalOpenCypherParser.g:7190:5: ()
            	    // InternalOpenCypherParser.g:7191:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getEndsWithExpressionLeftAction_1_4_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_18=(Token)match(input,ENDS,FOLLOW_98); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_18, grammarAccess.getExpression3Access().getENDSKeyword_1_4_1());
            	      				
            	    }
            	    otherlv_19=(Token)match(input,WITH,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_19, grammarAccess.getExpression3Access().getWITHKeyword_1_4_2());
            	      				
            	    }
            	    // InternalOpenCypherParser.g:7208:5: ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    // InternalOpenCypherParser.g:7209:6: (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:7209:6: (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    // InternalOpenCypherParser.g:7210:7: lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_4_3_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_right_20_0=ruleExpressionNodeLabelsAndPropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      							}
            	      							set(
            	      								current,
            	      								"right",
            	      								lv_right_20_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalOpenCypherParser.g:7229:4: ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    {
            	    // InternalOpenCypherParser.g:7229:4: ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) )
            	    // InternalOpenCypherParser.g:7230:5: () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    {
            	    // InternalOpenCypherParser.g:7230:5: ()
            	    // InternalOpenCypherParser.g:7231:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getContainsExpressionLeftAction_1_5_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_22=(Token)match(input,CONTAINS,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_22, grammarAccess.getExpression3Access().getCONTAINSKeyword_1_5_1());
            	      				
            	    }
            	    // InternalOpenCypherParser.g:7244:5: ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) )
            	    // InternalOpenCypherParser.g:7245:6: (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:7245:6: (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup )
            	    // InternalOpenCypherParser.g:7246:7: lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_5_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_right_23_0=ruleExpressionNodeLabelsAndPropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getExpression3Rule());
            	      							}
            	      							set(
            	      								current,
            	      								"right",
            	      								lv_right_23_0,
            	      								"org.slizaa.neo4j.opencypher.OpenCypher.ExpressionNodeLabelsAndPropertyLookup");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalOpenCypherParser.g:7265:4: ( () otherlv_25= IS otherlv_26= NULL )
            	    {
            	    // InternalOpenCypherParser.g:7265:4: ( () otherlv_25= IS otherlv_26= NULL )
            	    // InternalOpenCypherParser.g:7266:5: () otherlv_25= IS otherlv_26= NULL
            	    {
            	    // InternalOpenCypherParser.g:7266:5: ()
            	    // InternalOpenCypherParser.g:7267:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getIsNullExpressionLeftAction_1_6_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_25=(Token)match(input,IS,FOLLOW_99); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_25, grammarAccess.getExpression3Access().getISKeyword_1_6_1());
            	      				
            	    }
            	    otherlv_26=(Token)match(input,NULL,FOLLOW_96); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_26, grammarAccess.getExpression3Access().getNULLKeyword_1_6_2());
            	      				
            	    }

            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalOpenCypherParser.g:7286:4: ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL )
            	    {
            	    // InternalOpenCypherParser.g:7286:4: ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL )
            	    // InternalOpenCypherParser.g:7287:5: () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL
            	    {
            	    // InternalOpenCypherParser.g:7287:5: ()
            	    // InternalOpenCypherParser.g:7288:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						/* */
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getExpression3Access().getIsNotNullExpressionLeftAction_1_7_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_28=(Token)match(input,IS,FOLLOW_100); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_28, grammarAccess.getExpression3Access().getISKeyword_1_7_1());
            	      				
            	    }
            	    otherlv_29=(Token)match(input,NOT,FOLLOW_99); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_29, grammarAccess.getExpression3Access().getNOTKeyword_1_7_2());
            	      				
            	    }
            	    otherlv_30=(Token)match(input,NULL,FOLLOW_96); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_30, grammarAccess.getExpression3Access().getNULLKeyword_1_7_3());
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression3"


    // $ANTLR start "entryRuleExpressionNodeLabelsAndPropertyLookup"
    // InternalOpenCypherParser.g:7315:1: entryRuleExpressionNodeLabelsAndPropertyLookup returns [EObject current=null] : iv_ruleExpressionNodeLabelsAndPropertyLookup= ruleExpressionNodeLabelsAndPropertyLookup EOF ;
    public final EObject entryRuleExpressionNodeLabelsAndPropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionNodeLabelsAndPropertyLookup = null;


        try {
            // InternalOpenCypherParser.g:7315:78: (iv_ruleExpressionNodeLabelsAndPropertyLookup= ruleExpressionNodeLabelsAndPropertyLookup EOF )
            // InternalOpenCypherParser.g:7316:2: iv_ruleExpressionNodeLabelsAndPropertyLookup= ruleExpressionNodeLabelsAndPropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionNodeLabelsAndPropertyLookup=ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionNodeLabelsAndPropertyLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionNodeLabelsAndPropertyLookup"


    // $ANTLR start "ruleExpressionNodeLabelsAndPropertyLookup"
    // InternalOpenCypherParser.g:7322:1: ruleExpressionNodeLabelsAndPropertyLookup returns [EObject current=null] : (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+ )? ) ;
    public final EObject ruleExpressionNodeLabelsAndPropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject this_Atom_0 = null;

        EObject lv_propertyLookups_2_0 = null;

        EObject lv_nodeLabels_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7328:2: ( (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+ )? ) )
            // InternalOpenCypherParser.g:7329:2: (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+ )? )
            {
            // InternalOpenCypherParser.g:7329:2: (this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+ )? )
            // InternalOpenCypherParser.g:7330:3: this_Atom_0= ruleAtom ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )? ( () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getAtomParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_101);
            this_Atom_0=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Atom_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalOpenCypherParser.g:7341:3: ( () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+ )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==FullStop) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalOpenCypherParser.g:7342:4: () ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+
                    {
                    // InternalOpenCypherParser.g:7342:4: ()
                    // InternalOpenCypherParser.g:7343:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionPropertyLookupLeftAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7352:4: ( (lv_propertyLookups_2_0= rulePropertyLookup ) )+
                    int cnt104=0;
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( (LA104_0==FullStop) ) {
                            alt104=1;
                        }


                        switch (alt104) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:7353:5: (lv_propertyLookups_2_0= rulePropertyLookup )
                    	    {
                    	    // InternalOpenCypherParser.g:7353:5: (lv_propertyLookups_2_0= rulePropertyLookup )
                    	    // InternalOpenCypherParser.g:7354:6: lv_propertyLookups_2_0= rulePropertyLookup
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_101);
                    	    lv_propertyLookups_2_0=rulePropertyLookup();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"propertyLookups",
                    	      							lv_propertyLookups_2_0,
                    	      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyLookup");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt104 >= 1 ) break loop104;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(104, input);
                                throw eee;
                        }
                        cnt104++;
                    } while (true);


                    }
                    break;

            }

            // InternalOpenCypherParser.g:7372:3: ( () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+ )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==Colon) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // InternalOpenCypherParser.g:7373:4: () ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+
                    {
                    // InternalOpenCypherParser.g:7373:4: ()
                    // InternalOpenCypherParser.g:7374:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionNodeLabelsLeftAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7383:4: ( (lv_nodeLabels_4_0= ruleNodeLabel ) )+
                    int cnt106=0;
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==Colon) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:7384:5: (lv_nodeLabels_4_0= ruleNodeLabel )
                    	    {
                    	    // InternalOpenCypherParser.g:7384:5: (lv_nodeLabels_4_0= ruleNodeLabel )
                    	    // InternalOpenCypherParser.g:7385:6: lv_nodeLabels_4_0= ruleNodeLabel
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsNodeLabelParserRuleCall_2_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_86);
                    	    lv_nodeLabels_4_0=ruleNodeLabel();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"nodeLabels",
                    	      							lv_nodeLabels_4_0,
                    	      							"org.slizaa.neo4j.opencypher.OpenCypher.NodeLabel");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt106 >= 1 ) break loop106;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(106, input);
                                throw eee;
                        }
                        cnt106++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionNodeLabelsAndPropertyLookup"


    // $ANTLR start "entryRuleAtom"
    // InternalOpenCypherParser.g:7407:1: entryRuleAtom returns [EObject current=null] : iv_ruleAtom= ruleAtom EOF ;
    public final EObject entryRuleAtom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAtom = null;


        try {
            // InternalOpenCypherParser.g:7407:45: (iv_ruleAtom= ruleAtom EOF )
            // InternalOpenCypherParser.g:7408:2: iv_ruleAtom= ruleAtom EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAtomRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAtom=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAtom; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAtom"


    // $ANTLR start "ruleAtom"
    // InternalOpenCypherParser.g:7414:1: ruleAtom returns [EObject current=null] : ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | this_CaseExpression_10= ruleCaseExpression | ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis ) | this_MapLiteral_16= ruleMapLiteral | this_ListComprehension_17= ruleListComprehension | this_PatternComprehension_18= rulePatternComprehension | ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) ) ;
    public final EObject ruleAtom() throws RecognitionException {
        EObject current = null;

        Token lv_value_3_0=null;
        Token lv_value_7_1=null;
        Token lv_value_7_2=null;
        Token otherlv_9=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_39=null;
        Token otherlv_40=null;
        Token otherlv_42=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token otherlv_52=null;
        Token otherlv_54=null;
        Token otherlv_55=null;
        Token otherlv_57=null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;

        EObject this_Parameter_4 = null;

        EObject this_LegacyParameter_5 = null;

        EObject this_CaseExpression_10 = null;

        EObject this_MapLiteral_16 = null;

        EObject this_ListComprehension_17 = null;

        EObject this_PatternComprehension_18 = null;

        EObject lv_expressions_21_0 = null;

        EObject lv_expressions_23_0 = null;

        EObject lv_filterExpression_28_0 = null;

        EObject lv_expression_30_0 = null;

        EObject this_Reduce_32 = null;

        EObject lv_filterExpression_36_0 = null;

        EObject lv_filterExpression_41_0 = null;

        EObject lv_filterExpression_46_0 = null;

        EObject lv_filterExpression_51_0 = null;

        EObject lv_filterExpression_56_0 = null;

        EObject this_ShortestPathPattern_58 = null;

        EObject this_RelationshipsPattern_59 = null;

        EObject this_ParenthesizedExpression_60 = null;

        EObject this_FunctionInvocation_61 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:7420:2: ( ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | this_CaseExpression_10= ruleCaseExpression | ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis ) | this_MapLiteral_16= ruleMapLiteral | this_ListComprehension_17= ruleListComprehension | this_PatternComprehension_18= rulePatternComprehension | ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) ) )
            // InternalOpenCypherParser.g:7421:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | this_CaseExpression_10= ruleCaseExpression | ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis ) | this_MapLiteral_16= ruleMapLiteral | this_ListComprehension_17= ruleListComprehension | this_PatternComprehension_18= rulePatternComprehension | ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) )
            {
            // InternalOpenCypherParser.g:7421:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | this_CaseExpression_10= ruleCaseExpression | ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis ) | this_MapLiteral_16= ruleMapLiteral | this_ListComprehension_17= ruleListComprehension | this_PatternComprehension_18= rulePatternComprehension | ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) )
            int alt112=24;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // InternalOpenCypherParser.g:7422:3: ( () ( (lv_value_1_0= ruleNumber ) ) )
                    {
                    // InternalOpenCypherParser.g:7422:3: ( () ( (lv_value_1_0= ruleNumber ) ) )
                    // InternalOpenCypherParser.g:7423:4: () ( (lv_value_1_0= ruleNumber ) )
                    {
                    // InternalOpenCypherParser.g:7423:4: ()
                    // InternalOpenCypherParser.g:7424:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNumberConstantAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7433:4: ( (lv_value_1_0= ruleNumber ) )
                    // InternalOpenCypherParser.g:7434:5: (lv_value_1_0= ruleNumber )
                    {
                    // InternalOpenCypherParser.g:7434:5: (lv_value_1_0= ruleNumber )
                    // InternalOpenCypherParser.g:7435:6: lv_value_1_0= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getValueNumberParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_1_0=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:7454:3: ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) )
                    {
                    // InternalOpenCypherParser.g:7454:3: ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) )
                    // InternalOpenCypherParser.g:7455:4: () ( (lv_value_3_0= RULE_STRING_LITERAL ) )
                    {
                    // InternalOpenCypherParser.g:7455:4: ()
                    // InternalOpenCypherParser.g:7456:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getStringConstantAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7465:4: ( (lv_value_3_0= RULE_STRING_LITERAL ) )
                    // InternalOpenCypherParser.g:7466:5: (lv_value_3_0= RULE_STRING_LITERAL )
                    {
                    // InternalOpenCypherParser.g:7466:5: (lv_value_3_0= RULE_STRING_LITERAL )
                    // InternalOpenCypherParser.g:7467:6: lv_value_3_0= RULE_STRING_LITERAL
                    {
                    lv_value_3_0=(Token)match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_3_0, grammarAccess.getAtomAccess().getValueSTRING_LITERALTerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.STRING_LITERAL");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:7485:3: this_Parameter_4= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getParameterParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Parameter_4=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Parameter_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:7497:3: this_LegacyParameter_5= ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyParameter_5=ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyParameter_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:7509:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
                    {
                    // InternalOpenCypherParser.g:7509:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
                    // InternalOpenCypherParser.g:7510:4: () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
                    {
                    // InternalOpenCypherParser.g:7510:4: ()
                    // InternalOpenCypherParser.g:7511:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getBoolConstantAction_4_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7520:4: ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
                    // InternalOpenCypherParser.g:7521:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
                    {
                    // InternalOpenCypherParser.g:7521:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
                    // InternalOpenCypherParser.g:7522:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
                    {
                    // InternalOpenCypherParser.g:7522:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==TRUE) ) {
                        alt108=1;
                    }
                    else if ( (LA108_0==FALSE) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 0, input);

                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            // InternalOpenCypherParser.g:7523:7: lv_value_7_1= TRUE
                            {
                            lv_value_7_1=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_value_7_1, grammarAccess.getAtomAccess().getValueTRUEKeyword_4_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAtomRule());
                              							}
                              							setWithLastConsumed(current, "value", lv_value_7_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:7534:7: lv_value_7_2= FALSE
                            {
                            lv_value_7_2=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_value_7_2, grammarAccess.getAtomAccess().getValueFALSEKeyword_4_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAtomRule());
                              							}
                              							setWithLastConsumed(current, "value", lv_value_7_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:7549:3: ( () otherlv_9= NULL )
                    {
                    // InternalOpenCypherParser.g:7549:3: ( () otherlv_9= NULL )
                    // InternalOpenCypherParser.g:7550:4: () otherlv_9= NULL
                    {
                    // InternalOpenCypherParser.g:7550:4: ()
                    // InternalOpenCypherParser.g:7551:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNullConstantAction_5_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_9=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getAtomAccess().getNULLKeyword_5_1());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:7566:3: this_CaseExpression_10= ruleCaseExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CaseExpression_10=ruleCaseExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CaseExpression_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:7578:3: ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7578:3: ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis )
                    // InternalOpenCypherParser.g:7579:4: () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7579:4: ()
                    // InternalOpenCypherParser.g:7580:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getCountAction_7_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_12=(Token)match(input,COUNT,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getAtomAccess().getCOUNTKeyword_7_1());
                      			
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_102); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2());
                      			
                    }
                    otherlv_14=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getAtomAccess().getAsteriskKeyword_7_3());
                      			
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_15, grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:7607:3: this_MapLiteral_16= ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getMapLiteralParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_MapLiteral_16=ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_MapLiteral_16;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:7619:3: this_ListComprehension_17= ruleListComprehension
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ListComprehension_17=ruleListComprehension();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ListComprehension_17;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:7631:3: this_PatternComprehension_18= rulePatternComprehension
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PatternComprehension_18=rulePatternComprehension();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PatternComprehension_18;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:7643:3: ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) )
                    {
                    // InternalOpenCypherParser.g:7643:3: ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) )
                    // InternalOpenCypherParser.g:7644:4: () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket )
                    {
                    // InternalOpenCypherParser.g:7644:4: ()
                    // InternalOpenCypherParser.g:7645:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getExpressionListAction_11_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:7654:4: (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket )
                    // InternalOpenCypherParser.g:7655:5: otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket
                    {
                    otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_20, grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_11_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:7659:5: ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( ((LA110_0>=ALLSHORTESTPATHS && LA110_0<=WHERE)||(LA110_0>=CASE && LA110_0<=XOR)||(LA110_0>=AS && LA110_0<=OR)||LA110_0==DollarSign||LA110_0==LeftParenthesis||LA110_0==PlusSign||LA110_0==HyphenMinus||LA110_0==LeftSquareBracket||LA110_0==LeftCurlyBracket||LA110_0==RULE_ID||(LA110_0>=RULE_STRING_LITERAL && LA110_0<=RULE_DECIMAL)) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // InternalOpenCypherParser.g:7660:6: ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )*
                            {
                            // InternalOpenCypherParser.g:7660:6: ( (lv_expressions_21_0= ruleExpression ) )
                            // InternalOpenCypherParser.g:7661:7: (lv_expressions_21_0= ruleExpression )
                            {
                            // InternalOpenCypherParser.g:7661:7: (lv_expressions_21_0= ruleExpression )
                            // InternalOpenCypherParser.g:7662:8: lv_expressions_21_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_0_0());
                              							
                            }
                            pushFollow(FOLLOW_104);
                            lv_expressions_21_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getAtomRule());
                              								}
                              								add(
                              									current,
                              									"expressions",
                              									lv_expressions_21_0,
                              									"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }

                            // InternalOpenCypherParser.g:7679:6: (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )*
                            loop109:
                            do {
                                int alt109=2;
                                int LA109_0 = input.LA(1);

                                if ( (LA109_0==Comma) ) {
                                    alt109=1;
                                }


                                switch (alt109) {
                            	case 1 :
                            	    // InternalOpenCypherParser.g:7680:7: otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) )
                            	    {
                            	    otherlv_22=(Token)match(input,Comma,FOLLOW_36); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							newLeafNode(otherlv_22, grammarAccess.getAtomAccess().getCommaKeyword_11_1_1_1_0());
                            	      						
                            	    }
                            	    // InternalOpenCypherParser.g:7684:7: ( (lv_expressions_23_0= ruleExpression ) )
                            	    // InternalOpenCypherParser.g:7685:8: (lv_expressions_23_0= ruleExpression )
                            	    {
                            	    // InternalOpenCypherParser.g:7685:8: (lv_expressions_23_0= ruleExpression )
                            	    // InternalOpenCypherParser.g:7686:9: lv_expressions_23_0= ruleExpression
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_1_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_104);
                            	    lv_expressions_23_0=ruleExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAtomRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"expressions",
                            	      										lv_expressions_23_0,
                            	      										"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop109;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_24, grammarAccess.getAtomAccess().getRightSquareBracketKeyword_11_1_2());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:7712:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7712:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
                    // InternalOpenCypherParser.g:7713:4: () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7713:4: ()
                    // InternalOpenCypherParser.g:7714:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getExtractAction_12_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_26=(Token)match(input,EXTRACT,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_26, grammarAccess.getAtomAccess().getEXTRACTKeyword_12_1());
                      			
                    }
                    otherlv_27=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_27, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7731:4: ( (lv_filterExpression_28_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7732:5: (lv_filterExpression_28_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7732:5: (lv_filterExpression_28_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7733:6: lv_filterExpression_28_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0());
                      					
                    }
                    pushFollow(FOLLOW_105);
                    lv_filterExpression_28_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_28_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:7750:4: (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==VerticalLine) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // InternalOpenCypherParser.g:7751:5: otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) )
                            {
                            otherlv_29=(Token)match(input,VerticalLine,FOLLOW_36); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_29, grammarAccess.getAtomAccess().getVerticalLineKeyword_12_4_0());
                              				
                            }
                            // InternalOpenCypherParser.g:7755:5: ( (lv_expression_30_0= ruleExpression ) )
                            // InternalOpenCypherParser.g:7756:6: (lv_expression_30_0= ruleExpression )
                            {
                            // InternalOpenCypherParser.g:7756:6: (lv_expression_30_0= ruleExpression )
                            // InternalOpenCypherParser.g:7757:7: lv_expression_30_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_12_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_23);
                            lv_expression_30_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAtomRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_30_0,
                              								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_31=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_31, grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_5());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:7781:3: this_Reduce_32= ruleReduce
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getReduceParserRuleCall_13());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Reduce_32=ruleReduce();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Reduce_32;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:7793:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7793:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
                    // InternalOpenCypherParser.g:7794:4: () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7794:4: ()
                    // InternalOpenCypherParser.g:7795:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getFilterAction_14_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_34=(Token)match(input,FILTER,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_34, grammarAccess.getAtomAccess().getFILTERKeyword_14_1());
                      			
                    }
                    otherlv_35=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_35, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_14_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7812:4: ( (lv_filterExpression_36_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7813:5: (lv_filterExpression_36_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7813:5: (lv_filterExpression_36_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7814:6: lv_filterExpression_36_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_14_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_36_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_36_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_37, grammarAccess.getAtomAccess().getRightParenthesisKeyword_14_4());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:7837:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7837:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
                    // InternalOpenCypherParser.g:7838:4: () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7838:4: ()
                    // InternalOpenCypherParser.g:7839:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getAllAction_15_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_39=(Token)match(input,ALL,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_39, grammarAccess.getAtomAccess().getALLKeyword_15_1());
                      			
                    }
                    otherlv_40=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_40, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_15_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7856:4: ( (lv_filterExpression_41_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7857:5: (lv_filterExpression_41_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7857:5: (lv_filterExpression_41_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7858:6: lv_filterExpression_41_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_15_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_41_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_41_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_42=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_42, grammarAccess.getAtomAccess().getRightParenthesisKeyword_15_4());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:7881:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7881:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
                    // InternalOpenCypherParser.g:7882:4: () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7882:4: ()
                    // InternalOpenCypherParser.g:7883:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getAnyAction_16_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_44=(Token)match(input,ANY,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_44, grammarAccess.getAtomAccess().getANYKeyword_16_1());
                      			
                    }
                    otherlv_45=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_45, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_16_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7900:4: ( (lv_filterExpression_46_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7901:5: (lv_filterExpression_46_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7901:5: (lv_filterExpression_46_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7902:6: lv_filterExpression_46_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_16_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_46_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_46_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_47=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_47, grammarAccess.getAtomAccess().getRightParenthesisKeyword_16_4());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:7925:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7925:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
                    // InternalOpenCypherParser.g:7926:4: () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7926:4: ()
                    // InternalOpenCypherParser.g:7927:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getNoneAction_17_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_49=(Token)match(input,NONE,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_49, grammarAccess.getAtomAccess().getNONEKeyword_17_1());
                      			
                    }
                    otherlv_50=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_50, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_17_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7944:4: ( (lv_filterExpression_51_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7945:5: (lv_filterExpression_51_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7945:5: (lv_filterExpression_51_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7946:6: lv_filterExpression_51_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_17_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_51_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_51_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_52=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_52, grammarAccess.getAtomAccess().getRightParenthesisKeyword_17_4());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:7969:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
                    {
                    // InternalOpenCypherParser.g:7969:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
                    // InternalOpenCypherParser.g:7970:4: () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis
                    {
                    // InternalOpenCypherParser.g:7970:4: ()
                    // InternalOpenCypherParser.g:7971:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getSingleAction_18_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_54=(Token)match(input,SINGLE,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_54, grammarAccess.getAtomAccess().getSINGLEKeyword_18_1());
                      			
                    }
                    otherlv_55=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_55, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_18_2());
                      			
                    }
                    // InternalOpenCypherParser.g:7988:4: ( (lv_filterExpression_56_0= ruleFilterExpression ) )
                    // InternalOpenCypherParser.g:7989:5: (lv_filterExpression_56_0= ruleFilterExpression )
                    {
                    // InternalOpenCypherParser.g:7989:5: (lv_filterExpression_56_0= ruleFilterExpression )
                    // InternalOpenCypherParser.g:7990:6: lv_filterExpression_56_0= ruleFilterExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_18_3_0());
                      					
                    }
                    pushFollow(FOLLOW_23);
                    lv_filterExpression_56_0=ruleFilterExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomRule());
                      						}
                      						set(
                      							current,
                      							"filterExpression",
                      							lv_filterExpression_56_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_57=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_57, grammarAccess.getAtomAccess().getRightParenthesisKeyword_18_4());
                      			
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:8013:3: this_ShortestPathPattern_58= ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_19());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ShortestPathPattern_58=ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ShortestPathPattern_58;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:8025:3: this_RelationshipsPattern_59= ruleRelationshipsPattern
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_20());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RelationshipsPattern_59=ruleRelationshipsPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RelationshipsPattern_59;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:8037:3: this_ParenthesizedExpression_60= ruleParenthesizedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_21());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenthesizedExpression_60=ruleParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenthesizedExpression_60;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:8049:3: this_FunctionInvocation_61= ruleFunctionInvocation
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_22());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionInvocation_61=ruleFunctionInvocation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionInvocation_61;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalOpenCypherParser.g:8061:3: ( () ( ( ruleSYMBOLIC_NAME_X ) ) )
                    {
                    // InternalOpenCypherParser.g:8061:3: ( () ( ( ruleSYMBOLIC_NAME_X ) ) )
                    // InternalOpenCypherParser.g:8062:4: () ( ( ruleSYMBOLIC_NAME_X ) )
                    {
                    // InternalOpenCypherParser.g:8062:4: ()
                    // InternalOpenCypherParser.g:8063:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomAccess().getVariableRefAction_23_0(),
                      						current);
                      				
                    }

                    }

                    // InternalOpenCypherParser.g:8072:4: ( ( ruleSYMBOLIC_NAME_X ) )
                    // InternalOpenCypherParser.g:8073:5: ( ruleSYMBOLIC_NAME_X )
                    {
                    // InternalOpenCypherParser.g:8073:5: ( ruleSYMBOLIC_NAME_X )
                    // InternalOpenCypherParser.g:8074:6: ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {

                      						/* */
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationCrossReference_23_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAtom"


    // $ANTLR start "entryRuleReduce"
    // InternalOpenCypherParser.g:8096:1: entryRuleReduce returns [EObject current=null] : iv_ruleReduce= ruleReduce EOF ;
    public final EObject entryRuleReduce() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReduce = null;


        try {
            // InternalOpenCypherParser.g:8096:47: (iv_ruleReduce= ruleReduce EOF )
            // InternalOpenCypherParser.g:8097:2: iv_ruleReduce= ruleReduce EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReduceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReduce=ruleReduce();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReduce; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReduce"


    // $ANTLR start "ruleReduce"
    // InternalOpenCypherParser.g:8103:1: ruleReduce returns [EObject current=null] : (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis ) ;
    public final EObject ruleReduce() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_accumulator_2_0 = null;

        EObject lv_accumulatorExpression_4_0 = null;

        EObject lv_idInColl_6_0 = null;

        EObject lv_expression_8_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8109:2: ( (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis ) )
            // InternalOpenCypherParser.g:8110:2: (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis )
            {
            // InternalOpenCypherParser.g:8110:2: (otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis )
            // InternalOpenCypherParser.g:8111:3: otherlv_0= REDUCE otherlv_1= LeftParenthesis ( (lv_accumulator_2_0= ruleVariableDeclaration ) ) otherlv_3= EqualsSign ( (lv_accumulatorExpression_4_0= ruleExpression ) ) otherlv_5= Comma ( (lv_idInColl_6_0= ruleIdInColl ) ) otherlv_7= VerticalLine ( (lv_expression_8_0= ruleExpression ) ) otherlv_9= RightParenthesis
            {
            otherlv_0=(Token)match(input,REDUCE,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getReduceAccess().getREDUCEKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8119:3: ( (lv_accumulator_2_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:8120:4: (lv_accumulator_2_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:8120:4: (lv_accumulator_2_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:8121:5: lv_accumulator_2_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_accumulator_2_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"accumulator",
              						lv_accumulator_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,EqualsSign,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getReduceAccess().getEqualsSignKeyword_3());
              		
            }
            // InternalOpenCypherParser.g:8142:3: ( (lv_accumulatorExpression_4_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8143:4: (lv_accumulatorExpression_4_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8143:4: (lv_accumulatorExpression_4_0= ruleExpression )
            // InternalOpenCypherParser.g:8144:5: lv_accumulatorExpression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_106);
            lv_accumulatorExpression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"accumulatorExpression",
              						lv_accumulatorExpression_4_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getReduceAccess().getCommaKeyword_5());
              		
            }
            // InternalOpenCypherParser.g:8165:3: ( (lv_idInColl_6_0= ruleIdInColl ) )
            // InternalOpenCypherParser.g:8166:4: (lv_idInColl_6_0= ruleIdInColl )
            {
            // InternalOpenCypherParser.g:8166:4: (lv_idInColl_6_0= ruleIdInColl )
            // InternalOpenCypherParser.g:8167:5: lv_idInColl_6_0= ruleIdInColl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_idInColl_6_0=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"idInColl",
              						lv_idInColl_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.IdInColl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,VerticalLine,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getReduceAccess().getVerticalLineKeyword_7());
              		
            }
            // InternalOpenCypherParser.g:8188:3: ( (lv_expression_8_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8189:4: (lv_expression_8_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8189:4: (lv_expression_8_0= ruleExpression )
            // InternalOpenCypherParser.g:8190:5: lv_expression_8_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_expression_8_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReduceRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_8_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getReduceAccess().getRightParenthesisKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReduce"


    // $ANTLR start "entryRuleParenthesizedExpression"
    // InternalOpenCypherParser.g:8215:1: entryRuleParenthesizedExpression returns [EObject current=null] : iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF ;
    public final EObject entryRuleParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParenthesizedExpression = null;


        try {
            // InternalOpenCypherParser.g:8215:64: (iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF )
            // InternalOpenCypherParser.g:8216:2: iv_ruleParenthesizedExpression= ruleParenthesizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenthesizedExpression=ruleParenthesizedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenthesizedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParenthesizedExpression"


    // $ANTLR start "ruleParenthesizedExpression"
    // InternalOpenCypherParser.g:8222:1: ruleParenthesizedExpression returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8228:2: ( (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis ) )
            // InternalOpenCypherParser.g:8229:2: (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis )
            {
            // InternalOpenCypherParser.g:8229:2: (otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis )
            // InternalOpenCypherParser.g:8230:3: otherlv_0= LeftParenthesis ( (lv_expression_1_0= ruleExpression ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8234:3: ( (lv_expression_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8235:4: (lv_expression_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8235:4: (lv_expression_1_0= ruleExpression )
            // InternalOpenCypherParser.g:8236:5: lv_expression_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_expression_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParenthesizedExpression"


    // $ANTLR start "entryRuleRelationshipsPattern"
    // InternalOpenCypherParser.g:8261:1: entryRuleRelationshipsPattern returns [EObject current=null] : iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF ;
    public final EObject entryRuleRelationshipsPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipsPattern = null;


        try {
            // InternalOpenCypherParser.g:8261:61: (iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF )
            // InternalOpenCypherParser.g:8262:2: iv_ruleRelationshipsPattern= ruleRelationshipsPattern EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipsPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipsPattern=ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipsPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipsPattern"


    // $ANTLR start "ruleRelationshipsPattern"
    // InternalOpenCypherParser.g:8268:1: ruleRelationshipsPattern returns [EObject current=null] : ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ ) ;
    public final EObject ruleRelationshipsPattern() throws RecognitionException {
        EObject current = null;

        EObject lv_nodePattern_0_0 = null;

        EObject lv_chain_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8274:2: ( ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ ) )
            // InternalOpenCypherParser.g:8275:2: ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ )
            {
            // InternalOpenCypherParser.g:8275:2: ( ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+ )
            // InternalOpenCypherParser.g:8276:3: ( (lv_nodePattern_0_0= ruleNodePattern ) ) ( (lv_chain_1_0= rulePatternElementChain ) )+
            {
            // InternalOpenCypherParser.g:8276:3: ( (lv_nodePattern_0_0= ruleNodePattern ) )
            // InternalOpenCypherParser.g:8277:4: (lv_nodePattern_0_0= ruleNodePattern )
            {
            // InternalOpenCypherParser.g:8277:4: (lv_nodePattern_0_0= ruleNodePattern )
            // InternalOpenCypherParser.g:8278:5: lv_nodePattern_0_0= ruleNodePattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_29);
            lv_nodePattern_0_0=ruleNodePattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipsPatternRule());
              					}
              					set(
              						current,
              						"nodePattern",
              						lv_nodePattern_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.NodePattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8295:3: ( (lv_chain_1_0= rulePatternElementChain ) )+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8296:4: (lv_chain_1_0= rulePatternElementChain )
            	    {
            	    // InternalOpenCypherParser.g:8296:4: (lv_chain_1_0= rulePatternElementChain )
            	    // InternalOpenCypherParser.g:8297:5: lv_chain_1_0= rulePatternElementChain
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_73);
            	    lv_chain_1_0=rulePatternElementChain();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getRelationshipsPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"chain",
            	      						lv_chain_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.PatternElementChain");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipsPattern"


    // $ANTLR start "entryRuleFilterExpression"
    // InternalOpenCypherParser.g:8318:1: entryRuleFilterExpression returns [EObject current=null] : iv_ruleFilterExpression= ruleFilterExpression EOF ;
    public final EObject entryRuleFilterExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFilterExpression = null;


        try {
            // InternalOpenCypherParser.g:8318:57: (iv_ruleFilterExpression= ruleFilterExpression EOF )
            // InternalOpenCypherParser.g:8319:2: iv_ruleFilterExpression= ruleFilterExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFilterExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFilterExpression=ruleFilterExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFilterExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFilterExpression"


    // $ANTLR start "ruleFilterExpression"
    // InternalOpenCypherParser.g:8325:1: ruleFilterExpression returns [EObject current=null] : ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? ) ;
    public final EObject ruleFilterExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_idInColl_0_0 = null;

        EObject lv_where_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8331:2: ( ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? ) )
            // InternalOpenCypherParser.g:8332:2: ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? )
            {
            // InternalOpenCypherParser.g:8332:2: ( ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )? )
            // InternalOpenCypherParser.g:8333:3: ( (lv_idInColl_0_0= ruleIdInColl ) ) ( (lv_where_1_0= ruleWhere ) )?
            {
            // InternalOpenCypherParser.g:8333:3: ( (lv_idInColl_0_0= ruleIdInColl ) )
            // InternalOpenCypherParser.g:8334:4: (lv_idInColl_0_0= ruleIdInColl )
            {
            // InternalOpenCypherParser.g:8334:4: (lv_idInColl_0_0= ruleIdInColl )
            // InternalOpenCypherParser.g:8335:5: lv_idInColl_0_0= ruleIdInColl
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_56);
            lv_idInColl_0_0=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFilterExpressionRule());
              					}
              					set(
              						current,
              						"idInColl",
              						lv_idInColl_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.IdInColl");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8352:3: ( (lv_where_1_0= ruleWhere ) )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==WHERE) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // InternalOpenCypherParser.g:8353:4: (lv_where_1_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:8353:4: (lv_where_1_0= ruleWhere )
                    // InternalOpenCypherParser.g:8354:5: lv_where_1_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_where_1_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFilterExpressionRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_1_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFilterExpression"


    // $ANTLR start "entryRuleIdInColl"
    // InternalOpenCypherParser.g:8375:1: entryRuleIdInColl returns [EObject current=null] : iv_ruleIdInColl= ruleIdInColl EOF ;
    public final EObject entryRuleIdInColl() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdInColl = null;


        try {
            // InternalOpenCypherParser.g:8375:49: (iv_ruleIdInColl= ruleIdInColl EOF )
            // InternalOpenCypherParser.g:8376:2: iv_ruleIdInColl= ruleIdInColl EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdInCollRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdInColl=ruleIdInColl();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdInColl; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdInColl"


    // $ANTLR start "ruleIdInColl"
    // InternalOpenCypherParser.g:8382:1: ruleIdInColl returns [EObject current=null] : ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) ) ;
    public final EObject ruleIdInColl() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_variable_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8388:2: ( ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:8389:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:8389:2: ( ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:8390:3: ( (lv_variable_0_0= ruleVariableDeclaration ) ) otherlv_1= IN ( (lv_expression_2_0= ruleExpression ) )
            {
            // InternalOpenCypherParser.g:8390:3: ( (lv_variable_0_0= ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:8391:4: (lv_variable_0_0= ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:8391:4: (lv_variable_0_0= ruleVariableDeclaration )
            // InternalOpenCypherParser.g:8392:5: lv_variable_0_0= ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_50);
            lv_variable_0_0=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdInCollRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,IN,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIdInCollAccess().getINKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8413:3: ( (lv_expression_2_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8414:4: (lv_expression_2_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8414:4: (lv_expression_2_0= ruleExpression )
            // InternalOpenCypherParser.g:8415:5: lv_expression_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIdInCollRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdInColl"


    // $ANTLR start "entryRuleFunctionInvocation"
    // InternalOpenCypherParser.g:8436:1: entryRuleFunctionInvocation returns [EObject current=null] : iv_ruleFunctionInvocation= ruleFunctionInvocation EOF ;
    public final EObject entryRuleFunctionInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionInvocation = null;


        try {
            // InternalOpenCypherParser.g:8436:59: (iv_ruleFunctionInvocation= ruleFunctionInvocation EOF )
            // InternalOpenCypherParser.g:8437:2: iv_ruleFunctionInvocation= ruleFunctionInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionInvocation=ruleFunctionInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionInvocation"


    // $ANTLR start "ruleFunctionInvocation"
    // InternalOpenCypherParser.g:8443:1: ruleFunctionInvocation returns [EObject current=null] : ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) ;
    public final EObject ruleFunctionInvocation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_distinct_2_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_functionName_0_0 = null;

        EObject lv_parameter_3_0 = null;

        EObject lv_parameter_5_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8449:2: ( ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) )
            // InternalOpenCypherParser.g:8450:2: ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            {
            // InternalOpenCypherParser.g:8450:2: ( ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            // InternalOpenCypherParser.g:8451:3: ( (lv_functionName_0_0= ruleFunctionName ) ) otherlv_1= LeftParenthesis ( (lv_distinct_2_0= DISTINCT ) )? ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis
            {
            // InternalOpenCypherParser.g:8451:3: ( (lv_functionName_0_0= ruleFunctionName ) )
            // InternalOpenCypherParser.g:8452:4: (lv_functionName_0_0= ruleFunctionName )
            {
            // InternalOpenCypherParser.g:8452:4: (lv_functionName_0_0= ruleFunctionName )
            // InternalOpenCypherParser.g:8453:5: lv_functionName_0_0= ruleFunctionName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_functionName_0_0=ruleFunctionName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
              					}
              					set(
              						current,
              						"functionName",
              						lv_functionName_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.FunctionName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8474:3: ( (lv_distinct_2_0= DISTINCT ) )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==DISTINCT) ) {
                int LA115_1 = input.LA(2);

                if ( (synpred178_InternalOpenCypherParser()) ) {
                    alt115=1;
                }
            }
            switch (alt115) {
                case 1 :
                    // InternalOpenCypherParser.g:8475:4: (lv_distinct_2_0= DISTINCT )
                    {
                    // InternalOpenCypherParser.g:8475:4: (lv_distinct_2_0= DISTINCT )
                    // InternalOpenCypherParser.g:8476:5: lv_distinct_2_0= DISTINCT
                    {
                    lv_distinct_2_0=(Token)match(input,DISTINCT,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_distinct_2_0, grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionInvocationRule());
                      					}
                      					setWithLastConsumed(current, "distinct", true, "DISTINCT");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:8488:3: ( ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )* )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=ALLSHORTESTPATHS && LA117_0<=WHERE)||(LA117_0>=CASE && LA117_0<=XOR)||(LA117_0>=AS && LA117_0<=OR)||LA117_0==DollarSign||LA117_0==LeftParenthesis||LA117_0==PlusSign||LA117_0==HyphenMinus||LA117_0==LeftSquareBracket||LA117_0==LeftCurlyBracket||LA117_0==RULE_ID||(LA117_0>=RULE_STRING_LITERAL && LA117_0<=RULE_DECIMAL)) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // InternalOpenCypherParser.g:8489:4: ( (lv_parameter_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )*
                    {
                    // InternalOpenCypherParser.g:8489:4: ( (lv_parameter_3_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8490:5: (lv_parameter_3_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8490:5: (lv_parameter_3_0= ruleExpression )
                    // InternalOpenCypherParser.g:8491:6: lv_parameter_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_108);
                    lv_parameter_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
                      						}
                      						add(
                      							current,
                      							"parameter",
                      							lv_parameter_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:8508:4: (otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) ) )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==Comma) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:8509:5: otherlv_4= Comma ( (lv_parameter_5_0= ruleExpression ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_36); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:8513:5: ( (lv_parameter_5_0= ruleExpression ) )
                    	    // InternalOpenCypherParser.g:8514:6: (lv_parameter_5_0= ruleExpression )
                    	    {
                    	    // InternalOpenCypherParser.g:8514:6: (lv_parameter_5_0= ruleExpression )
                    	    // InternalOpenCypherParser.g:8515:7: lv_parameter_5_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_108);
                    	    lv_parameter_5_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionInvocationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"parameter",
                    	      								lv_parameter_5_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionInvocation"


    // $ANTLR start "entryRuleFunctionName"
    // InternalOpenCypherParser.g:8542:1: entryRuleFunctionName returns [String current=null] : iv_ruleFunctionName= ruleFunctionName EOF ;
    public final String entryRuleFunctionName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFunctionName = null;


        try {
            // InternalOpenCypherParser.g:8542:52: (iv_ruleFunctionName= ruleFunctionName EOF )
            // InternalOpenCypherParser.g:8543:2: iv_ruleFunctionName= ruleFunctionName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionName=ruleFunctionName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionName"


    // $ANTLR start "ruleFunctionName"
    // InternalOpenCypherParser.g:8549:1: ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleFunctionName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8555:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:8556:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionName"


    // $ANTLR start "entryRuleExplicitProcedureInvocation"
    // InternalOpenCypherParser.g:8569:1: entryRuleExplicitProcedureInvocation returns [EObject current=null] : iv_ruleExplicitProcedureInvocation= ruleExplicitProcedureInvocation EOF ;
    public final EObject entryRuleExplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExplicitProcedureInvocation = null;


        try {
            // InternalOpenCypherParser.g:8569:68: (iv_ruleExplicitProcedureInvocation= ruleExplicitProcedureInvocation EOF )
            // InternalOpenCypherParser.g:8570:2: iv_ruleExplicitProcedureInvocation= ruleExplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExplicitProcedureInvocation=ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExplicitProcedureInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExplicitProcedureInvocation"


    // $ANTLR start "ruleExplicitProcedureInvocation"
    // InternalOpenCypherParser.g:8576:1: ruleExplicitProcedureInvocation returns [EObject current=null] : ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleExplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_procedureName_0_0 = null;

        EObject lv_parameter_2_0 = null;

        EObject lv_parameter_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8582:2: ( ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis ) )
            // InternalOpenCypherParser.g:8583:2: ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis )
            {
            // InternalOpenCypherParser.g:8583:2: ( ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis )
            // InternalOpenCypherParser.g:8584:3: ( (lv_procedureName_0_0= ruleProcedureName ) ) otherlv_1= LeftParenthesis ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )? otherlv_5= RightParenthesis
            {
            // InternalOpenCypherParser.g:8584:3: ( (lv_procedureName_0_0= ruleProcedureName ) )
            // InternalOpenCypherParser.g:8585:4: (lv_procedureName_0_0= ruleProcedureName )
            {
            // InternalOpenCypherParser.g:8585:4: (lv_procedureName_0_0= ruleProcedureName )
            // InternalOpenCypherParser.g:8586:5: lv_procedureName_0_0= ruleProcedureName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_22);
            lv_procedureName_0_0=ruleProcedureName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExplicitProcedureInvocationRule());
              					}
              					set(
              						current,
              						"procedureName",
              						lv_procedureName_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.ProcedureName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:8607:3: ( ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=ALLSHORTESTPATHS && LA119_0<=WHERE)||(LA119_0>=CASE && LA119_0<=XOR)||(LA119_0>=AS && LA119_0<=OR)||LA119_0==DollarSign||LA119_0==LeftParenthesis||LA119_0==PlusSign||LA119_0==HyphenMinus||LA119_0==LeftSquareBracket||LA119_0==LeftCurlyBracket||LA119_0==RULE_ID||(LA119_0>=RULE_STRING_LITERAL && LA119_0<=RULE_DECIMAL)) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalOpenCypherParser.g:8608:4: ( (lv_parameter_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )*
                    {
                    // InternalOpenCypherParser.g:8608:4: ( (lv_parameter_2_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8609:5: (lv_parameter_2_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8609:5: (lv_parameter_2_0= ruleExpression )
                    // InternalOpenCypherParser.g:8610:6: lv_parameter_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_108);
                    lv_parameter_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExplicitProcedureInvocationRule());
                      						}
                      						add(
                      							current,
                      							"parameter",
                      							lv_parameter_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:8627:4: (otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) ) )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==Comma) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:8628:5: otherlv_3= Comma ( (lv_parameter_4_0= ruleExpression ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_36); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:8632:5: ( (lv_parameter_4_0= ruleExpression ) )
                    	    // InternalOpenCypherParser.g:8633:6: (lv_parameter_4_0= ruleExpression )
                    	    {
                    	    // InternalOpenCypherParser.g:8633:6: (lv_parameter_4_0= ruleExpression )
                    	    // InternalOpenCypherParser.g:8634:7: lv_parameter_4_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_108);
                    	    lv_parameter_4_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExplicitProcedureInvocationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"parameter",
                    	      								lv_parameter_4_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExplicitProcedureInvocation"


    // $ANTLR start "entryRuleProcedureResultField"
    // InternalOpenCypherParser.g:8661:1: entryRuleProcedureResultField returns [String current=null] : iv_ruleProcedureResultField= ruleProcedureResultField EOF ;
    public final String entryRuleProcedureResultField() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleProcedureResultField = null;


        try {
            // InternalOpenCypherParser.g:8661:60: (iv_ruleProcedureResultField= ruleProcedureResultField EOF )
            // InternalOpenCypherParser.g:8662:2: iv_ruleProcedureResultField= ruleProcedureResultField EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getProcedureResultFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProcedureResultField=ruleProcedureResultField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProcedureResultField.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProcedureResultField"


    // $ANTLR start "ruleProcedureResultField"
    // InternalOpenCypherParser.g:8668:1: ruleProcedureResultField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken ruleProcedureResultField() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8674:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:8675:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProcedureResultField"


    // $ANTLR start "entryRuleImplicitProcedureInvocation"
    // InternalOpenCypherParser.g:8688:1: entryRuleImplicitProcedureInvocation returns [EObject current=null] : iv_ruleImplicitProcedureInvocation= ruleImplicitProcedureInvocation EOF ;
    public final EObject entryRuleImplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleImplicitProcedureInvocation = null;


        try {
            // InternalOpenCypherParser.g:8688:68: (iv_ruleImplicitProcedureInvocation= ruleImplicitProcedureInvocation EOF )
            // InternalOpenCypherParser.g:8689:2: iv_ruleImplicitProcedureInvocation= ruleImplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImplicitProcedureInvocation=ruleImplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImplicitProcedureInvocation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleImplicitProcedureInvocation"


    // $ANTLR start "ruleImplicitProcedureInvocation"
    // InternalOpenCypherParser.g:8695:1: ruleImplicitProcedureInvocation returns [EObject current=null] : this_ProcedureName_0= ruleProcedureName ;
    public final EObject ruleImplicitProcedureInvocation() throws RecognitionException {
        EObject current = null;

        EObject this_ProcedureName_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8701:2: (this_ProcedureName_0= ruleProcedureName )
            // InternalOpenCypherParser.g:8702:2: this_ProcedureName_0= ruleProcedureName
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_ProcedureName_0=ruleProcedureName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_ProcedureName_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleImplicitProcedureInvocation"


    // $ANTLR start "entryRuleProcedureName"
    // InternalOpenCypherParser.g:8716:1: entryRuleProcedureName returns [EObject current=null] : iv_ruleProcedureName= ruleProcedureName EOF ;
    public final EObject entryRuleProcedureName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleProcedureName = null;


        try {
            // InternalOpenCypherParser.g:8716:54: (iv_ruleProcedureName= ruleProcedureName EOF )
            // InternalOpenCypherParser.g:8717:2: iv_ruleProcedureName= ruleProcedureName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getProcedureNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProcedureName=ruleProcedureName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProcedureName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProcedureName"


    // $ANTLR start "ruleProcedureName"
    // InternalOpenCypherParser.g:8723:1: ruleProcedureName returns [EObject current=null] : ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) ;
    public final EObject ruleProcedureName() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_namespace_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8729:2: ( ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) )
            // InternalOpenCypherParser.g:8730:2: ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            {
            // InternalOpenCypherParser.g:8730:2: ( ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:8731:3: ( (lv_namespace_0_0= ruleNamespace ) ) ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:8731:3: ( (lv_namespace_0_0= ruleNamespace ) )
            // InternalOpenCypherParser.g:8732:4: (lv_namespace_0_0= ruleNamespace )
            {
            // InternalOpenCypherParser.g:8732:4: (lv_namespace_0_0= ruleNamespace )
            // InternalOpenCypherParser.g:8733:5: lv_namespace_0_0= ruleNamespace
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_namespace_0_0=ruleNamespace();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getProcedureNameRule());
              					}
              					set(
              						current,
              						"namespace",
              						lv_namespace_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Namespace");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8750:3: ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:8751:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:8751:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:8752:5: lv_name_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_name_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getProcedureNameRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProcedureName"


    // $ANTLR start "entryRuleNamespace"
    // InternalOpenCypherParser.g:8773:1: entryRuleNamespace returns [String current=null] : iv_ruleNamespace= ruleNamespace EOF ;
    public final String entryRuleNamespace() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNamespace = null;


        try {
            // InternalOpenCypherParser.g:8773:49: (iv_ruleNamespace= ruleNamespace EOF )
            // InternalOpenCypherParser.g:8774:2: iv_ruleNamespace= ruleNamespace EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespace=ruleNamespace();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespace.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNamespace"


    // $ANTLR start "ruleNamespace"
    // InternalOpenCypherParser.g:8780:1: ruleNamespace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )* ;
    public final AntlrDatatypeRuleToken ruleNamespace() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8786:2: ( (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )* )
            // InternalOpenCypherParser.g:8787:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )*
            {
            // InternalOpenCypherParser.g:8787:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )*
            loop120:
            do {
                int alt120=2;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8788:3: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop
            	    {
            	    if ( state.backtracking==0 ) {

            	      			newCompositeNode(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0());
            	      		
            	    }
            	    pushFollow(FOLLOW_109);
            	    this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(this_SYMBOLIC_NAME_X_0);
            	      		
            	    }
            	    if ( state.backtracking==0 ) {

            	      			afterParserOrEnumRuleCall();
            	      		
            	    }
            	    kw=(Token)match(input,FullStop,FOLLOW_7); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getNamespaceAccess().getFullStopKeyword_1());
            	      		
            	    }

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNamespace"


    // $ANTLR start "entryRuleListComprehension"
    // InternalOpenCypherParser.g:8807:1: entryRuleListComprehension returns [EObject current=null] : iv_ruleListComprehension= ruleListComprehension EOF ;
    public final EObject entryRuleListComprehension() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleListComprehension = null;


        try {
            // InternalOpenCypherParser.g:8807:58: (iv_ruleListComprehension= ruleListComprehension EOF )
            // InternalOpenCypherParser.g:8808:2: iv_ruleListComprehension= ruleListComprehension EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getListComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleListComprehension=ruleListComprehension();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleListComprehension; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleListComprehension"


    // $ANTLR start "ruleListComprehension"
    // InternalOpenCypherParser.g:8814:1: ruleListComprehension returns [EObject current=null] : (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket ) ;
    public final EObject ruleListComprehension() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_filterExpression_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8820:2: ( (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket ) )
            // InternalOpenCypherParser.g:8821:2: (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket )
            {
            // InternalOpenCypherParser.g:8821:2: (otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket )
            // InternalOpenCypherParser.g:8822:3: otherlv_0= LeftSquareBracket ( (lv_filterExpression_1_0= ruleFilterExpression ) ) (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )? otherlv_4= RightSquareBracket
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8826:3: ( (lv_filterExpression_1_0= ruleFilterExpression ) )
            // InternalOpenCypherParser.g:8827:4: (lv_filterExpression_1_0= ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:8827:4: (lv_filterExpression_1_0= ruleFilterExpression )
            // InternalOpenCypherParser.g:8828:5: lv_filterExpression_1_0= ruleFilterExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_110);
            lv_filterExpression_1_0=ruleFilterExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getListComprehensionRule());
              					}
              					set(
              						current,
              						"filterExpression",
              						lv_filterExpression_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.FilterExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8845:3: (otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) ) )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==VerticalLine) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // InternalOpenCypherParser.g:8846:4: otherlv_2= VerticalLine ( (lv_expression_3_0= ruleExpression ) )
                    {
                    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0());
                      			
                    }
                    // InternalOpenCypherParser.g:8850:4: ( (lv_expression_3_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:8851:5: (lv_expression_3_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:8851:5: (lv_expression_3_0= ruleExpression )
                    // InternalOpenCypherParser.g:8852:6: lv_expression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_31);
                    lv_expression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getListComprehensionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleListComprehension"


    // $ANTLR start "entryRulePatternComprehension"
    // InternalOpenCypherParser.g:8878:1: entryRulePatternComprehension returns [EObject current=null] : iv_rulePatternComprehension= rulePatternComprehension EOF ;
    public final EObject entryRulePatternComprehension() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePatternComprehension = null;


        try {
            // InternalOpenCypherParser.g:8878:61: (iv_rulePatternComprehension= rulePatternComprehension EOF )
            // InternalOpenCypherParser.g:8879:2: iv_rulePatternComprehension= rulePatternComprehension EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPatternComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePatternComprehension=rulePatternComprehension();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePatternComprehension; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePatternComprehension"


    // $ANTLR start "rulePatternComprehension"
    // InternalOpenCypherParser.g:8885:1: rulePatternComprehension returns [EObject current=null] : (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) ;
    public final EObject rulePatternComprehension() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_pathVariable_1_0 = null;

        EObject lv_pattern_3_0 = null;

        EObject lv_where_4_0 = null;

        EObject lv_expression_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:8891:2: ( (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )
            // InternalOpenCypherParser.g:8892:2: (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            {
            // InternalOpenCypherParser.g:8892:2: (otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            // InternalOpenCypherParser.g:8893:3: otherlv_0= LeftSquareBracket ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )? ( (lv_pattern_3_0= ruleRelationshipsPattern ) ) ( (lv_where_4_0= ruleWhere ) )? otherlv_5= VerticalLine ( (lv_expression_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket
            {
            otherlv_0=(Token)match(input,LeftSquareBracket,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:8897:3: ( ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( ((LA122_0>=ALLSHORTESTPATHS && LA122_0<=WHERE)||(LA122_0>=CASE && LA122_0<=XOR)||(LA122_0>=AS && LA122_0<=OR)||LA122_0==RULE_ID) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // InternalOpenCypherParser.g:8898:4: ( (lv_pathVariable_1_0= ruleVariableDeclaration ) ) otherlv_2= EqualsSign
                    {
                    // InternalOpenCypherParser.g:8898:4: ( (lv_pathVariable_1_0= ruleVariableDeclaration ) )
                    // InternalOpenCypherParser.g:8899:5: (lv_pathVariable_1_0= ruleVariableDeclaration )
                    {
                    // InternalOpenCypherParser.g:8899:5: (lv_pathVariable_1_0= ruleVariableDeclaration )
                    // InternalOpenCypherParser.g:8900:6: lv_pathVariable_1_0= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_pathVariable_1_0=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
                      						}
                      						set(
                      							current,
                      							"pathVariable",
                      							lv_pathVariable_1_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.VariableDeclaration");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalOpenCypherParser.g:8922:3: ( (lv_pattern_3_0= ruleRelationshipsPattern ) )
            // InternalOpenCypherParser.g:8923:4: (lv_pattern_3_0= ruleRelationshipsPattern )
            {
            // InternalOpenCypherParser.g:8923:4: (lv_pattern_3_0= ruleRelationshipsPattern )
            // InternalOpenCypherParser.g:8924:5: lv_pattern_3_0= ruleRelationshipsPattern
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_111);
            lv_pattern_3_0=ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.RelationshipsPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:8941:3: ( (lv_where_4_0= ruleWhere ) )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==WHERE) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // InternalOpenCypherParser.g:8942:4: (lv_where_4_0= ruleWhere )
                    {
                    // InternalOpenCypherParser.g:8942:4: (lv_where_4_0= ruleWhere )
                    // InternalOpenCypherParser.g:8943:5: lv_where_4_0= ruleWhere
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_51);
                    lv_where_4_0=ruleWhere();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_4_0,
                      						"org.slizaa.neo4j.opencypher.OpenCypher.Where");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,VerticalLine,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4());
              		
            }
            // InternalOpenCypherParser.g:8964:3: ( (lv_expression_6_0= ruleExpression ) )
            // InternalOpenCypherParser.g:8965:4: (lv_expression_6_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:8965:4: (lv_expression_6_0= ruleExpression )
            // InternalOpenCypherParser.g:8966:5: lv_expression_6_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_31);
            lv_expression_6_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPatternComprehensionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_6_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePatternComprehension"


    // $ANTLR start "entryRulePropertyLookup"
    // InternalOpenCypherParser.g:8991:1: entryRulePropertyLookup returns [EObject current=null] : iv_rulePropertyLookup= rulePropertyLookup EOF ;
    public final EObject entryRulePropertyLookup() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyLookup = null;


        try {
            // InternalOpenCypherParser.g:8991:55: (iv_rulePropertyLookup= rulePropertyLookup EOF )
            // InternalOpenCypherParser.g:8992:2: iv_rulePropertyLookup= rulePropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyLookup=rulePropertyLookup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyLookup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyLookup"


    // $ANTLR start "rulePropertyLookup"
    // InternalOpenCypherParser.g:8998:1: rulePropertyLookup returns [EObject current=null] : (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) ) ;
    public final EObject rulePropertyLookup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_propertyOperator_2_1=null;
        Token lv_propertyOperator_2_2=null;
        AntlrDatatypeRuleToken lv_propertyKeyName_1_0 = null;

        AntlrDatatypeRuleToken lv_propertyKeyName_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9004:2: ( (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) ) )
            // InternalOpenCypherParser.g:9005:2: (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) )
            {
            // InternalOpenCypherParser.g:9005:2: (otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) ) )
            // InternalOpenCypherParser.g:9006:3: otherlv_0= FullStop ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )
            {
            otherlv_0=(Token)match(input,FullStop,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:9010:3: ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // InternalOpenCypherParser.g:9011:4: ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) )
                    {
                    // InternalOpenCypherParser.g:9011:4: ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) )
                    // InternalOpenCypherParser.g:9012:5: ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) )
                    {
                    // InternalOpenCypherParser.g:9012:5: ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) )
                    // InternalOpenCypherParser.g:9013:6: (lv_propertyKeyName_1_0= rulePropertyKeyName )
                    {
                    // InternalOpenCypherParser.g:9013:6: (lv_propertyKeyName_1_0= rulePropertyKeyName )
                    // InternalOpenCypherParser.g:9014:7: lv_propertyKeyName_1_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_112);
                    lv_propertyKeyName_1_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyLookupRule());
                      							}
                      							set(
                      								current,
                      								"propertyKeyName",
                      								lv_propertyKeyName_1_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:9031:5: ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) )
                    // InternalOpenCypherParser.g:9032:6: ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) )
                    {
                    // InternalOpenCypherParser.g:9032:6: ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) )
                    // InternalOpenCypherParser.g:9033:7: (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark )
                    {
                    // InternalOpenCypherParser.g:9033:7: (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark )
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==QuestionMark) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==ExclamationMark) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            // InternalOpenCypherParser.g:9034:8: lv_propertyOperator_2_1= QuestionMark
                            {
                            lv_propertyOperator_2_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								newLeafNode(lv_propertyOperator_2_1, grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0());
                              							
                            }
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getPropertyLookupRule());
                              								}
                              								setWithLastConsumed(current, "propertyOperator", lv_propertyOperator_2_1, null);
                              							
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:9045:8: lv_propertyOperator_2_2= ExclamationMark
                            {
                            lv_propertyOperator_2_2=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								newLeafNode(lv_propertyOperator_2_2, grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1());
                              							
                            }
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getPropertyLookupRule());
                              								}
                              								setWithLastConsumed(current, "propertyOperator", lv_propertyOperator_2_2, null);
                              							
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9060:4: ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) )
                    {
                    // InternalOpenCypherParser.g:9060:4: ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) )
                    // InternalOpenCypherParser.g:9061:5: (lv_propertyKeyName_3_0= rulePropertyKeyName )
                    {
                    // InternalOpenCypherParser.g:9061:5: (lv_propertyKeyName_3_0= rulePropertyKeyName )
                    // InternalOpenCypherParser.g:9062:6: lv_propertyKeyName_3_0= rulePropertyKeyName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_propertyKeyName_3_0=rulePropertyKeyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyLookupRule());
                      						}
                      						set(
                      							current,
                      							"propertyKeyName",
                      							lv_propertyKeyName_3_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyLookup"


    // $ANTLR start "entryRuleCaseExpression"
    // InternalOpenCypherParser.g:9084:1: entryRuleCaseExpression returns [EObject current=null] : iv_ruleCaseExpression= ruleCaseExpression EOF ;
    public final EObject entryRuleCaseExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseExpression = null;


        try {
            // InternalOpenCypherParser.g:9084:55: (iv_ruleCaseExpression= ruleCaseExpression EOF )
            // InternalOpenCypherParser.g:9085:2: iv_ruleCaseExpression= ruleCaseExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseExpression=ruleCaseExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseExpression"


    // $ANTLR start "ruleCaseExpression"
    // InternalOpenCypherParser.g:9091:1: ruleCaseExpression returns [EObject current=null] : ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END ) ;
    public final EObject ruleCaseExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_caseAlternatives_1_0 = null;

        EObject lv_caseExpression_3_0 = null;

        EObject lv_caseAlternatives_4_0 = null;

        EObject lv_elseExpression_6_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9097:2: ( ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END ) )
            // InternalOpenCypherParser.g:9098:2: ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END )
            {
            // InternalOpenCypherParser.g:9098:2: ( ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END )
            // InternalOpenCypherParser.g:9099:3: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) ) (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )? otherlv_7= END
            {
            // InternalOpenCypherParser.g:9099:3: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) | (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ ) )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==CASE) ) {
                int LA128_1 = input.LA(2);

                if ( (synpred190_InternalOpenCypherParser()) ) {
                    alt128=1;
                }
                else if ( (true) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // InternalOpenCypherParser.g:9100:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
                    {
                    // InternalOpenCypherParser.g:9100:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
                    // InternalOpenCypherParser.g:9101:5: otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
                    {
                    otherlv_0=(Token)match(input,CASE,FOLLOW_113); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0());
                      				
                    }
                    // InternalOpenCypherParser.g:9105:5: ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
                    int cnt126=0;
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==WHEN) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:9106:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
                    	    {
                    	    // InternalOpenCypherParser.g:9106:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
                    	    // InternalOpenCypherParser.g:9107:7: lv_caseAlternatives_1_0= ruleCaseAlternatives
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_114);
                    	    lv_caseAlternatives_1_0=ruleCaseAlternatives();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"caseAlternatives",
                    	      								lv_caseAlternatives_1_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.CaseAlternatives");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt126 >= 1 ) break loop126;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(126, input);
                                throw eee;
                        }
                        cnt126++;
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9126:4: (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ )
                    {
                    // InternalOpenCypherParser.g:9126:4: (otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+ )
                    // InternalOpenCypherParser.g:9127:5: otherlv_2= CASE ( (lv_caseExpression_3_0= ruleExpression ) ) ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+
                    {
                    otherlv_2=(Token)match(input,CASE,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0());
                      				
                    }
                    // InternalOpenCypherParser.g:9131:5: ( (lv_caseExpression_3_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:9132:6: (lv_caseExpression_3_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:9132:6: (lv_caseExpression_3_0= ruleExpression )
                    // InternalOpenCypherParser.g:9133:7: lv_caseExpression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_113);
                    lv_caseExpression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                      							}
                      							set(
                      								current,
                      								"caseExpression",
                      								lv_caseExpression_3_0,
                      								"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:9150:5: ( (lv_caseAlternatives_4_0= ruleCaseAlternatives ) )+
                    int cnt127=0;
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==WHEN) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:9151:6: (lv_caseAlternatives_4_0= ruleCaseAlternatives )
                    	    {
                    	    // InternalOpenCypherParser.g:9151:6: (lv_caseAlternatives_4_0= ruleCaseAlternatives )
                    	    // InternalOpenCypherParser.g:9152:7: lv_caseAlternatives_4_0= ruleCaseAlternatives
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_114);
                    	    lv_caseAlternatives_4_0=ruleCaseAlternatives();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"caseAlternatives",
                    	      								lv_caseAlternatives_4_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.CaseAlternatives");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt127 >= 1 ) break loop127;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(127, input);
                                throw eee;
                        }
                        cnt127++;
                    } while (true);


                    }


                    }
                    break;

            }

            // InternalOpenCypherParser.g:9171:3: (otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) ) )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ELSE) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // InternalOpenCypherParser.g:9172:4: otherlv_5= ELSE ( (lv_elseExpression_6_0= ruleExpression ) )
                    {
                    otherlv_5=(Token)match(input,ELSE,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0());
                      			
                    }
                    // InternalOpenCypherParser.g:9176:4: ( (lv_elseExpression_6_0= ruleExpression ) )
                    // InternalOpenCypherParser.g:9177:5: (lv_elseExpression_6_0= ruleExpression )
                    {
                    // InternalOpenCypherParser.g:9177:5: (lv_elseExpression_6_0= ruleExpression )
                    // InternalOpenCypherParser.g:9178:6: lv_elseExpression_6_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_115);
                    lv_elseExpression_6_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
                      						}
                      						set(
                      							current,
                      							"elseExpression",
                      							lv_elseExpression_6_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getCaseExpressionAccess().getENDKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseExpression"


    // $ANTLR start "entryRuleCaseAlternatives"
    // InternalOpenCypherParser.g:9204:1: entryRuleCaseAlternatives returns [EObject current=null] : iv_ruleCaseAlternatives= ruleCaseAlternatives EOF ;
    public final EObject entryRuleCaseAlternatives() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseAlternatives = null;


        try {
            // InternalOpenCypherParser.g:9204:57: (iv_ruleCaseAlternatives= ruleCaseAlternatives EOF )
            // InternalOpenCypherParser.g:9205:2: iv_ruleCaseAlternatives= ruleCaseAlternatives EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseAlternativesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseAlternatives=ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseAlternatives; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseAlternatives"


    // $ANTLR start "ruleCaseAlternatives"
    // InternalOpenCypherParser.g:9211:1: ruleCaseAlternatives returns [EObject current=null] : (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) ) ;
    public final EObject ruleCaseAlternatives() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_when_1_0 = null;

        EObject lv_then_3_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9217:2: ( (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:9218:2: (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:9218:2: (otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:9219:3: otherlv_0= WHEN ( (lv_when_1_0= ruleExpression ) ) otherlv_2= THEN ( (lv_then_3_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,WHEN,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:9223:3: ( (lv_when_1_0= ruleExpression ) )
            // InternalOpenCypherParser.g:9224:4: (lv_when_1_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:9224:4: (lv_when_1_0= ruleExpression )
            // InternalOpenCypherParser.g:9225:5: lv_when_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_116);
            lv_when_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativesRule());
              					}
              					set(
              						current,
              						"when",
              						lv_when_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,THEN,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2());
              		
            }
            // InternalOpenCypherParser.g:9246:3: ( (lv_then_3_0= ruleExpression ) )
            // InternalOpenCypherParser.g:9247:4: (lv_then_3_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:9247:4: (lv_then_3_0= ruleExpression )
            // InternalOpenCypherParser.g:9248:5: lv_then_3_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_then_3_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativesRule());
              					}
              					set(
              						current,
              						"then",
              						lv_then_3_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseAlternatives"


    // $ANTLR start "entryRuleVariableDeclaration"
    // InternalOpenCypherParser.g:9269:1: entryRuleVariableDeclaration returns [EObject current=null] : iv_ruleVariableDeclaration= ruleVariableDeclaration EOF ;
    public final EObject entryRuleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDeclaration = null;


        try {
            // InternalOpenCypherParser.g:9269:60: (iv_ruleVariableDeclaration= ruleVariableDeclaration EOF )
            // InternalOpenCypherParser.g:9270:2: iv_ruleVariableDeclaration= ruleVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclaration=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableDeclaration"


    // $ANTLR start "ruleVariableDeclaration"
    // InternalOpenCypherParser.g:9276:1: ruleVariableDeclaration returns [EObject current=null] : ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) ;
    public final EObject ruleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9282:2: ( ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) ) )
            // InternalOpenCypherParser.g:9283:2: ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            {
            // InternalOpenCypherParser.g:9283:2: ( () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:9284:3: () ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:9284:3: ()
            // InternalOpenCypherParser.g:9285:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:9294:3: ( (lv_name_1_0= ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:9295:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:9295:4: (lv_name_1_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:9296:5: lv_name_1_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_name_1_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableDeclaration"


    // $ANTLR start "entryRuleMapLiteral"
    // InternalOpenCypherParser.g:9317:1: entryRuleMapLiteral returns [EObject current=null] : iv_ruleMapLiteral= ruleMapLiteral EOF ;
    public final EObject entryRuleMapLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMapLiteral = null;


        try {
            // InternalOpenCypherParser.g:9317:51: (iv_ruleMapLiteral= ruleMapLiteral EOF )
            // InternalOpenCypherParser.g:9318:2: iv_ruleMapLiteral= ruleMapLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMapLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMapLiteral=ruleMapLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMapLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMapLiteral"


    // $ANTLR start "ruleMapLiteral"
    // InternalOpenCypherParser.g:9324:1: ruleMapLiteral returns [EObject current=null] : ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket ) ;
    public final EObject ruleMapLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_entries_2_0 = null;

        EObject lv_entries_4_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9330:2: ( ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket ) )
            // InternalOpenCypherParser.g:9331:2: ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:9331:2: ( () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket )
            // InternalOpenCypherParser.g:9332:3: () otherlv_1= LeftCurlyBracket ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )? otherlv_5= RightCurlyBracket
            {
            // InternalOpenCypherParser.g:9332:3: ()
            // InternalOpenCypherParser.g:9333:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getMapLiteralAccess().getMapLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_117); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:9346:3: ( ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )* )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=ALLSHORTESTPATHS && LA131_0<=WHERE)||(LA131_0>=CASE && LA131_0<=XOR)||(LA131_0>=AS && LA131_0<=OR)||LA131_0==RULE_ID) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // InternalOpenCypherParser.g:9347:4: ( (lv_entries_2_0= ruleMapLiteralEntry ) ) (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )*
                    {
                    // InternalOpenCypherParser.g:9347:4: ( (lv_entries_2_0= ruleMapLiteralEntry ) )
                    // InternalOpenCypherParser.g:9348:5: (lv_entries_2_0= ruleMapLiteralEntry )
                    {
                    // InternalOpenCypherParser.g:9348:5: (lv_entries_2_0= ruleMapLiteralEntry )
                    // InternalOpenCypherParser.g:9349:6: lv_entries_2_0= ruleMapLiteralEntry
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_118);
                    lv_entries_2_0=ruleMapLiteralEntry();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMapLiteralRule());
                      						}
                      						add(
                      							current,
                      							"entries",
                      							lv_entries_2_0,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.MapLiteralEntry");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalOpenCypherParser.g:9366:4: (otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) ) )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==Comma) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:9367:5: otherlv_3= Comma ( (lv_entries_4_0= ruleMapLiteralEntry ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalOpenCypherParser.g:9371:5: ( (lv_entries_4_0= ruleMapLiteralEntry ) )
                    	    // InternalOpenCypherParser.g:9372:6: (lv_entries_4_0= ruleMapLiteralEntry )
                    	    {
                    	    // InternalOpenCypherParser.g:9372:6: (lv_entries_4_0= ruleMapLiteralEntry )
                    	    // InternalOpenCypherParser.g:9373:7: lv_entries_4_0= ruleMapLiteralEntry
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_118);
                    	    lv_entries_4_0=ruleMapLiteralEntry();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getMapLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_4_0,
                    	      								"org.slizaa.neo4j.opencypher.OpenCypher.MapLiteralEntry");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMapLiteral"


    // $ANTLR start "entryRuleMapLiteralEntry"
    // InternalOpenCypherParser.g:9400:1: entryRuleMapLiteralEntry returns [EObject current=null] : iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF ;
    public final EObject entryRuleMapLiteralEntry() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMapLiteralEntry = null;


        try {
            // InternalOpenCypherParser.g:9400:56: (iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF )
            // InternalOpenCypherParser.g:9401:2: iv_ruleMapLiteralEntry= ruleMapLiteralEntry EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMapLiteralEntryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMapLiteralEntry=ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMapLiteralEntry; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMapLiteralEntry"


    // $ANTLR start "ruleMapLiteralEntry"
    // InternalOpenCypherParser.g:9407:1: ruleMapLiteralEntry returns [EObject current=null] : ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) ) ;
    public final EObject ruleMapLiteralEntry() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_key_0_0 = null;

        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9413:2: ( ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) ) )
            // InternalOpenCypherParser.g:9414:2: ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) )
            {
            // InternalOpenCypherParser.g:9414:2: ( ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) )
            // InternalOpenCypherParser.g:9415:3: ( (lv_key_0_0= rulePropertyKeyName ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) )
            {
            // InternalOpenCypherParser.g:9415:3: ( (lv_key_0_0= rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:9416:4: (lv_key_0_0= rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:9416:4: (lv_key_0_0= rulePropertyKeyName )
            // InternalOpenCypherParser.g:9417:5: lv_key_0_0= rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_21);
            lv_key_0_0=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMapLiteralEntryRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyKeyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_36); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1());
              		
            }
            // InternalOpenCypherParser.g:9438:3: ( (lv_value_2_0= ruleExpression ) )
            // InternalOpenCypherParser.g:9439:4: (lv_value_2_0= ruleExpression )
            {
            // InternalOpenCypherParser.g:9439:4: (lv_value_2_0= ruleExpression )
            // InternalOpenCypherParser.g:9440:5: lv_value_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMapLiteralEntryRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMapLiteralEntry"


    // $ANTLR start "entryRuleLegacyParameter"
    // InternalOpenCypherParser.g:9461:1: entryRuleLegacyParameter returns [EObject current=null] : iv_ruleLegacyParameter= ruleLegacyParameter EOF ;
    public final EObject entryRuleLegacyParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLegacyParameter = null;


        try {
            // InternalOpenCypherParser.g:9461:56: (iv_ruleLegacyParameter= ruleLegacyParameter EOF )
            // InternalOpenCypherParser.g:9462:2: iv_ruleLegacyParameter= ruleLegacyParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyParameter=ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLegacyParameter"


    // $ANTLR start "ruleLegacyParameter"
    // InternalOpenCypherParser.g:9468:1: ruleLegacyParameter returns [EObject current=null] : (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket ) ;
    public final EObject ruleLegacyParameter() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_parameter_1_1 = null;

        AntlrDatatypeRuleToken lv_parameter_1_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9474:2: ( (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket ) )
            // InternalOpenCypherParser.g:9475:2: (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:9475:2: (otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket )
            // InternalOpenCypherParser.g:9476:3: otherlv_0= LeftCurlyBracket ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) otherlv_2= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_119); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:9480:3: ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) )
            // InternalOpenCypherParser.g:9481:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:9481:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            // InternalOpenCypherParser.g:9482:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            {
            // InternalOpenCypherParser.g:9482:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( ((LA132_0>=ALLSHORTESTPATHS && LA132_0<=WHERE)||(LA132_0>=CASE && LA132_0<=XOR)||(LA132_0>=AS && LA132_0<=OR)||LA132_0==RULE_ID) ) {
                alt132=1;
            }
            else if ( ((LA132_0>=RULE_HEX && LA132_0<=RULE_DECIMAL)) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // InternalOpenCypherParser.g:9483:6: lv_parameter_1_1= ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_120);
                    lv_parameter_1_1=ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLegacyParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_1,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9499:6: lv_parameter_1_2= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_120);
                    lv_parameter_1_2=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLegacyParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_2,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLegacyParameter"


    // $ANTLR start "entryRuleParameter"
    // InternalOpenCypherParser.g:9525:1: entryRuleParameter returns [EObject current=null] : iv_ruleParameter= ruleParameter EOF ;
    public final EObject entryRuleParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameter = null;


        try {
            // InternalOpenCypherParser.g:9525:50: (iv_ruleParameter= ruleParameter EOF )
            // InternalOpenCypherParser.g:9526:2: iv_ruleParameter= ruleParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameter=ruleParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameter"


    // $ANTLR start "ruleParameter"
    // InternalOpenCypherParser.g:9532:1: ruleParameter returns [EObject current=null] : (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) ) ;
    public final EObject ruleParameter() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        AntlrDatatypeRuleToken lv_parameter_1_1 = null;

        AntlrDatatypeRuleToken lv_parameter_1_2 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9538:2: ( (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) ) )
            // InternalOpenCypherParser.g:9539:2: (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) )
            {
            // InternalOpenCypherParser.g:9539:2: (otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) ) )
            // InternalOpenCypherParser.g:9540:3: otherlv_0= DollarSign ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) )
            {
            otherlv_0=(Token)match(input,DollarSign,FOLLOW_119); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getDollarSignKeyword_0());
              		
            }
            // InternalOpenCypherParser.g:9544:3: ( ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) ) )
            // InternalOpenCypherParser.g:9545:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:9545:4: ( (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber ) )
            // InternalOpenCypherParser.g:9546:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            {
            // InternalOpenCypherParser.g:9546:5: (lv_parameter_1_1= ruleSYMBOLIC_NAME_X | lv_parameter_1_2= ruleNumber )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( ((LA133_0>=ALLSHORTESTPATHS && LA133_0<=WHERE)||(LA133_0>=CASE && LA133_0<=XOR)||(LA133_0>=AS && LA133_0<=OR)||LA133_0==RULE_ID) ) {
                alt133=1;
            }
            else if ( ((LA133_0>=RULE_HEX && LA133_0<=RULE_DECIMAL)) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // InternalOpenCypherParser.g:9547:6: lv_parameter_1_1= ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_parameter_1_1=ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_1,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.SYMBOLIC_NAME_X");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9563:6: lv_parameter_1_2= ruleNumber
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_parameter_1_2=ruleNumber();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterRule());
                      						}
                      						set(
                      							current,
                      							"parameter",
                      							lv_parameter_1_2,
                      							"org.slizaa.neo4j.opencypher.OpenCypher.Number");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameter"


    // $ANTLR start "entryRulePropertyExpression"
    // InternalOpenCypherParser.g:9585:1: entryRulePropertyExpression returns [EObject current=null] : iv_rulePropertyExpression= rulePropertyExpression EOF ;
    public final EObject entryRulePropertyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyExpression = null;


        try {
            // InternalOpenCypherParser.g:9585:59: (iv_rulePropertyExpression= rulePropertyExpression EOF )
            // InternalOpenCypherParser.g:9586:2: iv_rulePropertyExpression= rulePropertyExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyExpression=rulePropertyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyExpression"


    // $ANTLR start "rulePropertyExpression"
    // InternalOpenCypherParser.g:9592:1: rulePropertyExpression returns [EObject current=null] : ( ( (lv_left_0_0= ruleAtom ) ) ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ ) ;
    public final EObject rulePropertyExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_left_0_0 = null;

        EObject lv_propertyLookups_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9598:2: ( ( ( (lv_left_0_0= ruleAtom ) ) ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ ) )
            // InternalOpenCypherParser.g:9599:2: ( ( (lv_left_0_0= ruleAtom ) ) ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ )
            {
            // InternalOpenCypherParser.g:9599:2: ( ( (lv_left_0_0= ruleAtom ) ) ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+ )
            // InternalOpenCypherParser.g:9600:3: ( (lv_left_0_0= ruleAtom ) ) ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+
            {
            // InternalOpenCypherParser.g:9600:3: ( (lv_left_0_0= ruleAtom ) )
            // InternalOpenCypherParser.g:9601:4: (lv_left_0_0= ruleAtom )
            {
            // InternalOpenCypherParser.g:9601:4: (lv_left_0_0= ruleAtom )
            // InternalOpenCypherParser.g:9602:5: lv_left_0_0= ruleAtom
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLeftAtomParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_109);
            lv_left_0_0=ruleAtom();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyExpressionRule());
              					}
              					set(
              						current,
              						"left",
              						lv_left_0_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Atom");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalOpenCypherParser.g:9619:3: ( (lv_propertyLookups_1_0= rulePropertyLookup ) )+
            int cnt134=0;
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==FullStop) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9620:4: (lv_propertyLookups_1_0= rulePropertyLookup )
            	    {
            	    // InternalOpenCypherParser.g:9620:4: (lv_propertyLookups_1_0= rulePropertyLookup )
            	    // InternalOpenCypherParser.g:9621:5: lv_propertyLookups_1_0= rulePropertyLookup
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_propertyLookups_1_0=rulePropertyLookup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyExpressionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"propertyLookups",
            	      						lv_propertyLookups_1_0,
            	      						"org.slizaa.neo4j.opencypher.OpenCypher.PropertyLookup");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt134 >= 1 ) break loop134;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(134, input);
                        throw eee;
                }
                cnt134++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyExpression"


    // $ANTLR start "entryRulePropertyKeyName"
    // InternalOpenCypherParser.g:9642:1: entryRulePropertyKeyName returns [String current=null] : iv_rulePropertyKeyName= rulePropertyKeyName EOF ;
    public final String entryRulePropertyKeyName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePropertyKeyName = null;


        try {
            // InternalOpenCypherParser.g:9642:55: (iv_rulePropertyKeyName= rulePropertyKeyName EOF )
            // InternalOpenCypherParser.g:9643:2: iv_rulePropertyKeyName= rulePropertyKeyName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyKeyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyKeyName=rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyKeyName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyKeyName"


    // $ANTLR start "rulePropertyKeyName"
    // InternalOpenCypherParser.g:9649:1: rulePropertyKeyName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X ;
    public final AntlrDatatypeRuleToken rulePropertyKeyName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SYMBOLIC_NAME_X_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9655:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:9656:2: this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_SYMBOLIC_NAME_X_0=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_SYMBOLIC_NAME_X_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyKeyName"


    // $ANTLR start "entryRuleLeftArrowHead"
    // InternalOpenCypherParser.g:9669:1: entryRuleLeftArrowHead returns [String current=null] : iv_ruleLeftArrowHead= ruleLeftArrowHead EOF ;
    public final String entryRuleLeftArrowHead() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLeftArrowHead = null;


        try {
            // InternalOpenCypherParser.g:9669:53: (iv_ruleLeftArrowHead= ruleLeftArrowHead EOF )
            // InternalOpenCypherParser.g:9670:2: iv_ruleLeftArrowHead= ruleLeftArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftArrowHead=ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftArrowHead.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLeftArrowHead"


    // $ANTLR start "ruleLeftArrowHead"
    // InternalOpenCypherParser.g:9676:1: ruleLeftArrowHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= LessThanSign ;
    public final AntlrDatatypeRuleToken ruleLeftArrowHead() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9682:2: (kw= LessThanSign )
            // InternalOpenCypherParser.g:9683:2: kw= LessThanSign
            {
            kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLeftArrowHead"


    // $ANTLR start "entryRuleRightArrowHead"
    // InternalOpenCypherParser.g:9691:1: entryRuleRightArrowHead returns [String current=null] : iv_ruleRightArrowHead= ruleRightArrowHead EOF ;
    public final String entryRuleRightArrowHead() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRightArrowHead = null;


        try {
            // InternalOpenCypherParser.g:9691:54: (iv_ruleRightArrowHead= ruleRightArrowHead EOF )
            // InternalOpenCypherParser.g:9692:2: iv_ruleRightArrowHead= ruleRightArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRightArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRightArrowHead=ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRightArrowHead.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRightArrowHead"


    // $ANTLR start "ruleRightArrowHead"
    // InternalOpenCypherParser.g:9698:1: ruleRightArrowHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= GreaterThanSign ;
    public final AntlrDatatypeRuleToken ruleRightArrowHead() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9704:2: (kw= GreaterThanSign )
            // InternalOpenCypherParser.g:9705:2: kw= GreaterThanSign
            {
            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRightArrowHead"


    // $ANTLR start "entryRuleDash"
    // InternalOpenCypherParser.g:9713:1: entryRuleDash returns [String current=null] : iv_ruleDash= ruleDash EOF ;
    public final String entryRuleDash() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDash = null;


        try {
            // InternalOpenCypherParser.g:9713:44: (iv_ruleDash= ruleDash EOF )
            // InternalOpenCypherParser.g:9714:2: iv_ruleDash= ruleDash EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDashRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDash=ruleDash();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDash.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDash"


    // $ANTLR start "ruleDash"
    // InternalOpenCypherParser.g:9720:1: ruleDash returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= HyphenMinus ;
    public final AntlrDatatypeRuleToken ruleDash() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9726:2: (kw= HyphenMinus )
            // InternalOpenCypherParser.g:9727:2: kw= HyphenMinus
            {
            kw=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getDashAccess().getHyphenMinusKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDash"


    // $ANTLR start "entryRuleDecimalInteger"
    // InternalOpenCypherParser.g:9735:1: entryRuleDecimalInteger returns [EObject current=null] : iv_ruleDecimalInteger= ruleDecimalInteger EOF ;
    public final EObject entryRuleDecimalInteger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDecimalInteger = null;


        try {
            // InternalOpenCypherParser.g:9735:55: (iv_ruleDecimalInteger= ruleDecimalInteger EOF )
            // InternalOpenCypherParser.g:9736:2: iv_ruleDecimalInteger= ruleDecimalInteger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDecimalIntegerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDecimalInteger=ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDecimalInteger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDecimalInteger"


    // $ANTLR start "ruleDecimalInteger"
    // InternalOpenCypherParser.g:9742:1: ruleDecimalInteger returns [EObject current=null] : ( () ( (lv_value_1_0= ruleNumber ) ) ) ;
    public final EObject ruleDecimalInteger() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalOpenCypherParser.g:9748:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) )
            // InternalOpenCypherParser.g:9749:2: ( () ( (lv_value_1_0= ruleNumber ) ) )
            {
            // InternalOpenCypherParser.g:9749:2: ( () ( (lv_value_1_0= ruleNumber ) ) )
            // InternalOpenCypherParser.g:9750:3: () ( (lv_value_1_0= ruleNumber ) )
            {
            // InternalOpenCypherParser.g:9750:3: ()
            // InternalOpenCypherParser.g:9751:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0(),
              					current);
              			
            }

            }

            // InternalOpenCypherParser.g:9760:3: ( (lv_value_1_0= ruleNumber ) )
            // InternalOpenCypherParser.g:9761:4: (lv_value_1_0= ruleNumber )
            {
            // InternalOpenCypherParser.g:9761:4: (lv_value_1_0= ruleNumber )
            // InternalOpenCypherParser.g:9762:5: lv_value_1_0= ruleNumber
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDecimalIntegerRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.slizaa.neo4j.opencypher.OpenCypher.Number");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDecimalInteger"


    // $ANTLR start "entryRuleNumber"
    // InternalOpenCypherParser.g:9783:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;



        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:9785:2: (iv_ruleNumber= ruleNumber EOF )
            // InternalOpenCypherParser.g:9786:2: iv_ruleNumber= ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumber=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumber.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalOpenCypherParser.g:9795:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_HEX_0=null;
        Token this_INT_1=null;
        Token this_DECIMAL_2=null;
        Token kw=null;
        Token this_INT_4=null;
        Token this_DECIMAL_5=null;


        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:9802:2: ( (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) )
            // InternalOpenCypherParser.g:9803:2: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            {
            // InternalOpenCypherParser.g:9803:2: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==RULE_HEX) ) {
                alt138=1;
            }
            else if ( ((LA138_0>=RULE_INT && LA138_0<=RULE_DECIMAL)) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    // InternalOpenCypherParser.g:9804:3: this_HEX_0= RULE_HEX
                    {
                    this_HEX_0=(Token)match(input,RULE_HEX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_HEX_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9812:3: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    {
                    // InternalOpenCypherParser.g:9812:3: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    // InternalOpenCypherParser.g:9813:4: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    {
                    // InternalOpenCypherParser.g:9813:4: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL )
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==RULE_INT) ) {
                        alt135=1;
                    }
                    else if ( (LA135_0==RULE_DECIMAL) ) {
                        alt135=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }
                    switch (alt135) {
                        case 1 :
                            // InternalOpenCypherParser.g:9814:5: this_INT_1= RULE_INT
                            {
                            this_INT_1=(Token)match(input,RULE_INT,FOLLOW_121); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_INT_1);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalOpenCypherParser.g:9822:5: this_DECIMAL_2= RULE_DECIMAL
                            {
                            this_DECIMAL_2=(Token)match(input,RULE_DECIMAL,FOLLOW_121); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(this_DECIMAL_2);
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalOpenCypherParser.g:9830:4: (kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==FullStop) ) {
                        int LA137_1 = input.LA(2);

                        if ( ((LA137_1>=RULE_INT && LA137_1<=RULE_DECIMAL)) ) {
                            alt137=1;
                        }
                    }
                    switch (alt137) {
                        case 1 :
                            // InternalOpenCypherParser.g:9831:5: kw= FullStop (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            {
                            kw=(Token)match(input,FullStop,FOLLOW_122); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0());
                              				
                            }
                            // InternalOpenCypherParser.g:9836:5: (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            int alt136=2;
                            int LA136_0 = input.LA(1);

                            if ( (LA136_0==RULE_INT) ) {
                                alt136=1;
                            }
                            else if ( (LA136_0==RULE_DECIMAL) ) {
                                alt136=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 136, 0, input);

                                throw nvae;
                            }
                            switch (alt136) {
                                case 1 :
                                    // InternalOpenCypherParser.g:9837:6: this_INT_4= RULE_INT
                                    {
                                    this_INT_4=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current.merge(this_INT_4);
                                      					
                                    }
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0());
                                      					
                                    }

                                    }
                                    break;
                                case 2 :
                                    // InternalOpenCypherParser.g:9845:6: this_DECIMAL_5= RULE_DECIMAL
                                    {
                                    this_DECIMAL_5=(Token)match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current.merge(this_DECIMAL_5);
                                      					
                                    }
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1());
                                      					
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:9862:1: entryRuleSYMBOLIC_NAME_X returns [String current=null] : iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF ;
    public final String entryRuleSYMBOLIC_NAME_X() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSYMBOLIC_NAME_X = null;


        try {
            // InternalOpenCypherParser.g:9862:55: (iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF )
            // InternalOpenCypherParser.g:9863:2: iv_ruleSYMBOLIC_NAME_X= ruleSYMBOLIC_NAME_X EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSYMBOLIC_NAME_X=ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSYMBOLIC_NAME_X.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSYMBOLIC_NAME_X"


    // $ANTLR start "ruleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:9869:1: ruleSYMBOLIC_NAME_X returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN ) ;
    public final AntlrDatatypeRuleToken ruleSYMBOLIC_NAME_X() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalOpenCypherParser.g:9875:2: ( (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN ) )
            // InternalOpenCypherParser.g:9876:2: (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN )
            {
            // InternalOpenCypherParser.g:9876:2: (this_ID_0= RULE_ID | kw= CYPHER | kw= EXPLAIN | kw= PROFILE | kw= USING | kw= PERIODIC | kw= COMMIT | kw= UNION | kw= ALL | kw= CREATE | kw= INDEX | kw= ON | kw= DROP | kw= CONSTRAINT | kw= ASSERT | kw= IS | kw= UNIQUE | kw= EXISTS | kw= LOAD | kw= CSV | kw= WITH | kw= HEADERS | kw= FROM | kw= AS | kw= FIELDTERMINATOR | kw= OPTIONAL | kw= MATCH | kw= UNWIND | kw= MERGE | kw= SET | kw= DELETE | kw= DETACH | kw= REMOVE | kw= FOREACH | kw= IN | kw= DISTINCT | kw= RETURN | kw= ORDER | kw= BY | kw= SKIP | kw= LIMIT | kw= DESCENDING | kw= DESC | kw= ASCENDING | kw= ASC | kw= JOIN | kw= SCAN | kw= START | kw= NODE | kw= RELATIONSHIP | kw= REL | kw= WHERE | kw= SHORTESTPATH | kw= ALLSHORTESTPATHS | kw= OR | kw= XOR | kw= AND | kw= NOT | kw= STARTS | kw= ENDS | kw= CONTAINS | kw= NULL | kw= TRUE | kw= FALSE | kw= COUNT | kw= FILTER | kw= EXTRACT | kw= ANY | kw= NONE | kw= SINGLE | kw= REDUCE | kw= CASE | kw= ELSE | kw= END | kw= WHEN | kw= THEN )
            int alt139=76;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt139=1;
                }
                break;
            case CYPHER:
                {
                alt139=2;
                }
                break;
            case EXPLAIN:
                {
                alt139=3;
                }
                break;
            case PROFILE:
                {
                alt139=4;
                }
                break;
            case USING:
                {
                alt139=5;
                }
                break;
            case PERIODIC:
                {
                alt139=6;
                }
                break;
            case COMMIT:
                {
                alt139=7;
                }
                break;
            case UNION:
                {
                alt139=8;
                }
                break;
            case ALL:
                {
                alt139=9;
                }
                break;
            case CREATE:
                {
                alt139=10;
                }
                break;
            case INDEX:
                {
                alt139=11;
                }
                break;
            case ON:
                {
                alt139=12;
                }
                break;
            case DROP:
                {
                alt139=13;
                }
                break;
            case CONSTRAINT:
                {
                alt139=14;
                }
                break;
            case ASSERT:
                {
                alt139=15;
                }
                break;
            case IS:
                {
                alt139=16;
                }
                break;
            case UNIQUE:
                {
                alt139=17;
                }
                break;
            case EXISTS:
                {
                alt139=18;
                }
                break;
            case LOAD:
                {
                alt139=19;
                }
                break;
            case CSV:
                {
                alt139=20;
                }
                break;
            case WITH:
                {
                alt139=21;
                }
                break;
            case HEADERS:
                {
                alt139=22;
                }
                break;
            case FROM:
                {
                alt139=23;
                }
                break;
            case AS:
                {
                alt139=24;
                }
                break;
            case FIELDTERMINATOR:
                {
                alt139=25;
                }
                break;
            case OPTIONAL:
                {
                alt139=26;
                }
                break;
            case MATCH:
                {
                alt139=27;
                }
                break;
            case UNWIND:
                {
                alt139=28;
                }
                break;
            case MERGE:
                {
                alt139=29;
                }
                break;
            case SET:
                {
                alt139=30;
                }
                break;
            case DELETE:
                {
                alt139=31;
                }
                break;
            case DETACH:
                {
                alt139=32;
                }
                break;
            case REMOVE:
                {
                alt139=33;
                }
                break;
            case FOREACH:
                {
                alt139=34;
                }
                break;
            case IN:
                {
                alt139=35;
                }
                break;
            case DISTINCT:
                {
                alt139=36;
                }
                break;
            case RETURN:
                {
                alt139=37;
                }
                break;
            case ORDER:
                {
                alt139=38;
                }
                break;
            case BY:
                {
                alt139=39;
                }
                break;
            case SKIP:
                {
                alt139=40;
                }
                break;
            case LIMIT:
                {
                alt139=41;
                }
                break;
            case DESCENDING:
                {
                alt139=42;
                }
                break;
            case DESC:
                {
                alt139=43;
                }
                break;
            case ASCENDING:
                {
                alt139=44;
                }
                break;
            case ASC:
                {
                alt139=45;
                }
                break;
            case JOIN:
                {
                alt139=46;
                }
                break;
            case SCAN:
                {
                alt139=47;
                }
                break;
            case START:
                {
                alt139=48;
                }
                break;
            case NODE:
                {
                alt139=49;
                }
                break;
            case RELATIONSHIP:
                {
                alt139=50;
                }
                break;
            case REL:
                {
                alt139=51;
                }
                break;
            case WHERE:
                {
                alt139=52;
                }
                break;
            case SHORTESTPATH:
                {
                alt139=53;
                }
                break;
            case ALLSHORTESTPATHS:
                {
                alt139=54;
                }
                break;
            case OR:
                {
                alt139=55;
                }
                break;
            case XOR:
                {
                alt139=56;
                }
                break;
            case AND:
                {
                alt139=57;
                }
                break;
            case NOT:
                {
                alt139=58;
                }
                break;
            case STARTS:
                {
                alt139=59;
                }
                break;
            case ENDS:
                {
                alt139=60;
                }
                break;
            case CONTAINS:
                {
                alt139=61;
                }
                break;
            case NULL:
                {
                alt139=62;
                }
                break;
            case TRUE:
                {
                alt139=63;
                }
                break;
            case FALSE:
                {
                alt139=64;
                }
                break;
            case COUNT:
                {
                alt139=65;
                }
                break;
            case FILTER:
                {
                alt139=66;
                }
                break;
            case EXTRACT:
                {
                alt139=67;
                }
                break;
            case ANY:
                {
                alt139=68;
                }
                break;
            case NONE:
                {
                alt139=69;
                }
                break;
            case SINGLE:
                {
                alt139=70;
                }
                break;
            case REDUCE:
                {
                alt139=71;
                }
                break;
            case CASE:
                {
                alt139=72;
                }
                break;
            case ELSE:
                {
                alt139=73;
                }
                break;
            case END:
                {
                alt139=74;
                }
                break;
            case WHEN:
                {
                alt139=75;
                }
                break;
            case THEN:
                {
                alt139=76;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // InternalOpenCypherParser.g:9877:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:9885:3: kw= CYPHER
                    {
                    kw=(Token)match(input,CYPHER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:9891:3: kw= EXPLAIN
                    {
                    kw=(Token)match(input,EXPLAIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:9897:3: kw= PROFILE
                    {
                    kw=(Token)match(input,PROFILE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:9903:3: kw= USING
                    {
                    kw=(Token)match(input,USING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:9909:3: kw= PERIODIC
                    {
                    kw=(Token)match(input,PERIODIC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:9915:3: kw= COMMIT
                    {
                    kw=(Token)match(input,COMMIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:9921:3: kw= UNION
                    {
                    kw=(Token)match(input,UNION,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:9927:3: kw= ALL
                    {
                    kw=(Token)match(input,ALL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:9933:3: kw= CREATE
                    {
                    kw=(Token)match(input,CREATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:9939:3: kw= INDEX
                    {
                    kw=(Token)match(input,INDEX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:9945:3: kw= ON
                    {
                    kw=(Token)match(input,ON,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:9951:3: kw= DROP
                    {
                    kw=(Token)match(input,DROP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:9957:3: kw= CONSTRAINT
                    {
                    kw=(Token)match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:9963:3: kw= ASSERT
                    {
                    kw=(Token)match(input,ASSERT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:9969:3: kw= IS
                    {
                    kw=(Token)match(input,IS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:9975:3: kw= UNIQUE
                    {
                    kw=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:9981:3: kw= EXISTS
                    {
                    kw=(Token)match(input,EXISTS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:9987:3: kw= LOAD
                    {
                    kw=(Token)match(input,LOAD,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:9993:3: kw= CSV
                    {
                    kw=(Token)match(input,CSV,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:9999:3: kw= WITH
                    {
                    kw=(Token)match(input,WITH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:10005:3: kw= HEADERS
                    {
                    kw=(Token)match(input,HEADERS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:10011:3: kw= FROM
                    {
                    kw=(Token)match(input,FROM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    // InternalOpenCypherParser.g:10017:3: kw= AS
                    {
                    kw=(Token)match(input,AS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    // InternalOpenCypherParser.g:10023:3: kw= FIELDTERMINATOR
                    {
                    kw=(Token)match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    // InternalOpenCypherParser.g:10029:3: kw= OPTIONAL
                    {
                    kw=(Token)match(input,OPTIONAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    // InternalOpenCypherParser.g:10035:3: kw= MATCH
                    {
                    kw=(Token)match(input,MATCH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    // InternalOpenCypherParser.g:10041:3: kw= UNWIND
                    {
                    kw=(Token)match(input,UNWIND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    // InternalOpenCypherParser.g:10047:3: kw= MERGE
                    {
                    kw=(Token)match(input,MERGE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    // InternalOpenCypherParser.g:10053:3: kw= SET
                    {
                    kw=(Token)match(input,SET,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    // InternalOpenCypherParser.g:10059:3: kw= DELETE
                    {
                    kw=(Token)match(input,DELETE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    // InternalOpenCypherParser.g:10065:3: kw= DETACH
                    {
                    kw=(Token)match(input,DETACH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    // InternalOpenCypherParser.g:10071:3: kw= REMOVE
                    {
                    kw=(Token)match(input,REMOVE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    // InternalOpenCypherParser.g:10077:3: kw= FOREACH
                    {
                    kw=(Token)match(input,FOREACH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    // InternalOpenCypherParser.g:10083:3: kw= IN
                    {
                    kw=(Token)match(input,IN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    // InternalOpenCypherParser.g:10089:3: kw= DISTINCT
                    {
                    kw=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    // InternalOpenCypherParser.g:10095:3: kw= RETURN
                    {
                    kw=(Token)match(input,RETURN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36());
                      		
                    }

                    }
                    break;
                case 38 :
                    // InternalOpenCypherParser.g:10101:3: kw= ORDER
                    {
                    kw=(Token)match(input,ORDER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37());
                      		
                    }

                    }
                    break;
                case 39 :
                    // InternalOpenCypherParser.g:10107:3: kw= BY
                    {
                    kw=(Token)match(input,BY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38());
                      		
                    }

                    }
                    break;
                case 40 :
                    // InternalOpenCypherParser.g:10113:3: kw= SKIP
                    {
                    kw=(Token)match(input,SKIP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39());
                      		
                    }

                    }
                    break;
                case 41 :
                    // InternalOpenCypherParser.g:10119:3: kw= LIMIT
                    {
                    kw=(Token)match(input,LIMIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40());
                      		
                    }

                    }
                    break;
                case 42 :
                    // InternalOpenCypherParser.g:10125:3: kw= DESCENDING
                    {
                    kw=(Token)match(input,DESCENDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41());
                      		
                    }

                    }
                    break;
                case 43 :
                    // InternalOpenCypherParser.g:10131:3: kw= DESC
                    {
                    kw=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42());
                      		
                    }

                    }
                    break;
                case 44 :
                    // InternalOpenCypherParser.g:10137:3: kw= ASCENDING
                    {
                    kw=(Token)match(input,ASCENDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43());
                      		
                    }

                    }
                    break;
                case 45 :
                    // InternalOpenCypherParser.g:10143:3: kw= ASC
                    {
                    kw=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44());
                      		
                    }

                    }
                    break;
                case 46 :
                    // InternalOpenCypherParser.g:10149:3: kw= JOIN
                    {
                    kw=(Token)match(input,JOIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45());
                      		
                    }

                    }
                    break;
                case 47 :
                    // InternalOpenCypherParser.g:10155:3: kw= SCAN
                    {
                    kw=(Token)match(input,SCAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46());
                      		
                    }

                    }
                    break;
                case 48 :
                    // InternalOpenCypherParser.g:10161:3: kw= START
                    {
                    kw=(Token)match(input,START,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47());
                      		
                    }

                    }
                    break;
                case 49 :
                    // InternalOpenCypherParser.g:10167:3: kw= NODE
                    {
                    kw=(Token)match(input,NODE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48());
                      		
                    }

                    }
                    break;
                case 50 :
                    // InternalOpenCypherParser.g:10173:3: kw= RELATIONSHIP
                    {
                    kw=(Token)match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49());
                      		
                    }

                    }
                    break;
                case 51 :
                    // InternalOpenCypherParser.g:10179:3: kw= REL
                    {
                    kw=(Token)match(input,REL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50());
                      		
                    }

                    }
                    break;
                case 52 :
                    // InternalOpenCypherParser.g:10185:3: kw= WHERE
                    {
                    kw=(Token)match(input,WHERE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51());
                      		
                    }

                    }
                    break;
                case 53 :
                    // InternalOpenCypherParser.g:10191:3: kw= SHORTESTPATH
                    {
                    kw=(Token)match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52());
                      		
                    }

                    }
                    break;
                case 54 :
                    // InternalOpenCypherParser.g:10197:3: kw= ALLSHORTESTPATHS
                    {
                    kw=(Token)match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53());
                      		
                    }

                    }
                    break;
                case 55 :
                    // InternalOpenCypherParser.g:10203:3: kw= OR
                    {
                    kw=(Token)match(input,OR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54());
                      		
                    }

                    }
                    break;
                case 56 :
                    // InternalOpenCypherParser.g:10209:3: kw= XOR
                    {
                    kw=(Token)match(input,XOR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55());
                      		
                    }

                    }
                    break;
                case 57 :
                    // InternalOpenCypherParser.g:10215:3: kw= AND
                    {
                    kw=(Token)match(input,AND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56());
                      		
                    }

                    }
                    break;
                case 58 :
                    // InternalOpenCypherParser.g:10221:3: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57());
                      		
                    }

                    }
                    break;
                case 59 :
                    // InternalOpenCypherParser.g:10227:3: kw= STARTS
                    {
                    kw=(Token)match(input,STARTS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58());
                      		
                    }

                    }
                    break;
                case 60 :
                    // InternalOpenCypherParser.g:10233:3: kw= ENDS
                    {
                    kw=(Token)match(input,ENDS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59());
                      		
                    }

                    }
                    break;
                case 61 :
                    // InternalOpenCypherParser.g:10239:3: kw= CONTAINS
                    {
                    kw=(Token)match(input,CONTAINS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60());
                      		
                    }

                    }
                    break;
                case 62 :
                    // InternalOpenCypherParser.g:10245:3: kw= NULL
                    {
                    kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61());
                      		
                    }

                    }
                    break;
                case 63 :
                    // InternalOpenCypherParser.g:10251:3: kw= TRUE
                    {
                    kw=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62());
                      		
                    }

                    }
                    break;
                case 64 :
                    // InternalOpenCypherParser.g:10257:3: kw= FALSE
                    {
                    kw=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63());
                      		
                    }

                    }
                    break;
                case 65 :
                    // InternalOpenCypherParser.g:10263:3: kw= COUNT
                    {
                    kw=(Token)match(input,COUNT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64());
                      		
                    }

                    }
                    break;
                case 66 :
                    // InternalOpenCypherParser.g:10269:3: kw= FILTER
                    {
                    kw=(Token)match(input,FILTER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65());
                      		
                    }

                    }
                    break;
                case 67 :
                    // InternalOpenCypherParser.g:10275:3: kw= EXTRACT
                    {
                    kw=(Token)match(input,EXTRACT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66());
                      		
                    }

                    }
                    break;
                case 68 :
                    // InternalOpenCypherParser.g:10281:3: kw= ANY
                    {
                    kw=(Token)match(input,ANY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67());
                      		
                    }

                    }
                    break;
                case 69 :
                    // InternalOpenCypherParser.g:10287:3: kw= NONE
                    {
                    kw=(Token)match(input,NONE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68());
                      		
                    }

                    }
                    break;
                case 70 :
                    // InternalOpenCypherParser.g:10293:3: kw= SINGLE
                    {
                    kw=(Token)match(input,SINGLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69());
                      		
                    }

                    }
                    break;
                case 71 :
                    // InternalOpenCypherParser.g:10299:3: kw= REDUCE
                    {
                    kw=(Token)match(input,REDUCE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70());
                      		
                    }

                    }
                    break;
                case 72 :
                    // InternalOpenCypherParser.g:10305:3: kw= CASE
                    {
                    kw=(Token)match(input,CASE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71());
                      		
                    }

                    }
                    break;
                case 73 :
                    // InternalOpenCypherParser.g:10311:3: kw= ELSE
                    {
                    kw=(Token)match(input,ELSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72());
                      		
                    }

                    }
                    break;
                case 74 :
                    // InternalOpenCypherParser.g:10317:3: kw= END
                    {
                    kw=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73());
                      		
                    }

                    }
                    break;
                case 75 :
                    // InternalOpenCypherParser.g:10323:3: kw= WHEN
                    {
                    kw=(Token)match(input,WHEN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74());
                      		
                    }

                    }
                    break;
                case 76 :
                    // InternalOpenCypherParser.g:10329:3: kw= THEN
                    {
                    kw=(Token)match(input,THEN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSYMBOLIC_NAME_X"

    // $ANTLR start synpred2_InternalOpenCypherParser
    public final void synpred2_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_explain_2_0=null;

        // InternalOpenCypherParser.g:179:4: ( ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) ) )
        // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
        {
        // InternalOpenCypherParser.g:179:4: ({...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) ) )
        // InternalOpenCypherParser.g:180:5: {...}? => ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalOpenCypherParser.g:180:109: ( ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) ) )
        // InternalOpenCypherParser.g:181:6: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
        // InternalOpenCypherParser.g:184:9: ({...}? => ( (lv_explain_2_0= EXPLAIN ) ) )
        // InternalOpenCypherParser.g:184:10: {...}? => ( (lv_explain_2_0= EXPLAIN ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalOpenCypherParser", "true");
        }
        // InternalOpenCypherParser.g:184:19: ( (lv_explain_2_0= EXPLAIN ) )
        // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
        {
        // InternalOpenCypherParser.g:184:20: (lv_explain_2_0= EXPLAIN )
        // InternalOpenCypherParser.g:185:10: lv_explain_2_0= EXPLAIN
        {
        lv_explain_2_0=(Token)match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred2_InternalOpenCypherParser

    // $ANTLR start synpred3_InternalOpenCypherParser
    public final void synpred3_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_profile_3_0=null;

        // InternalOpenCypherParser.g:202:4: ( ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) ) )
        // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
        {
        // InternalOpenCypherParser.g:202:4: ({...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) ) )
        // InternalOpenCypherParser.g:203:5: {...}? => ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalOpenCypherParser.g:203:109: ( ({...}? => ( (lv_profile_3_0= PROFILE ) ) ) )
        // InternalOpenCypherParser.g:204:6: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
        // InternalOpenCypherParser.g:207:9: ({...}? => ( (lv_profile_3_0= PROFILE ) ) )
        // InternalOpenCypherParser.g:207:10: {...}? => ( (lv_profile_3_0= PROFILE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred3_InternalOpenCypherParser", "true");
        }
        // InternalOpenCypherParser.g:207:19: ( (lv_profile_3_0= PROFILE ) )
        // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
        {
        // InternalOpenCypherParser.g:207:20: (lv_profile_3_0= PROFILE )
        // InternalOpenCypherParser.g:208:10: lv_profile_3_0= PROFILE
        {
        lv_profile_3_0=(Token)match(input,PROFILE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred3_InternalOpenCypherParser

    // $ANTLR start synpred4_InternalOpenCypherParser
    public final void synpred4_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_cypherOption_4_0 = null;


        // InternalOpenCypherParser.g:230:10: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )
        // InternalOpenCypherParser.g:230:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred4_InternalOpenCypherParser", "true");
        }
        // InternalOpenCypherParser.g:230:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
        // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        {
        // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        // InternalOpenCypherParser.g:231:10: lv_cypherOption_4_0= ruleCypherOption
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_cypherOption_4_0=ruleCypherOption();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred4_InternalOpenCypherParser

    // $ANTLR start synpred5_InternalOpenCypherParser
    public final void synpred5_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_cypherOption_4_0 = null;


        // InternalOpenCypherParser.g:225:4: ( ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) ) )
        // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
        {
        // InternalOpenCypherParser.g:225:4: ({...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ ) )
        // InternalOpenCypherParser.g:226:5: {...}? => ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred5_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
        }
        // InternalOpenCypherParser.g:226:109: ( ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+ )
        // InternalOpenCypherParser.g:227:6: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
        // InternalOpenCypherParser.g:230:9: ({...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) ) )+
        int cnt140=0;
        loop140:
        do {
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==CYPHER) && ((true))) {
                alt140=1;
            }


            switch (alt140) {
        	case 1 :
        	    // InternalOpenCypherParser.g:230:10: {...}? => ( (lv_cypherOption_4_0= ruleCypherOption ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred5_InternalOpenCypherParser", "true");
        	    }
        	    // InternalOpenCypherParser.g:230:19: ( (lv_cypherOption_4_0= ruleCypherOption ) )
        	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        	    {
        	    // InternalOpenCypherParser.g:230:20: (lv_cypherOption_4_0= ruleCypherOption )
        	    // InternalOpenCypherParser.g:231:10: lv_cypherOption_4_0= ruleCypherOption
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_cypherOption_4_0=ruleCypherOption();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt140 >= 1 ) break loop140;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(140, input);
                    throw eee;
            }
            cnt140++;
        } while (true);


        }


        }


        }
    }
    // $ANTLR end synpred5_InternalOpenCypherParser

    // $ANTLR start synpred9_InternalOpenCypherParser
    public final void synpred9_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_RegularQuery_0 = null;


        // InternalOpenCypherParser.g:492:3: (this_RegularQuery_0= ruleRegularQuery )
        // InternalOpenCypherParser.g:492:3: this_RegularQuery_0= ruleRegularQuery
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_RegularQuery_0=ruleRegularQuery();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_InternalOpenCypherParser

    // $ANTLR start synpred10_InternalOpenCypherParser
    public final void synpred10_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_StandaloneCall_1 = null;


        // InternalOpenCypherParser.g:504:3: (this_StandaloneCall_1= ruleStandaloneCall )
        // InternalOpenCypherParser.g:504:3: this_StandaloneCall_1= ruleStandaloneCall
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_StandaloneCall_1=ruleStandaloneCall();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_InternalOpenCypherParser

    // $ANTLR start synpred29_InternalOpenCypherParser
    public final void synpred29_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateIndex_0 = null;


        // InternalOpenCypherParser.g:1068:3: (this_CreateIndex_0= ruleCreateIndex )
        // InternalOpenCypherParser.g:1068:3: this_CreateIndex_0= ruleCreateIndex
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateIndex_0=ruleCreateIndex();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_InternalOpenCypherParser

    // $ANTLR start synpred30_InternalOpenCypherParser
    public final void synpred30_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_DropIndex_1 = null;


        // InternalOpenCypherParser.g:1080:3: (this_DropIndex_1= ruleDropIndex )
        // InternalOpenCypherParser.g:1080:3: this_DropIndex_1= ruleDropIndex
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropIndex_1=ruleDropIndex();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_InternalOpenCypherParser

    // $ANTLR start synpred31_InternalOpenCypherParser
    public final void synpred31_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateUniqueConstraint_2 = null;


        // InternalOpenCypherParser.g:1092:3: (this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint )
        // InternalOpenCypherParser.g:1092:3: this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateUniqueConstraint_2=ruleCreateUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_InternalOpenCypherParser

    // $ANTLR start synpred32_InternalOpenCypherParser
    public final void synpred32_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_DropUniqueConstraint_3 = null;


        // InternalOpenCypherParser.g:1104:3: (this_DropUniqueConstraint_3= ruleDropUniqueConstraint )
        // InternalOpenCypherParser.g:1104:3: this_DropUniqueConstraint_3= ruleDropUniqueConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropUniqueConstraint_3=ruleDropUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_InternalOpenCypherParser

    // $ANTLR start synpred33_InternalOpenCypherParser
    public final void synpred33_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateNodePropertyExistenceConstraint_4 = null;


        // InternalOpenCypherParser.g:1116:3: (this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:1116:3: this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateNodePropertyExistenceConstraint_4=ruleCreateNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_InternalOpenCypherParser

    // $ANTLR start synpred34_InternalOpenCypherParser
    public final void synpred34_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_DropNodePropertyExistenceConstraint_5 = null;


        // InternalOpenCypherParser.g:1128:3: (this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:1128:3: this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_DropNodePropertyExistenceConstraint_5=ruleDropNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_InternalOpenCypherParser

    // $ANTLR start synpred35_InternalOpenCypherParser
    public final void synpred35_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CreateRelationshipPropertyExistenceConstraint_6 = null;


        // InternalOpenCypherParser.g:1140:3: (this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint )
        // InternalOpenCypherParser.g:1140:3: this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CreateRelationshipPropertyExistenceConstraint_6=ruleCreateRelationshipPropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_InternalOpenCypherParser

    // $ANTLR start synpred61_InternalOpenCypherParser
    public final void synpred61_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_distint_1_0=null;

        // InternalOpenCypherParser.g:3407:4: ( (lv_distint_1_0= DISTINCT ) )
        // InternalOpenCypherParser.g:3407:4: (lv_distint_1_0= DISTINCT )
        {
        // InternalOpenCypherParser.g:3407:4: (lv_distint_1_0= DISTINCT )
        // InternalOpenCypherParser.g:3408:5: lv_distint_1_0= DISTINCT
        {
        lv_distint_1_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred61_InternalOpenCypherParser

    // $ANTLR start synpred63_InternalOpenCypherParser
    public final void synpred63_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_distinct_1_0=null;

        // InternalOpenCypherParser.g:3492:4: ( (lv_distinct_1_0= DISTINCT ) )
        // InternalOpenCypherParser.g:3492:4: (lv_distinct_1_0= DISTINCT )
        {
        // InternalOpenCypherParser.g:3492:4: (lv_distinct_1_0= DISTINCT )
        // InternalOpenCypherParser.g:3493:5: lv_distinct_1_0= DISTINCT
        {
        lv_distinct_1_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred63_InternalOpenCypherParser

    // $ANTLR start synpred117_InternalOpenCypherParser
    public final void synpred117_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_lower_2_0 = null;

        AntlrDatatypeRuleToken lv_upper_4_0 = null;


        // InternalOpenCypherParser.g:6070:4: ( ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )? )
        // InternalOpenCypherParser.g:6070:4: ( (lv_lower_2_0= ruleNumber ) )? (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )?
        {
        // InternalOpenCypherParser.g:6070:4: ( (lv_lower_2_0= ruleNumber ) )?
        int alt149=2;
        int LA149_0 = input.LA(1);

        if ( ((LA149_0>=RULE_HEX && LA149_0<=RULE_DECIMAL)) ) {
            alt149=1;
        }
        switch (alt149) {
            case 1 :
                // InternalOpenCypherParser.g:6071:5: (lv_lower_2_0= ruleNumber )
                {
                // InternalOpenCypherParser.g:6071:5: (lv_lower_2_0= ruleNumber )
                // InternalOpenCypherParser.g:6072:6: lv_lower_2_0= ruleNumber
                {
                if ( state.backtracking==0 ) {

                  						newCompositeNode(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0());
                  					
                }
                pushFollow(FOLLOW_88);
                lv_lower_2_0=ruleNumber();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }

        // InternalOpenCypherParser.g:6089:4: (otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )? )?
        int alt151=2;
        int LA151_0 = input.LA(1);

        if ( (LA151_0==FullStopFullStop) ) {
            alt151=1;
        }
        switch (alt151) {
            case 1 :
                // InternalOpenCypherParser.g:6090:5: otherlv_3= FullStopFullStop ( (lv_upper_4_0= ruleNumber ) )?
                {
                otherlv_3=(Token)match(input,FullStopFullStop,FOLLOW_15); if (state.failed) return ;
                // InternalOpenCypherParser.g:6094:5: ( (lv_upper_4_0= ruleNumber ) )?
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( ((LA150_0>=RULE_HEX && LA150_0<=RULE_DECIMAL)) ) {
                    alt150=1;
                }
                switch (alt150) {
                    case 1 :
                        // InternalOpenCypherParser.g:6095:6: (lv_upper_4_0= ruleNumber )
                        {
                        // InternalOpenCypherParser.g:6095:6: (lv_upper_4_0= ruleNumber )
                        // InternalOpenCypherParser.g:6096:7: lv_upper_4_0= ruleNumber
                        {
                        if ( state.backtracking==0 ) {

                          							newCompositeNode(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0());
                          						
                        }
                        pushFollow(FOLLOW_2);
                        lv_upper_4_0=ruleNumber();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred117_InternalOpenCypherParser

    // $ANTLR start synpred121_InternalOpenCypherParser
    public final void synpred121_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_operator_1_0=null;
        EObject lv_left_2_0 = null;


        // InternalOpenCypherParser.g:6441:3: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) ) )
        // InternalOpenCypherParser.g:6441:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) )
        {
        // InternalOpenCypherParser.g:6441:3: ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) )
        // InternalOpenCypherParser.g:6442:4: () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) )
        {
        // InternalOpenCypherParser.g:6442:4: ()
        // InternalOpenCypherParser.g:6443:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalOpenCypherParser.g:6452:4: ( (lv_operator_1_0= NOT ) )
        // InternalOpenCypherParser.g:6453:5: (lv_operator_1_0= NOT )
        {
        // InternalOpenCypherParser.g:6453:5: (lv_operator_1_0= NOT )
        // InternalOpenCypherParser.g:6454:6: lv_operator_1_0= NOT
        {
        lv_operator_1_0=(Token)match(input,NOT,FOLLOW_36); if (state.failed) return ;

        }


        }

        // InternalOpenCypherParser.g:6466:4: ( (lv_left_2_0= ruleExpressionNot ) )
        // InternalOpenCypherParser.g:6467:5: (lv_left_2_0= ruleExpressionNot )
        {
        // InternalOpenCypherParser.g:6467:5: (lv_left_2_0= ruleExpressionNot )
        // InternalOpenCypherParser.g:6468:6: lv_left_2_0= ruleExpressionNot
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getExpressionNotAccess().getLeftExpressionNotParserRuleCall_0_2_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_left_2_0=ruleExpressionNot();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred121_InternalOpenCypherParser

    // $ANTLR start synpred152_InternalOpenCypherParser
    public final void synpred152_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_LegacyParameter_5 = null;


        // InternalOpenCypherParser.g:7497:3: (this_LegacyParameter_5= ruleLegacyParameter )
        // InternalOpenCypherParser.g:7497:3: this_LegacyParameter_5= ruleLegacyParameter
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_LegacyParameter_5=ruleLegacyParameter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_InternalOpenCypherParser

    // $ANTLR start synpred154_InternalOpenCypherParser
    public final void synpred154_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_value_7_1=null;
        Token lv_value_7_2=null;

        // InternalOpenCypherParser.g:7509:3: ( ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) )
        // InternalOpenCypherParser.g:7509:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
        {
        // InternalOpenCypherParser.g:7509:3: ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) )
        // InternalOpenCypherParser.g:7510:4: () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
        {
        // InternalOpenCypherParser.g:7510:4: ()
        // InternalOpenCypherParser.g:7511:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalOpenCypherParser.g:7520:4: ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) )
        // InternalOpenCypherParser.g:7521:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
        {
        // InternalOpenCypherParser.g:7521:5: ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) )
        // InternalOpenCypherParser.g:7522:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
        {
        // InternalOpenCypherParser.g:7522:6: (lv_value_7_1= TRUE | lv_value_7_2= FALSE )
        int alt158=2;
        int LA158_0 = input.LA(1);

        if ( (LA158_0==TRUE) ) {
            alt158=1;
        }
        else if ( (LA158_0==FALSE) ) {
            alt158=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 158, 0, input);

            throw nvae;
        }
        switch (alt158) {
            case 1 :
                // InternalOpenCypherParser.g:7523:7: lv_value_7_1= TRUE
                {
                lv_value_7_1=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return ;

                }
                break;
            case 2 :
                // InternalOpenCypherParser.g:7534:7: lv_value_7_2= FALSE
                {
                lv_value_7_2=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred154_InternalOpenCypherParser

    // $ANTLR start synpred155_InternalOpenCypherParser
    public final void synpred155_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;

        // InternalOpenCypherParser.g:7549:3: ( ( () otherlv_9= NULL ) )
        // InternalOpenCypherParser.g:7549:3: ( () otherlv_9= NULL )
        {
        // InternalOpenCypherParser.g:7549:3: ( () otherlv_9= NULL )
        // InternalOpenCypherParser.g:7550:4: () otherlv_9= NULL
        {
        // InternalOpenCypherParser.g:7550:4: ()
        // InternalOpenCypherParser.g:7551:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_9=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred155_InternalOpenCypherParser

    // $ANTLR start synpred156_InternalOpenCypherParser
    public final void synpred156_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_CaseExpression_10 = null;


        // InternalOpenCypherParser.g:7566:3: (this_CaseExpression_10= ruleCaseExpression )
        // InternalOpenCypherParser.g:7566:3: this_CaseExpression_10= ruleCaseExpression
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_CaseExpression_10=ruleCaseExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_InternalOpenCypherParser

    // $ANTLR start synpred157_InternalOpenCypherParser
    public final void synpred157_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;

        // InternalOpenCypherParser.g:7578:3: ( ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis ) )
        // InternalOpenCypherParser.g:7578:3: ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7578:3: ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis )
        // InternalOpenCypherParser.g:7579:4: () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis
        {
        // InternalOpenCypherParser.g:7579:4: ()
        // InternalOpenCypherParser.g:7580:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_12=(Token)match(input,COUNT,FOLLOW_22); if (state.failed) return ;
        otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_102); if (state.failed) return ;
        otherlv_14=(Token)match(input,Asterisk,FOLLOW_23); if (state.failed) return ;
        otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred157_InternalOpenCypherParser

    // $ANTLR start synpred158_InternalOpenCypherParser
    public final void synpred158_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_MapLiteral_16 = null;


        // InternalOpenCypherParser.g:7607:3: (this_MapLiteral_16= ruleMapLiteral )
        // InternalOpenCypherParser.g:7607:3: this_MapLiteral_16= ruleMapLiteral
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_MapLiteral_16=ruleMapLiteral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_InternalOpenCypherParser

    // $ANTLR start synpred159_InternalOpenCypherParser
    public final void synpred159_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_ListComprehension_17 = null;


        // InternalOpenCypherParser.g:7619:3: (this_ListComprehension_17= ruleListComprehension )
        // InternalOpenCypherParser.g:7619:3: this_ListComprehension_17= ruleListComprehension
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ListComprehension_17=ruleListComprehension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_InternalOpenCypherParser

    // $ANTLR start synpred160_InternalOpenCypherParser
    public final void synpred160_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_PatternComprehension_18 = null;


        // InternalOpenCypherParser.g:7631:3: (this_PatternComprehension_18= rulePatternComprehension )
        // InternalOpenCypherParser.g:7631:3: this_PatternComprehension_18= rulePatternComprehension
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_PatternComprehension_18=rulePatternComprehension();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_InternalOpenCypherParser

    // $ANTLR start synpred163_InternalOpenCypherParser
    public final void synpred163_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        EObject lv_expressions_21_0 = null;

        EObject lv_expressions_23_0 = null;


        // InternalOpenCypherParser.g:7643:3: ( ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) ) )
        // InternalOpenCypherParser.g:7643:3: ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) )
        {
        // InternalOpenCypherParser.g:7643:3: ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) )
        // InternalOpenCypherParser.g:7644:4: () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket )
        {
        // InternalOpenCypherParser.g:7644:4: ()
        // InternalOpenCypherParser.g:7645:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalOpenCypherParser.g:7654:4: (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket )
        // InternalOpenCypherParser.g:7655:5: otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket
        {
        otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_103); if (state.failed) return ;
        // InternalOpenCypherParser.g:7659:5: ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )?
        int alt161=2;
        int LA161_0 = input.LA(1);

        if ( ((LA161_0>=ALLSHORTESTPATHS && LA161_0<=WHERE)||(LA161_0>=CASE && LA161_0<=XOR)||(LA161_0>=AS && LA161_0<=OR)||LA161_0==DollarSign||LA161_0==LeftParenthesis||LA161_0==PlusSign||LA161_0==HyphenMinus||LA161_0==LeftSquareBracket||LA161_0==LeftCurlyBracket||LA161_0==RULE_ID||(LA161_0>=RULE_STRING_LITERAL && LA161_0<=RULE_DECIMAL)) ) {
            alt161=1;
        }
        switch (alt161) {
            case 1 :
                // InternalOpenCypherParser.g:7660:6: ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )*
                {
                // InternalOpenCypherParser.g:7660:6: ( (lv_expressions_21_0= ruleExpression ) )
                // InternalOpenCypherParser.g:7661:7: (lv_expressions_21_0= ruleExpression )
                {
                // InternalOpenCypherParser.g:7661:7: (lv_expressions_21_0= ruleExpression )
                // InternalOpenCypherParser.g:7662:8: lv_expressions_21_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  								newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_0_0());
                  							
                }
                pushFollow(FOLLOW_104);
                lv_expressions_21_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalOpenCypherParser.g:7679:6: (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )*
                loop160:
                do {
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==Comma) ) {
                        alt160=1;
                    }


                    switch (alt160) {
                	case 1 :
                	    // InternalOpenCypherParser.g:7680:7: otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) )
                	    {
                	    otherlv_22=(Token)match(input,Comma,FOLLOW_36); if (state.failed) return ;
                	    // InternalOpenCypherParser.g:7684:7: ( (lv_expressions_23_0= ruleExpression ) )
                	    // InternalOpenCypherParser.g:7685:8: (lv_expressions_23_0= ruleExpression )
                	    {
                	    // InternalOpenCypherParser.g:7685:8: (lv_expressions_23_0= ruleExpression )
                	    // InternalOpenCypherParser.g:7686:9: lv_expressions_23_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      									newCompositeNode(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_1_1_0());
                	      								
                	    }
                	    pushFollow(FOLLOW_104);
                	    lv_expressions_23_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop160;
                    }
                } while (true);


                }
                break;

        }

        otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred163_InternalOpenCypherParser

    // $ANTLR start synpred165_InternalOpenCypherParser
    public final void synpred165_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        EObject lv_filterExpression_28_0 = null;

        EObject lv_expression_30_0 = null;


        // InternalOpenCypherParser.g:7712:3: ( ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) )
        // InternalOpenCypherParser.g:7712:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7712:3: ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis )
        // InternalOpenCypherParser.g:7713:4: () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis
        {
        // InternalOpenCypherParser.g:7713:4: ()
        // InternalOpenCypherParser.g:7714:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_26=(Token)match(input,EXTRACT,FOLLOW_22); if (state.failed) return ;
        otherlv_27=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalOpenCypherParser.g:7731:4: ( (lv_filterExpression_28_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7732:5: (lv_filterExpression_28_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7732:5: (lv_filterExpression_28_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7733:6: lv_filterExpression_28_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0());
          					
        }
        pushFollow(FOLLOW_105);
        lv_filterExpression_28_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalOpenCypherParser.g:7750:4: (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )?
        int alt162=2;
        int LA162_0 = input.LA(1);

        if ( (LA162_0==VerticalLine) ) {
            alt162=1;
        }
        switch (alt162) {
            case 1 :
                // InternalOpenCypherParser.g:7751:5: otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) )
                {
                otherlv_29=(Token)match(input,VerticalLine,FOLLOW_36); if (state.failed) return ;
                // InternalOpenCypherParser.g:7755:5: ( (lv_expression_30_0= ruleExpression ) )
                // InternalOpenCypherParser.g:7756:6: (lv_expression_30_0= ruleExpression )
                {
                // InternalOpenCypherParser.g:7756:6: (lv_expression_30_0= ruleExpression )
                // InternalOpenCypherParser.g:7757:7: lv_expression_30_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  							newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_12_4_1_0());
                  						
                }
                pushFollow(FOLLOW_23);
                lv_expression_30_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        otherlv_31=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred165_InternalOpenCypherParser

    // $ANTLR start synpred166_InternalOpenCypherParser
    public final void synpred166_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_Reduce_32 = null;


        // InternalOpenCypherParser.g:7781:3: (this_Reduce_32= ruleReduce )
        // InternalOpenCypherParser.g:7781:3: this_Reduce_32= ruleReduce
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_Reduce_32=ruleReduce();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_InternalOpenCypherParser

    // $ANTLR start synpred167_InternalOpenCypherParser
    public final void synpred167_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_filterExpression_36_0 = null;


        // InternalOpenCypherParser.g:7793:3: ( ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) )
        // InternalOpenCypherParser.g:7793:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7793:3: ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis )
        // InternalOpenCypherParser.g:7794:4: () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis
        {
        // InternalOpenCypherParser.g:7794:4: ()
        // InternalOpenCypherParser.g:7795:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_34=(Token)match(input,FILTER,FOLLOW_22); if (state.failed) return ;
        otherlv_35=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalOpenCypherParser.g:7812:4: ( (lv_filterExpression_36_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7813:5: (lv_filterExpression_36_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7813:5: (lv_filterExpression_36_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7814:6: lv_filterExpression_36_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_14_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_36_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred167_InternalOpenCypherParser

    // $ANTLR start synpred168_InternalOpenCypherParser
    public final void synpred168_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_39=null;
        Token otherlv_40=null;
        Token otherlv_42=null;
        EObject lv_filterExpression_41_0 = null;


        // InternalOpenCypherParser.g:7837:3: ( ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) )
        // InternalOpenCypherParser.g:7837:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7837:3: ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis )
        // InternalOpenCypherParser.g:7838:4: () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis
        {
        // InternalOpenCypherParser.g:7838:4: ()
        // InternalOpenCypherParser.g:7839:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_39=(Token)match(input,ALL,FOLLOW_22); if (state.failed) return ;
        otherlv_40=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalOpenCypherParser.g:7856:4: ( (lv_filterExpression_41_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7857:5: (lv_filterExpression_41_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7857:5: (lv_filterExpression_41_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7858:6: lv_filterExpression_41_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_15_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_41_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_42=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred168_InternalOpenCypherParser

    // $ANTLR start synpred169_InternalOpenCypherParser
    public final void synpred169_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        EObject lv_filterExpression_46_0 = null;


        // InternalOpenCypherParser.g:7881:3: ( ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) )
        // InternalOpenCypherParser.g:7881:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7881:3: ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis )
        // InternalOpenCypherParser.g:7882:4: () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis
        {
        // InternalOpenCypherParser.g:7882:4: ()
        // InternalOpenCypherParser.g:7883:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_44=(Token)match(input,ANY,FOLLOW_22); if (state.failed) return ;
        otherlv_45=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalOpenCypherParser.g:7900:4: ( (lv_filterExpression_46_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7901:5: (lv_filterExpression_46_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7901:5: (lv_filterExpression_46_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7902:6: lv_filterExpression_46_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_16_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_46_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_47=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred169_InternalOpenCypherParser

    // $ANTLR start synpred170_InternalOpenCypherParser
    public final void synpred170_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token otherlv_52=null;
        EObject lv_filterExpression_51_0 = null;


        // InternalOpenCypherParser.g:7925:3: ( ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) )
        // InternalOpenCypherParser.g:7925:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7925:3: ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis )
        // InternalOpenCypherParser.g:7926:4: () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis
        {
        // InternalOpenCypherParser.g:7926:4: ()
        // InternalOpenCypherParser.g:7927:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_49=(Token)match(input,NONE,FOLLOW_22); if (state.failed) return ;
        otherlv_50=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalOpenCypherParser.g:7944:4: ( (lv_filterExpression_51_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7945:5: (lv_filterExpression_51_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7945:5: (lv_filterExpression_51_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7946:6: lv_filterExpression_51_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_17_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_51_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_52=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred170_InternalOpenCypherParser

    // $ANTLR start synpred171_InternalOpenCypherParser
    public final void synpred171_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_54=null;
        Token otherlv_55=null;
        Token otherlv_57=null;
        EObject lv_filterExpression_56_0 = null;


        // InternalOpenCypherParser.g:7969:3: ( ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) )
        // InternalOpenCypherParser.g:7969:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
        {
        // InternalOpenCypherParser.g:7969:3: ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis )
        // InternalOpenCypherParser.g:7970:4: () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis
        {
        // InternalOpenCypherParser.g:7970:4: ()
        // InternalOpenCypherParser.g:7971:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        otherlv_54=(Token)match(input,SINGLE,FOLLOW_22); if (state.failed) return ;
        otherlv_55=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return ;
        // InternalOpenCypherParser.g:7988:4: ( (lv_filterExpression_56_0= ruleFilterExpression ) )
        // InternalOpenCypherParser.g:7989:5: (lv_filterExpression_56_0= ruleFilterExpression )
        {
        // InternalOpenCypherParser.g:7989:5: (lv_filterExpression_56_0= ruleFilterExpression )
        // InternalOpenCypherParser.g:7990:6: lv_filterExpression_56_0= ruleFilterExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_18_3_0());
          					
        }
        pushFollow(FOLLOW_23);
        lv_filterExpression_56_0=ruleFilterExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        otherlv_57=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred171_InternalOpenCypherParser

    // $ANTLR start synpred172_InternalOpenCypherParser
    public final void synpred172_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_ShortestPathPattern_58 = null;


        // InternalOpenCypherParser.g:8013:3: (this_ShortestPathPattern_58= ruleShortestPathPattern )
        // InternalOpenCypherParser.g:8013:3: this_ShortestPathPattern_58= ruleShortestPathPattern
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ShortestPathPattern_58=ruleShortestPathPattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_InternalOpenCypherParser

    // $ANTLR start synpred173_InternalOpenCypherParser
    public final void synpred173_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_RelationshipsPattern_59 = null;


        // InternalOpenCypherParser.g:8025:3: (this_RelationshipsPattern_59= ruleRelationshipsPattern )
        // InternalOpenCypherParser.g:8025:3: this_RelationshipsPattern_59= ruleRelationshipsPattern
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_RelationshipsPattern_59=ruleRelationshipsPattern();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_InternalOpenCypherParser

    // $ANTLR start synpred174_InternalOpenCypherParser
    public final void synpred174_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_ParenthesizedExpression_60 = null;


        // InternalOpenCypherParser.g:8037:3: (this_ParenthesizedExpression_60= ruleParenthesizedExpression )
        // InternalOpenCypherParser.g:8037:3: this_ParenthesizedExpression_60= ruleParenthesizedExpression
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ParenthesizedExpression_60=ruleParenthesizedExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_InternalOpenCypherParser

    // $ANTLR start synpred175_InternalOpenCypherParser
    public final void synpred175_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject this_FunctionInvocation_61 = null;


        // InternalOpenCypherParser.g:8049:3: (this_FunctionInvocation_61= ruleFunctionInvocation )
        // InternalOpenCypherParser.g:8049:3: this_FunctionInvocation_61= ruleFunctionInvocation
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_FunctionInvocation_61=ruleFunctionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_InternalOpenCypherParser

    // $ANTLR start synpred176_InternalOpenCypherParser
    public final void synpred176_InternalOpenCypherParser_fragment() throws RecognitionException {   
        EObject lv_chain_1_0 = null;


        // InternalOpenCypherParser.g:8296:4: ( (lv_chain_1_0= rulePatternElementChain ) )
        // InternalOpenCypherParser.g:8296:4: (lv_chain_1_0= rulePatternElementChain )
        {
        // InternalOpenCypherParser.g:8296:4: (lv_chain_1_0= rulePatternElementChain )
        // InternalOpenCypherParser.g:8297:5: lv_chain_1_0= rulePatternElementChain
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_chain_1_0=rulePatternElementChain();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred176_InternalOpenCypherParser

    // $ANTLR start synpred178_InternalOpenCypherParser
    public final void synpred178_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token lv_distinct_2_0=null;

        // InternalOpenCypherParser.g:8475:4: ( (lv_distinct_2_0= DISTINCT ) )
        // InternalOpenCypherParser.g:8475:4: (lv_distinct_2_0= DISTINCT )
        {
        // InternalOpenCypherParser.g:8475:4: (lv_distinct_2_0= DISTINCT )
        // InternalOpenCypherParser.g:8476:5: lv_distinct_2_0= DISTINCT
        {
        lv_distinct_2_0=(Token)match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred178_InternalOpenCypherParser

    // $ANTLR start synpred190_InternalOpenCypherParser
    public final void synpred190_InternalOpenCypherParser_fragment() throws RecognitionException {   
        Token otherlv_0=null;
        EObject lv_caseAlternatives_1_0 = null;


        // InternalOpenCypherParser.g:9100:4: ( (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ ) )
        // InternalOpenCypherParser.g:9100:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
        {
        // InternalOpenCypherParser.g:9100:4: (otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+ )
        // InternalOpenCypherParser.g:9101:5: otherlv_0= CASE ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
        {
        otherlv_0=(Token)match(input,CASE,FOLLOW_113); if (state.failed) return ;
        // InternalOpenCypherParser.g:9105:5: ( (lv_caseAlternatives_1_0= ruleCaseAlternatives ) )+
        int cnt166=0;
        loop166:
        do {
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==WHEN) ) {
                alt166=1;
            }


            switch (alt166) {
        	case 1 :
        	    // InternalOpenCypherParser.g:9106:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
        	    {
        	    // InternalOpenCypherParser.g:9106:6: (lv_caseAlternatives_1_0= ruleCaseAlternatives )
        	    // InternalOpenCypherParser.g:9107:7: lv_caseAlternatives_1_0= ruleCaseAlternatives
        	    {
        	    if ( state.backtracking==0 ) {

        	      							newCompositeNode(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0());
        	      						
        	    }
        	    pushFollow(FOLLOW_123);
        	    lv_caseAlternatives_1_0=ruleCaseAlternatives();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt166 >= 1 ) break loop166;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(166, input);
                    throw eee;
            }
            cnt166++;
        } while (true);


        }


        }
    }
    // $ANTLR end synpred190_InternalOpenCypherParser

    // Delegated rules

    public final boolean synpred31_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA125 dfa125 = new DFA125(this);
    static final String dfa_1s = "\26\uffff";
    static final String dfa_2s = "\1\20\21\uffff\3\20\1\uffff";
    static final String dfa_3s = "\2\4\1\10\1\105\1\4\1\47\4\4\1\30\2\4\1\132\2\4\1\uffff\1\16\2\15\1\4\1\uffff";
    static final String dfa_4s = "\2\156\2\145\1\156\1\145\1\156\1\165\1\156\1\165\1\145\2\165\1\145\2\165\1\uffff\3\145\1\165\1\uffff";
    static final String dfa_5s = "\20\uffff\1\2\4\uffff\1\1";
    static final String dfa_6s = "\26\uffff}>";
    static final String[] dfa_7s = {
            "\11\25\1\5\1\25\1\22\1\25\1\15\1\25\1\23\2\25\1\1\1\24\1\13\1\12\3\25\1\14\1\17\3\25\1\7\4\25\1\6\1\10\1\25\1\4\1\25\1\21\1\25\1\uffff\1\20\2\25\1\2\4\25\1\3\10\25\1\16\10\25\1\11\1\25\6\uffff\6\25\27\uffff\1\25",
            "\52\20\2\uffff\33\20\6\uffff\6\20\3\uffff\1\20\12\uffff\1\25\10\uffff\1\20",
            "\1\20\34\uffff\1\20\77\uffff\1\25",
            "\1\20\37\uffff\1\25",
            "\52\20\2\uffff\33\20\6\uffff\6\20\16\uffff\1\25\10\uffff\1\20",
            "\1\20\75\uffff\1\25",
            "\52\20\2\uffff\33\20\6\uffff\6\20\3\uffff\1\20\12\uffff\1\25\10\uffff\1\20",
            "\52\20\2\uffff\33\20\6\uffff\6\20\1\uffff\1\20\1\uffff\1\20\2\uffff\1\20\1\uffff\1\20\5\uffff\1\25\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\4\20",
            "\52\20\2\uffff\33\20\6\uffff\6\20\3\uffff\1\20\12\uffff\1\25\10\uffff\1\20",
            "\52\20\2\uffff\33\20\6\uffff\6\20\1\uffff\1\20\1\uffff\1\20\12\uffff\1\25\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\4\20",
            "\1\20\114\uffff\1\25",
            "\52\20\2\uffff\33\20\6\uffff\6\20\1\uffff\1\20\1\uffff\1\20\2\uffff\1\20\1\uffff\1\20\5\uffff\1\25\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\4\20",
            "\52\20\2\uffff\33\20\6\uffff\6\20\1\uffff\1\20\1\uffff\1\20\12\uffff\1\25\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\4\20",
            "\1\20\12\uffff\1\25",
            "\52\20\2\uffff\33\20\6\uffff\6\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2\20\1\uffff\1\20\5\uffff\1\25\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\4\20",
            "\52\20\2\uffff\33\20\6\uffff\6\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2\20\1\uffff\1\20\5\uffff\1\25\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\4\20",
            "",
            "\1\20\126\uffff\1\25",
            "\1\20\1\uffff\1\20\1\uffff\1\20\1\uffff\1\20\2\uffff\4\20\3\uffff\2\20\3\uffff\1\20\4\uffff\2\20\1\uffff\1\20\1\uffff\1\20\2\uffff\1\20\2\uffff\1\20\4\uffff\1\20\10\uffff\1\20\10\uffff\1\20\33\uffff\1\25",
            "\1\20\1\uffff\1\20\1\uffff\1\20\1\uffff\1\20\2\uffff\4\20\3\uffff\2\20\3\uffff\1\20\4\uffff\2\20\1\uffff\1\20\1\uffff\1\20\2\uffff\1\20\2\uffff\1\20\4\uffff\1\20\10\uffff\1\20\10\uffff\1\20\33\uffff\1\25",
            "\52\20\1\uffff\34\20\6\uffff\6\20\16\uffff\1\25\10\uffff\1\20\4\uffff\3\20",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()* loopback of 315:3: ( (lv_configurationOption_3_0= ruleConfigurationOption ) )*";
        }
    }
    static final String dfa_8s = "\22\uffff";
    static final String dfa_9s = "\1\15\16\uffff\1\0\2\uffff";
    static final String dfa_10s = "\1\111\16\uffff\1\0\2\uffff";
    static final String dfa_11s = "\1\uffff\1\1\16\uffff\1\3\1\2";
    static final String dfa_12s = "\17\uffff\1\0\2\uffff}>";
    static final String[] dfa_13s = {
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\20\2\uffff\1\17\7\uffff\1\1\10\uffff\1\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "491:2: (this_RegularQuery_0= ruleRegularQuery | this_StandaloneCall_1= ruleStandaloneCall | this_BulkImportQuery_2= ruleBulkImportQuery )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred10_InternalOpenCypherParser()) ) {s = 17;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\13\uffff";
    static final String dfa_15s = "\1\26\2\0\10\uffff";
    static final String dfa_16s = "\1\62\2\0\10\uffff";
    static final String dfa_17s = "\3\uffff\1\1\1\3\1\5\1\7\1\2\1\4\1\6\1\10";
    static final String dfa_18s = "\1\uffff\1\0\1\1\10\uffff}>";
    static final String[] dfa_19s = {
            "\1\1\33\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "1067:2: (this_CreateIndex_0= ruleCreateIndex | this_DropIndex_1= ruleDropIndex | this_CreateUniqueConstraint_2= ruleCreateUniqueConstraint | this_DropUniqueConstraint_3= ruleDropUniqueConstraint | this_CreateNodePropertyExistenceConstraint_4= ruleCreateNodePropertyExistenceConstraint | this_DropNodePropertyExistenceConstraint_5= ruleDropNodePropertyExistenceConstraint | this_CreateRelationshipPropertyExistenceConstraint_6= ruleCreateRelationshipPropertyExistenceConstraint | this_DropRelationshipPropertyExistenceConstraint_7= ruleDropRelationshipPropertyExistenceConstraint )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_InternalOpenCypherParser()) ) {s = 3;}

                        else if ( (synpred31_InternalOpenCypherParser()) ) {s = 4;}

                        else if ( (synpred33_InternalOpenCypherParser()) ) {s = 5;}

                        else if ( (synpred35_InternalOpenCypherParser()) ) {s = 6;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (synpred32_InternalOpenCypherParser()) ) {s = 8;}

                        else if ( (synpred34_InternalOpenCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_20s = "\121\uffff";
    static final String dfa_21s = "\1\4\1\uffff\3\113\1\4\110\113\3\uffff";
    static final String dfa_22s = "\1\165\1\uffff\3\145\1\165\110\145\3\uffff";
    static final String dfa_23s = "\1\uffff\1\1\114\uffff\1\3\1\2\1\4";
    static final String dfa_24s = "\121\uffff}>";
    static final String[] dfa_25s = {
            "\1\17\1\47\1\100\1\16\1\34\1\70\1\72\1\111\1\62\1\50\1\25\1\22\1\7\1\60\1\44\1\23\1\35\1\26\1\30\1\21\1\55\1\56\1\40\1\11\1\10\1\57\1\63\1\15\1\107\1\37\1\52\1\6\1\3\1\31\1\67\1\51\1\53\1\64\1\76\1\27\1\24\1\102\2\uffff\1\5\1\71\1\33\1\112\1\110\1\45\1\74\1\41\1\77\1\14\1\4\1\75\1\66\1\115\1\2\1\114\1\43\1\12\1\105\1\13\1\73\1\42\1\113\1\106\1\101\1\54\1\104\6\uffff\1\46\1\65\1\61\1\36\1\32\1\103\1\uffff\1\1\1\uffff\1\1\15\uffff\1\1\2\uffff\1\1\2\uffff\1\20\3\uffff\4\1",
            "",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\52\1\2\uffff\33\1\1\116\5\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\120\2\uffff\1\117\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "2565:2: ( ( ( (lv_propertyExpression_0_0= rulePropertyExpression ) ) otherlv_1= EqualsSign ( (lv_expression_2_0= ruleExpression ) ) ) | ( ( (lv_variable_3_0= ruleVariableDeclaration ) ) otherlv_4= EqualsSign ( (lv_expression_5_0= ruleExpression ) ) ) | ( ( (lv_variable_6_0= ruleVariableDeclaration ) ) otherlv_7= PlusSignEqualsSign ( (lv_expression_8_0= ruleExpression ) ) ) | ( ( (lv_variable_9_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_10_0= ruleNodeLabels ) ) ) )";
        }
    }
    static final String dfa_26s = "\117\uffff";
    static final String dfa_27s = "\1\4\107\132\1\4\4\132\2\uffff";
    static final String dfa_28s = "\1\165\107\142\1\165\4\142\2\uffff";
    static final String dfa_29s = "\115\uffff\1\2\1\1";
    static final String dfa_30s = "\117\uffff}>";
    static final String[] dfa_31s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\1\uffff\1\115\1\uffff\1\115\15\uffff\1\115\2\uffff\1\115\2\uffff\1\1\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\52\115\2\uffff\33\115\6\uffff\6\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\1\uffff\2\115\1\uffff\1\116\5\uffff\1\115\2\uffff\1\115\2\uffff\1\115\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "",
            ""
    };

    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "2907:2: ( ( () ( (lv_variable_1_0= ruleVariableDeclaration ) ) ( (lv_nodeLabels_2_0= ruleNodeLabels ) ) ) | ( () ( (lv_propertyExpression_4_0= rulePropertyExpression ) ) ) )";
        }
    }
    static final String dfa_32s = "\120\uffff";
    static final String dfa_33s = "\1\uffff\114\117\3\uffff";
    static final String dfa_34s = "\1\4\114\56\1\uffff\1\4\1\uffff";
    static final String dfa_35s = "\1\156\114\143\1\uffff\1\156\1\uffff";
    static final String dfa_36s = "\115\uffff\1\1\1\uffff\1\2";
    static final String dfa_37s = "\120\uffff}>";
    static final String[] dfa_38s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "\1\117\53\uffff\1\115\5\uffff\1\116\2\uffff\1\117",
            "",
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            ""
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "3178:5: (lv_invocation_1_1= ruleExplicitProcedureInvocation | lv_invocation_1_2= ruleImplicitProcedureInvocation )";
        }
    }
    static final String dfa_39s = "\1\uffff\114\116\2\uffff";
    static final String dfa_40s = "\1\4\114\15\2\uffff";
    static final String dfa_41s = "\1\156\114\143\2\uffff";
    static final String dfa_42s = "\115\uffff\1\1\1\2";
    static final String[] dfa_43s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\3\uffff\1\116\4\uffff\2\116\1\uffff\2\116\3\uffff\1\116\7\uffff\1\116\10\uffff\1\116\10\uffff\1\116\7\uffff\1\115\11\uffff\1\116\2\uffff\1\116\4\uffff\1\116",
            "",
            ""
    };
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final char[] dfa_40 = DFA.unpackEncodedStringToUnsignedChars(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[][] dfa_43 = unpackEncodedStringArray(dfa_43s);

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = dfa_26;
            this.eof = dfa_39;
            this.min = dfa_40;
            this.max = dfa_41;
            this.accept = dfa_42;
            this.special = dfa_30;
            this.transition = dfa_43;
        }
        public String getDescription() {
            return "3339:3: ( ( (lv_field_0_0= ruleProcedureResultField ) ) otherlv_1= AS )?";
        }
    }
    static final String dfa_44s = "\131\uffff";
    static final String dfa_45s = "\1\4\1\0\127\uffff";
    static final String dfa_46s = "\1\165\1\0\127\uffff";
    static final String dfa_47s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_48s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_49s = {
            "\10\2\1\1\41\2\2\uffff\33\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[][] dfa_49 = unpackEncodedStringArray(dfa_49s);

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = dfa_44;
            this.eof = dfa_44;
            this.min = dfa_45;
            this.max = dfa_46;
            this.accept = dfa_47;
            this.special = dfa_48;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "3406:3: ( (lv_distint_1_0= DISTINCT ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index39_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_44;
            this.eof = dfa_44;
            this.min = dfa_45;
            this.max = dfa_46;
            this.accept = dfa_47;
            this.special = dfa_48;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "3491:3: ( (lv_distinct_1_0= DISTINCT ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_50s = "\122\uffff";
    static final String dfa_51s = "\1\132\1\4\1\uffff\114\132\1\4\2\uffff";
    static final String dfa_52s = "\1\142\1\156\1\uffff\114\132\1\162\2\uffff";
    static final String dfa_53s = "\2\uffff\1\3\115\uffff\1\2\1\1";
    static final String dfa_54s = "\122\uffff}>";
    static final String[] dfa_55s = {
            "\1\2\7\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\27\uffff\1\3",
            "",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\52\121\2\uffff\33\121\6\uffff\6\121\1\uffff\1\120\25\uffff\1\121\3\uffff\1\120",
            "",
            ""
    };

    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final char[] dfa_51 = DFA.unpackEncodedStringToUnsignedChars(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[][] dfa_55 = unpackEncodedStringArray(dfa_55s);

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "4528:3: (this_IdentifiedIndexLookup_1= ruleIdentifiedIndexLookup | this_IndexQuery_2= ruleIndexQuery | this_IdLookup_3= ruleIdLookup )";
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = dfa_50;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "4595:3: (this_IdentifiedIndexLookup_2= ruleIdentifiedIndexLookup | this_IndexQuery_3= ruleIndexQuery | this_IdLookup_4= ruleIdLookup )";
        }
    }
    static final String dfa_56s = "\1\130\1\4\1\uffff\114\142\2\uffff";
    static final String dfa_57s = "\1\153\1\165\1\uffff\114\155\2\uffff";
    static final String dfa_58s = "\2\uffff\1\2\114\uffff\1\3\1\1";
    static final String[] dfa_59s = {
            "\1\2\22\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\26\uffff\1\120\1\3\4\uffff\3\117",
            "",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "\1\120\12\uffff\1\117",
            "",
            ""
    };
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_56;
            this.max = dfa_57;
            this.accept = dfa_58;
            this.special = dfa_24;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "5794:2: (this_MapLiteral_0= ruleMapLiteral | this_Parameter_1= ruleParameter | this_LegacyParameter_2= ruleLegacyParameter )";
        }
    }
    static final String dfa_60s = "\130\uffff";
    static final String dfa_61s = "\1\4\1\0\126\uffff";
    static final String dfa_62s = "\1\165\1\0\126\uffff";
    static final String dfa_63s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_64s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_65s = {
            "\52\2\2\uffff\27\2\1\1\3\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final char[] dfa_61 = DFA.unpackEncodedStringToUnsignedChars(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[][] dfa_65 = unpackEncodedStringArray(dfa_65s);

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "6440:2: ( ( () ( (lv_operator_1_0= NOT ) ) ( (lv_left_2_0= ruleExpressionNot ) ) ) | this_ExpressionComparison_3= ruleExpressionComparison )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_66s = "\1\1\12\uffff";
    static final String dfa_67s = "\1\11\7\uffff\1\72\2\uffff";
    static final String dfa_68s = "\1\155\7\uffff\1\107\2\uffff";
    static final String dfa_69s = "\1\uffff\1\11\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10";
    static final String dfa_70s = "\13\uffff}>";
    static final String[] dfa_71s = {
            "\2\1\1\7\1\uffff\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\1\uffff\1\5\1\uffff\1\1\3\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\6\2\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\3\1\1\3\2\1\1\uffff\1\4\1\10\2\1\2\uffff\1\1\1\uffff\5\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\2\2\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\14\uffff\1\12",
            "",
            ""
    };
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final char[] dfa_67 = DFA.unpackEncodedStringToUnsignedChars(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[][] dfa_71 = unpackEncodedStringArray(dfa_71s);

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = dfa_14;
            this.eof = dfa_66;
            this.min = dfa_67;
            this.max = dfa_68;
            this.accept = dfa_69;
            this.special = dfa_70;
            this.transition = dfa_71;
        }
        public String getDescription() {
            return "()* loopback of 7011:3: ( ( () otherlv_2= LeftSquareBracket ( (lv_expression_3_0= ruleExpression ) ) (otherlv_4= FullStopFullStop ( (lv_upper_5_0= ruleExpression ) ) )? otherlv_6= RightSquareBracket ) | ( () otherlv_8= EqualsSignTilde ( (lv_right_9_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_11= IN ( (lv_right_12_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_14= STARTS otherlv_15= WITH ( (lv_right_16_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_18= ENDS otherlv_19= WITH ( (lv_right_20_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_22= CONTAINS ( (lv_right_23_0= ruleExpressionNodeLabelsAndPropertyLookup ) ) ) | ( () otherlv_25= IS otherlv_26= NULL ) | ( () otherlv_28= IS otherlv_29= NOT otherlv_30= NULL ) )*";
        }
    }
    static final String dfa_72s = "\152\uffff";
    static final String dfa_73s = "\1\4\5\uffff\117\0\25\uffff";
    static final String dfa_74s = "\1\165\5\uffff\117\0\25\uffff";
    static final String dfa_75s = "\1\uffff\1\1\2\uffff\1\2\1\3\117\uffff\1\4\1\11\1\5\1\27\1\30\1\6\1\7\1\10\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26";
    static final String dfa_76s = "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\25\uffff}>";
    static final String[] dfa_77s = {
            "\1\25\1\56\1\107\1\24\1\43\1\77\1\101\1\120\1\71\1\57\1\34\1\31\1\15\1\67\1\53\1\32\1\44\1\35\1\37\1\30\1\64\1\65\1\47\1\17\1\16\1\66\1\72\1\23\1\116\1\46\1\61\1\13\1\10\1\40\1\76\1\60\1\62\1\73\1\105\1\36\1\33\1\111\2\uffff\1\12\1\100\1\42\1\121\1\117\1\54\1\103\1\50\1\106\1\22\1\11\1\104\1\75\1\124\1\7\1\123\1\52\1\20\1\114\1\21\1\102\1\51\1\122\1\115\1\110\1\63\1\113\6\uffff\1\55\1\74\1\70\1\45\1\41\1\112\1\uffff\1\5\1\uffff\1\26\15\uffff\1\14\2\uffff\1\6\2\uffff\1\27\3\uffff\1\4\3\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final char[] dfa_73 = DFA.unpackEncodedStringToUnsignedChars(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[][] dfa_77 = unpackEncodedStringArray(dfa_77s);

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = dfa_72;
            this.eof = dfa_72;
            this.min = dfa_73;
            this.max = dfa_74;
            this.accept = dfa_75;
            this.special = dfa_76;
            this.transition = dfa_77;
        }
        public String getDescription() {
            return "7421:2: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) | ( () ( (lv_value_3_0= RULE_STRING_LITERAL ) ) ) | this_Parameter_4= ruleParameter | this_LegacyParameter_5= ruleLegacyParameter | ( () ( ( (lv_value_7_1= TRUE | lv_value_7_2= FALSE ) ) ) ) | ( () otherlv_9= NULL ) | this_CaseExpression_10= ruleCaseExpression | ( () otherlv_12= COUNT otherlv_13= LeftParenthesis otherlv_14= Asterisk otherlv_15= RightParenthesis ) | this_MapLiteral_16= ruleMapLiteral | this_ListComprehension_17= ruleListComprehension | this_PatternComprehension_18= rulePatternComprehension | ( () (otherlv_20= LeftSquareBracket ( ( (lv_expressions_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_expressions_23_0= ruleExpression ) ) )* )? otherlv_24= RightSquareBracket ) ) | ( () otherlv_26= EXTRACT otherlv_27= LeftParenthesis ( (lv_filterExpression_28_0= ruleFilterExpression ) ) (otherlv_29= VerticalLine ( (lv_expression_30_0= ruleExpression ) ) )? otherlv_31= RightParenthesis ) | this_Reduce_32= ruleReduce | ( () otherlv_34= FILTER otherlv_35= LeftParenthesis ( (lv_filterExpression_36_0= ruleFilterExpression ) ) otherlv_37= RightParenthesis ) | ( () otherlv_39= ALL otherlv_40= LeftParenthesis ( (lv_filterExpression_41_0= ruleFilterExpression ) ) otherlv_42= RightParenthesis ) | ( () otherlv_44= ANY otherlv_45= LeftParenthesis ( (lv_filterExpression_46_0= ruleFilterExpression ) ) otherlv_47= RightParenthesis ) | ( () otherlv_49= NONE otherlv_50= LeftParenthesis ( (lv_filterExpression_51_0= ruleFilterExpression ) ) otherlv_52= RightParenthesis ) | ( () otherlv_54= SINGLE otherlv_55= LeftParenthesis ( (lv_filterExpression_56_0= ruleFilterExpression ) ) otherlv_57= RightParenthesis ) | this_ShortestPathPattern_58= ruleShortestPathPattern | this_RelationshipsPattern_59= ruleRelationshipsPattern | this_ParenthesizedExpression_60= ruleParenthesizedExpression | this_FunctionInvocation_61= ruleFunctionInvocation | ( () ( ( ruleSYMBOLIC_NAME_X ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (synpred158_InternalOpenCypherParser()) ) {s = 86;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalOpenCypherParser()) ) {s = 90;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_InternalOpenCypherParser()) ) {s = 91;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA112_11 = input.LA(1);

                         
                        int index112_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_InternalOpenCypherParser()) ) {s = 92;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA112_12 = input.LA(1);

                         
                        int index112_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred159_InternalOpenCypherParser()) ) {s = 93;}

                        else if ( (synpred160_InternalOpenCypherParser()) ) {s = 94;}

                        else if ( (synpred163_InternalOpenCypherParser()) ) {s = 95;}

                         
                        input.seek(index112_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA112_13 = input.LA(1);

                         
                        int index112_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_InternalOpenCypherParser()) ) {s = 96;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA112_14 = input.LA(1);

                         
                        int index112_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_InternalOpenCypherParser()) ) {s = 97;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_InternalOpenCypherParser()) ) {s = 98;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA112_16 = input.LA(1);

                         
                        int index112_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_InternalOpenCypherParser()) ) {s = 99;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA112_17 = input.LA(1);

                         
                        int index112_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalOpenCypherParser()) ) {s = 100;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA112_18 = input.LA(1);

                         
                        int index112_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_InternalOpenCypherParser()) ) {s = 101;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA112_19 = input.LA(1);

                         
                        int index112_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_InternalOpenCypherParser()) ) {s = 102;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA112_20 = input.LA(1);

                         
                        int index112_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalOpenCypherParser()) ) {s = 103;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA112_21 = input.LA(1);

                         
                        int index112_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_InternalOpenCypherParser()) ) {s = 103;}

                        else if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA112_22 = input.LA(1);

                         
                        int index112_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_InternalOpenCypherParser()) ) {s = 104;}

                        else if ( (synpred174_InternalOpenCypherParser()) ) {s = 105;}

                         
                        input.seek(index112_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA112_23 = input.LA(1);

                         
                        int index112_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA112_24 = input.LA(1);

                         
                        int index112_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA112_25 = input.LA(1);

                         
                        int index112_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA112_26 = input.LA(1);

                         
                        int index112_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA112_27 = input.LA(1);

                         
                        int index112_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA112_28 = input.LA(1);

                         
                        int index112_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA112_29 = input.LA(1);

                         
                        int index112_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_29);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA112_30 = input.LA(1);

                         
                        int index112_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA112_31 = input.LA(1);

                         
                        int index112_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA112_32 = input.LA(1);

                         
                        int index112_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA112_33 = input.LA(1);

                         
                        int index112_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA112_34 = input.LA(1);

                         
                        int index112_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA112_35 = input.LA(1);

                         
                        int index112_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA112_36 = input.LA(1);

                         
                        int index112_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA112_37 = input.LA(1);

                         
                        int index112_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA112_38 = input.LA(1);

                         
                        int index112_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA112_39 = input.LA(1);

                         
                        int index112_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA112_40 = input.LA(1);

                         
                        int index112_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA112_41 = input.LA(1);

                         
                        int index112_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA112_42 = input.LA(1);

                         
                        int index112_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA112_43 = input.LA(1);

                         
                        int index112_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA112_44 = input.LA(1);

                         
                        int index112_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA112_45 = input.LA(1);

                         
                        int index112_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA112_46 = input.LA(1);

                         
                        int index112_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA112_47 = input.LA(1);

                         
                        int index112_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_47);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA112_48 = input.LA(1);

                         
                        int index112_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_48);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA112_49 = input.LA(1);

                         
                        int index112_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA112_50 = input.LA(1);

                         
                        int index112_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_50);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA112_51 = input.LA(1);

                         
                        int index112_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_51);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA112_52 = input.LA(1);

                         
                        int index112_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA112_53 = input.LA(1);

                         
                        int index112_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_53);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA112_54 = input.LA(1);

                         
                        int index112_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA112_55 = input.LA(1);

                         
                        int index112_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_55);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA112_56 = input.LA(1);

                         
                        int index112_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_56);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA112_57 = input.LA(1);

                         
                        int index112_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA112_58 = input.LA(1);

                         
                        int index112_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_58);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA112_59 = input.LA(1);

                         
                        int index112_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_59);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA112_60 = input.LA(1);

                         
                        int index112_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_60);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA112_61 = input.LA(1);

                         
                        int index112_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_61);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA112_62 = input.LA(1);

                         
                        int index112_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_62);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA112_63 = input.LA(1);

                         
                        int index112_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_63);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA112_64 = input.LA(1);

                         
                        int index112_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_64);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA112_65 = input.LA(1);

                         
                        int index112_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_65);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA112_66 = input.LA(1);

                         
                        int index112_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_66);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA112_67 = input.LA(1);

                         
                        int index112_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_67);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA112_68 = input.LA(1);

                         
                        int index112_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_68);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA112_69 = input.LA(1);

                         
                        int index112_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_69);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA112_70 = input.LA(1);

                         
                        int index112_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_70);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA112_71 = input.LA(1);

                         
                        int index112_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_71);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA112_72 = input.LA(1);

                         
                        int index112_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_72);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA112_73 = input.LA(1);

                         
                        int index112_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_73);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA112_74 = input.LA(1);

                         
                        int index112_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_74);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA112_75 = input.LA(1);

                         
                        int index112_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_75);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA112_76 = input.LA(1);

                         
                        int index112_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_76);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA112_77 = input.LA(1);

                         
                        int index112_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_77);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA112_78 = input.LA(1);

                         
                        int index112_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_78);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA112_79 = input.LA(1);

                         
                        int index112_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_79);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA112_80 = input.LA(1);

                         
                        int index112_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_80);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA112_81 = input.LA(1);

                         
                        int index112_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_81);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA112_82 = input.LA(1);

                         
                        int index112_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_82);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA112_83 = input.LA(1);

                         
                        int index112_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_83);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA112_84 = input.LA(1);

                         
                        int index112_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index112_84);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_78s = "\100\uffff";
    static final String dfa_79s = "\1\1\77\uffff";
    static final String dfa_80s = "\1\11\16\uffff\1\0\2\uffff\1\0\55\uffff";
    static final String dfa_81s = "\1\155\16\uffff\1\0\2\uffff\1\0\55\uffff";
    static final String dfa_82s = "\1\uffff\1\2\75\uffff\1\1";
    static final String dfa_83s = "\17\uffff\1\0\2\uffff\1\1\55\uffff}>";
    static final String[] dfa_84s = {
            "\3\1\1\uffff\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\6\1\1\uffff\4\1\2\uffff\1\1\1\uffff\4\1\1\17\4\1\1\22\2\1\1\uffff\3\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[] dfa_83 = DFA.unpackEncodedString(dfa_83s);
    static final short[][] dfa_84 = unpackEncodedStringArray(dfa_84s);

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_78;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_83;
            this.transition = dfa_84;
        }
        public String getDescription() {
            return "()+ loopback of 8295:3: ( (lv_chain_1_0= rulePatternElementChain ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_15 = input.LA(1);

                         
                        int index113_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_InternalOpenCypherParser()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA113_18 = input.LA(1);

                         
                        int index113_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_InternalOpenCypherParser()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_85s = "\115\115\2\uffff";
    static final String dfa_86s = "\1\4\114\56\2\uffff";
    static final String[] dfa_87s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\115\5\uffff\1\116\2\uffff\1\115",
            "",
            ""
    };
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[][] dfa_87 = unpackEncodedStringArray(dfa_87s);

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = dfa_26;
            this.eof = dfa_85;
            this.min = dfa_86;
            this.max = dfa_41;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_87;
        }
        public String getDescription() {
            return "()* loopback of 8787:2: (this_SYMBOLIC_NAME_X_0= ruleSYMBOLIC_NAME_X kw= FullStop )*";
        }
    }
    static final String dfa_88s = "\1\uffff\114\115\2\uffff";
    static final String dfa_89s = "\1\4\114\11\2\uffff";
    static final String dfa_90s = "\1\156\114\155\2\uffff";
    static final String[] dfa_91s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "\3\115\1\uffff\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\1\uffff\1\115\1\uffff\1\115\3\uffff\6\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\1\uffff\2\115\2\uffff\1\115\4\uffff\2\115\1\uffff\2\115\1\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\1\uffff\6\115\1\uffff\4\115\1\116\1\uffff\1\115\1\uffff\14\115\1\116\3\115\1\uffff\2\115",
            "",
            ""
    };
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final char[] dfa_90 = DFA.unpackEncodedStringToUnsignedChars(dfa_90s);
    static final short[][] dfa_91 = unpackEncodedStringArray(dfa_91s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_26;
            this.eof = dfa_88;
            this.min = dfa_89;
            this.max = dfa_90;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_91;
        }
        public String getDescription() {
            return "9010:3: ( ( ( (lv_propertyKeyName_1_0= rulePropertyKeyName ) ) ( ( (lv_propertyOperator_2_1= QuestionMark | lv_propertyOperator_2_2= ExclamationMark ) ) ) ) | ( (lv_propertyKeyName_3_0= rulePropertyKeyName ) ) )";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0084958463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000888002L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF2L,0x00384000007E07FFL});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF2L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0080858463422002L,0x0000000000000201L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000002L,0x0038000000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000203L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900057E07FFL});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0000004004000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900A57E07FFL});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000047E07FFL});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000300000000002L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000008000400000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0080858463422000L,0x0000000008000201L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000807E07FFL});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900B57E07FFL});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x1000024000000002L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x1000004000000002L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0002000000000602L,0x0000000000000010L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000200000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0100000000000040L,0x0000000000000100L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000404000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0004080000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0004000001000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0038000011000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0038000000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000002L,0x0000001080000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004804097E07FFL});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000080409000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000080009000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000011080000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004A84117E07FFL});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x00000A8411000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x00000A0411000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x00000A0011000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x00000A0001000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004004007E07FFL});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000002L,0x0038000000001000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000007000016000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x00000000A0000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000002L,0x0000000212000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0010000100000802L,0x0000010000188000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000020000001000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000002L,0x0000000500000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4B00A57E07FFL});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000020040000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000000L,0x0000100008000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900AD7E07FFL});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000000L,0x0000000048000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000200000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000000L,0x0000008000800000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x8008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00006000007E07FFL});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00384000007E07FFL});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x8000000000000002L});

}
