/**
 * generated by Xtext 2.13.0
 */
package org.slizaa.neo4j.opencypher.openCypher.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.slizaa.neo4j.opencypher.openCypher.Clause;
import org.slizaa.neo4j.opencypher.openCypher.LoadCSV;
import org.slizaa.neo4j.opencypher.openCypher.LoadCSVQuery;
import org.slizaa.neo4j.opencypher.openCypher.OpenCypherPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Load CSV Query</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.slizaa.neo4j.opencypher.openCypher.impl.LoadCSVQueryImpl#getLoadCSV <em>Load CSV</em>}</li>
 *   <li>{@link org.slizaa.neo4j.opencypher.openCypher.impl.LoadCSVQueryImpl#getClauses <em>Clauses</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LoadCSVQueryImpl extends MinimalEObjectImpl.Container implements LoadCSVQuery
{
  /**
   * The cached value of the '{@link #getLoadCSV() <em>Load CSV</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadCSV()
   * @generated
   * @ordered
   */
  protected LoadCSV loadCSV;

  /**
   * The cached value of the '{@link #getClauses() <em>Clauses</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClauses()
   * @generated
   * @ordered
   */
  protected EList<Clause> clauses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoadCSVQueryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenCypherPackage.Literals.LOAD_CSV_QUERY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LoadCSV getLoadCSV()
  {
    return loadCSV;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoadCSV(LoadCSV newLoadCSV, NotificationChain msgs)
  {
    LoadCSV oldLoadCSV = loadCSV;
    loadCSV = newLoadCSV;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV, oldLoadCSV, newLoadCSV);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLoadCSV(LoadCSV newLoadCSV)
  {
    if (newLoadCSV != loadCSV)
    {
      NotificationChain msgs = null;
      if (loadCSV != null)
        msgs = ((InternalEObject)loadCSV).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV, null, msgs);
      if (newLoadCSV != null)
        msgs = ((InternalEObject)newLoadCSV).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV, null, msgs);
      msgs = basicSetLoadCSV(newLoadCSV, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV, newLoadCSV, newLoadCSV));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Clause> getClauses()
  {
    if (clauses == null)
    {
      clauses = new EObjectContainmentEList<Clause>(Clause.class, this, OpenCypherPackage.LOAD_CSV_QUERY__CLAUSES);
    }
    return clauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV:
        return basicSetLoadCSV(null, msgs);
      case OpenCypherPackage.LOAD_CSV_QUERY__CLAUSES:
        return ((InternalEList<?>)getClauses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV:
        return getLoadCSV();
      case OpenCypherPackage.LOAD_CSV_QUERY__CLAUSES:
        return getClauses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV:
        setLoadCSV((LoadCSV)newValue);
        return;
      case OpenCypherPackage.LOAD_CSV_QUERY__CLAUSES:
        getClauses().clear();
        getClauses().addAll((Collection<? extends Clause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV:
        setLoadCSV((LoadCSV)null);
        return;
      case OpenCypherPackage.LOAD_CSV_QUERY__CLAUSES:
        getClauses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenCypherPackage.LOAD_CSV_QUERY__LOAD_CSV:
        return loadCSV != null;
      case OpenCypherPackage.LOAD_CSV_QUERY__CLAUSES:
        return clauses != null && !clauses.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //LoadCSVQueryImpl
