/**
 * generated by Xtext 2.13.0
 */
package org.slizaa.neo4j.opencypher.openCypher.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.slizaa.neo4j.opencypher.openCypher.All;
import org.slizaa.neo4j.opencypher.openCypher.AllOptions;
import org.slizaa.neo4j.opencypher.openCypher.AllShortestPaths;
import org.slizaa.neo4j.opencypher.openCypher.AnonymousPatternPart;
import org.slizaa.neo4j.opencypher.openCypher.Any;
import org.slizaa.neo4j.opencypher.openCypher.BoolConstant;
import org.slizaa.neo4j.opencypher.openCypher.BulkImportQuery;
import org.slizaa.neo4j.opencypher.openCypher.CaseAlternatives;
import org.slizaa.neo4j.opencypher.openCypher.CaseExpression;
import org.slizaa.neo4j.opencypher.openCypher.Clause;
import org.slizaa.neo4j.opencypher.openCypher.CombinedQuery;
import org.slizaa.neo4j.opencypher.openCypher.Command;
import org.slizaa.neo4j.opencypher.openCypher.ConfigurationOption;
import org.slizaa.neo4j.opencypher.openCypher.ContainsExpression;
import org.slizaa.neo4j.opencypher.openCypher.Count;
import org.slizaa.neo4j.opencypher.openCypher.Create;
import org.slizaa.neo4j.opencypher.openCypher.CreateIndex;
import org.slizaa.neo4j.opencypher.openCypher.CreateNodePropertyExistenceConstraint;
import org.slizaa.neo4j.opencypher.openCypher.CreateRelationshipPropertyExistenceConstraint;
import org.slizaa.neo4j.opencypher.openCypher.CreateUniqueConstraint;
import org.slizaa.neo4j.opencypher.openCypher.Cypher;
import org.slizaa.neo4j.opencypher.openCypher.CypherOption;
import org.slizaa.neo4j.opencypher.openCypher.DecimalInteger;
import org.slizaa.neo4j.opencypher.openCypher.Delete;
import org.slizaa.neo4j.opencypher.openCypher.DropIndex;
import org.slizaa.neo4j.opencypher.openCypher.DropNodePropertyExistenceConstraint;
import org.slizaa.neo4j.opencypher.openCypher.DropRelationshipPropertyExistenceConstraint;
import org.slizaa.neo4j.opencypher.openCypher.DropUniqueConstraint;
import org.slizaa.neo4j.opencypher.openCypher.EndsWithExpression;
import org.slizaa.neo4j.opencypher.openCypher.ExplicitProcedureInvocation;
import org.slizaa.neo4j.opencypher.openCypher.Expression;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionAnd;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionComparison;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionList;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionMulDiv;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionNodeLabels;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionNot;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionOr;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionPlusMinus;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionPower;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionPropertyLookup;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionUnaryPlusMinus;
import org.slizaa.neo4j.opencypher.openCypher.ExpressionXor;
import org.slizaa.neo4j.opencypher.openCypher.Extract;
import org.slizaa.neo4j.opencypher.openCypher.Filter;
import org.slizaa.neo4j.opencypher.openCypher.FilterExpression;
import org.slizaa.neo4j.opencypher.openCypher.Foreach;
import org.slizaa.neo4j.opencypher.openCypher.FunctionInvocation;
import org.slizaa.neo4j.opencypher.openCypher.Hint;
import org.slizaa.neo4j.opencypher.openCypher.IdInColl;
import org.slizaa.neo4j.opencypher.openCypher.IdLookup;
import org.slizaa.neo4j.opencypher.openCypher.IdentifiedIndexLookup;
import org.slizaa.neo4j.opencypher.openCypher.ImplicitProcedureInvocation;
import org.slizaa.neo4j.opencypher.openCypher.InCollectionExpression;
import org.slizaa.neo4j.opencypher.openCypher.InQueryCall;
import org.slizaa.neo4j.opencypher.openCypher.Index;
import org.slizaa.neo4j.opencypher.openCypher.IndexExpression;
import org.slizaa.neo4j.opencypher.openCypher.IndexHint;
import org.slizaa.neo4j.opencypher.openCypher.IndexQuery;
import org.slizaa.neo4j.opencypher.openCypher.IsNotNullExpression;
import org.slizaa.neo4j.opencypher.openCypher.IsNullExpression;
import org.slizaa.neo4j.opencypher.openCypher.JoinHint;
import org.slizaa.neo4j.opencypher.openCypher.LegacyParameter;
import org.slizaa.neo4j.opencypher.openCypher.Limit;
import org.slizaa.neo4j.opencypher.openCypher.ListComprehension;
import org.slizaa.neo4j.opencypher.openCypher.LiteralIds;
import org.slizaa.neo4j.opencypher.openCypher.LoadCSV;
import org.slizaa.neo4j.opencypher.openCypher.LoadCSVQuery;
import org.slizaa.neo4j.opencypher.openCypher.Lookup;
import org.slizaa.neo4j.opencypher.openCypher.MapLiteral;
import org.slizaa.neo4j.opencypher.openCypher.MapLiteralEntry;
import org.slizaa.neo4j.opencypher.openCypher.Match;
import org.slizaa.neo4j.opencypher.openCypher.Merge;
import org.slizaa.neo4j.opencypher.openCypher.MergeAction;
import org.slizaa.neo4j.opencypher.openCypher.NodeLabel;
import org.slizaa.neo4j.opencypher.openCypher.NodeLabels;
import org.slizaa.neo4j.opencypher.openCypher.NodeLookup;
import org.slizaa.neo4j.opencypher.openCypher.NodePattern;
import org.slizaa.neo4j.opencypher.openCypher.NodePropertyExistenceConstraint;
import org.slizaa.neo4j.opencypher.openCypher.None;
import org.slizaa.neo4j.opencypher.openCypher.NullConstant;
import org.slizaa.neo4j.opencypher.openCypher.NumberConstant;
import org.slizaa.neo4j.opencypher.openCypher.OpenCypherFactory;
import org.slizaa.neo4j.opencypher.openCypher.OpenCypherPackage;
import org.slizaa.neo4j.opencypher.openCypher.Order;
import org.slizaa.neo4j.opencypher.openCypher.Parameter;
import org.slizaa.neo4j.opencypher.openCypher.ParenthesizedExpression;
import org.slizaa.neo4j.opencypher.openCypher.Pattern;
import org.slizaa.neo4j.opencypher.openCypher.PatternComprehension;
import org.slizaa.neo4j.opencypher.openCypher.PatternElement;
import org.slizaa.neo4j.opencypher.openCypher.PatternElementChain;
import org.slizaa.neo4j.opencypher.openCypher.PatternPart;
import org.slizaa.neo4j.opencypher.openCypher.PeriodicCommitHint;
import org.slizaa.neo4j.opencypher.openCypher.ProcedureName;
import org.slizaa.neo4j.opencypher.openCypher.Properties;
import org.slizaa.neo4j.opencypher.openCypher.PropertyExpression;
import org.slizaa.neo4j.opencypher.openCypher.PropertyLookup;
import org.slizaa.neo4j.opencypher.openCypher.Query;
import org.slizaa.neo4j.opencypher.openCypher.QueryOptions;
import org.slizaa.neo4j.opencypher.openCypher.RangeLiteral;
import org.slizaa.neo4j.opencypher.openCypher.Reduce;
import org.slizaa.neo4j.opencypher.openCypher.RegExpMatchingExpression;
import org.slizaa.neo4j.opencypher.openCypher.RegularQuery;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipDetail;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipLookup;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipPattern;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipPatternSyntax;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipPropertyExistenceConstraint;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipTypes;
import org.slizaa.neo4j.opencypher.openCypher.RelationshipsPattern;
import org.slizaa.neo4j.opencypher.openCypher.Remove;
import org.slizaa.neo4j.opencypher.openCypher.RemoveItem;
import org.slizaa.neo4j.opencypher.openCypher.RemoveItemLabel;
import org.slizaa.neo4j.opencypher.openCypher.RemoveItemProperty;
import org.slizaa.neo4j.opencypher.openCypher.Return;
import org.slizaa.neo4j.opencypher.openCypher.ReturnBody;
import org.slizaa.neo4j.opencypher.openCypher.ReturnItem;
import org.slizaa.neo4j.opencypher.openCypher.ReturnItems;
import org.slizaa.neo4j.opencypher.openCypher.ScanHint;
import org.slizaa.neo4j.opencypher.openCypher.Set;
import org.slizaa.neo4j.opencypher.openCypher.SetItem;
import org.slizaa.neo4j.opencypher.openCypher.ShortestPath;
import org.slizaa.neo4j.opencypher.openCypher.ShortestPathPattern;
import org.slizaa.neo4j.opencypher.openCypher.Single;
import org.slizaa.neo4j.opencypher.openCypher.SingleQuery;
import org.slizaa.neo4j.opencypher.openCypher.Skip;
import org.slizaa.neo4j.opencypher.openCypher.SortItem;
import org.slizaa.neo4j.opencypher.openCypher.StandaloneCall;
import org.slizaa.neo4j.opencypher.openCypher.Start;
import org.slizaa.neo4j.opencypher.openCypher.StartPoint;
import org.slizaa.neo4j.opencypher.openCypher.StartsWithExpression;
import org.slizaa.neo4j.opencypher.openCypher.Statement;
import org.slizaa.neo4j.opencypher.openCypher.StringConstant;
import org.slizaa.neo4j.opencypher.openCypher.Union;
import org.slizaa.neo4j.opencypher.openCypher.UniqueConstraint;
import org.slizaa.neo4j.opencypher.openCypher.Unwind;
import org.slizaa.neo4j.opencypher.openCypher.VariableDeclaration;
import org.slizaa.neo4j.opencypher.openCypher.VariableRef;
import org.slizaa.neo4j.opencypher.openCypher.VersionNumber;
import org.slizaa.neo4j.opencypher.openCypher.Where;
import org.slizaa.neo4j.opencypher.openCypher.With;
import org.slizaa.neo4j.opencypher.openCypher.YieldItem;
import org.slizaa.neo4j.opencypher.openCypher.YieldItems;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OpenCypherPackageImpl extends EPackageImpl implements OpenCypherPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cypherEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass queryOptionsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cypherOptionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass versionNumberEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationOptionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass queryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regularQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bulkImportQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass periodicCommitHintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loadCSVQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass clauseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass commandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createUniqueConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createNodePropertyExistenceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createRelationshipPropertyExistenceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createIndexEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dropUniqueConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dropNodePropertyExistenceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dropRelationshipPropertyExistenceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dropIndexEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass uniqueConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodePropertyExistenceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipPropertyExistenceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipPatternSyntaxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loadCSVEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass matchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass unwindEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mergeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mergeActionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deleteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass removeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass removeItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass foreachEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inQueryCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass standaloneCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass yieldItemsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass yieldItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass withEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass returnEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass returnBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass returnItemsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass returnItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass orderEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass skipEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass limitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sortItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass hintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass startEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass startPointEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeLookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipLookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass identifiedIndexLookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass idLookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass literalIdsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass whereEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternPartEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass anonymousPatternPartEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass shortestPathPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodePatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternElementChainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipDetailEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertiesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipTypesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeLabelsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeLabelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rangeLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass reduceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parenthesizedExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipsPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass filterExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass idInCollEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionInvocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass explicitProcedureInvocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass implicitProcedureInvocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass procedureNameEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass listComprehensionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patternComprehensionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyLookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseAlternativesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapLiteralEntryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass legacyParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass decimalIntegerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass allOptionsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass combinedQueryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass removeItemLabelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass removeItemPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexHintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass joinHintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scanHintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass shortestPathEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass allShortestPathsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionOrEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionXorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionAndEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionNotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionComparisonEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionPlusMinusEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionMulDivEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionPowerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionUnaryPlusMinusEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass indexExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regExpMatchingExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inCollectionExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass startsWithExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass endsWithExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass containsExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass isNullExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass isNotNullExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionPropertyLookupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionNodeLabelsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberConstantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringConstantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boolConstantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nullConstantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass countEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass extractEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass filterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass allEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass anyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass noneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableRefEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.slizaa.neo4j.opencypher.openCypher.OpenCypherPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private OpenCypherPackageImpl()
  {
    super(eNS_URI, OpenCypherFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link OpenCypherPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static OpenCypherPackage init()
  {
    if (isInited) return (OpenCypherPackage)EPackage.Registry.INSTANCE.getEPackage(OpenCypherPackage.eNS_URI);

    // Obtain or create and register package
    OpenCypherPackageImpl theOpenCypherPackage = (OpenCypherPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof OpenCypherPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new OpenCypherPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theOpenCypherPackage.createPackageContents();

    // Initialize created meta-data
    theOpenCypherPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theOpenCypherPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(OpenCypherPackage.eNS_URI, theOpenCypherPackage);
    return theOpenCypherPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCypher()
  {
    return cypherEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCypher_QueryOptions()
  {
    return (EReference)cypherEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCypher_Statement()
  {
    return (EReference)cypherEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getQueryOptions()
  {
    return queryOptionsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCypherOption()
  {
    return cypherOptionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCypherOption_VersionNumber()
  {
    return (EReference)cypherOptionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCypherOption_ConfigurationOption()
  {
    return (EReference)cypherOptionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getVersionNumber()
  {
    return versionNumberEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getVersionNumber_VersionNumber()
  {
    return (EAttribute)versionNumberEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getConfigurationOption()
  {
    return configurationOptionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConfigurationOption_Key()
  {
    return (EAttribute)configurationOptionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getConfigurationOption_Value()
  {
    return (EAttribute)configurationOptionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getQuery()
  {
    return queryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRegularQuery()
  {
    return regularQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBulkImportQuery()
  {
    return bulkImportQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBulkImportQuery_PeriodicCommitHint()
  {
    return (EReference)bulkImportQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBulkImportQuery_LoadCSVQuery()
  {
    return (EReference)bulkImportQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingleQuery()
  {
    return singleQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSingleQuery_Clauses()
  {
    return (EReference)singleQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPeriodicCommitHint()
  {
    return periodicCommitHintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPeriodicCommitHint_NumberOfRowsPerCommit()
  {
    return (EReference)periodicCommitHintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLoadCSVQuery()
  {
    return loadCSVQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLoadCSVQuery_LoadCSV()
  {
    return (EReference)loadCSVQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLoadCSVQuery_Clauses()
  {
    return (EReference)loadCSVQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUnion()
  {
    return unionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getUnion_All()
  {
    return (EAttribute)unionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getUnion_SingleQuery()
  {
    return (EReference)unionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getClause()
  {
    return clauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCommand()
  {
    return commandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCreateUniqueConstraint()
  {
    return createUniqueConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCreateNodePropertyExistenceConstraint()
  {
    return createNodePropertyExistenceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCreateRelationshipPropertyExistenceConstraint()
  {
    return createRelationshipPropertyExistenceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCreateIndex()
  {
    return createIndexEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCreateIndex_Index()
  {
    return (EReference)createIndexEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDropUniqueConstraint()
  {
    return dropUniqueConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDropUniqueConstraint_UniqueConstraint()
  {
    return (EReference)dropUniqueConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDropNodePropertyExistenceConstraint()
  {
    return dropNodePropertyExistenceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDropNodePropertyExistenceConstraint_NodePropertyExistenceConstraint()
  {
    return (EReference)dropNodePropertyExistenceConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDropRelationshipPropertyExistenceConstraint()
  {
    return dropRelationshipPropertyExistenceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDropRelationshipPropertyExistenceConstraint_RelationshipPropertyExistenceConstraint()
  {
    return (EReference)dropRelationshipPropertyExistenceConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDropIndex()
  {
    return dropIndexEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDropIndex_Index()
  {
    return (EReference)dropIndexEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndex()
  {
    return indexEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndex_NodeLabel()
  {
    return (EReference)indexEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIndex_PropertyKeyName()
  {
    return (EAttribute)indexEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUniqueConstraint()
  {
    return uniqueConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getUniqueConstraint_Variable()
  {
    return (EReference)uniqueConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getUniqueConstraint_NodeLabel()
  {
    return (EReference)uniqueConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getUniqueConstraint_PropertyExpression()
  {
    return (EReference)uniqueConstraintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNodePropertyExistenceConstraint()
  {
    return nodePropertyExistenceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodePropertyExistenceConstraint_Variable()
  {
    return (EReference)nodePropertyExistenceConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodePropertyExistenceConstraint_NodeLabel()
  {
    return (EReference)nodePropertyExistenceConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodePropertyExistenceConstraint_PropertyExpression()
  {
    return (EReference)nodePropertyExistenceConstraintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipPropertyExistenceConstraint()
  {
    return relationshipPropertyExistenceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipPropertyExistenceConstraint_RelationshipPattern()
  {
    return (EReference)relationshipPropertyExistenceConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipPropertyExistenceConstraint_PropertyExpression()
  {
    return (EReference)relationshipPropertyExistenceConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipPatternSyntax()
  {
    return relationshipPatternSyntaxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipPatternSyntax_Incoming()
  {
    return (EAttribute)relationshipPatternSyntaxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipPatternSyntax_Variable()
  {
    return (EReference)relationshipPatternSyntaxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipPatternSyntax_RelType()
  {
    return (EAttribute)relationshipPatternSyntaxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipPatternSyntax_Outgoing()
  {
    return (EAttribute)relationshipPatternSyntaxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLoadCSV()
  {
    return loadCSVEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLoadCSV_WithHeaders()
  {
    return (EAttribute)loadCSVEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLoadCSV_Expression()
  {
    return (EReference)loadCSVEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLoadCSV_Variable()
  {
    return (EReference)loadCSVEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLoadCSV_Fieldterminator()
  {
    return (EAttribute)loadCSVEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMatch()
  {
    return matchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMatch_Optional()
  {
    return (EAttribute)matchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatch_Pattern()
  {
    return (EReference)matchEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatch_Hints()
  {
    return (EReference)matchEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMatch_Where()
  {
    return (EReference)matchEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getUnwind()
  {
    return unwindEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getUnwind_Expression()
  {
    return (EReference)unwindEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getUnwind_Variable()
  {
    return (EReference)unwindEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMerge()
  {
    return mergeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMerge_PatternPart()
  {
    return (EReference)mergeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMerge_MergeActions()
  {
    return (EReference)mergeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMergeAction()
  {
    return mergeActionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMergeAction_Action()
  {
    return (EAttribute)mergeActionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMergeAction_Set()
  {
    return (EReference)mergeActionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCreate()
  {
    return createEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCreate_Unique()
  {
    return (EAttribute)createEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCreate_Pattern()
  {
    return (EReference)createEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSet()
  {
    return setEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSet_SetItems()
  {
    return (EReference)setEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSetItem()
  {
    return setItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetItem_PropertyExpression()
  {
    return (EReference)setItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetItem_Expression()
  {
    return (EReference)setItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetItem_Variable()
  {
    return (EReference)setItemEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSetItem_NodeLabels()
  {
    return (EReference)setItemEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDelete()
  {
    return deleteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDelete_Detach()
  {
    return (EAttribute)deleteEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getDelete_Expressions()
  {
    return (EReference)deleteEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRemove()
  {
    return removeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRemove_RemoveItems()
  {
    return (EReference)removeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRemoveItem()
  {
    return removeItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForeach()
  {
    return foreachEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForeach_Variable()
  {
    return (EReference)foreachEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForeach_Expression()
  {
    return (EReference)foreachEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForeach_Clauses()
  {
    return (EReference)foreachEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInQueryCall()
  {
    return inQueryCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInQueryCall_Invocation()
  {
    return (EReference)inQueryCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInQueryCall_YieldItems()
  {
    return (EReference)inQueryCallEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStandaloneCall()
  {
    return standaloneCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStandaloneCall_Invocation()
  {
    return (EReference)standaloneCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStandaloneCall_YieldItems()
  {
    return (EReference)standaloneCallEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getYieldItems()
  {
    return yieldItemsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getYieldItems_Items()
  {
    return (EReference)yieldItemsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getYieldItem()
  {
    return yieldItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getYieldItem_Field()
  {
    return (EAttribute)yieldItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getYieldItem_Variable()
  {
    return (EReference)yieldItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWith()
  {
    return withEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getWith_Distint()
  {
    return (EAttribute)withEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getWith_ReturnBody()
  {
    return (EReference)withEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getWith_Where()
  {
    return (EReference)withEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReturn()
  {
    return returnEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getReturn_Return()
  {
    return (EAttribute)returnEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getReturn_Distinct()
  {
    return (EAttribute)returnEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturn_Body()
  {
    return (EReference)returnEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReturnBody()
  {
    return returnBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnBody_ReturnItems()
  {
    return (EReference)returnBodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnBody_Order()
  {
    return (EReference)returnBodyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnBody_Skip()
  {
    return (EReference)returnBodyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnBody_Limit()
  {
    return (EReference)returnBodyEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReturnItems()
  {
    return returnItemsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getReturnItems_All()
  {
    return (EAttribute)returnItemsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnItems_Items()
  {
    return (EReference)returnItemsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReturnItem()
  {
    return returnItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnItem_Expression()
  {
    return (EReference)returnItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReturnItem_Alias()
  {
    return (EReference)returnItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOrder()
  {
    return orderEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOrder_OrderBy()
  {
    return (EReference)orderEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSkip()
  {
    return skipEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSkip_Skip()
  {
    return (EReference)skipEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLimit()
  {
    return limitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLimit_Limit()
  {
    return (EReference)limitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSortItem()
  {
    return sortItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSortItem_Expression()
  {
    return (EReference)sortItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSortItem_Sort()
  {
    return (EAttribute)sortItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getHint()
  {
    return hintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStart()
  {
    return startEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStart_StartPoint()
  {
    return (EReference)startEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStart_Where()
  {
    return (EReference)startEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStartPoint()
  {
    return startPointEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStartPoint_Variable()
  {
    return (EReference)startPointEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStartPoint_Lookup()
  {
    return (EReference)startPointEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLookup()
  {
    return lookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNodeLookup()
  {
    return nodeLookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipLookup()
  {
    return relationshipLookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIdentifiedIndexLookup()
  {
    return identifiedIndexLookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIdentifiedIndexLookup_IndexName()
  {
    return (EAttribute)identifiedIndexLookupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIdentifiedIndexLookup_Key()
  {
    return (EAttribute)identifiedIndexLookupEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIdentifiedIndexLookup_Value()
  {
    return (EAttribute)identifiedIndexLookupEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIdentifiedIndexLookup_LegacyParameter()
  {
    return (EReference)identifiedIndexLookupEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndexQuery()
  {
    return indexQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIndexQuery_IndexName()
  {
    return (EAttribute)indexQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIndexQuery_Query()
  {
    return (EAttribute)indexQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexQuery_Parameter()
  {
    return (EReference)indexQueryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIdLookup()
  {
    return idLookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIdLookup_Ids()
  {
    return (EReference)idLookupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIdLookup_LegacyParameter()
  {
    return (EReference)idLookupEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIdLookup_Wildcard()
  {
    return (EAttribute)idLookupEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLiteralIds()
  {
    return literalIdsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLiteralIds_Ids()
  {
    return (EReference)literalIdsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWhere()
  {
    return whereEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getWhere_Expression()
  {
    return (EReference)whereEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPattern()
  {
    return patternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPattern_Patterns()
  {
    return (EReference)patternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPatternPart()
  {
    return patternPartEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternPart_Var()
  {
    return (EReference)patternPartEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternPart_Part()
  {
    return (EReference)patternPartEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAnonymousPatternPart()
  {
    return anonymousPatternPartEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getShortestPathPattern()
  {
    return shortestPathPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getShortestPathPattern_PatternElement()
  {
    return (EReference)shortestPathPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPatternElement()
  {
    return patternElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternElement_Nodepattern()
  {
    return (EReference)patternElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternElement_Chain()
  {
    return (EReference)patternElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNodePattern()
  {
    return nodePatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodePattern_Variable()
  {
    return (EReference)nodePatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodePattern_NodeLabels()
  {
    return (EReference)nodePatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodePattern_Properties()
  {
    return (EReference)nodePatternEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPatternElementChain()
  {
    return patternElementChainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternElementChain_RelationshipPattern()
  {
    return (EReference)patternElementChainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternElementChain_NodePattern()
  {
    return (EReference)patternElementChainEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipPattern()
  {
    return relationshipPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipPattern_Incoming()
  {
    return (EAttribute)relationshipPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipPattern_Detail()
  {
    return (EReference)relationshipPatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipPattern_Outgoing()
  {
    return (EAttribute)relationshipPatternEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipDetail()
  {
    return relationshipDetailEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipDetail_Variable()
  {
    return (EReference)relationshipDetailEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipDetail_Optional()
  {
    return (EAttribute)relationshipDetailEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipDetail_Types()
  {
    return (EReference)relationshipDetailEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipDetail_Range()
  {
    return (EReference)relationshipDetailEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipDetail_Properties()
  {
    return (EReference)relationshipDetailEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProperties()
  {
    return propertiesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipTypes()
  {
    return relationshipTypesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRelationshipTypes_RelTypeName()
  {
    return (EAttribute)relationshipTypesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNodeLabels()
  {
    return nodeLabelsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNodeLabels_NodeLabels()
  {
    return (EReference)nodeLabelsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNodeLabel()
  {
    return nodeLabelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNodeLabel_LabelName()
  {
    return (EAttribute)nodeLabelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRangeLiteral()
  {
    return rangeLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRangeLiteral_Lower()
  {
    return (EAttribute)rangeLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRangeLiteral_Upper()
  {
    return (EAttribute)rangeLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpression()
  {
    return expressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getReduce()
  {
    return reduceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReduce_Accumulator()
  {
    return (EReference)reduceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReduce_AccumulatorExpression()
  {
    return (EReference)reduceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReduce_IdInColl()
  {
    return (EReference)reduceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getReduce_Expression()
  {
    return (EReference)reduceEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParenthesizedExpression()
  {
    return parenthesizedExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParenthesizedExpression_Expression()
  {
    return (EReference)parenthesizedExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRelationshipsPattern()
  {
    return relationshipsPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipsPattern_NodePattern()
  {
    return (EReference)relationshipsPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRelationshipsPattern_Chain()
  {
    return (EReference)relationshipsPatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFilterExpression()
  {
    return filterExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFilterExpression_IdInColl()
  {
    return (EReference)filterExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFilterExpression_Where()
  {
    return (EReference)filterExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIdInColl()
  {
    return idInCollEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIdInColl_Variable()
  {
    return (EReference)idInCollEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIdInColl_Expression()
  {
    return (EReference)idInCollEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFunctionInvocation()
  {
    return functionInvocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionInvocation_FunctionName()
  {
    return (EAttribute)functionInvocationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFunctionInvocation_Distinct()
  {
    return (EAttribute)functionInvocationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFunctionInvocation_Parameter()
  {
    return (EReference)functionInvocationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExplicitProcedureInvocation()
  {
    return explicitProcedureInvocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExplicitProcedureInvocation_ProcedureName()
  {
    return (EReference)explicitProcedureInvocationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExplicitProcedureInvocation_Parameter()
  {
    return (EReference)explicitProcedureInvocationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getImplicitProcedureInvocation()
  {
    return implicitProcedureInvocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProcedureName()
  {
    return procedureNameEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProcedureName_Namespace()
  {
    return (EAttribute)procedureNameEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProcedureName_Name()
  {
    return (EAttribute)procedureNameEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getListComprehension()
  {
    return listComprehensionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getListComprehension_FilterExpression()
  {
    return (EReference)listComprehensionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getListComprehension_Expression()
  {
    return (EReference)listComprehensionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPatternComprehension()
  {
    return patternComprehensionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternComprehension_PathVariable()
  {
    return (EReference)patternComprehensionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternComprehension_Pattern()
  {
    return (EReference)patternComprehensionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternComprehension_Where()
  {
    return (EReference)patternComprehensionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPatternComprehension_Expression()
  {
    return (EReference)patternComprehensionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPropertyLookup()
  {
    return propertyLookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPropertyLookup_PropertyKeyName()
  {
    return (EAttribute)propertyLookupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPropertyLookup_PropertyOperator()
  {
    return (EAttribute)propertyLookupEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCaseExpression()
  {
    return caseExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseExpression_CaseAlternatives()
  {
    return (EReference)caseExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseExpression_CaseExpression()
  {
    return (EReference)caseExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseExpression_ElseExpression()
  {
    return (EReference)caseExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCaseAlternatives()
  {
    return caseAlternativesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseAlternatives_When()
  {
    return (EReference)caseAlternativesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCaseAlternatives_Then()
  {
    return (EReference)caseAlternativesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getVariableDeclaration()
  {
    return variableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getVariableDeclaration_Name()
  {
    return (EAttribute)variableDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMapLiteral()
  {
    return mapLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapLiteral_Entries()
  {
    return (EReference)mapLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMapLiteralEntry()
  {
    return mapLiteralEntryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMapLiteralEntry_Key()
  {
    return (EAttribute)mapLiteralEntryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMapLiteralEntry_Value()
  {
    return (EReference)mapLiteralEntryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLegacyParameter()
  {
    return legacyParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLegacyParameter_Parameter()
  {
    return (EAttribute)legacyParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParameter()
  {
    return parameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getParameter_Parameter()
  {
    return (EAttribute)parameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPropertyExpression()
  {
    return propertyExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPropertyExpression_Left()
  {
    return (EReference)propertyExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPropertyExpression_PropertyLookups()
  {
    return (EReference)propertyExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDecimalInteger()
  {
    return decimalIntegerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDecimalInteger_Value()
  {
    return (EAttribute)decimalIntegerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAllOptions()
  {
    return allOptionsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAllOptions_Explain()
  {
    return (EAttribute)allOptionsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAllOptions_Profile()
  {
    return (EAttribute)allOptionsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAllOptions_CypherOption()
  {
    return (EReference)allOptionsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCombinedQuery()
  {
    return combinedQueryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCombinedQuery_SingleQuery()
  {
    return (EReference)combinedQueryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCombinedQuery_Union()
  {
    return (EReference)combinedQueryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRemoveItemLabel()
  {
    return removeItemLabelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRemoveItemLabel_Variable()
  {
    return (EReference)removeItemLabelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRemoveItemLabel_NodeLabels()
  {
    return (EReference)removeItemLabelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRemoveItemProperty()
  {
    return removeItemPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRemoveItemProperty_PropertyExpression()
  {
    return (EReference)removeItemPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndexHint()
  {
    return indexHintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexHint_Variable()
  {
    return (EReference)indexHintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexHint_NodeLabel()
  {
    return (EReference)indexHintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIndexHint_PropertyKeyName()
  {
    return (EAttribute)indexHintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getJoinHint()
  {
    return joinHintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getJoinHint_Variables()
  {
    return (EReference)joinHintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getScanHint()
  {
    return scanHintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getScanHint_Variable()
  {
    return (EReference)scanHintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getScanHint_NodeLabel()
  {
    return (EReference)scanHintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getShortestPath()
  {
    return shortestPathEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAllShortestPaths()
  {
    return allShortestPathsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionOr()
  {
    return expressionOrEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionOr_Left()
  {
    return (EReference)expressionOrEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionOr_Operator()
  {
    return (EAttribute)expressionOrEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionOr_Right()
  {
    return (EReference)expressionOrEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionXor()
  {
    return expressionXorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionXor_Left()
  {
    return (EReference)expressionXorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionXor_Operator()
  {
    return (EAttribute)expressionXorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionXor_Right()
  {
    return (EReference)expressionXorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionAnd()
  {
    return expressionAndEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionAnd_Left()
  {
    return (EReference)expressionAndEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionAnd_Operator()
  {
    return (EAttribute)expressionAndEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionAnd_Right()
  {
    return (EReference)expressionAndEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionNot()
  {
    return expressionNotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionNot_Operator()
  {
    return (EAttribute)expressionNotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionNot_Left()
  {
    return (EReference)expressionNotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionComparison()
  {
    return expressionComparisonEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionComparison_Left()
  {
    return (EReference)expressionComparisonEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionComparison_Operator()
  {
    return (EAttribute)expressionComparisonEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionComparison_Right()
  {
    return (EReference)expressionComparisonEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionPlusMinus()
  {
    return expressionPlusMinusEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPlusMinus_Left()
  {
    return (EReference)expressionPlusMinusEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionPlusMinus_Operator()
  {
    return (EAttribute)expressionPlusMinusEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPlusMinus_Right()
  {
    return (EReference)expressionPlusMinusEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionMulDiv()
  {
    return expressionMulDivEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMulDiv_Left()
  {
    return (EReference)expressionMulDivEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionMulDiv_Operator()
  {
    return (EAttribute)expressionMulDivEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionMulDiv_Right()
  {
    return (EReference)expressionMulDivEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionPower()
  {
    return expressionPowerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPower_Left()
  {
    return (EReference)expressionPowerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionPower_Operator()
  {
    return (EAttribute)expressionPowerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPower_Right()
  {
    return (EReference)expressionPowerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionUnaryPlusMinus()
  {
    return expressionUnaryPlusMinusEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getExpressionUnaryPlusMinus_Operator()
  {
    return (EAttribute)expressionUnaryPlusMinusEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionUnaryPlusMinus_Left()
  {
    return (EReference)expressionUnaryPlusMinusEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIndexExpression()
  {
    return indexExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexExpression_Left()
  {
    return (EReference)indexExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexExpression_Expression()
  {
    return (EReference)indexExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIndexExpression_Upper()
  {
    return (EReference)indexExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRegExpMatchingExpression()
  {
    return regExpMatchingExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRegExpMatchingExpression_Left()
  {
    return (EReference)regExpMatchingExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRegExpMatchingExpression_Right()
  {
    return (EReference)regExpMatchingExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInCollectionExpression()
  {
    return inCollectionExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInCollectionExpression_Left()
  {
    return (EReference)inCollectionExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInCollectionExpression_Right()
  {
    return (EReference)inCollectionExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStartsWithExpression()
  {
    return startsWithExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStartsWithExpression_Left()
  {
    return (EReference)startsWithExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStartsWithExpression_Right()
  {
    return (EReference)startsWithExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEndsWithExpression()
  {
    return endsWithExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getEndsWithExpression_Left()
  {
    return (EReference)endsWithExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getEndsWithExpression_Right()
  {
    return (EReference)endsWithExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getContainsExpression()
  {
    return containsExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getContainsExpression_Left()
  {
    return (EReference)containsExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getContainsExpression_Right()
  {
    return (EReference)containsExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIsNullExpression()
  {
    return isNullExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIsNullExpression_Left()
  {
    return (EReference)isNullExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIsNotNullExpression()
  {
    return isNotNullExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIsNotNullExpression_Left()
  {
    return (EReference)isNotNullExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionPropertyLookup()
  {
    return expressionPropertyLookupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPropertyLookup_Left()
  {
    return (EReference)expressionPropertyLookupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionPropertyLookup_PropertyLookups()
  {
    return (EReference)expressionPropertyLookupEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionNodeLabels()
  {
    return expressionNodeLabelsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionNodeLabels_Left()
  {
    return (EReference)expressionNodeLabelsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionNodeLabels_NodeLabels()
  {
    return (EReference)expressionNodeLabelsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNumberConstant()
  {
    return numberConstantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getNumberConstant_Value()
  {
    return (EAttribute)numberConstantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStringConstant()
  {
    return stringConstantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStringConstant_Value()
  {
    return (EAttribute)stringConstantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBoolConstant()
  {
    return boolConstantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBoolConstant_Value()
  {
    return (EAttribute)boolConstantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNullConstant()
  {
    return nullConstantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCount()
  {
    return countEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpressionList()
  {
    return expressionListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpressionList_Expressions()
  {
    return (EReference)expressionListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExtract()
  {
    return extractEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExtract_FilterExpression()
  {
    return (EReference)extractEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExtract_Expression()
  {
    return (EReference)extractEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFilter()
  {
    return filterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFilter_FilterExpression()
  {
    return (EReference)filterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAll()
  {
    return allEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAll_FilterExpression()
  {
    return (EReference)allEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAny()
  {
    return anyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAny_FilterExpression()
  {
    return (EReference)anyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNone()
  {
    return noneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNone_FilterExpression()
  {
    return (EReference)noneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSingle()
  {
    return singleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSingle_FilterExpression()
  {
    return (EReference)singleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getVariableRef()
  {
    return variableRefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getVariableRef_VariableRef()
  {
    return (EReference)variableRefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpenCypherFactory getOpenCypherFactory()
  {
    return (OpenCypherFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    cypherEClass = createEClass(CYPHER);
    createEReference(cypherEClass, CYPHER__QUERY_OPTIONS);
    createEReference(cypherEClass, CYPHER__STATEMENT);

    queryOptionsEClass = createEClass(QUERY_OPTIONS);

    cypherOptionEClass = createEClass(CYPHER_OPTION);
    createEReference(cypherOptionEClass, CYPHER_OPTION__VERSION_NUMBER);
    createEReference(cypherOptionEClass, CYPHER_OPTION__CONFIGURATION_OPTION);

    versionNumberEClass = createEClass(VERSION_NUMBER);
    createEAttribute(versionNumberEClass, VERSION_NUMBER__VERSION_NUMBER);

    configurationOptionEClass = createEClass(CONFIGURATION_OPTION);
    createEAttribute(configurationOptionEClass, CONFIGURATION_OPTION__KEY);
    createEAttribute(configurationOptionEClass, CONFIGURATION_OPTION__VALUE);

    statementEClass = createEClass(STATEMENT);

    queryEClass = createEClass(QUERY);

    regularQueryEClass = createEClass(REGULAR_QUERY);

    bulkImportQueryEClass = createEClass(BULK_IMPORT_QUERY);
    createEReference(bulkImportQueryEClass, BULK_IMPORT_QUERY__PERIODIC_COMMIT_HINT);
    createEReference(bulkImportQueryEClass, BULK_IMPORT_QUERY__LOAD_CSV_QUERY);

    singleQueryEClass = createEClass(SINGLE_QUERY);
    createEReference(singleQueryEClass, SINGLE_QUERY__CLAUSES);

    periodicCommitHintEClass = createEClass(PERIODIC_COMMIT_HINT);
    createEReference(periodicCommitHintEClass, PERIODIC_COMMIT_HINT__NUMBER_OF_ROWS_PER_COMMIT);

    loadCSVQueryEClass = createEClass(LOAD_CSV_QUERY);
    createEReference(loadCSVQueryEClass, LOAD_CSV_QUERY__LOAD_CSV);
    createEReference(loadCSVQueryEClass, LOAD_CSV_QUERY__CLAUSES);

    unionEClass = createEClass(UNION);
    createEAttribute(unionEClass, UNION__ALL);
    createEReference(unionEClass, UNION__SINGLE_QUERY);

    clauseEClass = createEClass(CLAUSE);

    commandEClass = createEClass(COMMAND);

    createUniqueConstraintEClass = createEClass(CREATE_UNIQUE_CONSTRAINT);

    createNodePropertyExistenceConstraintEClass = createEClass(CREATE_NODE_PROPERTY_EXISTENCE_CONSTRAINT);

    createRelationshipPropertyExistenceConstraintEClass = createEClass(CREATE_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT);

    createIndexEClass = createEClass(CREATE_INDEX);
    createEReference(createIndexEClass, CREATE_INDEX__INDEX);

    dropUniqueConstraintEClass = createEClass(DROP_UNIQUE_CONSTRAINT);
    createEReference(dropUniqueConstraintEClass, DROP_UNIQUE_CONSTRAINT__UNIQUE_CONSTRAINT);

    dropNodePropertyExistenceConstraintEClass = createEClass(DROP_NODE_PROPERTY_EXISTENCE_CONSTRAINT);
    createEReference(dropNodePropertyExistenceConstraintEClass, DROP_NODE_PROPERTY_EXISTENCE_CONSTRAINT__NODE_PROPERTY_EXISTENCE_CONSTRAINT);

    dropRelationshipPropertyExistenceConstraintEClass = createEClass(DROP_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT);
    createEReference(dropRelationshipPropertyExistenceConstraintEClass, DROP_RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT__RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT);

    dropIndexEClass = createEClass(DROP_INDEX);
    createEReference(dropIndexEClass, DROP_INDEX__INDEX);

    indexEClass = createEClass(INDEX);
    createEReference(indexEClass, INDEX__NODE_LABEL);
    createEAttribute(indexEClass, INDEX__PROPERTY_KEY_NAME);

    uniqueConstraintEClass = createEClass(UNIQUE_CONSTRAINT);
    createEReference(uniqueConstraintEClass, UNIQUE_CONSTRAINT__VARIABLE);
    createEReference(uniqueConstraintEClass, UNIQUE_CONSTRAINT__NODE_LABEL);
    createEReference(uniqueConstraintEClass, UNIQUE_CONSTRAINT__PROPERTY_EXPRESSION);

    nodePropertyExistenceConstraintEClass = createEClass(NODE_PROPERTY_EXISTENCE_CONSTRAINT);
    createEReference(nodePropertyExistenceConstraintEClass, NODE_PROPERTY_EXISTENCE_CONSTRAINT__VARIABLE);
    createEReference(nodePropertyExistenceConstraintEClass, NODE_PROPERTY_EXISTENCE_CONSTRAINT__NODE_LABEL);
    createEReference(nodePropertyExistenceConstraintEClass, NODE_PROPERTY_EXISTENCE_CONSTRAINT__PROPERTY_EXPRESSION);

    relationshipPropertyExistenceConstraintEClass = createEClass(RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT);
    createEReference(relationshipPropertyExistenceConstraintEClass, RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT__RELATIONSHIP_PATTERN);
    createEReference(relationshipPropertyExistenceConstraintEClass, RELATIONSHIP_PROPERTY_EXISTENCE_CONSTRAINT__PROPERTY_EXPRESSION);

    relationshipPatternSyntaxEClass = createEClass(RELATIONSHIP_PATTERN_SYNTAX);
    createEAttribute(relationshipPatternSyntaxEClass, RELATIONSHIP_PATTERN_SYNTAX__INCOMING);
    createEReference(relationshipPatternSyntaxEClass, RELATIONSHIP_PATTERN_SYNTAX__VARIABLE);
    createEAttribute(relationshipPatternSyntaxEClass, RELATIONSHIP_PATTERN_SYNTAX__REL_TYPE);
    createEAttribute(relationshipPatternSyntaxEClass, RELATIONSHIP_PATTERN_SYNTAX__OUTGOING);

    loadCSVEClass = createEClass(LOAD_CSV);
    createEAttribute(loadCSVEClass, LOAD_CSV__WITH_HEADERS);
    createEReference(loadCSVEClass, LOAD_CSV__EXPRESSION);
    createEReference(loadCSVEClass, LOAD_CSV__VARIABLE);
    createEAttribute(loadCSVEClass, LOAD_CSV__FIELDTERMINATOR);

    matchEClass = createEClass(MATCH);
    createEAttribute(matchEClass, MATCH__OPTIONAL);
    createEReference(matchEClass, MATCH__PATTERN);
    createEReference(matchEClass, MATCH__HINTS);
    createEReference(matchEClass, MATCH__WHERE);

    unwindEClass = createEClass(UNWIND);
    createEReference(unwindEClass, UNWIND__EXPRESSION);
    createEReference(unwindEClass, UNWIND__VARIABLE);

    mergeEClass = createEClass(MERGE);
    createEReference(mergeEClass, MERGE__PATTERN_PART);
    createEReference(mergeEClass, MERGE__MERGE_ACTIONS);

    mergeActionEClass = createEClass(MERGE_ACTION);
    createEAttribute(mergeActionEClass, MERGE_ACTION__ACTION);
    createEReference(mergeActionEClass, MERGE_ACTION__SET);

    createEClass = createEClass(CREATE);
    createEAttribute(createEClass, CREATE__UNIQUE);
    createEReference(createEClass, CREATE__PATTERN);

    setEClass = createEClass(SET);
    createEReference(setEClass, SET__SET_ITEMS);

    setItemEClass = createEClass(SET_ITEM);
    createEReference(setItemEClass, SET_ITEM__PROPERTY_EXPRESSION);
    createEReference(setItemEClass, SET_ITEM__EXPRESSION);
    createEReference(setItemEClass, SET_ITEM__VARIABLE);
    createEReference(setItemEClass, SET_ITEM__NODE_LABELS);

    deleteEClass = createEClass(DELETE);
    createEAttribute(deleteEClass, DELETE__DETACH);
    createEReference(deleteEClass, DELETE__EXPRESSIONS);

    removeEClass = createEClass(REMOVE);
    createEReference(removeEClass, REMOVE__REMOVE_ITEMS);

    removeItemEClass = createEClass(REMOVE_ITEM);

    foreachEClass = createEClass(FOREACH);
    createEReference(foreachEClass, FOREACH__VARIABLE);
    createEReference(foreachEClass, FOREACH__EXPRESSION);
    createEReference(foreachEClass, FOREACH__CLAUSES);

    inQueryCallEClass = createEClass(IN_QUERY_CALL);
    createEReference(inQueryCallEClass, IN_QUERY_CALL__INVOCATION);
    createEReference(inQueryCallEClass, IN_QUERY_CALL__YIELD_ITEMS);

    standaloneCallEClass = createEClass(STANDALONE_CALL);
    createEReference(standaloneCallEClass, STANDALONE_CALL__INVOCATION);
    createEReference(standaloneCallEClass, STANDALONE_CALL__YIELD_ITEMS);

    yieldItemsEClass = createEClass(YIELD_ITEMS);
    createEReference(yieldItemsEClass, YIELD_ITEMS__ITEMS);

    yieldItemEClass = createEClass(YIELD_ITEM);
    createEAttribute(yieldItemEClass, YIELD_ITEM__FIELD);
    createEReference(yieldItemEClass, YIELD_ITEM__VARIABLE);

    withEClass = createEClass(WITH);
    createEAttribute(withEClass, WITH__DISTINT);
    createEReference(withEClass, WITH__RETURN_BODY);
    createEReference(withEClass, WITH__WHERE);

    returnEClass = createEClass(RETURN);
    createEAttribute(returnEClass, RETURN__RETURN);
    createEAttribute(returnEClass, RETURN__DISTINCT);
    createEReference(returnEClass, RETURN__BODY);

    returnBodyEClass = createEClass(RETURN_BODY);
    createEReference(returnBodyEClass, RETURN_BODY__RETURN_ITEMS);
    createEReference(returnBodyEClass, RETURN_BODY__ORDER);
    createEReference(returnBodyEClass, RETURN_BODY__SKIP);
    createEReference(returnBodyEClass, RETURN_BODY__LIMIT);

    returnItemsEClass = createEClass(RETURN_ITEMS);
    createEAttribute(returnItemsEClass, RETURN_ITEMS__ALL);
    createEReference(returnItemsEClass, RETURN_ITEMS__ITEMS);

    returnItemEClass = createEClass(RETURN_ITEM);
    createEReference(returnItemEClass, RETURN_ITEM__EXPRESSION);
    createEReference(returnItemEClass, RETURN_ITEM__ALIAS);

    orderEClass = createEClass(ORDER);
    createEReference(orderEClass, ORDER__ORDER_BY);

    skipEClass = createEClass(SKIP);
    createEReference(skipEClass, SKIP__SKIP);

    limitEClass = createEClass(LIMIT);
    createEReference(limitEClass, LIMIT__LIMIT);

    sortItemEClass = createEClass(SORT_ITEM);
    createEReference(sortItemEClass, SORT_ITEM__EXPRESSION);
    createEAttribute(sortItemEClass, SORT_ITEM__SORT);

    hintEClass = createEClass(HINT);

    startEClass = createEClass(START);
    createEReference(startEClass, START__START_POINT);
    createEReference(startEClass, START__WHERE);

    startPointEClass = createEClass(START_POINT);
    createEReference(startPointEClass, START_POINT__VARIABLE);
    createEReference(startPointEClass, START_POINT__LOOKUP);

    lookupEClass = createEClass(LOOKUP);

    nodeLookupEClass = createEClass(NODE_LOOKUP);

    relationshipLookupEClass = createEClass(RELATIONSHIP_LOOKUP);

    identifiedIndexLookupEClass = createEClass(IDENTIFIED_INDEX_LOOKUP);
    createEAttribute(identifiedIndexLookupEClass, IDENTIFIED_INDEX_LOOKUP__INDEX_NAME);
    createEAttribute(identifiedIndexLookupEClass, IDENTIFIED_INDEX_LOOKUP__KEY);
    createEAttribute(identifiedIndexLookupEClass, IDENTIFIED_INDEX_LOOKUP__VALUE);
    createEReference(identifiedIndexLookupEClass, IDENTIFIED_INDEX_LOOKUP__LEGACY_PARAMETER);

    indexQueryEClass = createEClass(INDEX_QUERY);
    createEAttribute(indexQueryEClass, INDEX_QUERY__INDEX_NAME);
    createEAttribute(indexQueryEClass, INDEX_QUERY__QUERY);
    createEReference(indexQueryEClass, INDEX_QUERY__PARAMETER);

    idLookupEClass = createEClass(ID_LOOKUP);
    createEReference(idLookupEClass, ID_LOOKUP__IDS);
    createEReference(idLookupEClass, ID_LOOKUP__LEGACY_PARAMETER);
    createEAttribute(idLookupEClass, ID_LOOKUP__WILDCARD);

    literalIdsEClass = createEClass(LITERAL_IDS);
    createEReference(literalIdsEClass, LITERAL_IDS__IDS);

    whereEClass = createEClass(WHERE);
    createEReference(whereEClass, WHERE__EXPRESSION);

    patternEClass = createEClass(PATTERN);
    createEReference(patternEClass, PATTERN__PATTERNS);

    patternPartEClass = createEClass(PATTERN_PART);
    createEReference(patternPartEClass, PATTERN_PART__VAR);
    createEReference(patternPartEClass, PATTERN_PART__PART);

    anonymousPatternPartEClass = createEClass(ANONYMOUS_PATTERN_PART);

    shortestPathPatternEClass = createEClass(SHORTEST_PATH_PATTERN);
    createEReference(shortestPathPatternEClass, SHORTEST_PATH_PATTERN__PATTERN_ELEMENT);

    patternElementEClass = createEClass(PATTERN_ELEMENT);
    createEReference(patternElementEClass, PATTERN_ELEMENT__NODEPATTERN);
    createEReference(patternElementEClass, PATTERN_ELEMENT__CHAIN);

    nodePatternEClass = createEClass(NODE_PATTERN);
    createEReference(nodePatternEClass, NODE_PATTERN__VARIABLE);
    createEReference(nodePatternEClass, NODE_PATTERN__NODE_LABELS);
    createEReference(nodePatternEClass, NODE_PATTERN__PROPERTIES);

    patternElementChainEClass = createEClass(PATTERN_ELEMENT_CHAIN);
    createEReference(patternElementChainEClass, PATTERN_ELEMENT_CHAIN__RELATIONSHIP_PATTERN);
    createEReference(patternElementChainEClass, PATTERN_ELEMENT_CHAIN__NODE_PATTERN);

    relationshipPatternEClass = createEClass(RELATIONSHIP_PATTERN);
    createEAttribute(relationshipPatternEClass, RELATIONSHIP_PATTERN__INCOMING);
    createEReference(relationshipPatternEClass, RELATIONSHIP_PATTERN__DETAIL);
    createEAttribute(relationshipPatternEClass, RELATIONSHIP_PATTERN__OUTGOING);

    relationshipDetailEClass = createEClass(RELATIONSHIP_DETAIL);
    createEReference(relationshipDetailEClass, RELATIONSHIP_DETAIL__VARIABLE);
    createEAttribute(relationshipDetailEClass, RELATIONSHIP_DETAIL__OPTIONAL);
    createEReference(relationshipDetailEClass, RELATIONSHIP_DETAIL__TYPES);
    createEReference(relationshipDetailEClass, RELATIONSHIP_DETAIL__RANGE);
    createEReference(relationshipDetailEClass, RELATIONSHIP_DETAIL__PROPERTIES);

    propertiesEClass = createEClass(PROPERTIES);

    relationshipTypesEClass = createEClass(RELATIONSHIP_TYPES);
    createEAttribute(relationshipTypesEClass, RELATIONSHIP_TYPES__REL_TYPE_NAME);

    nodeLabelsEClass = createEClass(NODE_LABELS);
    createEReference(nodeLabelsEClass, NODE_LABELS__NODE_LABELS);

    nodeLabelEClass = createEClass(NODE_LABEL);
    createEAttribute(nodeLabelEClass, NODE_LABEL__LABEL_NAME);

    rangeLiteralEClass = createEClass(RANGE_LITERAL);
    createEAttribute(rangeLiteralEClass, RANGE_LITERAL__LOWER);
    createEAttribute(rangeLiteralEClass, RANGE_LITERAL__UPPER);

    expressionEClass = createEClass(EXPRESSION);

    reduceEClass = createEClass(REDUCE);
    createEReference(reduceEClass, REDUCE__ACCUMULATOR);
    createEReference(reduceEClass, REDUCE__ACCUMULATOR_EXPRESSION);
    createEReference(reduceEClass, REDUCE__ID_IN_COLL);
    createEReference(reduceEClass, REDUCE__EXPRESSION);

    parenthesizedExpressionEClass = createEClass(PARENTHESIZED_EXPRESSION);
    createEReference(parenthesizedExpressionEClass, PARENTHESIZED_EXPRESSION__EXPRESSION);

    relationshipsPatternEClass = createEClass(RELATIONSHIPS_PATTERN);
    createEReference(relationshipsPatternEClass, RELATIONSHIPS_PATTERN__NODE_PATTERN);
    createEReference(relationshipsPatternEClass, RELATIONSHIPS_PATTERN__CHAIN);

    filterExpressionEClass = createEClass(FILTER_EXPRESSION);
    createEReference(filterExpressionEClass, FILTER_EXPRESSION__ID_IN_COLL);
    createEReference(filterExpressionEClass, FILTER_EXPRESSION__WHERE);

    idInCollEClass = createEClass(ID_IN_COLL);
    createEReference(idInCollEClass, ID_IN_COLL__VARIABLE);
    createEReference(idInCollEClass, ID_IN_COLL__EXPRESSION);

    functionInvocationEClass = createEClass(FUNCTION_INVOCATION);
    createEAttribute(functionInvocationEClass, FUNCTION_INVOCATION__FUNCTION_NAME);
    createEAttribute(functionInvocationEClass, FUNCTION_INVOCATION__DISTINCT);
    createEReference(functionInvocationEClass, FUNCTION_INVOCATION__PARAMETER);

    explicitProcedureInvocationEClass = createEClass(EXPLICIT_PROCEDURE_INVOCATION);
    createEReference(explicitProcedureInvocationEClass, EXPLICIT_PROCEDURE_INVOCATION__PROCEDURE_NAME);
    createEReference(explicitProcedureInvocationEClass, EXPLICIT_PROCEDURE_INVOCATION__PARAMETER);

    implicitProcedureInvocationEClass = createEClass(IMPLICIT_PROCEDURE_INVOCATION);

    procedureNameEClass = createEClass(PROCEDURE_NAME);
    createEAttribute(procedureNameEClass, PROCEDURE_NAME__NAMESPACE);
    createEAttribute(procedureNameEClass, PROCEDURE_NAME__NAME);

    listComprehensionEClass = createEClass(LIST_COMPREHENSION);
    createEReference(listComprehensionEClass, LIST_COMPREHENSION__FILTER_EXPRESSION);
    createEReference(listComprehensionEClass, LIST_COMPREHENSION__EXPRESSION);

    patternComprehensionEClass = createEClass(PATTERN_COMPREHENSION);
    createEReference(patternComprehensionEClass, PATTERN_COMPREHENSION__PATH_VARIABLE);
    createEReference(patternComprehensionEClass, PATTERN_COMPREHENSION__PATTERN);
    createEReference(patternComprehensionEClass, PATTERN_COMPREHENSION__WHERE);
    createEReference(patternComprehensionEClass, PATTERN_COMPREHENSION__EXPRESSION);

    propertyLookupEClass = createEClass(PROPERTY_LOOKUP);
    createEAttribute(propertyLookupEClass, PROPERTY_LOOKUP__PROPERTY_KEY_NAME);
    createEAttribute(propertyLookupEClass, PROPERTY_LOOKUP__PROPERTY_OPERATOR);

    caseExpressionEClass = createEClass(CASE_EXPRESSION);
    createEReference(caseExpressionEClass, CASE_EXPRESSION__CASE_ALTERNATIVES);
    createEReference(caseExpressionEClass, CASE_EXPRESSION__CASE_EXPRESSION);
    createEReference(caseExpressionEClass, CASE_EXPRESSION__ELSE_EXPRESSION);

    caseAlternativesEClass = createEClass(CASE_ALTERNATIVES);
    createEReference(caseAlternativesEClass, CASE_ALTERNATIVES__WHEN);
    createEReference(caseAlternativesEClass, CASE_ALTERNATIVES__THEN);

    variableDeclarationEClass = createEClass(VARIABLE_DECLARATION);
    createEAttribute(variableDeclarationEClass, VARIABLE_DECLARATION__NAME);

    mapLiteralEClass = createEClass(MAP_LITERAL);
    createEReference(mapLiteralEClass, MAP_LITERAL__ENTRIES);

    mapLiteralEntryEClass = createEClass(MAP_LITERAL_ENTRY);
    createEAttribute(mapLiteralEntryEClass, MAP_LITERAL_ENTRY__KEY);
    createEReference(mapLiteralEntryEClass, MAP_LITERAL_ENTRY__VALUE);

    legacyParameterEClass = createEClass(LEGACY_PARAMETER);
    createEAttribute(legacyParameterEClass, LEGACY_PARAMETER__PARAMETER);

    parameterEClass = createEClass(PARAMETER);
    createEAttribute(parameterEClass, PARAMETER__PARAMETER);

    propertyExpressionEClass = createEClass(PROPERTY_EXPRESSION);
    createEReference(propertyExpressionEClass, PROPERTY_EXPRESSION__LEFT);
    createEReference(propertyExpressionEClass, PROPERTY_EXPRESSION__PROPERTY_LOOKUPS);

    decimalIntegerEClass = createEClass(DECIMAL_INTEGER);
    createEAttribute(decimalIntegerEClass, DECIMAL_INTEGER__VALUE);

    allOptionsEClass = createEClass(ALL_OPTIONS);
    createEAttribute(allOptionsEClass, ALL_OPTIONS__EXPLAIN);
    createEAttribute(allOptionsEClass, ALL_OPTIONS__PROFILE);
    createEReference(allOptionsEClass, ALL_OPTIONS__CYPHER_OPTION);

    combinedQueryEClass = createEClass(COMBINED_QUERY);
    createEReference(combinedQueryEClass, COMBINED_QUERY__SINGLE_QUERY);
    createEReference(combinedQueryEClass, COMBINED_QUERY__UNION);

    removeItemLabelEClass = createEClass(REMOVE_ITEM_LABEL);
    createEReference(removeItemLabelEClass, REMOVE_ITEM_LABEL__VARIABLE);
    createEReference(removeItemLabelEClass, REMOVE_ITEM_LABEL__NODE_LABELS);

    removeItemPropertyEClass = createEClass(REMOVE_ITEM_PROPERTY);
    createEReference(removeItemPropertyEClass, REMOVE_ITEM_PROPERTY__PROPERTY_EXPRESSION);

    indexHintEClass = createEClass(INDEX_HINT);
    createEReference(indexHintEClass, INDEX_HINT__VARIABLE);
    createEReference(indexHintEClass, INDEX_HINT__NODE_LABEL);
    createEAttribute(indexHintEClass, INDEX_HINT__PROPERTY_KEY_NAME);

    joinHintEClass = createEClass(JOIN_HINT);
    createEReference(joinHintEClass, JOIN_HINT__VARIABLES);

    scanHintEClass = createEClass(SCAN_HINT);
    createEReference(scanHintEClass, SCAN_HINT__VARIABLE);
    createEReference(scanHintEClass, SCAN_HINT__NODE_LABEL);

    shortestPathEClass = createEClass(SHORTEST_PATH);

    allShortestPathsEClass = createEClass(ALL_SHORTEST_PATHS);

    expressionOrEClass = createEClass(EXPRESSION_OR);
    createEReference(expressionOrEClass, EXPRESSION_OR__LEFT);
    createEAttribute(expressionOrEClass, EXPRESSION_OR__OPERATOR);
    createEReference(expressionOrEClass, EXPRESSION_OR__RIGHT);

    expressionXorEClass = createEClass(EXPRESSION_XOR);
    createEReference(expressionXorEClass, EXPRESSION_XOR__LEFT);
    createEAttribute(expressionXorEClass, EXPRESSION_XOR__OPERATOR);
    createEReference(expressionXorEClass, EXPRESSION_XOR__RIGHT);

    expressionAndEClass = createEClass(EXPRESSION_AND);
    createEReference(expressionAndEClass, EXPRESSION_AND__LEFT);
    createEAttribute(expressionAndEClass, EXPRESSION_AND__OPERATOR);
    createEReference(expressionAndEClass, EXPRESSION_AND__RIGHT);

    expressionNotEClass = createEClass(EXPRESSION_NOT);
    createEAttribute(expressionNotEClass, EXPRESSION_NOT__OPERATOR);
    createEReference(expressionNotEClass, EXPRESSION_NOT__LEFT);

    expressionComparisonEClass = createEClass(EXPRESSION_COMPARISON);
    createEReference(expressionComparisonEClass, EXPRESSION_COMPARISON__LEFT);
    createEAttribute(expressionComparisonEClass, EXPRESSION_COMPARISON__OPERATOR);
    createEReference(expressionComparisonEClass, EXPRESSION_COMPARISON__RIGHT);

    expressionPlusMinusEClass = createEClass(EXPRESSION_PLUS_MINUS);
    createEReference(expressionPlusMinusEClass, EXPRESSION_PLUS_MINUS__LEFT);
    createEAttribute(expressionPlusMinusEClass, EXPRESSION_PLUS_MINUS__OPERATOR);
    createEReference(expressionPlusMinusEClass, EXPRESSION_PLUS_MINUS__RIGHT);

    expressionMulDivEClass = createEClass(EXPRESSION_MUL_DIV);
    createEReference(expressionMulDivEClass, EXPRESSION_MUL_DIV__LEFT);
    createEAttribute(expressionMulDivEClass, EXPRESSION_MUL_DIV__OPERATOR);
    createEReference(expressionMulDivEClass, EXPRESSION_MUL_DIV__RIGHT);

    expressionPowerEClass = createEClass(EXPRESSION_POWER);
    createEReference(expressionPowerEClass, EXPRESSION_POWER__LEFT);
    createEAttribute(expressionPowerEClass, EXPRESSION_POWER__OPERATOR);
    createEReference(expressionPowerEClass, EXPRESSION_POWER__RIGHT);

    expressionUnaryPlusMinusEClass = createEClass(EXPRESSION_UNARY_PLUS_MINUS);
    createEAttribute(expressionUnaryPlusMinusEClass, EXPRESSION_UNARY_PLUS_MINUS__OPERATOR);
    createEReference(expressionUnaryPlusMinusEClass, EXPRESSION_UNARY_PLUS_MINUS__LEFT);

    indexExpressionEClass = createEClass(INDEX_EXPRESSION);
    createEReference(indexExpressionEClass, INDEX_EXPRESSION__LEFT);
    createEReference(indexExpressionEClass, INDEX_EXPRESSION__EXPRESSION);
    createEReference(indexExpressionEClass, INDEX_EXPRESSION__UPPER);

    regExpMatchingExpressionEClass = createEClass(REG_EXP_MATCHING_EXPRESSION);
    createEReference(regExpMatchingExpressionEClass, REG_EXP_MATCHING_EXPRESSION__LEFT);
    createEReference(regExpMatchingExpressionEClass, REG_EXP_MATCHING_EXPRESSION__RIGHT);

    inCollectionExpressionEClass = createEClass(IN_COLLECTION_EXPRESSION);
    createEReference(inCollectionExpressionEClass, IN_COLLECTION_EXPRESSION__LEFT);
    createEReference(inCollectionExpressionEClass, IN_COLLECTION_EXPRESSION__RIGHT);

    startsWithExpressionEClass = createEClass(STARTS_WITH_EXPRESSION);
    createEReference(startsWithExpressionEClass, STARTS_WITH_EXPRESSION__LEFT);
    createEReference(startsWithExpressionEClass, STARTS_WITH_EXPRESSION__RIGHT);

    endsWithExpressionEClass = createEClass(ENDS_WITH_EXPRESSION);
    createEReference(endsWithExpressionEClass, ENDS_WITH_EXPRESSION__LEFT);
    createEReference(endsWithExpressionEClass, ENDS_WITH_EXPRESSION__RIGHT);

    containsExpressionEClass = createEClass(CONTAINS_EXPRESSION);
    createEReference(containsExpressionEClass, CONTAINS_EXPRESSION__LEFT);
    createEReference(containsExpressionEClass, CONTAINS_EXPRESSION__RIGHT);

    isNullExpressionEClass = createEClass(IS_NULL_EXPRESSION);
    createEReference(isNullExpressionEClass, IS_NULL_EXPRESSION__LEFT);

    isNotNullExpressionEClass = createEClass(IS_NOT_NULL_EXPRESSION);
    createEReference(isNotNullExpressionEClass, IS_NOT_NULL_EXPRESSION__LEFT);

    expressionPropertyLookupEClass = createEClass(EXPRESSION_PROPERTY_LOOKUP);
    createEReference(expressionPropertyLookupEClass, EXPRESSION_PROPERTY_LOOKUP__LEFT);
    createEReference(expressionPropertyLookupEClass, EXPRESSION_PROPERTY_LOOKUP__PROPERTY_LOOKUPS);

    expressionNodeLabelsEClass = createEClass(EXPRESSION_NODE_LABELS);
    createEReference(expressionNodeLabelsEClass, EXPRESSION_NODE_LABELS__LEFT);
    createEReference(expressionNodeLabelsEClass, EXPRESSION_NODE_LABELS__NODE_LABELS);

    numberConstantEClass = createEClass(NUMBER_CONSTANT);
    createEAttribute(numberConstantEClass, NUMBER_CONSTANT__VALUE);

    stringConstantEClass = createEClass(STRING_CONSTANT);
    createEAttribute(stringConstantEClass, STRING_CONSTANT__VALUE);

    boolConstantEClass = createEClass(BOOL_CONSTANT);
    createEAttribute(boolConstantEClass, BOOL_CONSTANT__VALUE);

    nullConstantEClass = createEClass(NULL_CONSTANT);

    countEClass = createEClass(COUNT);

    expressionListEClass = createEClass(EXPRESSION_LIST);
    createEReference(expressionListEClass, EXPRESSION_LIST__EXPRESSIONS);

    extractEClass = createEClass(EXTRACT);
    createEReference(extractEClass, EXTRACT__FILTER_EXPRESSION);
    createEReference(extractEClass, EXTRACT__EXPRESSION);

    filterEClass = createEClass(FILTER);
    createEReference(filterEClass, FILTER__FILTER_EXPRESSION);

    allEClass = createEClass(ALL);
    createEReference(allEClass, ALL__FILTER_EXPRESSION);

    anyEClass = createEClass(ANY);
    createEReference(anyEClass, ANY__FILTER_EXPRESSION);

    noneEClass = createEClass(NONE);
    createEReference(noneEClass, NONE__FILTER_EXPRESSION);

    singleEClass = createEClass(SINGLE);
    createEReference(singleEClass, SINGLE__FILTER_EXPRESSION);

    variableRefEClass = createEClass(VARIABLE_REF);
    createEReference(variableRefEClass, VARIABLE_REF__VARIABLE_REF);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    queryEClass.getESuperTypes().add(this.getStatement());
    regularQueryEClass.getESuperTypes().add(this.getQuery());
    bulkImportQueryEClass.getESuperTypes().add(this.getQuery());
    singleQueryEClass.getESuperTypes().add(this.getRegularQuery());
    commandEClass.getESuperTypes().add(this.getStatement());
    createUniqueConstraintEClass.getESuperTypes().add(this.getCommand());
    createNodePropertyExistenceConstraintEClass.getESuperTypes().add(this.getCommand());
    createRelationshipPropertyExistenceConstraintEClass.getESuperTypes().add(this.getCommand());
    createIndexEClass.getESuperTypes().add(this.getCommand());
    dropUniqueConstraintEClass.getESuperTypes().add(this.getCommand());
    dropNodePropertyExistenceConstraintEClass.getESuperTypes().add(this.getCommand());
    dropRelationshipPropertyExistenceConstraintEClass.getESuperTypes().add(this.getCommand());
    dropIndexEClass.getESuperTypes().add(this.getCommand());
    uniqueConstraintEClass.getESuperTypes().add(this.getCreateUniqueConstraint());
    nodePropertyExistenceConstraintEClass.getESuperTypes().add(this.getCreateNodePropertyExistenceConstraint());
    relationshipPropertyExistenceConstraintEClass.getESuperTypes().add(this.getCreateRelationshipPropertyExistenceConstraint());
    loadCSVEClass.getESuperTypes().add(this.getClause());
    matchEClass.getESuperTypes().add(this.getClause());
    unwindEClass.getESuperTypes().add(this.getClause());
    mergeEClass.getESuperTypes().add(this.getClause());
    createEClass.getESuperTypes().add(this.getClause());
    setEClass.getESuperTypes().add(this.getClause());
    deleteEClass.getESuperTypes().add(this.getClause());
    removeEClass.getESuperTypes().add(this.getClause());
    foreachEClass.getESuperTypes().add(this.getClause());
    inQueryCallEClass.getESuperTypes().add(this.getClause());
    standaloneCallEClass.getESuperTypes().add(this.getQuery());
    withEClass.getESuperTypes().add(this.getClause());
    returnEClass.getESuperTypes().add(this.getClause());
    startEClass.getESuperTypes().add(this.getClause());
    nodeLookupEClass.getESuperTypes().add(this.getLookup());
    relationshipLookupEClass.getESuperTypes().add(this.getLookup());
    identifiedIndexLookupEClass.getESuperTypes().add(this.getNodeLookup());
    identifiedIndexLookupEClass.getESuperTypes().add(this.getRelationshipLookup());
    indexQueryEClass.getESuperTypes().add(this.getNodeLookup());
    indexQueryEClass.getESuperTypes().add(this.getRelationshipLookup());
    idLookupEClass.getESuperTypes().add(this.getNodeLookup());
    idLookupEClass.getESuperTypes().add(this.getRelationshipLookup());
    anonymousPatternPartEClass.getESuperTypes().add(this.getPatternPart());
    shortestPathPatternEClass.getESuperTypes().add(this.getAnonymousPatternPart());
    shortestPathPatternEClass.getESuperTypes().add(this.getExpression());
    patternElementEClass.getESuperTypes().add(this.getAnonymousPatternPart());
    reduceEClass.getESuperTypes().add(this.getExpression());
    parenthesizedExpressionEClass.getESuperTypes().add(this.getExpression());
    relationshipsPatternEClass.getESuperTypes().add(this.getExpression());
    functionInvocationEClass.getESuperTypes().add(this.getExpression());
    procedureNameEClass.getESuperTypes().add(this.getImplicitProcedureInvocation());
    listComprehensionEClass.getESuperTypes().add(this.getExpression());
    patternComprehensionEClass.getESuperTypes().add(this.getExpression());
    caseExpressionEClass.getESuperTypes().add(this.getExpression());
    mapLiteralEClass.getESuperTypes().add(this.getProperties());
    mapLiteralEClass.getESuperTypes().add(this.getExpression());
    legacyParameterEClass.getESuperTypes().add(this.getProperties());
    legacyParameterEClass.getESuperTypes().add(this.getExpression());
    parameterEClass.getESuperTypes().add(this.getProperties());
    parameterEClass.getESuperTypes().add(this.getExpression());
    allOptionsEClass.getESuperTypes().add(this.getQueryOptions());
    combinedQueryEClass.getESuperTypes().add(this.getRegularQuery());
    removeItemLabelEClass.getESuperTypes().add(this.getRemoveItem());
    removeItemPropertyEClass.getESuperTypes().add(this.getRemoveItem());
    indexHintEClass.getESuperTypes().add(this.getHint());
    joinHintEClass.getESuperTypes().add(this.getHint());
    scanHintEClass.getESuperTypes().add(this.getHint());
    shortestPathEClass.getESuperTypes().add(this.getShortestPathPattern());
    allShortestPathsEClass.getESuperTypes().add(this.getShortestPathPattern());
    expressionOrEClass.getESuperTypes().add(this.getExpression());
    expressionXorEClass.getESuperTypes().add(this.getExpression());
    expressionAndEClass.getESuperTypes().add(this.getExpression());
    expressionNotEClass.getESuperTypes().add(this.getExpression());
    expressionComparisonEClass.getESuperTypes().add(this.getExpression());
    expressionPlusMinusEClass.getESuperTypes().add(this.getExpression());
    expressionMulDivEClass.getESuperTypes().add(this.getExpression());
    expressionPowerEClass.getESuperTypes().add(this.getExpression());
    expressionUnaryPlusMinusEClass.getESuperTypes().add(this.getExpression());
    indexExpressionEClass.getESuperTypes().add(this.getExpression());
    regExpMatchingExpressionEClass.getESuperTypes().add(this.getExpression());
    inCollectionExpressionEClass.getESuperTypes().add(this.getExpression());
    startsWithExpressionEClass.getESuperTypes().add(this.getExpression());
    endsWithExpressionEClass.getESuperTypes().add(this.getExpression());
    containsExpressionEClass.getESuperTypes().add(this.getExpression());
    isNullExpressionEClass.getESuperTypes().add(this.getExpression());
    isNotNullExpressionEClass.getESuperTypes().add(this.getExpression());
    expressionPropertyLookupEClass.getESuperTypes().add(this.getExpression());
    expressionNodeLabelsEClass.getESuperTypes().add(this.getExpression());
    numberConstantEClass.getESuperTypes().add(this.getExpression());
    stringConstantEClass.getESuperTypes().add(this.getExpression());
    boolConstantEClass.getESuperTypes().add(this.getExpression());
    nullConstantEClass.getESuperTypes().add(this.getExpression());
    countEClass.getESuperTypes().add(this.getExpression());
    expressionListEClass.getESuperTypes().add(this.getExpression());
    extractEClass.getESuperTypes().add(this.getExpression());
    filterEClass.getESuperTypes().add(this.getExpression());
    allEClass.getESuperTypes().add(this.getExpression());
    anyEClass.getESuperTypes().add(this.getExpression());
    noneEClass.getESuperTypes().add(this.getExpression());
    singleEClass.getESuperTypes().add(this.getExpression());
    variableRefEClass.getESuperTypes().add(this.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(cypherEClass, Cypher.class, "Cypher", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCypher_QueryOptions(), this.getQueryOptions(), null, "queryOptions", null, 0, 1, Cypher.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCypher_Statement(), this.getStatement(), null, "statement", null, 0, 1, Cypher.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(queryOptionsEClass, QueryOptions.class, "QueryOptions", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(cypherOptionEClass, CypherOption.class, "CypherOption", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCypherOption_VersionNumber(), this.getVersionNumber(), null, "versionNumber", null, 0, 1, CypherOption.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCypherOption_ConfigurationOption(), this.getConfigurationOption(), null, "configurationOption", null, 0, -1, CypherOption.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(versionNumberEClass, VersionNumber.class, "VersionNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVersionNumber_VersionNumber(), ecorePackage.getEString(), "versionNumber", null, 0, 1, VersionNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configurationOptionEClass, ConfigurationOption.class, "ConfigurationOption", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConfigurationOption_Key(), ecorePackage.getEString(), "key", null, 0, 1, ConfigurationOption.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurationOption_Value(), ecorePackage.getEString(), "value", null, 0, 1, ConfigurationOption.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(queryEClass, Query.class, "Query", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(regularQueryEClass, RegularQuery.class, "RegularQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bulkImportQueryEClass, BulkImportQuery.class, "BulkImportQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBulkImportQuery_PeriodicCommitHint(), this.getPeriodicCommitHint(), null, "periodicCommitHint", null, 0, 1, BulkImportQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBulkImportQuery_LoadCSVQuery(), this.getLoadCSVQuery(), null, "loadCSVQuery", null, 0, 1, BulkImportQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleQueryEClass, SingleQuery.class, "SingleQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSingleQuery_Clauses(), this.getClause(), null, "clauses", null, 0, -1, SingleQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(periodicCommitHintEClass, PeriodicCommitHint.class, "PeriodicCommitHint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPeriodicCommitHint_NumberOfRowsPerCommit(), this.getDecimalInteger(), null, "numberOfRowsPerCommit", null, 0, 1, PeriodicCommitHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loadCSVQueryEClass, LoadCSVQuery.class, "LoadCSVQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLoadCSVQuery_LoadCSV(), this.getLoadCSV(), null, "loadCSV", null, 0, 1, LoadCSVQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoadCSVQuery_Clauses(), this.getClause(), null, "clauses", null, 0, -1, LoadCSVQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unionEClass, Union.class, "Union", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getUnion_All(), ecorePackage.getEBoolean(), "all", null, 0, 1, Union.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUnion_SingleQuery(), this.getSingleQuery(), null, "singleQuery", null, 0, 1, Union.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(clauseEClass, Clause.class, "Clause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(commandEClass, Command.class, "Command", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(createUniqueConstraintEClass, CreateUniqueConstraint.class, "CreateUniqueConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(createNodePropertyExistenceConstraintEClass, CreateNodePropertyExistenceConstraint.class, "CreateNodePropertyExistenceConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(createRelationshipPropertyExistenceConstraintEClass, CreateRelationshipPropertyExistenceConstraint.class, "CreateRelationshipPropertyExistenceConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(createIndexEClass, CreateIndex.class, "CreateIndex", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCreateIndex_Index(), this.getIndex(), null, "index", null, 0, 1, CreateIndex.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dropUniqueConstraintEClass, DropUniqueConstraint.class, "DropUniqueConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDropUniqueConstraint_UniqueConstraint(), this.getUniqueConstraint(), null, "uniqueConstraint", null, 0, 1, DropUniqueConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dropNodePropertyExistenceConstraintEClass, DropNodePropertyExistenceConstraint.class, "DropNodePropertyExistenceConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDropNodePropertyExistenceConstraint_NodePropertyExistenceConstraint(), this.getNodePropertyExistenceConstraint(), null, "nodePropertyExistenceConstraint", null, 0, 1, DropNodePropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dropRelationshipPropertyExistenceConstraintEClass, DropRelationshipPropertyExistenceConstraint.class, "DropRelationshipPropertyExistenceConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDropRelationshipPropertyExistenceConstraint_RelationshipPropertyExistenceConstraint(), this.getRelationshipPropertyExistenceConstraint(), null, "relationshipPropertyExistenceConstraint", null, 0, 1, DropRelationshipPropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dropIndexEClass, DropIndex.class, "DropIndex", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDropIndex_Index(), this.getIndex(), null, "index", null, 0, 1, DropIndex.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(indexEClass, Index.class, "Index", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIndex_NodeLabel(), this.getNodeLabel(), null, "nodeLabel", null, 0, 1, Index.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIndex_PropertyKeyName(), ecorePackage.getEString(), "propertyKeyName", null, 0, 1, Index.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(uniqueConstraintEClass, UniqueConstraint.class, "UniqueConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getUniqueConstraint_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, UniqueConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUniqueConstraint_NodeLabel(), this.getNodeLabel(), null, "nodeLabel", null, 0, 1, UniqueConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUniqueConstraint_PropertyExpression(), this.getPropertyExpression(), null, "propertyExpression", null, 0, 1, UniqueConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodePropertyExistenceConstraintEClass, NodePropertyExistenceConstraint.class, "NodePropertyExistenceConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNodePropertyExistenceConstraint_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, NodePropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNodePropertyExistenceConstraint_NodeLabel(), this.getNodeLabel(), null, "nodeLabel", null, 0, 1, NodePropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNodePropertyExistenceConstraint_PropertyExpression(), this.getPropertyExpression(), null, "propertyExpression", null, 0, 1, NodePropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationshipPropertyExistenceConstraintEClass, RelationshipPropertyExistenceConstraint.class, "RelationshipPropertyExistenceConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRelationshipPropertyExistenceConstraint_RelationshipPattern(), this.getRelationshipPatternSyntax(), null, "relationshipPattern", null, 0, 1, RelationshipPropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipPropertyExistenceConstraint_PropertyExpression(), this.getPropertyExpression(), null, "propertyExpression", null, 0, 1, RelationshipPropertyExistenceConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationshipPatternSyntaxEClass, RelationshipPatternSyntax.class, "RelationshipPatternSyntax", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRelationshipPatternSyntax_Incoming(), ecorePackage.getEBoolean(), "incoming", null, 0, 1, RelationshipPatternSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipPatternSyntax_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, RelationshipPatternSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRelationshipPatternSyntax_RelType(), ecorePackage.getEString(), "relType", null, 0, 1, RelationshipPatternSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRelationshipPatternSyntax_Outgoing(), ecorePackage.getEBoolean(), "outgoing", null, 0, 1, RelationshipPatternSyntax.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loadCSVEClass, LoadCSV.class, "LoadCSV", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLoadCSV_WithHeaders(), ecorePackage.getEBoolean(), "withHeaders", null, 0, 1, LoadCSV.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoadCSV_Expression(), this.getExpression(), null, "expression", null, 0, 1, LoadCSV.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoadCSV_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, LoadCSV.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoadCSV_Fieldterminator(), ecorePackage.getEString(), "fieldterminator", null, 0, 1, LoadCSV.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(matchEClass, Match.class, "Match", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMatch_Optional(), ecorePackage.getEBoolean(), "optional", null, 0, 1, Match.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMatch_Pattern(), this.getPattern(), null, "pattern", null, 0, 1, Match.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMatch_Hints(), this.getHint(), null, "hints", null, 0, -1, Match.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMatch_Where(), this.getWhere(), null, "where", null, 0, 1, Match.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(unwindEClass, Unwind.class, "Unwind", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getUnwind_Expression(), this.getExpression(), null, "expression", null, 0, 1, Unwind.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUnwind_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, Unwind.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mergeEClass, Merge.class, "Merge", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMerge_PatternPart(), this.getPatternPart(), null, "patternPart", null, 0, 1, Merge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMerge_MergeActions(), this.getMergeAction(), null, "mergeActions", null, 0, -1, Merge.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mergeActionEClass, MergeAction.class, "MergeAction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMergeAction_Action(), ecorePackage.getEString(), "action", null, 0, 1, MergeAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMergeAction_Set(), this.getSet(), null, "set", null, 0, 1, MergeAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(createEClass, Create.class, "Create", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCreate_Unique(), ecorePackage.getEBoolean(), "unique", null, 0, 1, Create.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCreate_Pattern(), this.getPattern(), null, "pattern", null, 0, 1, Create.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setEClass, Set.class, "Set", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSet_SetItems(), this.getSetItem(), null, "setItems", null, 0, -1, Set.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setItemEClass, SetItem.class, "SetItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetItem_PropertyExpression(), this.getPropertyExpression(), null, "propertyExpression", null, 0, 1, SetItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetItem_Expression(), this.getExpression(), null, "expression", null, 0, 1, SetItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetItem_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, SetItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetItem_NodeLabels(), this.getNodeLabels(), null, "nodeLabels", null, 0, 1, SetItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deleteEClass, Delete.class, "Delete", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDelete_Detach(), ecorePackage.getEBoolean(), "detach", null, 0, 1, Delete.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDelete_Expressions(), this.getExpression(), null, "expressions", null, 0, -1, Delete.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(removeEClass, Remove.class, "Remove", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRemove_RemoveItems(), this.getRemoveItem(), null, "removeItems", null, 0, -1, Remove.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(removeItemEClass, RemoveItem.class, "RemoveItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(foreachEClass, Foreach.class, "Foreach", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForeach_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, Foreach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForeach_Expression(), this.getExpression(), null, "expression", null, 0, 1, Foreach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForeach_Clauses(), this.getClause(), null, "clauses", null, 0, -1, Foreach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inQueryCallEClass, InQueryCall.class, "InQueryCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInQueryCall_Invocation(), this.getExplicitProcedureInvocation(), null, "invocation", null, 0, 1, InQueryCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInQueryCall_YieldItems(), this.getYieldItems(), null, "yieldItems", null, 0, 1, InQueryCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(standaloneCallEClass, StandaloneCall.class, "StandaloneCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStandaloneCall_Invocation(), ecorePackage.getEObject(), null, "invocation", null, 0, 1, StandaloneCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStandaloneCall_YieldItems(), this.getYieldItems(), null, "yieldItems", null, 0, 1, StandaloneCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(yieldItemsEClass, YieldItems.class, "YieldItems", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getYieldItems_Items(), this.getYieldItem(), null, "items", null, 0, -1, YieldItems.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(yieldItemEClass, YieldItem.class, "YieldItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getYieldItem_Field(), ecorePackage.getEString(), "field", null, 0, 1, YieldItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getYieldItem_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, YieldItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(withEClass, With.class, "With", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWith_Distint(), ecorePackage.getEBoolean(), "distint", null, 0, 1, With.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWith_ReturnBody(), this.getReturnBody(), null, "returnBody", null, 0, 1, With.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getWith_Where(), this.getWhere(), null, "where", null, 0, 1, With.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(returnEClass, Return.class, "Return", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReturn_Return(), ecorePackage.getEString(), "return", null, 0, 1, Return.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getReturn_Distinct(), ecorePackage.getEBoolean(), "distinct", null, 0, 1, Return.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReturn_Body(), this.getReturnBody(), null, "body", null, 0, 1, Return.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(returnBodyEClass, ReturnBody.class, "ReturnBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getReturnBody_ReturnItems(), this.getReturnItems(), null, "returnItems", null, 0, 1, ReturnBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReturnBody_Order(), this.getOrder(), null, "order", null, 0, 1, ReturnBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReturnBody_Skip(), this.getSkip(), null, "skip", null, 0, 1, ReturnBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReturnBody_Limit(), this.getLimit(), null, "limit", null, 0, 1, ReturnBody.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(returnItemsEClass, ReturnItems.class, "ReturnItems", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReturnItems_All(), ecorePackage.getEString(), "all", null, 0, 1, ReturnItems.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReturnItems_Items(), this.getReturnItem(), null, "items", null, 0, -1, ReturnItems.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(returnItemEClass, ReturnItem.class, "ReturnItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getReturnItem_Expression(), this.getExpression(), null, "expression", null, 0, 1, ReturnItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReturnItem_Alias(), this.getVariableDeclaration(), null, "alias", null, 0, 1, ReturnItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(orderEClass, Order.class, "Order", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOrder_OrderBy(), this.getSortItem(), null, "orderBy", null, 0, -1, Order.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(skipEClass, Skip.class, "Skip", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSkip_Skip(), this.getExpression(), null, "skip", null, 0, 1, Skip.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(limitEClass, Limit.class, "Limit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLimit_Limit(), this.getExpression(), null, "limit", null, 0, 1, Limit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sortItemEClass, SortItem.class, "SortItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSortItem_Expression(), this.getExpression(), null, "expression", null, 0, 1, SortItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSortItem_Sort(), ecorePackage.getEString(), "sort", null, 0, 1, SortItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(hintEClass, Hint.class, "Hint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(startEClass, Start.class, "Start", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStart_StartPoint(), this.getStartPoint(), null, "startPoint", null, 0, -1, Start.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStart_Where(), this.getWhere(), null, "where", null, 0, 1, Start.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(startPointEClass, StartPoint.class, "StartPoint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStartPoint_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, StartPoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStartPoint_Lookup(), this.getLookup(), null, "lookup", null, 0, 1, StartPoint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lookupEClass, Lookup.class, "Lookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(nodeLookupEClass, NodeLookup.class, "NodeLookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(relationshipLookupEClass, RelationshipLookup.class, "RelationshipLookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(identifiedIndexLookupEClass, IdentifiedIndexLookup.class, "IdentifiedIndexLookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIdentifiedIndexLookup_IndexName(), ecorePackage.getEString(), "indexName", null, 0, 1, IdentifiedIndexLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIdentifiedIndexLookup_Key(), ecorePackage.getEString(), "key", null, 0, 1, IdentifiedIndexLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIdentifiedIndexLookup_Value(), ecorePackage.getEString(), "value", null, 0, 1, IdentifiedIndexLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIdentifiedIndexLookup_LegacyParameter(), this.getLegacyParameter(), null, "legacyParameter", null, 0, 1, IdentifiedIndexLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(indexQueryEClass, IndexQuery.class, "IndexQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIndexQuery_IndexName(), ecorePackage.getEString(), "indexName", null, 0, 1, IndexQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIndexQuery_Query(), ecorePackage.getEString(), "query", null, 0, 1, IndexQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexQuery_Parameter(), this.getParameter(), null, "parameter", null, 0, 1, IndexQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(idLookupEClass, IdLookup.class, "IdLookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIdLookup_Ids(), this.getLiteralIds(), null, "ids", null, 0, 1, IdLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIdLookup_LegacyParameter(), this.getParameter(), null, "legacyParameter", null, 0, 1, IdLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIdLookup_Wildcard(), ecorePackage.getEString(), "wildcard", null, 0, 1, IdLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(literalIdsEClass, LiteralIds.class, "LiteralIds", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLiteralIds_Ids(), this.getDecimalInteger(), null, "ids", null, 0, -1, LiteralIds.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(whereEClass, Where.class, "Where", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getWhere_Expression(), this.getExpression(), null, "expression", null, 0, 1, Where.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patternEClass, Pattern.class, "Pattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPattern_Patterns(), this.getPatternPart(), null, "patterns", null, 0, -1, Pattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patternPartEClass, PatternPart.class, "PatternPart", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPatternPart_Var(), this.getVariableDeclaration(), null, "var", null, 0, 1, PatternPart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatternPart_Part(), this.getAnonymousPatternPart(), null, "part", null, 0, 1, PatternPart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(anonymousPatternPartEClass, AnonymousPatternPart.class, "AnonymousPatternPart", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(shortestPathPatternEClass, ShortestPathPattern.class, "ShortestPathPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getShortestPathPattern_PatternElement(), this.getPatternElement(), null, "patternElement", null, 0, 1, ShortestPathPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patternElementEClass, PatternElement.class, "PatternElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPatternElement_Nodepattern(), this.getNodePattern(), null, "nodepattern", null, 0, 1, PatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatternElement_Chain(), this.getPatternElementChain(), null, "chain", null, 0, -1, PatternElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodePatternEClass, NodePattern.class, "NodePattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNodePattern_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, NodePattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNodePattern_NodeLabels(), this.getNodeLabels(), null, "nodeLabels", null, 0, 1, NodePattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNodePattern_Properties(), this.getProperties(), null, "properties", null, 0, 1, NodePattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patternElementChainEClass, PatternElementChain.class, "PatternElementChain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPatternElementChain_RelationshipPattern(), this.getRelationshipPattern(), null, "relationshipPattern", null, 0, 1, PatternElementChain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatternElementChain_NodePattern(), this.getNodePattern(), null, "nodePattern", null, 0, 1, PatternElementChain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationshipPatternEClass, RelationshipPattern.class, "RelationshipPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRelationshipPattern_Incoming(), ecorePackage.getEBoolean(), "incoming", null, 0, 1, RelationshipPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipPattern_Detail(), this.getRelationshipDetail(), null, "detail", null, 0, 1, RelationshipPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRelationshipPattern_Outgoing(), ecorePackage.getEBoolean(), "outgoing", null, 0, 1, RelationshipPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationshipDetailEClass, RelationshipDetail.class, "RelationshipDetail", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRelationshipDetail_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, RelationshipDetail.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRelationshipDetail_Optional(), ecorePackage.getEBoolean(), "optional", null, 0, 1, RelationshipDetail.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipDetail_Types(), this.getRelationshipTypes(), null, "types", null, 0, 1, RelationshipDetail.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipDetail_Range(), this.getRangeLiteral(), null, "range", null, 0, 1, RelationshipDetail.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipDetail_Properties(), this.getProperties(), null, "properties", null, 0, 1, RelationshipDetail.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertiesEClass, Properties.class, "Properties", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(relationshipTypesEClass, RelationshipTypes.class, "RelationshipTypes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRelationshipTypes_RelTypeName(), ecorePackage.getEString(), "relTypeName", null, 0, -1, RelationshipTypes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeLabelsEClass, NodeLabels.class, "NodeLabels", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNodeLabels_NodeLabels(), this.getNodeLabel(), null, "nodeLabels", null, 0, -1, NodeLabels.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeLabelEClass, NodeLabel.class, "NodeLabel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNodeLabel_LabelName(), ecorePackage.getEString(), "labelName", null, 0, 1, NodeLabel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rangeLiteralEClass, RangeLiteral.class, "RangeLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRangeLiteral_Lower(), ecorePackage.getEString(), "lower", null, 0, 1, RangeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRangeLiteral_Upper(), ecorePackage.getEString(), "upper", null, 0, 1, RangeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionEClass, Expression.class, "Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(reduceEClass, Reduce.class, "Reduce", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getReduce_Accumulator(), this.getVariableDeclaration(), null, "accumulator", null, 0, 1, Reduce.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReduce_AccumulatorExpression(), this.getExpression(), null, "accumulatorExpression", null, 0, 1, Reduce.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReduce_IdInColl(), this.getIdInColl(), null, "idInColl", null, 0, 1, Reduce.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getReduce_Expression(), this.getExpression(), null, "expression", null, 0, 1, Reduce.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parenthesizedExpressionEClass, ParenthesizedExpression.class, "ParenthesizedExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getParenthesizedExpression_Expression(), this.getExpression(), null, "expression", null, 0, 1, ParenthesizedExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationshipsPatternEClass, RelationshipsPattern.class, "RelationshipsPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRelationshipsPattern_NodePattern(), this.getNodePattern(), null, "nodePattern", null, 0, 1, RelationshipsPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRelationshipsPattern_Chain(), this.getPatternElementChain(), null, "chain", null, 0, -1, RelationshipsPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(filterExpressionEClass, FilterExpression.class, "FilterExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFilterExpression_IdInColl(), this.getIdInColl(), null, "idInColl", null, 0, 1, FilterExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFilterExpression_Where(), this.getWhere(), null, "where", null, 0, 1, FilterExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(idInCollEClass, IdInColl.class, "IdInColl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIdInColl_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, IdInColl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIdInColl_Expression(), this.getExpression(), null, "expression", null, 0, 1, IdInColl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionInvocationEClass, FunctionInvocation.class, "FunctionInvocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionInvocation_FunctionName(), ecorePackage.getEString(), "functionName", null, 0, 1, FunctionInvocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFunctionInvocation_Distinct(), ecorePackage.getEBoolean(), "distinct", null, 0, 1, FunctionInvocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionInvocation_Parameter(), this.getExpression(), null, "parameter", null, 0, -1, FunctionInvocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(explicitProcedureInvocationEClass, ExplicitProcedureInvocation.class, "ExplicitProcedureInvocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExplicitProcedureInvocation_ProcedureName(), this.getProcedureName(), null, "procedureName", null, 0, 1, ExplicitProcedureInvocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExplicitProcedureInvocation_Parameter(), this.getExpression(), null, "parameter", null, 0, -1, ExplicitProcedureInvocation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(implicitProcedureInvocationEClass, ImplicitProcedureInvocation.class, "ImplicitProcedureInvocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(procedureNameEClass, ProcedureName.class, "ProcedureName", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getProcedureName_Namespace(), ecorePackage.getEString(), "namespace", null, 0, 1, ProcedureName.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProcedureName_Name(), ecorePackage.getEString(), "name", null, 0, 1, ProcedureName.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(listComprehensionEClass, ListComprehension.class, "ListComprehension", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getListComprehension_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, ListComprehension.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getListComprehension_Expression(), this.getExpression(), null, "expression", null, 0, 1, ListComprehension.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patternComprehensionEClass, PatternComprehension.class, "PatternComprehension", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPatternComprehension_PathVariable(), this.getVariableDeclaration(), null, "pathVariable", null, 0, 1, PatternComprehension.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatternComprehension_Pattern(), this.getRelationshipsPattern(), null, "pattern", null, 0, 1, PatternComprehension.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatternComprehension_Where(), this.getWhere(), null, "where", null, 0, 1, PatternComprehension.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatternComprehension_Expression(), this.getExpression(), null, "expression", null, 0, 1, PatternComprehension.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertyLookupEClass, PropertyLookup.class, "PropertyLookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPropertyLookup_PropertyKeyName(), ecorePackage.getEString(), "propertyKeyName", null, 0, 1, PropertyLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPropertyLookup_PropertyOperator(), ecorePackage.getEString(), "propertyOperator", null, 0, 1, PropertyLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseExpressionEClass, CaseExpression.class, "CaseExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseExpression_CaseAlternatives(), this.getCaseAlternatives(), null, "caseAlternatives", null, 0, -1, CaseExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseExpression_CaseExpression(), this.getExpression(), null, "caseExpression", null, 0, 1, CaseExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseExpression_ElseExpression(), this.getExpression(), null, "elseExpression", null, 0, 1, CaseExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseAlternativesEClass, CaseAlternatives.class, "CaseAlternatives", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseAlternatives_When(), this.getExpression(), null, "when", null, 0, 1, CaseAlternatives.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseAlternatives_Then(), this.getExpression(), null, "then", null, 0, 1, CaseAlternatives.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableDeclarationEClass, VariableDeclaration.class, "VariableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariableDeclaration_Name(), ecorePackage.getEString(), "name", null, 0, 1, VariableDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mapLiteralEClass, MapLiteral.class, "MapLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapLiteral_Entries(), this.getMapLiteralEntry(), null, "entries", null, 0, -1, MapLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mapLiteralEntryEClass, MapLiteralEntry.class, "MapLiteralEntry", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMapLiteralEntry_Key(), ecorePackage.getEString(), "key", null, 0, 1, MapLiteralEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapLiteralEntry_Value(), this.getExpression(), null, "value", null, 0, 1, MapLiteralEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(legacyParameterEClass, LegacyParameter.class, "LegacyParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLegacyParameter_Parameter(), ecorePackage.getEString(), "parameter", null, 0, 1, LegacyParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterEClass, Parameter.class, "Parameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameter_Parameter(), ecorePackage.getEString(), "parameter", null, 0, 1, Parameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertyExpressionEClass, PropertyExpression.class, "PropertyExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPropertyExpression_Left(), this.getExpression(), null, "left", null, 0, 1, PropertyExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPropertyExpression_PropertyLookups(), this.getPropertyLookup(), null, "propertyLookups", null, 0, -1, PropertyExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(decimalIntegerEClass, DecimalInteger.class, "DecimalInteger", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDecimalInteger_Value(), ecorePackage.getEString(), "value", null, 0, 1, DecimalInteger.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(allOptionsEClass, AllOptions.class, "AllOptions", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAllOptions_Explain(), ecorePackage.getEBoolean(), "explain", null, 0, 1, AllOptions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAllOptions_Profile(), ecorePackage.getEBoolean(), "profile", null, 0, 1, AllOptions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAllOptions_CypherOption(), this.getCypherOption(), null, "cypherOption", null, 0, -1, AllOptions.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(combinedQueryEClass, CombinedQuery.class, "CombinedQuery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCombinedQuery_SingleQuery(), this.getSingleQuery(), null, "singleQuery", null, 0, 1, CombinedQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCombinedQuery_Union(), this.getUnion(), null, "union", null, 0, -1, CombinedQuery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(removeItemLabelEClass, RemoveItemLabel.class, "RemoveItemLabel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRemoveItemLabel_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, RemoveItemLabel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRemoveItemLabel_NodeLabels(), this.getNodeLabels(), null, "nodeLabels", null, 0, 1, RemoveItemLabel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(removeItemPropertyEClass, RemoveItemProperty.class, "RemoveItemProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRemoveItemProperty_PropertyExpression(), this.getPropertyExpression(), null, "propertyExpression", null, 0, 1, RemoveItemProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(indexHintEClass, IndexHint.class, "IndexHint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIndexHint_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, IndexHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexHint_NodeLabel(), this.getNodeLabel(), null, "nodeLabel", null, 0, 1, IndexHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getIndexHint_PropertyKeyName(), ecorePackage.getEString(), "propertyKeyName", null, 0, 1, IndexHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(joinHintEClass, JoinHint.class, "JoinHint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJoinHint_Variables(), this.getVariableDeclaration(), null, "variables", null, 0, -1, JoinHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scanHintEClass, ScanHint.class, "ScanHint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getScanHint_Variable(), this.getVariableDeclaration(), null, "variable", null, 0, 1, ScanHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getScanHint_NodeLabel(), this.getNodeLabel(), null, "nodeLabel", null, 0, 1, ScanHint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(shortestPathEClass, ShortestPath.class, "ShortestPath", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(allShortestPathsEClass, AllShortestPaths.class, "AllShortestPaths", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionOrEClass, ExpressionOr.class, "ExpressionOr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionOr_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionOr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionOr_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionOr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionOr_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionOr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionXorEClass, ExpressionXor.class, "ExpressionXor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionXor_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionXor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionXor_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionXor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionXor_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionXor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionAndEClass, ExpressionAnd.class, "ExpressionAnd", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionAnd_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionAnd.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionAnd_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionAnd.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionAnd_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionAnd.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionNotEClass, ExpressionNot.class, "ExpressionNot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpressionNot_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionNot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionNot_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionNot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionComparisonEClass, ExpressionComparison.class, "ExpressionComparison", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionComparison_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionComparison.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionComparison_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionComparison.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionComparison_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionComparison.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionPlusMinusEClass, ExpressionPlusMinus.class, "ExpressionPlusMinus", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionPlusMinus_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionPlusMinus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionPlusMinus_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionPlusMinus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionPlusMinus_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionPlusMinus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionMulDivEClass, ExpressionMulDiv.class, "ExpressionMulDiv", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionMulDiv_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionMulDiv.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionMulDiv_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionMulDiv.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionMulDiv_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionMulDiv.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionPowerEClass, ExpressionPower.class, "ExpressionPower", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionPower_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionPower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExpressionPower_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionPower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionPower_Right(), this.getExpression(), null, "right", null, 0, 1, ExpressionPower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionUnaryPlusMinusEClass, ExpressionUnaryPlusMinus.class, "ExpressionUnaryPlusMinus", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpressionUnaryPlusMinus_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ExpressionUnaryPlusMinus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionUnaryPlusMinus_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionUnaryPlusMinus.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(indexExpressionEClass, IndexExpression.class, "IndexExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIndexExpression_Left(), this.getExpression(), null, "left", null, 0, 1, IndexExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexExpression_Expression(), this.getExpression(), null, "expression", null, 0, 1, IndexExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIndexExpression_Upper(), this.getExpression(), null, "upper", null, 0, 1, IndexExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regExpMatchingExpressionEClass, RegExpMatchingExpression.class, "RegExpMatchingExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegExpMatchingExpression_Left(), this.getExpression(), null, "left", null, 0, 1, RegExpMatchingExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRegExpMatchingExpression_Right(), this.getExpression(), null, "right", null, 0, 1, RegExpMatchingExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inCollectionExpressionEClass, InCollectionExpression.class, "InCollectionExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInCollectionExpression_Left(), this.getExpression(), null, "left", null, 0, 1, InCollectionExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInCollectionExpression_Right(), this.getExpression(), null, "right", null, 0, 1, InCollectionExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(startsWithExpressionEClass, StartsWithExpression.class, "StartsWithExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStartsWithExpression_Left(), this.getExpression(), null, "left", null, 0, 1, StartsWithExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStartsWithExpression_Right(), this.getExpression(), null, "right", null, 0, 1, StartsWithExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(endsWithExpressionEClass, EndsWithExpression.class, "EndsWithExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEndsWithExpression_Left(), this.getExpression(), null, "left", null, 0, 1, EndsWithExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEndsWithExpression_Right(), this.getExpression(), null, "right", null, 0, 1, EndsWithExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(containsExpressionEClass, ContainsExpression.class, "ContainsExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getContainsExpression_Left(), this.getExpression(), null, "left", null, 0, 1, ContainsExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getContainsExpression_Right(), this.getExpression(), null, "right", null, 0, 1, ContainsExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(isNullExpressionEClass, IsNullExpression.class, "IsNullExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIsNullExpression_Left(), this.getExpression(), null, "left", null, 0, 1, IsNullExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(isNotNullExpressionEClass, IsNotNullExpression.class, "IsNotNullExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIsNotNullExpression_Left(), this.getExpression(), null, "left", null, 0, 1, IsNotNullExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionPropertyLookupEClass, ExpressionPropertyLookup.class, "ExpressionPropertyLookup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionPropertyLookup_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionPropertyLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionPropertyLookup_PropertyLookups(), this.getPropertyLookup(), null, "propertyLookups", null, 0, -1, ExpressionPropertyLookup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expressionNodeLabelsEClass, ExpressionNodeLabels.class, "ExpressionNodeLabels", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionNodeLabels_Left(), this.getExpression(), null, "left", null, 0, 1, ExpressionNodeLabels.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpressionNodeLabels_NodeLabels(), this.getNodeLabel(), null, "nodeLabels", null, 0, -1, ExpressionNodeLabels.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberConstantEClass, NumberConstant.class, "NumberConstant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumberConstant_Value(), ecorePackage.getEString(), "value", null, 0, 1, NumberConstant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stringConstantEClass, StringConstant.class, "StringConstant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStringConstant_Value(), ecorePackage.getEString(), "value", null, 0, 1, StringConstant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boolConstantEClass, BoolConstant.class, "BoolConstant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBoolConstant_Value(), ecorePackage.getEString(), "value", null, 0, 1, BoolConstant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nullConstantEClass, NullConstant.class, "NullConstant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(countEClass, Count.class, "Count", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionListEClass, ExpressionList.class, "ExpressionList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpressionList_Expressions(), this.getExpression(), null, "expressions", null, 0, -1, ExpressionList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(extractEClass, Extract.class, "Extract", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExtract_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, Extract.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExtract_Expression(), this.getExpression(), null, "expression", null, 0, 1, Extract.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(filterEClass, Filter.class, "Filter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFilter_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, Filter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(allEClass, All.class, "All", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAll_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, All.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(anyEClass, Any.class, "Any", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAny_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, Any.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(noneEClass, None.class, "None", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNone_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, None.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleEClass, Single.class, "Single", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSingle_FilterExpression(), this.getFilterExpression(), null, "filterExpression", null, 0, 1, Single.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableRefEClass, VariableRef.class, "VariableRef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableRef_VariableRef(), this.getVariableDeclaration(), null, "variableRef", null, 0, 1, VariableRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //OpenCypherPackageImpl
