package org.slizaa.neo4j.opencypher.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.slizaa.neo4j.opencypher.services.OpenCypherGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalOpenCypherParser extends AbstractInternalContentAssistParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLSHORTESTPATHS", "FIELDTERMINATOR", "RELATIONSHIP", "SHORTESTPATH", "CONSTRAINT", "DESCENDING", "ASCENDING", "CONTAINS", "DISTINCT", "OPTIONAL", "PERIODIC", "EXPLAIN", "EXTRACT", "FOREACH", "HEADERS", "PROFILE", "ASSERT", "COMMIT", "CREATE", "CYPHER", "DELETE", "DETACH", "EXISTS", "FILTER", "REDUCE", "REMOVE", "RETURN", "SINGLE", "STARTS", "UNIQUE", "UNWIND", "COUNT", "FALSE", "INDEX", "LIMIT", "MATCH", "MERGE", "ORDER", "START", "UNION", "USING", "WHERE", "YIELD", "CALL", "CASE", "DESC", "DROP", "ELSE", "ENDS", "FROM", "JOIN", "LOAD", "NODE", "NONE", "NULL", "SCAN", "SKIP", "THEN", "TRUE", "WHEN", "WITH", "ALL", "AND", "ANY", "ASC", "CSV", "END", "NOT", "REL", "SET", "XOR", "PlusSignEqualsSign", "FullStopFullStop", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignTilde", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "ExclamationMark", "DollarSign", "PercentSign", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_STRING_LITERAL", "RULE_HEX", "RULE_INT", "RULE_DECIMAL"
    };
    public static final int LessThanSignGreaterThanSign=78;
    public static final int RULE_HEX=115;
    public static final int CREATE=22;
    public static final int JOIN=54;
    public static final int LessThanSign=100;
    public static final int WHEN=63;
    public static final int LeftParenthesis=90;
    public static final int EXPLAIN=15;
    public static final int PERIODIC=14;
    public static final int ELSE=51;
    public static final int EqualsSignTilde=79;
    public static final int NONE=57;
    public static final int ExclamationMark=87;
    public static final int GreaterThanSign=102;
    public static final int RULE_ID=110;
    public static final int IN=83;
    public static final int NODE=56;
    public static final int DISTINCT=12;
    public static final int IS=84;
    public static final int WHERE=45;
    public static final int CASE=48;
    public static final int GreaterThanSignEqualsSign=80;
    public static final int FIELDTERMINATOR=5;
    public static final int STARTS=32;
    public static final int AS=81;
    public static final int VerticalLine=108;
    public static final int PlusSign=93;
    public static final int RULE_INT=116;
    public static final int RULE_ML_COMMENT=111;
    public static final int COUNT=35;
    public static final int THEN=61;
    public static final int XOR=74;
    public static final int LeftSquareBracket=104;
    public static final int CALL=47;
    public static final int SET=73;
    public static final int MERGE=40;
    public static final int CONSTRAINT=8;
    public static final int FOREACH=17;
    public static final int ORDER=41;
    public static final int ASC=68;
    public static final int Comma=94;
    public static final int DELETE=24;
    public static final int HyphenMinus=95;
    public static final int HEADERS=18;
    public static final int BY=82;
    public static final int REMOVE=29;
    public static final int SKIP=60;
    public static final int SCAN=59;
    public static final int LessThanSignEqualsSign=77;
    public static final int Solidus=97;
    public static final int RightCurlyBracket=109;
    public static final int UNWIND=34;
    public static final int FullStop=96;
    public static final int YIELD=46;
    public static final int DETACH=25;
    public static final int Semicolon=99;
    public static final int ASCENDING=10;
    public static final int QuestionMark=103;
    public static final int SHORTESTPATH=7;
    public static final int REL=72;
    public static final int CYPHER=23;
    public static final int UNION=43;
    public static final int ALL=65;
    public static final int SINGLE=31;
    public static final int FROM=53;
    public static final int DESC=49;
    public static final int OPTIONAL=13;
    public static final int PercentSign=89;
    public static final int ALLSHORTESTPATHS=4;
    public static final int FullStopFullStop=76;
    public static final int DESCENDING=9;
    public static final int INDEX=37;
    public static final int RightSquareBracket=105;
    public static final int EXTRACT=16;
    public static final int NULL=58;
    public static final int UNIQUE=33;
    public static final int RightParenthesis=91;
    public static final int TRUE=62;
    public static final int USING=44;
    public static final int RULE_DECIMAL=117;
    public static final int NOT=71;
    public static final int AND=66;
    public static final int END=70;
    public static final int RELATIONSHIP=6;
    public static final int REDUCE=28;
    public static final int LOAD=55;
    public static final int LIMIT=38;
    public static final int CONTAINS=11;
    public static final int ANY=67;
    public static final int RULE_STRING_LITERAL=114;
    public static final int DROP=50;
    public static final int RULE_SL_COMMENT=112;
    public static final int RETURN=30;
    public static final int EqualsSign=101;
    public static final int PROFILE=19;
    public static final int ENDS=52;
    public static final int Colon=98;
    public static final int EOF=-1;
    public static final int Asterisk=92;
    public static final int PlusSignEqualsSign=75;
    public static final int ON=85;
    public static final int FILTER=27;
    public static final int OR=86;
    public static final int EXISTS=26;
    public static final int ASSERT=20;
    public static final int COMMIT=21;
    public static final int RULE_WS=113;
    public static final int CSV=69;
    public static final int LeftCurlyBracket=107;
    public static final int WITH=64;
    public static final int CircumflexAccent=106;
    public static final int DollarSign=88;
    public static final int FALSE=36;
    public static final int START=42;
    public static final int MATCH=39;

    // delegates
    // delegators


        public InternalOpenCypherParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalOpenCypherParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalOpenCypherParser.tokenNames; }
    public String getGrammarFileName() { return "InternalOpenCypherParser.g"; }


    	private OpenCypherGrammarAccess grammarAccess;
    	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
    	
    	{
    		tokenNameToValue.put("ExclamationMark", "'!'");
    		tokenNameToValue.put("DollarSign", "'\\u0024'");
    		tokenNameToValue.put("PercentSign", "'%'");
    		tokenNameToValue.put("LeftParenthesis", "'('");
    		tokenNameToValue.put("RightParenthesis", "')'");
    		tokenNameToValue.put("Asterisk", "'*'");
    		tokenNameToValue.put("PlusSign", "'+'");
    		tokenNameToValue.put("Comma", "','");
    		tokenNameToValue.put("HyphenMinus", "'-'");
    		tokenNameToValue.put("FullStop", "'.'");
    		tokenNameToValue.put("Solidus", "'/'");
    		tokenNameToValue.put("Colon", "':'");
    		tokenNameToValue.put("Semicolon", "';'");
    		tokenNameToValue.put("LessThanSign", "'<'");
    		tokenNameToValue.put("EqualsSign", "'='");
    		tokenNameToValue.put("GreaterThanSign", "'>'");
    		tokenNameToValue.put("QuestionMark", "'?'");
    		tokenNameToValue.put("LeftSquareBracket", "'['");
    		tokenNameToValue.put("RightSquareBracket", "']'");
    		tokenNameToValue.put("CircumflexAccent", "'^'");
    		tokenNameToValue.put("LeftCurlyBracket", "'{'");
    		tokenNameToValue.put("VerticalLine", "'|'");
    		tokenNameToValue.put("RightCurlyBracket", "'}'");
    		tokenNameToValue.put("PlusSignEqualsSign", "'+='");
    		tokenNameToValue.put("FullStopFullStop", "'..'");
    		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
    		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
    		tokenNameToValue.put("EqualsSignTilde", "'=~'");
    		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
    		tokenNameToValue.put("AS", "'AS'");
    		tokenNameToValue.put("BY", "'BY'");
    		tokenNameToValue.put("IN", "'IN'");
    		tokenNameToValue.put("IS", "'IS'");
    		tokenNameToValue.put("ON", "'ON'");
    		tokenNameToValue.put("OR", "'OR'");
    		tokenNameToValue.put("ALL", "'ALL'");
    		tokenNameToValue.put("AND", "'AND'");
    		tokenNameToValue.put("ANY", "'ANY'");
    		tokenNameToValue.put("ASC", "'ASC'");
    		tokenNameToValue.put("CSV", "'CSV'");
    		tokenNameToValue.put("END", "'END'");
    		tokenNameToValue.put("NOT", "'NOT'");
    		tokenNameToValue.put("REL", "'REL'");
    		tokenNameToValue.put("SET", "'SET'");
    		tokenNameToValue.put("XOR", "'XOR'");
    		tokenNameToValue.put("CALL", "'CALL'");
    		tokenNameToValue.put("CASE", "'CASE'");
    		tokenNameToValue.put("DESC", "'DESC'");
    		tokenNameToValue.put("DROP", "'DROP'");
    		tokenNameToValue.put("ELSE", "'ELSE'");
    		tokenNameToValue.put("ENDS", "'ENDS'");
    		tokenNameToValue.put("FROM", "'FROM'");
    		tokenNameToValue.put("JOIN", "'JOIN'");
    		tokenNameToValue.put("LOAD", "'LOAD'");
    		tokenNameToValue.put("NODE", "'NODE'");
    		tokenNameToValue.put("NONE", "'NONE'");
    		tokenNameToValue.put("NULL", "'NULL'");
    		tokenNameToValue.put("SCAN", "'SCAN'");
    		tokenNameToValue.put("SKIP", "'SKIP'");
    		tokenNameToValue.put("THEN", "'THEN'");
    		tokenNameToValue.put("TRUE", "'TRUE'");
    		tokenNameToValue.put("WHEN", "'WHEN'");
    		tokenNameToValue.put("WITH", "'WITH'");
    		tokenNameToValue.put("COUNT", "'COUNT'");
    		tokenNameToValue.put("FALSE", "'FALSE'");
    		tokenNameToValue.put("INDEX", "'INDEX'");
    		tokenNameToValue.put("LIMIT", "'LIMIT'");
    		tokenNameToValue.put("MATCH", "'MATCH'");
    		tokenNameToValue.put("MERGE", "'MERGE'");
    		tokenNameToValue.put("ORDER", "'ORDER'");
    		tokenNameToValue.put("START", "'START'");
    		tokenNameToValue.put("UNION", "'UNION'");
    		tokenNameToValue.put("USING", "'USING'");
    		tokenNameToValue.put("WHERE", "'WHERE'");
    		tokenNameToValue.put("YIELD", "'YIELD'");
    		tokenNameToValue.put("ASSERT", "'ASSERT'");
    		tokenNameToValue.put("COMMIT", "'COMMIT'");
    		tokenNameToValue.put("CREATE", "'CREATE'");
    		tokenNameToValue.put("CYPHER", "'CYPHER'");
    		tokenNameToValue.put("DELETE", "'DELETE'");
    		tokenNameToValue.put("DETACH", "'DETACH'");
    		tokenNameToValue.put("EXISTS", "'EXISTS'");
    		tokenNameToValue.put("FILTER", "'FILTER'");
    		tokenNameToValue.put("REDUCE", "'REDUCE'");
    		tokenNameToValue.put("REMOVE", "'REMOVE'");
    		tokenNameToValue.put("RETURN", "'RETURN'");
    		tokenNameToValue.put("SINGLE", "'SINGLE'");
    		tokenNameToValue.put("STARTS", "'STARTS'");
    		tokenNameToValue.put("UNIQUE", "'UNIQUE'");
    		tokenNameToValue.put("UNWIND", "'UNWIND'");
    		tokenNameToValue.put("EXPLAIN", "'EXPLAIN'");
    		tokenNameToValue.put("EXTRACT", "'EXTRACT'");
    		tokenNameToValue.put("FOREACH", "'FOREACH'");
    		tokenNameToValue.put("HEADERS", "'HEADERS'");
    		tokenNameToValue.put("PROFILE", "'PROFILE'");
    		tokenNameToValue.put("CONTAINS", "'CONTAINS'");
    		tokenNameToValue.put("DISTINCT", "'DISTINCT'");
    		tokenNameToValue.put("OPTIONAL", "'OPTIONAL'");
    		tokenNameToValue.put("PERIODIC", "'PERIODIC'");
    		tokenNameToValue.put("ASCENDING", "'ASCENDING'");
    		tokenNameToValue.put("CONSTRAINT", "'CONSTRAINT'");
    		tokenNameToValue.put("DESCENDING", "'DESCENDING'");
    		tokenNameToValue.put("RELATIONSHIP", "'RELATIONSHIP'");
    		tokenNameToValue.put("SHORTESTPATH", "'SHORTESTPATH'");
    		tokenNameToValue.put("FIELDTERMINATOR", "'FIELDTERMINATOR'");
    		tokenNameToValue.put("ALLSHORTESTPATHS", "'ALLSHORTESTPATHS'");
    	}

    	public void setGrammarAccess(OpenCypherGrammarAccess grammarAccess) {
    		this.grammarAccess = grammarAccess;
    	}

    	@Override
    	protected Grammar getGrammar() {
    		return grammarAccess.getGrammar();
    	}

    	@Override
    	protected String getValueForTokenName(String tokenName) {
    		String result = tokenNameToValue.get(tokenName);
    		if (result == null)
    			result = tokenName;
    		return result;
    	}



    // $ANTLR start "entryRuleCypher"
    // InternalOpenCypherParser.g:162:1: entryRuleCypher : ruleCypher EOF ;
    public final void entryRuleCypher() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:163:1: ( ruleCypher EOF )
            // InternalOpenCypherParser.g:164:1: ruleCypher EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCypher();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCypher"


    // $ANTLR start "ruleCypher"
    // InternalOpenCypherParser.g:171:1: ruleCypher : ( ( rule__Cypher__Group__0 ) ) ;
    public final void ruleCypher() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:175:2: ( ( ( rule__Cypher__Group__0 ) ) )
            // InternalOpenCypherParser.g:176:2: ( ( rule__Cypher__Group__0 ) )
            {
            // InternalOpenCypherParser.g:176:2: ( ( rule__Cypher__Group__0 ) )
            // InternalOpenCypherParser.g:177:3: ( rule__Cypher__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:178:3: ( rule__Cypher__Group__0 )
            // InternalOpenCypherParser.g:178:4: rule__Cypher__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCypher"


    // $ANTLR start "entryRuleQueryOptions"
    // InternalOpenCypherParser.g:187:1: entryRuleQueryOptions : ruleQueryOptions EOF ;
    public final void entryRuleQueryOptions() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:188:1: ( ruleQueryOptions EOF )
            // InternalOpenCypherParser.g:189:1: ruleQueryOptions EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQueryOptions();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleQueryOptions"


    // $ANTLR start "ruleQueryOptions"
    // InternalOpenCypherParser.g:196:1: ruleQueryOptions : ( ( rule__QueryOptions__Group__0 ) ) ;
    public final void ruleQueryOptions() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:200:2: ( ( ( rule__QueryOptions__Group__0 ) ) )
            // InternalOpenCypherParser.g:201:2: ( ( rule__QueryOptions__Group__0 ) )
            {
            // InternalOpenCypherParser.g:201:2: ( ( rule__QueryOptions__Group__0 ) )
            // InternalOpenCypherParser.g:202:3: ( rule__QueryOptions__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:203:3: ( rule__QueryOptions__Group__0 )
            // InternalOpenCypherParser.g:203:4: rule__QueryOptions__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleQueryOptions"


    // $ANTLR start "entryRuleCypherOption"
    // InternalOpenCypherParser.g:212:1: entryRuleCypherOption : ruleCypherOption EOF ;
    public final void entryRuleCypherOption() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:213:1: ( ruleCypherOption EOF )
            // InternalOpenCypherParser.g:214:1: ruleCypherOption EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCypherOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCypherOption"


    // $ANTLR start "ruleCypherOption"
    // InternalOpenCypherParser.g:221:1: ruleCypherOption : ( ( rule__CypherOption__Group__0 ) ) ;
    public final void ruleCypherOption() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:225:2: ( ( ( rule__CypherOption__Group__0 ) ) )
            // InternalOpenCypherParser.g:226:2: ( ( rule__CypherOption__Group__0 ) )
            {
            // InternalOpenCypherParser.g:226:2: ( ( rule__CypherOption__Group__0 ) )
            // InternalOpenCypherParser.g:227:3: ( rule__CypherOption__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:228:3: ( rule__CypherOption__Group__0 )
            // InternalOpenCypherParser.g:228:4: rule__CypherOption__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCypherOption"


    // $ANTLR start "entryRuleVersionNumber"
    // InternalOpenCypherParser.g:237:1: entryRuleVersionNumber : ruleVersionNumber EOF ;
    public final void entryRuleVersionNumber() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:238:1: ( ruleVersionNumber EOF )
            // InternalOpenCypherParser.g:239:1: ruleVersionNumber EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVersionNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleVersionNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVersionNumberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleVersionNumber"


    // $ANTLR start "ruleVersionNumber"
    // InternalOpenCypherParser.g:246:1: ruleVersionNumber : ( ( rule__VersionNumber__VersionNumberAssignment ) ) ;
    public final void ruleVersionNumber() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:250:2: ( ( ( rule__VersionNumber__VersionNumberAssignment ) ) )
            // InternalOpenCypherParser.g:251:2: ( ( rule__VersionNumber__VersionNumberAssignment ) )
            {
            // InternalOpenCypherParser.g:251:2: ( ( rule__VersionNumber__VersionNumberAssignment ) )
            // InternalOpenCypherParser.g:252:3: ( rule__VersionNumber__VersionNumberAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment()); 
            }
            // InternalOpenCypherParser.g:253:3: ( rule__VersionNumber__VersionNumberAssignment )
            // InternalOpenCypherParser.g:253:4: rule__VersionNumber__VersionNumberAssignment
            {
            pushFollow(FOLLOW_2);
            rule__VersionNumber__VersionNumberAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVersionNumberAccess().getVersionNumberAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleVersionNumber"


    // $ANTLR start "entryRuleConfigurationOption"
    // InternalOpenCypherParser.g:262:1: entryRuleConfigurationOption : ruleConfigurationOption EOF ;
    public final void entryRuleConfigurationOption() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:263:1: ( ruleConfigurationOption EOF )
            // InternalOpenCypherParser.g:264:1: ruleConfigurationOption EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleConfigurationOption"


    // $ANTLR start "ruleConfigurationOption"
    // InternalOpenCypherParser.g:271:1: ruleConfigurationOption : ( ( rule__ConfigurationOption__Group__0 ) ) ;
    public final void ruleConfigurationOption() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:275:2: ( ( ( rule__ConfigurationOption__Group__0 ) ) )
            // InternalOpenCypherParser.g:276:2: ( ( rule__ConfigurationOption__Group__0 ) )
            {
            // InternalOpenCypherParser.g:276:2: ( ( rule__ConfigurationOption__Group__0 ) )
            // InternalOpenCypherParser.g:277:3: ( rule__ConfigurationOption__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:278:3: ( rule__ConfigurationOption__Group__0 )
            // InternalOpenCypherParser.g:278:4: rule__ConfigurationOption__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleConfigurationOption"


    // $ANTLR start "entryRuleStatement"
    // InternalOpenCypherParser.g:287:1: entryRuleStatement : ruleStatement EOF ;
    public final void entryRuleStatement() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:288:1: ( ruleStatement EOF )
            // InternalOpenCypherParser.g:289:1: ruleStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStatement"


    // $ANTLR start "ruleStatement"
    // InternalOpenCypherParser.g:296:1: ruleStatement : ( ( rule__Statement__Alternatives ) ) ;
    public final void ruleStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:300:2: ( ( ( rule__Statement__Alternatives ) ) )
            // InternalOpenCypherParser.g:301:2: ( ( rule__Statement__Alternatives ) )
            {
            // InternalOpenCypherParser.g:301:2: ( ( rule__Statement__Alternatives ) )
            // InternalOpenCypherParser.g:302:3: ( rule__Statement__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStatementAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:303:3: ( rule__Statement__Alternatives )
            // InternalOpenCypherParser.g:303:4: rule__Statement__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Statement__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStatementAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStatement"


    // $ANTLR start "entryRuleQuery"
    // InternalOpenCypherParser.g:312:1: entryRuleQuery : ruleQuery EOF ;
    public final void entryRuleQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:313:1: ( ruleQuery EOF )
            // InternalOpenCypherParser.g:314:1: ruleQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleQuery"


    // $ANTLR start "ruleQuery"
    // InternalOpenCypherParser.g:321:1: ruleQuery : ( ( rule__Query__Alternatives ) ) ;
    public final void ruleQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:325:2: ( ( ( rule__Query__Alternatives ) ) )
            // InternalOpenCypherParser.g:326:2: ( ( rule__Query__Alternatives ) )
            {
            // InternalOpenCypherParser.g:326:2: ( ( rule__Query__Alternatives ) )
            // InternalOpenCypherParser.g:327:3: ( rule__Query__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:328:3: ( rule__Query__Alternatives )
            // InternalOpenCypherParser.g:328:4: rule__Query__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Query__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleQuery"


    // $ANTLR start "entryRuleRegularQuery"
    // InternalOpenCypherParser.g:337:1: entryRuleRegularQuery : ruleRegularQuery EOF ;
    public final void entryRuleRegularQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:338:1: ( ruleRegularQuery EOF )
            // InternalOpenCypherParser.g:339:1: ruleRegularQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRegularQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRegularQuery"


    // $ANTLR start "ruleRegularQuery"
    // InternalOpenCypherParser.g:346:1: ruleRegularQuery : ( ( rule__RegularQuery__Group__0 ) ) ;
    public final void ruleRegularQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:350:2: ( ( ( rule__RegularQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:351:2: ( ( rule__RegularQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:351:2: ( ( rule__RegularQuery__Group__0 ) )
            // InternalOpenCypherParser.g:352:3: ( rule__RegularQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:353:3: ( rule__RegularQuery__Group__0 )
            // InternalOpenCypherParser.g:353:4: rule__RegularQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRegularQuery"


    // $ANTLR start "entryRuleBulkImportQuery"
    // InternalOpenCypherParser.g:362:1: entryRuleBulkImportQuery : ruleBulkImportQuery EOF ;
    public final void entryRuleBulkImportQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:363:1: ( ruleBulkImportQuery EOF )
            // InternalOpenCypherParser.g:364:1: ruleBulkImportQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleBulkImportQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBulkImportQuery"


    // $ANTLR start "ruleBulkImportQuery"
    // InternalOpenCypherParser.g:371:1: ruleBulkImportQuery : ( ( rule__BulkImportQuery__Group__0 ) ) ;
    public final void ruleBulkImportQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:375:2: ( ( ( rule__BulkImportQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:376:2: ( ( rule__BulkImportQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:376:2: ( ( rule__BulkImportQuery__Group__0 ) )
            // InternalOpenCypherParser.g:377:3: ( rule__BulkImportQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:378:3: ( rule__BulkImportQuery__Group__0 )
            // InternalOpenCypherParser.g:378:4: rule__BulkImportQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBulkImportQuery"


    // $ANTLR start "entryRuleSingleQuery"
    // InternalOpenCypherParser.g:387:1: entryRuleSingleQuery : ruleSingleQuery EOF ;
    public final void entryRuleSingleQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:388:1: ( ruleSingleQuery EOF )
            // InternalOpenCypherParser.g:389:1: ruleSingleQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSingleQuery"


    // $ANTLR start "ruleSingleQuery"
    // InternalOpenCypherParser.g:396:1: ruleSingleQuery : ( ( rule__SingleQuery__Group__0 ) ) ;
    public final void ruleSingleQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:400:2: ( ( ( rule__SingleQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:401:2: ( ( rule__SingleQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:401:2: ( ( rule__SingleQuery__Group__0 ) )
            // InternalOpenCypherParser.g:402:3: ( rule__SingleQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:403:3: ( rule__SingleQuery__Group__0 )
            // InternalOpenCypherParser.g:403:4: rule__SingleQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SingleQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSingleQuery"


    // $ANTLR start "entryRulePeriodicCommitHint"
    // InternalOpenCypherParser.g:412:1: entryRulePeriodicCommitHint : rulePeriodicCommitHint EOF ;
    public final void entryRulePeriodicCommitHint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:413:1: ( rulePeriodicCommitHint EOF )
            // InternalOpenCypherParser.g:414:1: rulePeriodicCommitHint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePeriodicCommitHint"


    // $ANTLR start "rulePeriodicCommitHint"
    // InternalOpenCypherParser.g:421:1: rulePeriodicCommitHint : ( ( rule__PeriodicCommitHint__Group__0 ) ) ;
    public final void rulePeriodicCommitHint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:425:2: ( ( ( rule__PeriodicCommitHint__Group__0 ) ) )
            // InternalOpenCypherParser.g:426:2: ( ( rule__PeriodicCommitHint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:426:2: ( ( rule__PeriodicCommitHint__Group__0 ) )
            // InternalOpenCypherParser.g:427:3: ( rule__PeriodicCommitHint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:428:3: ( rule__PeriodicCommitHint__Group__0 )
            // InternalOpenCypherParser.g:428:4: rule__PeriodicCommitHint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePeriodicCommitHint"


    // $ANTLR start "entryRuleLoadCSVQuery"
    // InternalOpenCypherParser.g:437:1: entryRuleLoadCSVQuery : ruleLoadCSVQuery EOF ;
    public final void entryRuleLoadCSVQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:438:1: ( ruleLoadCSVQuery EOF )
            // InternalOpenCypherParser.g:439:1: ruleLoadCSVQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadCSVQuery"


    // $ANTLR start "ruleLoadCSVQuery"
    // InternalOpenCypherParser.g:446:1: ruleLoadCSVQuery : ( ( rule__LoadCSVQuery__Group__0 ) ) ;
    public final void ruleLoadCSVQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:450:2: ( ( ( rule__LoadCSVQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:451:2: ( ( rule__LoadCSVQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:451:2: ( ( rule__LoadCSVQuery__Group__0 ) )
            // InternalOpenCypherParser.g:452:3: ( rule__LoadCSVQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:453:3: ( rule__LoadCSVQuery__Group__0 )
            // InternalOpenCypherParser.g:453:4: rule__LoadCSVQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadCSVQuery"


    // $ANTLR start "entryRuleUnion"
    // InternalOpenCypherParser.g:462:1: entryRuleUnion : ruleUnion EOF ;
    public final void entryRuleUnion() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:463:1: ( ruleUnion EOF )
            // InternalOpenCypherParser.g:464:1: ruleUnion EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUnion();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUnion"


    // $ANTLR start "ruleUnion"
    // InternalOpenCypherParser.g:471:1: ruleUnion : ( ( rule__Union__Group__0 ) ) ;
    public final void ruleUnion() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:475:2: ( ( ( rule__Union__Group__0 ) ) )
            // InternalOpenCypherParser.g:476:2: ( ( rule__Union__Group__0 ) )
            {
            // InternalOpenCypherParser.g:476:2: ( ( rule__Union__Group__0 ) )
            // InternalOpenCypherParser.g:477:3: ( rule__Union__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:478:3: ( rule__Union__Group__0 )
            // InternalOpenCypherParser.g:478:4: rule__Union__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Union__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUnion"


    // $ANTLR start "entryRuleClause"
    // InternalOpenCypherParser.g:487:1: entryRuleClause : ruleClause EOF ;
    public final void entryRuleClause() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:488:1: ( ruleClause EOF )
            // InternalOpenCypherParser.g:489:1: ruleClause EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getClauseRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleClause"


    // $ANTLR start "ruleClause"
    // InternalOpenCypherParser.g:496:1: ruleClause : ( ( rule__Clause__Alternatives ) ) ;
    public final void ruleClause() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:500:2: ( ( ( rule__Clause__Alternatives ) ) )
            // InternalOpenCypherParser.g:501:2: ( ( rule__Clause__Alternatives ) )
            {
            // InternalOpenCypherParser.g:501:2: ( ( rule__Clause__Alternatives ) )
            // InternalOpenCypherParser.g:502:3: ( rule__Clause__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getClauseAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:503:3: ( rule__Clause__Alternatives )
            // InternalOpenCypherParser.g:503:4: rule__Clause__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Clause__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getClauseAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleClause"


    // $ANTLR start "entryRuleCommand"
    // InternalOpenCypherParser.g:512:1: entryRuleCommand : ruleCommand EOF ;
    public final void entryRuleCommand() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:513:1: ( ruleCommand EOF )
            // InternalOpenCypherParser.g:514:1: ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCommand();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCommandRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalOpenCypherParser.g:521:1: ruleCommand : ( ( rule__Command__Alternatives ) ) ;
    public final void ruleCommand() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:525:2: ( ( ( rule__Command__Alternatives ) ) )
            // InternalOpenCypherParser.g:526:2: ( ( rule__Command__Alternatives ) )
            {
            // InternalOpenCypherParser.g:526:2: ( ( rule__Command__Alternatives ) )
            // InternalOpenCypherParser.g:527:3: ( rule__Command__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCommandAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:528:3: ( rule__Command__Alternatives )
            // InternalOpenCypherParser.g:528:4: rule__Command__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Command__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCommandAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRuleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:537:1: entryRuleCreateUniqueConstraint : ruleCreateUniqueConstraint EOF ;
    public final void entryRuleCreateUniqueConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:538:1: ( ruleCreateUniqueConstraint EOF )
            // InternalOpenCypherParser.g:539:1: ruleCreateUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateUniqueConstraint"


    // $ANTLR start "ruleCreateUniqueConstraint"
    // InternalOpenCypherParser.g:546:1: ruleCreateUniqueConstraint : ( ( rule__CreateUniqueConstraint__Group__0 ) ) ;
    public final void ruleCreateUniqueConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:550:2: ( ( ( rule__CreateUniqueConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:551:2: ( ( rule__CreateUniqueConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:551:2: ( ( rule__CreateUniqueConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:552:3: ( rule__CreateUniqueConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:553:3: ( rule__CreateUniqueConstraint__Group__0 )
            // InternalOpenCypherParser.g:553:4: rule__CreateUniqueConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateUniqueConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateUniqueConstraint"


    // $ANTLR start "entryRuleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:562:1: entryRuleCreateNodePropertyExistenceConstraint : ruleCreateNodePropertyExistenceConstraint EOF ;
    public final void entryRuleCreateNodePropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:563:1: ( ruleCreateNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:564:1: ruleCreateNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "ruleCreateNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:571:1: ruleCreateNodePropertyExistenceConstraint : ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleCreateNodePropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:575:2: ( ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:576:2: ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:576:2: ( ( rule__CreateNodePropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:577:3: ( rule__CreateNodePropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:578:3: ( rule__CreateNodePropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:578:4: rule__CreateNodePropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateNodePropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:587:1: entryRuleCreateRelationshipPropertyExistenceConstraint : ruleCreateRelationshipPropertyExistenceConstraint EOF ;
    public final void entryRuleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:588:1: ( ruleCreateRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:589:1: ruleCreateRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleCreateRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:596:1: ruleCreateRelationshipPropertyExistenceConstraint : ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleCreateRelationshipPropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:600:2: ( ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:601:2: ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:601:2: ( ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:602:3: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:603:3: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:603:4: rule__CreateRelationshipPropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleCreateIndex"
    // InternalOpenCypherParser.g:612:1: entryRuleCreateIndex : ruleCreateIndex EOF ;
    public final void entryRuleCreateIndex() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:613:1: ( ruleCreateIndex EOF )
            // InternalOpenCypherParser.g:614:1: ruleCreateIndex EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreateIndex"


    // $ANTLR start "ruleCreateIndex"
    // InternalOpenCypherParser.g:621:1: ruleCreateIndex : ( ( rule__CreateIndex__Group__0 ) ) ;
    public final void ruleCreateIndex() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:625:2: ( ( ( rule__CreateIndex__Group__0 ) ) )
            // InternalOpenCypherParser.g:626:2: ( ( rule__CreateIndex__Group__0 ) )
            {
            // InternalOpenCypherParser.g:626:2: ( ( rule__CreateIndex__Group__0 ) )
            // InternalOpenCypherParser.g:627:3: ( rule__CreateIndex__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:628:3: ( rule__CreateIndex__Group__0 )
            // InternalOpenCypherParser.g:628:4: rule__CreateIndex__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CreateIndex__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreateIndex"


    // $ANTLR start "entryRuleDropUniqueConstraint"
    // InternalOpenCypherParser.g:637:1: entryRuleDropUniqueConstraint : ruleDropUniqueConstraint EOF ;
    public final void entryRuleDropUniqueConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:638:1: ( ruleDropUniqueConstraint EOF )
            // InternalOpenCypherParser.g:639:1: ruleDropUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropUniqueConstraint"


    // $ANTLR start "ruleDropUniqueConstraint"
    // InternalOpenCypherParser.g:646:1: ruleDropUniqueConstraint : ( ( rule__DropUniqueConstraint__Group__0 ) ) ;
    public final void ruleDropUniqueConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:650:2: ( ( ( rule__DropUniqueConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:651:2: ( ( rule__DropUniqueConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:651:2: ( ( rule__DropUniqueConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:652:3: ( rule__DropUniqueConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:653:3: ( rule__DropUniqueConstraint__Group__0 )
            // InternalOpenCypherParser.g:653:4: rule__DropUniqueConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropUniqueConstraint"


    // $ANTLR start "entryRuleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:662:1: entryRuleDropNodePropertyExistenceConstraint : ruleDropNodePropertyExistenceConstraint EOF ;
    public final void entryRuleDropNodePropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:663:1: ( ruleDropNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:664:1: ruleDropNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropNodePropertyExistenceConstraint"


    // $ANTLR start "ruleDropNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:671:1: ruleDropNodePropertyExistenceConstraint : ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleDropNodePropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:675:2: ( ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:676:2: ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:676:2: ( ( rule__DropNodePropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:677:3: ( rule__DropNodePropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:678:3: ( rule__DropNodePropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:678:4: rule__DropNodePropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:687:1: entryRuleDropRelationshipPropertyExistenceConstraint : ruleDropRelationshipPropertyExistenceConstraint EOF ;
    public final void entryRuleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:688:1: ( ruleDropRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:689:1: ruleDropRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleDropRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:696:1: ruleDropRelationshipPropertyExistenceConstraint : ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleDropRelationshipPropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:700:2: ( ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:701:2: ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:701:2: ( ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:702:3: ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:703:3: ( rule__DropRelationshipPropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:703:4: rule__DropRelationshipPropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleDropIndex"
    // InternalOpenCypherParser.g:712:1: entryRuleDropIndex : ruleDropIndex EOF ;
    public final void entryRuleDropIndex() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:713:1: ( ruleDropIndex EOF )
            // InternalOpenCypherParser.g:714:1: ruleDropIndex EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDropIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDropIndex"


    // $ANTLR start "ruleDropIndex"
    // InternalOpenCypherParser.g:721:1: ruleDropIndex : ( ( rule__DropIndex__Group__0 ) ) ;
    public final void ruleDropIndex() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:725:2: ( ( ( rule__DropIndex__Group__0 ) ) )
            // InternalOpenCypherParser.g:726:2: ( ( rule__DropIndex__Group__0 ) )
            {
            // InternalOpenCypherParser.g:726:2: ( ( rule__DropIndex__Group__0 ) )
            // InternalOpenCypherParser.g:727:3: ( rule__DropIndex__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:728:3: ( rule__DropIndex__Group__0 )
            // InternalOpenCypherParser.g:728:4: rule__DropIndex__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DropIndex__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDropIndex"


    // $ANTLR start "entryRuleIndex"
    // InternalOpenCypherParser.g:737:1: entryRuleIndex : ruleIndex EOF ;
    public final void entryRuleIndex() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:738:1: ( ruleIndex EOF )
            // InternalOpenCypherParser.g:739:1: ruleIndex EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIndex"


    // $ANTLR start "ruleIndex"
    // InternalOpenCypherParser.g:746:1: ruleIndex : ( ( rule__Index__Group__0 ) ) ;
    public final void ruleIndex() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:750:2: ( ( ( rule__Index__Group__0 ) ) )
            // InternalOpenCypherParser.g:751:2: ( ( rule__Index__Group__0 ) )
            {
            // InternalOpenCypherParser.g:751:2: ( ( rule__Index__Group__0 ) )
            // InternalOpenCypherParser.g:752:3: ( rule__Index__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:753:3: ( rule__Index__Group__0 )
            // InternalOpenCypherParser.g:753:4: rule__Index__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Index__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIndex"


    // $ANTLR start "entryRuleUniqueConstraint"
    // InternalOpenCypherParser.g:762:1: entryRuleUniqueConstraint : ruleUniqueConstraint EOF ;
    public final void entryRuleUniqueConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:763:1: ( ruleUniqueConstraint EOF )
            // InternalOpenCypherParser.g:764:1: ruleUniqueConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUniqueConstraint"


    // $ANTLR start "ruleUniqueConstraint"
    // InternalOpenCypherParser.g:771:1: ruleUniqueConstraint : ( ( rule__UniqueConstraint__Group__0 ) ) ;
    public final void ruleUniqueConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:775:2: ( ( ( rule__UniqueConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:776:2: ( ( rule__UniqueConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:776:2: ( ( rule__UniqueConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:777:3: ( rule__UniqueConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:778:3: ( rule__UniqueConstraint__Group__0 )
            // InternalOpenCypherParser.g:778:4: rule__UniqueConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUniqueConstraint"


    // $ANTLR start "entryRuleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:787:1: entryRuleNodePropertyExistenceConstraint : ruleNodePropertyExistenceConstraint EOF ;
    public final void entryRuleNodePropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:788:1: ( ruleNodePropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:789:1: ruleNodePropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodePropertyExistenceConstraint"


    // $ANTLR start "ruleNodePropertyExistenceConstraint"
    // InternalOpenCypherParser.g:796:1: ruleNodePropertyExistenceConstraint : ( ( rule__NodePropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleNodePropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:800:2: ( ( ( rule__NodePropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:801:2: ( ( rule__NodePropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:801:2: ( ( rule__NodePropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:802:3: ( rule__NodePropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:803:3: ( rule__NodePropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:803:4: rule__NodePropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodePropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:812:1: entryRuleRelationshipPropertyExistenceConstraint : ruleRelationshipPropertyExistenceConstraint EOF ;
    public final void entryRuleRelationshipPropertyExistenceConstraint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:813:1: ( ruleRelationshipPropertyExistenceConstraint EOF )
            // InternalOpenCypherParser.g:814:1: ruleRelationshipPropertyExistenceConstraint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "ruleRelationshipPropertyExistenceConstraint"
    // InternalOpenCypherParser.g:821:1: ruleRelationshipPropertyExistenceConstraint : ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) ) ;
    public final void ruleRelationshipPropertyExistenceConstraint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:825:2: ( ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) ) )
            // InternalOpenCypherParser.g:826:2: ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:826:2: ( ( rule__RelationshipPropertyExistenceConstraint__Group__0 ) )
            // InternalOpenCypherParser.g:827:3: ( rule__RelationshipPropertyExistenceConstraint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:828:3: ( rule__RelationshipPropertyExistenceConstraint__Group__0 )
            // InternalOpenCypherParser.g:828:4: rule__RelationshipPropertyExistenceConstraint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipPropertyExistenceConstraint"


    // $ANTLR start "entryRuleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:837:1: entryRuleRelationshipPatternSyntax : ruleRelationshipPatternSyntax EOF ;
    public final void entryRuleRelationshipPatternSyntax() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:838:1: ( ruleRelationshipPatternSyntax EOF )
            // InternalOpenCypherParser.g:839:1: ruleRelationshipPatternSyntax EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipPatternSyntax"


    // $ANTLR start "ruleRelationshipPatternSyntax"
    // InternalOpenCypherParser.g:846:1: ruleRelationshipPatternSyntax : ( ( rule__RelationshipPatternSyntax__Group__0 ) ) ;
    public final void ruleRelationshipPatternSyntax() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:850:2: ( ( ( rule__RelationshipPatternSyntax__Group__0 ) ) )
            // InternalOpenCypherParser.g:851:2: ( ( rule__RelationshipPatternSyntax__Group__0 ) )
            {
            // InternalOpenCypherParser.g:851:2: ( ( rule__RelationshipPatternSyntax__Group__0 ) )
            // InternalOpenCypherParser.g:852:3: ( rule__RelationshipPatternSyntax__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:853:3: ( rule__RelationshipPatternSyntax__Group__0 )
            // InternalOpenCypherParser.g:853:4: rule__RelationshipPatternSyntax__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipPatternSyntax"


    // $ANTLR start "entryRuleLoadCSV"
    // InternalOpenCypherParser.g:862:1: entryRuleLoadCSV : ruleLoadCSV EOF ;
    public final void entryRuleLoadCSV() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:863:1: ( ruleLoadCSV EOF )
            // InternalOpenCypherParser.g:864:1: ruleLoadCSV EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLoadCSV();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadCSV"


    // $ANTLR start "ruleLoadCSV"
    // InternalOpenCypherParser.g:871:1: ruleLoadCSV : ( ( rule__LoadCSV__Group__0 ) ) ;
    public final void ruleLoadCSV() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:875:2: ( ( ( rule__LoadCSV__Group__0 ) ) )
            // InternalOpenCypherParser.g:876:2: ( ( rule__LoadCSV__Group__0 ) )
            {
            // InternalOpenCypherParser.g:876:2: ( ( rule__LoadCSV__Group__0 ) )
            // InternalOpenCypherParser.g:877:3: ( rule__LoadCSV__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:878:3: ( rule__LoadCSV__Group__0 )
            // InternalOpenCypherParser.g:878:4: rule__LoadCSV__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadCSV"


    // $ANTLR start "entryRuleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:887:1: entryRuleLoadCSVWithHeaders : ruleLoadCSVWithHeaders EOF ;
    public final void entryRuleLoadCSVWithHeaders() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:888:1: ( ruleLoadCSVWithHeaders EOF )
            // InternalOpenCypherParser.g:889:1: ruleLoadCSVWithHeaders EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLoadCSVWithHeaders"


    // $ANTLR start "ruleLoadCSVWithHeaders"
    // InternalOpenCypherParser.g:896:1: ruleLoadCSVWithHeaders : ( ( rule__LoadCSVWithHeaders__Group__0 ) ) ;
    public final void ruleLoadCSVWithHeaders() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:900:2: ( ( ( rule__LoadCSVWithHeaders__Group__0 ) ) )
            // InternalOpenCypherParser.g:901:2: ( ( rule__LoadCSVWithHeaders__Group__0 ) )
            {
            // InternalOpenCypherParser.g:901:2: ( ( rule__LoadCSVWithHeaders__Group__0 ) )
            // InternalOpenCypherParser.g:902:3: ( rule__LoadCSVWithHeaders__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:903:3: ( rule__LoadCSVWithHeaders__Group__0 )
            // InternalOpenCypherParser.g:903:4: rule__LoadCSVWithHeaders__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVWithHeaders__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLoadCSVWithHeaders"


    // $ANTLR start "entryRuleMatch"
    // InternalOpenCypherParser.g:912:1: entryRuleMatch : ruleMatch EOF ;
    public final void entryRuleMatch() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:913:1: ( ruleMatch EOF )
            // InternalOpenCypherParser.g:914:1: ruleMatch EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMatch();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMatch"


    // $ANTLR start "ruleMatch"
    // InternalOpenCypherParser.g:921:1: ruleMatch : ( ( rule__Match__Group__0 ) ) ;
    public final void ruleMatch() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:925:2: ( ( ( rule__Match__Group__0 ) ) )
            // InternalOpenCypherParser.g:926:2: ( ( rule__Match__Group__0 ) )
            {
            // InternalOpenCypherParser.g:926:2: ( ( rule__Match__Group__0 ) )
            // InternalOpenCypherParser.g:927:3: ( rule__Match__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:928:3: ( rule__Match__Group__0 )
            // InternalOpenCypherParser.g:928:4: rule__Match__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Match__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMatch"


    // $ANTLR start "entryRuleUnwind"
    // InternalOpenCypherParser.g:937:1: entryRuleUnwind : ruleUnwind EOF ;
    public final void entryRuleUnwind() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:938:1: ( ruleUnwind EOF )
            // InternalOpenCypherParser.g:939:1: ruleUnwind EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleUnwind();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleUnwind"


    // $ANTLR start "ruleUnwind"
    // InternalOpenCypherParser.g:946:1: ruleUnwind : ( ( rule__Unwind__Group__0 ) ) ;
    public final void ruleUnwind() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:950:2: ( ( ( rule__Unwind__Group__0 ) ) )
            // InternalOpenCypherParser.g:951:2: ( ( rule__Unwind__Group__0 ) )
            {
            // InternalOpenCypherParser.g:951:2: ( ( rule__Unwind__Group__0 ) )
            // InternalOpenCypherParser.g:952:3: ( rule__Unwind__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:953:3: ( rule__Unwind__Group__0 )
            // InternalOpenCypherParser.g:953:4: rule__Unwind__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUnwind"


    // $ANTLR start "entryRuleMerge"
    // InternalOpenCypherParser.g:962:1: entryRuleMerge : ruleMerge EOF ;
    public final void entryRuleMerge() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:963:1: ( ruleMerge EOF )
            // InternalOpenCypherParser.g:964:1: ruleMerge EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMerge();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMerge"


    // $ANTLR start "ruleMerge"
    // InternalOpenCypherParser.g:971:1: ruleMerge : ( ( rule__Merge__Group__0 ) ) ;
    public final void ruleMerge() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:975:2: ( ( ( rule__Merge__Group__0 ) ) )
            // InternalOpenCypherParser.g:976:2: ( ( rule__Merge__Group__0 ) )
            {
            // InternalOpenCypherParser.g:976:2: ( ( rule__Merge__Group__0 ) )
            // InternalOpenCypherParser.g:977:3: ( rule__Merge__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:978:3: ( rule__Merge__Group__0 )
            // InternalOpenCypherParser.g:978:4: rule__Merge__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Merge__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMerge"


    // $ANTLR start "entryRuleMergeAction"
    // InternalOpenCypherParser.g:987:1: entryRuleMergeAction : ruleMergeAction EOF ;
    public final void entryRuleMergeAction() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:988:1: ( ruleMergeAction EOF )
            // InternalOpenCypherParser.g:989:1: ruleMergeAction EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMergeAction();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMergeAction"


    // $ANTLR start "ruleMergeAction"
    // InternalOpenCypherParser.g:996:1: ruleMergeAction : ( ( rule__MergeAction__Group__0 ) ) ;
    public final void ruleMergeAction() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1000:2: ( ( ( rule__MergeAction__Group__0 ) ) )
            // InternalOpenCypherParser.g:1001:2: ( ( rule__MergeAction__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1001:2: ( ( rule__MergeAction__Group__0 ) )
            // InternalOpenCypherParser.g:1002:3: ( rule__MergeAction__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1003:3: ( rule__MergeAction__Group__0 )
            // InternalOpenCypherParser.g:1003:4: rule__MergeAction__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMergeAction"


    // $ANTLR start "entryRuleCreate"
    // InternalOpenCypherParser.g:1012:1: entryRuleCreate : ruleCreate EOF ;
    public final void entryRuleCreate() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1013:1: ( ruleCreate EOF )
            // InternalOpenCypherParser.g:1014:1: ruleCreate EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreate();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCreate"


    // $ANTLR start "ruleCreate"
    // InternalOpenCypherParser.g:1021:1: ruleCreate : ( ( rule__Create__Group__0 ) ) ;
    public final void ruleCreate() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1025:2: ( ( ( rule__Create__Group__0 ) ) )
            // InternalOpenCypherParser.g:1026:2: ( ( rule__Create__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1026:2: ( ( rule__Create__Group__0 ) )
            // InternalOpenCypherParser.g:1027:3: ( rule__Create__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1028:3: ( rule__Create__Group__0 )
            // InternalOpenCypherParser.g:1028:4: rule__Create__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Create__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCreate"


    // $ANTLR start "entryRuleSet"
    // InternalOpenCypherParser.g:1037:1: entryRuleSet : ruleSet EOF ;
    public final void entryRuleSet() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1038:1: ( ruleSet EOF )
            // InternalOpenCypherParser.g:1039:1: ruleSet EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSet();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSet"


    // $ANTLR start "ruleSet"
    // InternalOpenCypherParser.g:1046:1: ruleSet : ( ( rule__Set__Group__0 ) ) ;
    public final void ruleSet() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1050:2: ( ( ( rule__Set__Group__0 ) ) )
            // InternalOpenCypherParser.g:1051:2: ( ( rule__Set__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1051:2: ( ( rule__Set__Group__0 ) )
            // InternalOpenCypherParser.g:1052:3: ( rule__Set__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1053:3: ( rule__Set__Group__0 )
            // InternalOpenCypherParser.g:1053:4: rule__Set__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Set__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSet"


    // $ANTLR start "entryRuleSetItem"
    // InternalOpenCypherParser.g:1062:1: entryRuleSetItem : ruleSetItem EOF ;
    public final void entryRuleSetItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1063:1: ( ruleSetItem EOF )
            // InternalOpenCypherParser.g:1064:1: ruleSetItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSetItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSetItem"


    // $ANTLR start "ruleSetItem"
    // InternalOpenCypherParser.g:1071:1: ruleSetItem : ( ( rule__SetItem__Alternatives ) ) ;
    public final void ruleSetItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1075:2: ( ( ( rule__SetItem__Alternatives ) ) )
            // InternalOpenCypherParser.g:1076:2: ( ( rule__SetItem__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1076:2: ( ( rule__SetItem__Alternatives ) )
            // InternalOpenCypherParser.g:1077:3: ( rule__SetItem__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1078:3: ( rule__SetItem__Alternatives )
            // InternalOpenCypherParser.g:1078:4: rule__SetItem__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSetItem"


    // $ANTLR start "entryRuleDelete"
    // InternalOpenCypherParser.g:1087:1: entryRuleDelete : ruleDelete EOF ;
    public final void entryRuleDelete() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1088:1: ( ruleDelete EOF )
            // InternalOpenCypherParser.g:1089:1: ruleDelete EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDelete();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDelete"


    // $ANTLR start "ruleDelete"
    // InternalOpenCypherParser.g:1096:1: ruleDelete : ( ( rule__Delete__Group__0 ) ) ;
    public final void ruleDelete() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1100:2: ( ( ( rule__Delete__Group__0 ) ) )
            // InternalOpenCypherParser.g:1101:2: ( ( rule__Delete__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1101:2: ( ( rule__Delete__Group__0 ) )
            // InternalOpenCypherParser.g:1102:3: ( rule__Delete__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1103:3: ( rule__Delete__Group__0 )
            // InternalOpenCypherParser.g:1103:4: rule__Delete__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Delete__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDelete"


    // $ANTLR start "entryRuleRemove"
    // InternalOpenCypherParser.g:1112:1: entryRuleRemove : ruleRemove EOF ;
    public final void entryRuleRemove() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1113:1: ( ruleRemove EOF )
            // InternalOpenCypherParser.g:1114:1: ruleRemove EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRemove();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRemove"


    // $ANTLR start "ruleRemove"
    // InternalOpenCypherParser.g:1121:1: ruleRemove : ( ( rule__Remove__Group__0 ) ) ;
    public final void ruleRemove() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1125:2: ( ( ( rule__Remove__Group__0 ) ) )
            // InternalOpenCypherParser.g:1126:2: ( ( rule__Remove__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1126:2: ( ( rule__Remove__Group__0 ) )
            // InternalOpenCypherParser.g:1127:3: ( rule__Remove__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1128:3: ( rule__Remove__Group__0 )
            // InternalOpenCypherParser.g:1128:4: rule__Remove__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Remove__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRemove"


    // $ANTLR start "entryRuleRemoveItem"
    // InternalOpenCypherParser.g:1137:1: entryRuleRemoveItem : ruleRemoveItem EOF ;
    public final void entryRuleRemoveItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1138:1: ( ruleRemoveItem EOF )
            // InternalOpenCypherParser.g:1139:1: ruleRemoveItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRemoveItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRemoveItem"


    // $ANTLR start "ruleRemoveItem"
    // InternalOpenCypherParser.g:1146:1: ruleRemoveItem : ( ( rule__RemoveItem__Alternatives ) ) ;
    public final void ruleRemoveItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1150:2: ( ( ( rule__RemoveItem__Alternatives ) ) )
            // InternalOpenCypherParser.g:1151:2: ( ( rule__RemoveItem__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1151:2: ( ( rule__RemoveItem__Alternatives ) )
            // InternalOpenCypherParser.g:1152:3: ( rule__RemoveItem__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1153:3: ( rule__RemoveItem__Alternatives )
            // InternalOpenCypherParser.g:1153:4: rule__RemoveItem__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRemoveItem"


    // $ANTLR start "entryRuleForeach"
    // InternalOpenCypherParser.g:1162:1: entryRuleForeach : ruleForeach EOF ;
    public final void entryRuleForeach() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1163:1: ( ruleForeach EOF )
            // InternalOpenCypherParser.g:1164:1: ruleForeach EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleForeach();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleForeach"


    // $ANTLR start "ruleForeach"
    // InternalOpenCypherParser.g:1171:1: ruleForeach : ( ( rule__Foreach__Group__0 ) ) ;
    public final void ruleForeach() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1175:2: ( ( ( rule__Foreach__Group__0 ) ) )
            // InternalOpenCypherParser.g:1176:2: ( ( rule__Foreach__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1176:2: ( ( rule__Foreach__Group__0 ) )
            // InternalOpenCypherParser.g:1177:3: ( rule__Foreach__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1178:3: ( rule__Foreach__Group__0 )
            // InternalOpenCypherParser.g:1178:4: rule__Foreach__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleForeach"


    // $ANTLR start "entryRuleInQueryCall"
    // InternalOpenCypherParser.g:1187:1: entryRuleInQueryCall : ruleInQueryCall EOF ;
    public final void entryRuleInQueryCall() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1188:1: ( ruleInQueryCall EOF )
            // InternalOpenCypherParser.g:1189:1: ruleInQueryCall EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInQueryCall();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInQueryCall"


    // $ANTLR start "ruleInQueryCall"
    // InternalOpenCypherParser.g:1196:1: ruleInQueryCall : ( ( rule__InQueryCall__Group__0 ) ) ;
    public final void ruleInQueryCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1200:2: ( ( ( rule__InQueryCall__Group__0 ) ) )
            // InternalOpenCypherParser.g:1201:2: ( ( rule__InQueryCall__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1201:2: ( ( rule__InQueryCall__Group__0 ) )
            // InternalOpenCypherParser.g:1202:3: ( rule__InQueryCall__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1203:3: ( rule__InQueryCall__Group__0 )
            // InternalOpenCypherParser.g:1203:4: rule__InQueryCall__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInQueryCall"


    // $ANTLR start "entryRuleStandaloneCall"
    // InternalOpenCypherParser.g:1212:1: entryRuleStandaloneCall : ruleStandaloneCall EOF ;
    public final void entryRuleStandaloneCall() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1213:1: ( ruleStandaloneCall EOF )
            // InternalOpenCypherParser.g:1214:1: ruleStandaloneCall EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStandaloneCall();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStandaloneCall"


    // $ANTLR start "ruleStandaloneCall"
    // InternalOpenCypherParser.g:1221:1: ruleStandaloneCall : ( ( rule__StandaloneCall__Group__0 ) ) ;
    public final void ruleStandaloneCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1225:2: ( ( ( rule__StandaloneCall__Group__0 ) ) )
            // InternalOpenCypherParser.g:1226:2: ( ( rule__StandaloneCall__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1226:2: ( ( rule__StandaloneCall__Group__0 ) )
            // InternalOpenCypherParser.g:1227:3: ( rule__StandaloneCall__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1228:3: ( rule__StandaloneCall__Group__0 )
            // InternalOpenCypherParser.g:1228:4: rule__StandaloneCall__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStandaloneCall"


    // $ANTLR start "entryRuleYieldItems"
    // InternalOpenCypherParser.g:1237:1: entryRuleYieldItems : ruleYieldItems EOF ;
    public final void entryRuleYieldItems() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1238:1: ( ruleYieldItems EOF )
            // InternalOpenCypherParser.g:1239:1: ruleYieldItems EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleYieldItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleYieldItems"


    // $ANTLR start "ruleYieldItems"
    // InternalOpenCypherParser.g:1246:1: ruleYieldItems : ( ( rule__YieldItems__Group__0 ) ) ;
    public final void ruleYieldItems() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1250:2: ( ( ( rule__YieldItems__Group__0 ) ) )
            // InternalOpenCypherParser.g:1251:2: ( ( rule__YieldItems__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1251:2: ( ( rule__YieldItems__Group__0 ) )
            // InternalOpenCypherParser.g:1252:3: ( rule__YieldItems__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1253:3: ( rule__YieldItems__Group__0 )
            // InternalOpenCypherParser.g:1253:4: rule__YieldItems__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleYieldItems"


    // $ANTLR start "entryRuleYieldItem"
    // InternalOpenCypherParser.g:1262:1: entryRuleYieldItem : ruleYieldItem EOF ;
    public final void entryRuleYieldItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1263:1: ( ruleYieldItem EOF )
            // InternalOpenCypherParser.g:1264:1: ruleYieldItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleYieldItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleYieldItem"


    // $ANTLR start "ruleYieldItem"
    // InternalOpenCypherParser.g:1271:1: ruleYieldItem : ( ( rule__YieldItem__Group__0 ) ) ;
    public final void ruleYieldItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1275:2: ( ( ( rule__YieldItem__Group__0 ) ) )
            // InternalOpenCypherParser.g:1276:2: ( ( rule__YieldItem__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1276:2: ( ( rule__YieldItem__Group__0 ) )
            // InternalOpenCypherParser.g:1277:3: ( rule__YieldItem__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1278:3: ( rule__YieldItem__Group__0 )
            // InternalOpenCypherParser.g:1278:4: rule__YieldItem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleYieldItem"


    // $ANTLR start "entryRuleWith"
    // InternalOpenCypherParser.g:1287:1: entryRuleWith : ruleWith EOF ;
    public final void entryRuleWith() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1288:1: ( ruleWith EOF )
            // InternalOpenCypherParser.g:1289:1: ruleWith EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleWith();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWith"


    // $ANTLR start "ruleWith"
    // InternalOpenCypherParser.g:1296:1: ruleWith : ( ( rule__With__Group__0 ) ) ;
    public final void ruleWith() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1300:2: ( ( ( rule__With__Group__0 ) ) )
            // InternalOpenCypherParser.g:1301:2: ( ( rule__With__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1301:2: ( ( rule__With__Group__0 ) )
            // InternalOpenCypherParser.g:1302:3: ( rule__With__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1303:3: ( rule__With__Group__0 )
            // InternalOpenCypherParser.g:1303:4: rule__With__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__With__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWith"


    // $ANTLR start "entryRuleReturn"
    // InternalOpenCypherParser.g:1312:1: entryRuleReturn : ruleReturn EOF ;
    public final void entryRuleReturn() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1313:1: ( ruleReturn EOF )
            // InternalOpenCypherParser.g:1314:1: ruleReturn EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturn();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturn"


    // $ANTLR start "ruleReturn"
    // InternalOpenCypherParser.g:1321:1: ruleReturn : ( ( rule__Return__Group__0 ) ) ;
    public final void ruleReturn() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1325:2: ( ( ( rule__Return__Group__0 ) ) )
            // InternalOpenCypherParser.g:1326:2: ( ( rule__Return__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1326:2: ( ( rule__Return__Group__0 ) )
            // InternalOpenCypherParser.g:1327:3: ( rule__Return__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1328:3: ( rule__Return__Group__0 )
            // InternalOpenCypherParser.g:1328:4: rule__Return__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Return__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturn"


    // $ANTLR start "entryRuleReturnBody"
    // InternalOpenCypherParser.g:1337:1: entryRuleReturnBody : ruleReturnBody EOF ;
    public final void entryRuleReturnBody() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1338:1: ( ruleReturnBody EOF )
            // InternalOpenCypherParser.g:1339:1: ruleReturnBody EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturnBody();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturnBody"


    // $ANTLR start "ruleReturnBody"
    // InternalOpenCypherParser.g:1346:1: ruleReturnBody : ( ( rule__ReturnBody__Group__0 ) ) ;
    public final void ruleReturnBody() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1350:2: ( ( ( rule__ReturnBody__Group__0 ) ) )
            // InternalOpenCypherParser.g:1351:2: ( ( rule__ReturnBody__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1351:2: ( ( rule__ReturnBody__Group__0 ) )
            // InternalOpenCypherParser.g:1352:3: ( rule__ReturnBody__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1353:3: ( rule__ReturnBody__Group__0 )
            // InternalOpenCypherParser.g:1353:4: rule__ReturnBody__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturnBody"


    // $ANTLR start "entryRuleReturnItems"
    // InternalOpenCypherParser.g:1362:1: entryRuleReturnItems : ruleReturnItems EOF ;
    public final void entryRuleReturnItems() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1363:1: ( ruleReturnItems EOF )
            // InternalOpenCypherParser.g:1364:1: ruleReturnItems EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturnItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturnItems"


    // $ANTLR start "ruleReturnItems"
    // InternalOpenCypherParser.g:1371:1: ruleReturnItems : ( ( rule__ReturnItems__Alternatives ) ) ;
    public final void ruleReturnItems() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1375:2: ( ( ( rule__ReturnItems__Alternatives ) ) )
            // InternalOpenCypherParser.g:1376:2: ( ( rule__ReturnItems__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1376:2: ( ( rule__ReturnItems__Alternatives ) )
            // InternalOpenCypherParser.g:1377:3: ( rule__ReturnItems__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1378:3: ( rule__ReturnItems__Alternatives )
            // InternalOpenCypherParser.g:1378:4: rule__ReturnItems__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturnItems"


    // $ANTLR start "entryRuleReturnItem"
    // InternalOpenCypherParser.g:1387:1: entryRuleReturnItem : ruleReturnItem EOF ;
    public final void entryRuleReturnItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1388:1: ( ruleReturnItem EOF )
            // InternalOpenCypherParser.g:1389:1: ruleReturnItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReturnItem"


    // $ANTLR start "ruleReturnItem"
    // InternalOpenCypherParser.g:1396:1: ruleReturnItem : ( ( rule__ReturnItem__Group__0 ) ) ;
    public final void ruleReturnItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1400:2: ( ( ( rule__ReturnItem__Group__0 ) ) )
            // InternalOpenCypherParser.g:1401:2: ( ( rule__ReturnItem__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1401:2: ( ( rule__ReturnItem__Group__0 ) )
            // InternalOpenCypherParser.g:1402:3: ( rule__ReturnItem__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1403:3: ( rule__ReturnItem__Group__0 )
            // InternalOpenCypherParser.g:1403:4: rule__ReturnItem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReturnItem"


    // $ANTLR start "entryRuleOrder"
    // InternalOpenCypherParser.g:1412:1: entryRuleOrder : ruleOrder EOF ;
    public final void entryRuleOrder() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1413:1: ( ruleOrder EOF )
            // InternalOpenCypherParser.g:1414:1: ruleOrder EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOrder();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleOrder"


    // $ANTLR start "ruleOrder"
    // InternalOpenCypherParser.g:1421:1: ruleOrder : ( ( rule__Order__Group__0 ) ) ;
    public final void ruleOrder() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1425:2: ( ( ( rule__Order__Group__0 ) ) )
            // InternalOpenCypherParser.g:1426:2: ( ( rule__Order__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1426:2: ( ( rule__Order__Group__0 ) )
            // InternalOpenCypherParser.g:1427:3: ( rule__Order__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1428:3: ( rule__Order__Group__0 )
            // InternalOpenCypherParser.g:1428:4: rule__Order__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Order__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOrder"


    // $ANTLR start "entryRuleSkip"
    // InternalOpenCypherParser.g:1437:1: entryRuleSkip : ruleSkip EOF ;
    public final void entryRuleSkip() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1438:1: ( ruleSkip EOF )
            // InternalOpenCypherParser.g:1439:1: ruleSkip EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSkip();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSkip"


    // $ANTLR start "ruleSkip"
    // InternalOpenCypherParser.g:1446:1: ruleSkip : ( ( rule__Skip__Group__0 ) ) ;
    public final void ruleSkip() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1450:2: ( ( ( rule__Skip__Group__0 ) ) )
            // InternalOpenCypherParser.g:1451:2: ( ( rule__Skip__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1451:2: ( ( rule__Skip__Group__0 ) )
            // InternalOpenCypherParser.g:1452:3: ( rule__Skip__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1453:3: ( rule__Skip__Group__0 )
            // InternalOpenCypherParser.g:1453:4: rule__Skip__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSkip"


    // $ANTLR start "entryRuleLimit"
    // InternalOpenCypherParser.g:1462:1: entryRuleLimit : ruleLimit EOF ;
    public final void entryRuleLimit() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1463:1: ( ruleLimit EOF )
            // InternalOpenCypherParser.g:1464:1: ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLimit();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalOpenCypherParser.g:1471:1: ruleLimit : ( ( rule__Limit__Group__0 ) ) ;
    public final void ruleLimit() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1475:2: ( ( ( rule__Limit__Group__0 ) ) )
            // InternalOpenCypherParser.g:1476:2: ( ( rule__Limit__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1476:2: ( ( rule__Limit__Group__0 ) )
            // InternalOpenCypherParser.g:1477:3: ( rule__Limit__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1478:3: ( rule__Limit__Group__0 )
            // InternalOpenCypherParser.g:1478:4: rule__Limit__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Limit__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSortItem"
    // InternalOpenCypherParser.g:1487:1: entryRuleSortItem : ruleSortItem EOF ;
    public final void entryRuleSortItem() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1488:1: ( ruleSortItem EOF )
            // InternalOpenCypherParser.g:1489:1: ruleSortItem EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSortItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSortItem"


    // $ANTLR start "ruleSortItem"
    // InternalOpenCypherParser.g:1496:1: ruleSortItem : ( ( rule__SortItem__Group__0 ) ) ;
    public final void ruleSortItem() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1500:2: ( ( ( rule__SortItem__Group__0 ) ) )
            // InternalOpenCypherParser.g:1501:2: ( ( rule__SortItem__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1501:2: ( ( rule__SortItem__Group__0 ) )
            // InternalOpenCypherParser.g:1502:3: ( rule__SortItem__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1503:3: ( rule__SortItem__Group__0 )
            // InternalOpenCypherParser.g:1503:4: rule__SortItem__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSortItem"


    // $ANTLR start "entryRuleHint"
    // InternalOpenCypherParser.g:1512:1: entryRuleHint : ruleHint EOF ;
    public final void entryRuleHint() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:1516:1: ( ruleHint EOF )
            // InternalOpenCypherParser.g:1517:1: ruleHint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "entryRuleHint"


    // $ANTLR start "ruleHint"
    // InternalOpenCypherParser.g:1527:1: ruleHint : ( ( rule__Hint__Alternatives ) ) ;
    public final void ruleHint() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1532:2: ( ( ( rule__Hint__Alternatives ) ) )
            // InternalOpenCypherParser.g:1533:2: ( ( rule__Hint__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1533:2: ( ( rule__Hint__Alternatives ) )
            // InternalOpenCypherParser.g:1534:3: ( rule__Hint__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1535:3: ( rule__Hint__Alternatives )
            // InternalOpenCypherParser.g:1535:4: rule__Hint__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "ruleHint"


    // $ANTLR start "entryRuleStart"
    // InternalOpenCypherParser.g:1545:1: entryRuleStart : ruleStart EOF ;
    public final void entryRuleStart() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1546:1: ( ruleStart EOF )
            // InternalOpenCypherParser.g:1547:1: ruleStart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStart"


    // $ANTLR start "ruleStart"
    // InternalOpenCypherParser.g:1554:1: ruleStart : ( ( rule__Start__Group__0 ) ) ;
    public final void ruleStart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1558:2: ( ( ( rule__Start__Group__0 ) ) )
            // InternalOpenCypherParser.g:1559:2: ( ( rule__Start__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1559:2: ( ( rule__Start__Group__0 ) )
            // InternalOpenCypherParser.g:1560:3: ( rule__Start__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1561:3: ( rule__Start__Group__0 )
            // InternalOpenCypherParser.g:1561:4: rule__Start__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Start__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStart"


    // $ANTLR start "entryRuleStartPoint"
    // InternalOpenCypherParser.g:1570:1: entryRuleStartPoint : ruleStartPoint EOF ;
    public final void entryRuleStartPoint() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1571:1: ( ruleStartPoint EOF )
            // InternalOpenCypherParser.g:1572:1: ruleStartPoint EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleStartPoint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleStartPoint"


    // $ANTLR start "ruleStartPoint"
    // InternalOpenCypherParser.g:1579:1: ruleStartPoint : ( ( rule__StartPoint__Group__0 ) ) ;
    public final void ruleStartPoint() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1583:2: ( ( ( rule__StartPoint__Group__0 ) ) )
            // InternalOpenCypherParser.g:1584:2: ( ( rule__StartPoint__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1584:2: ( ( rule__StartPoint__Group__0 ) )
            // InternalOpenCypherParser.g:1585:3: ( rule__StartPoint__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1586:3: ( rule__StartPoint__Group__0 )
            // InternalOpenCypherParser.g:1586:4: rule__StartPoint__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleStartPoint"


    // $ANTLR start "entryRuleLookup"
    // InternalOpenCypherParser.g:1595:1: entryRuleLookup : ruleLookup EOF ;
    public final void entryRuleLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1596:1: ( ruleLookup EOF )
            // InternalOpenCypherParser.g:1597:1: ruleLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLookup"


    // $ANTLR start "ruleLookup"
    // InternalOpenCypherParser.g:1604:1: ruleLookup : ( ( rule__Lookup__Alternatives ) ) ;
    public final void ruleLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1608:2: ( ( ( rule__Lookup__Alternatives ) ) )
            // InternalOpenCypherParser.g:1609:2: ( ( rule__Lookup__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1609:2: ( ( rule__Lookup__Alternatives ) )
            // InternalOpenCypherParser.g:1610:3: ( rule__Lookup__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLookupAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1611:3: ( rule__Lookup__Alternatives )
            // InternalOpenCypherParser.g:1611:4: rule__Lookup__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Lookup__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLookupAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLookup"


    // $ANTLR start "entryRuleNodeLookup"
    // InternalOpenCypherParser.g:1620:1: entryRuleNodeLookup : ruleNodeLookup EOF ;
    public final void entryRuleNodeLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1621:1: ( ruleNodeLookup EOF )
            // InternalOpenCypherParser.g:1622:1: ruleNodeLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodeLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodeLookup"


    // $ANTLR start "ruleNodeLookup"
    // InternalOpenCypherParser.g:1629:1: ruleNodeLookup : ( ( rule__NodeLookup__Group__0 ) ) ;
    public final void ruleNodeLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1633:2: ( ( ( rule__NodeLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1634:2: ( ( rule__NodeLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1634:2: ( ( rule__NodeLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1635:3: ( rule__NodeLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1636:3: ( rule__NodeLookup__Group__0 )
            // InternalOpenCypherParser.g:1636:4: rule__NodeLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodeLookup"


    // $ANTLR start "entryRuleRelationshipLookup"
    // InternalOpenCypherParser.g:1645:1: entryRuleRelationshipLookup : ruleRelationshipLookup EOF ;
    public final void entryRuleRelationshipLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1646:1: ( ruleRelationshipLookup EOF )
            // InternalOpenCypherParser.g:1647:1: ruleRelationshipLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipLookup"


    // $ANTLR start "ruleRelationshipLookup"
    // InternalOpenCypherParser.g:1654:1: ruleRelationshipLookup : ( ( rule__RelationshipLookup__Group__0 ) ) ;
    public final void ruleRelationshipLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1658:2: ( ( ( rule__RelationshipLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1659:2: ( ( rule__RelationshipLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1659:2: ( ( rule__RelationshipLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1660:3: ( rule__RelationshipLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1661:3: ( rule__RelationshipLookup__Group__0 )
            // InternalOpenCypherParser.g:1661:4: rule__RelationshipLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipLookup"


    // $ANTLR start "entryRuleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:1670:1: entryRuleIdentifiedIndexLookup : ruleIdentifiedIndexLookup EOF ;
    public final void entryRuleIdentifiedIndexLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1671:1: ( ruleIdentifiedIndexLookup EOF )
            // InternalOpenCypherParser.g:1672:1: ruleIdentifiedIndexLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdentifiedIndexLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIdentifiedIndexLookup"


    // $ANTLR start "ruleIdentifiedIndexLookup"
    // InternalOpenCypherParser.g:1679:1: ruleIdentifiedIndexLookup : ( ( rule__IdentifiedIndexLookup__Group__0 ) ) ;
    public final void ruleIdentifiedIndexLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1683:2: ( ( ( rule__IdentifiedIndexLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1684:2: ( ( rule__IdentifiedIndexLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1684:2: ( ( rule__IdentifiedIndexLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1685:3: ( rule__IdentifiedIndexLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1686:3: ( rule__IdentifiedIndexLookup__Group__0 )
            // InternalOpenCypherParser.g:1686:4: rule__IdentifiedIndexLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIdentifiedIndexLookup"


    // $ANTLR start "entryRuleIndexQuery"
    // InternalOpenCypherParser.g:1695:1: entryRuleIndexQuery : ruleIndexQuery EOF ;
    public final void entryRuleIndexQuery() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1696:1: ( ruleIndexQuery EOF )
            // InternalOpenCypherParser.g:1697:1: ruleIndexQuery EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIndexQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIndexQuery"


    // $ANTLR start "ruleIndexQuery"
    // InternalOpenCypherParser.g:1704:1: ruleIndexQuery : ( ( rule__IndexQuery__Group__0 ) ) ;
    public final void ruleIndexQuery() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1708:2: ( ( ( rule__IndexQuery__Group__0 ) ) )
            // InternalOpenCypherParser.g:1709:2: ( ( rule__IndexQuery__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1709:2: ( ( rule__IndexQuery__Group__0 ) )
            // InternalOpenCypherParser.g:1710:3: ( rule__IndexQuery__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1711:3: ( rule__IndexQuery__Group__0 )
            // InternalOpenCypherParser.g:1711:4: rule__IndexQuery__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIndexQuery"


    // $ANTLR start "entryRuleIdLookup"
    // InternalOpenCypherParser.g:1720:1: entryRuleIdLookup : ruleIdLookup EOF ;
    public final void entryRuleIdLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1721:1: ( ruleIdLookup EOF )
            // InternalOpenCypherParser.g:1722:1: ruleIdLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIdLookup"


    // $ANTLR start "ruleIdLookup"
    // InternalOpenCypherParser.g:1729:1: ruleIdLookup : ( ( rule__IdLookup__Group__0 ) ) ;
    public final void ruleIdLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1733:2: ( ( ( rule__IdLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:1734:2: ( ( rule__IdLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1734:2: ( ( rule__IdLookup__Group__0 ) )
            // InternalOpenCypherParser.g:1735:3: ( rule__IdLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1736:3: ( rule__IdLookup__Group__0 )
            // InternalOpenCypherParser.g:1736:4: rule__IdLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIdLookup"


    // $ANTLR start "entryRuleLiteralIds"
    // InternalOpenCypherParser.g:1745:1: entryRuleLiteralIds : ruleLiteralIds EOF ;
    public final void entryRuleLiteralIds() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1746:1: ( ruleLiteralIds EOF )
            // InternalOpenCypherParser.g:1747:1: ruleLiteralIds EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLiteralIds();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLiteralIds"


    // $ANTLR start "ruleLiteralIds"
    // InternalOpenCypherParser.g:1754:1: ruleLiteralIds : ( ( rule__LiteralIds__Group__0 ) ) ;
    public final void ruleLiteralIds() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1758:2: ( ( ( rule__LiteralIds__Group__0 ) ) )
            // InternalOpenCypherParser.g:1759:2: ( ( rule__LiteralIds__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1759:2: ( ( rule__LiteralIds__Group__0 ) )
            // InternalOpenCypherParser.g:1760:3: ( rule__LiteralIds__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1761:3: ( rule__LiteralIds__Group__0 )
            // InternalOpenCypherParser.g:1761:4: rule__LiteralIds__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLiteralIds"


    // $ANTLR start "entryRuleWhere"
    // InternalOpenCypherParser.g:1770:1: entryRuleWhere : ruleWhere EOF ;
    public final void entryRuleWhere() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1771:1: ( ruleWhere EOF )
            // InternalOpenCypherParser.g:1772:1: ruleWhere EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleWhere"


    // $ANTLR start "ruleWhere"
    // InternalOpenCypherParser.g:1779:1: ruleWhere : ( ( rule__Where__Group__0 ) ) ;
    public final void ruleWhere() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1783:2: ( ( ( rule__Where__Group__0 ) ) )
            // InternalOpenCypherParser.g:1784:2: ( ( rule__Where__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1784:2: ( ( rule__Where__Group__0 ) )
            // InternalOpenCypherParser.g:1785:3: ( rule__Where__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1786:3: ( rule__Where__Group__0 )
            // InternalOpenCypherParser.g:1786:4: rule__Where__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Where__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleWhere"


    // $ANTLR start "entryRulePattern"
    // InternalOpenCypherParser.g:1795:1: entryRulePattern : rulePattern EOF ;
    public final void entryRulePattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1796:1: ( rulePattern EOF )
            // InternalOpenCypherParser.g:1797:1: rulePattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePattern"


    // $ANTLR start "rulePattern"
    // InternalOpenCypherParser.g:1804:1: rulePattern : ( ( rule__Pattern__Group__0 ) ) ;
    public final void rulePattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1808:2: ( ( ( rule__Pattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:1809:2: ( ( rule__Pattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1809:2: ( ( rule__Pattern__Group__0 ) )
            // InternalOpenCypherParser.g:1810:3: ( rule__Pattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1811:3: ( rule__Pattern__Group__0 )
            // InternalOpenCypherParser.g:1811:4: rule__Pattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePattern"


    // $ANTLR start "entryRulePatternPart"
    // InternalOpenCypherParser.g:1820:1: entryRulePatternPart : rulePatternPart EOF ;
    public final void entryRulePatternPart() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1821:1: ( rulePatternPart EOF )
            // InternalOpenCypherParser.g:1822:1: rulePatternPart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternPart"


    // $ANTLR start "rulePatternPart"
    // InternalOpenCypherParser.g:1829:1: rulePatternPart : ( ( rule__PatternPart__Alternatives ) ) ;
    public final void rulePatternPart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1833:2: ( ( ( rule__PatternPart__Alternatives ) ) )
            // InternalOpenCypherParser.g:1834:2: ( ( rule__PatternPart__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1834:2: ( ( rule__PatternPart__Alternatives ) )
            // InternalOpenCypherParser.g:1835:3: ( rule__PatternPart__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1836:3: ( rule__PatternPart__Alternatives )
            // InternalOpenCypherParser.g:1836:4: rule__PatternPart__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternPart"


    // $ANTLR start "entryRuleAnonymousPatternPart"
    // InternalOpenCypherParser.g:1845:1: entryRuleAnonymousPatternPart : ruleAnonymousPatternPart EOF ;
    public final void entryRuleAnonymousPatternPart() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1846:1: ( ruleAnonymousPatternPart EOF )
            // InternalOpenCypherParser.g:1847:1: ruleAnonymousPatternPart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAnonymousPatternPartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAnonymousPatternPartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAnonymousPatternPart"


    // $ANTLR start "ruleAnonymousPatternPart"
    // InternalOpenCypherParser.g:1854:1: ruleAnonymousPatternPart : ( ( rule__AnonymousPatternPart__Alternatives ) ) ;
    public final void ruleAnonymousPatternPart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1858:2: ( ( ( rule__AnonymousPatternPart__Alternatives ) ) )
            // InternalOpenCypherParser.g:1859:2: ( ( rule__AnonymousPatternPart__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1859:2: ( ( rule__AnonymousPatternPart__Alternatives ) )
            // InternalOpenCypherParser.g:1860:3: ( rule__AnonymousPatternPart__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAnonymousPatternPartAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1861:3: ( rule__AnonymousPatternPart__Alternatives )
            // InternalOpenCypherParser.g:1861:4: rule__AnonymousPatternPart__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__AnonymousPatternPart__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAnonymousPatternPartAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAnonymousPatternPart"


    // $ANTLR start "entryRuleShortestPathPattern"
    // InternalOpenCypherParser.g:1870:1: entryRuleShortestPathPattern : ruleShortestPathPattern EOF ;
    public final void entryRuleShortestPathPattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1871:1: ( ruleShortestPathPattern EOF )
            // InternalOpenCypherParser.g:1872:1: ruleShortestPathPattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleShortestPathPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleShortestPathPattern"


    // $ANTLR start "ruleShortestPathPattern"
    // InternalOpenCypherParser.g:1879:1: ruleShortestPathPattern : ( ( rule__ShortestPathPattern__Alternatives ) ) ;
    public final void ruleShortestPathPattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1883:2: ( ( ( rule__ShortestPathPattern__Alternatives ) ) )
            // InternalOpenCypherParser.g:1884:2: ( ( rule__ShortestPathPattern__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1884:2: ( ( rule__ShortestPathPattern__Alternatives ) )
            // InternalOpenCypherParser.g:1885:3: ( rule__ShortestPathPattern__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1886:3: ( rule__ShortestPathPattern__Alternatives )
            // InternalOpenCypherParser.g:1886:4: rule__ShortestPathPattern__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleShortestPathPattern"


    // $ANTLR start "entryRulePatternElement"
    // InternalOpenCypherParser.g:1895:1: entryRulePatternElement : rulePatternElement EOF ;
    public final void entryRulePatternElement() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1896:1: ( rulePatternElement EOF )
            // InternalOpenCypherParser.g:1897:1: rulePatternElement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternElement"


    // $ANTLR start "rulePatternElement"
    // InternalOpenCypherParser.g:1904:1: rulePatternElement : ( ( rule__PatternElement__Alternatives ) ) ;
    public final void rulePatternElement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1908:2: ( ( ( rule__PatternElement__Alternatives ) ) )
            // InternalOpenCypherParser.g:1909:2: ( ( rule__PatternElement__Alternatives ) )
            {
            // InternalOpenCypherParser.g:1909:2: ( ( rule__PatternElement__Alternatives ) )
            // InternalOpenCypherParser.g:1910:3: ( rule__PatternElement__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:1911:3: ( rule__PatternElement__Alternatives )
            // InternalOpenCypherParser.g:1911:4: rule__PatternElement__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternElement"


    // $ANTLR start "entryRuleNodePattern"
    // InternalOpenCypherParser.g:1920:1: entryRuleNodePattern : ruleNodePattern EOF ;
    public final void entryRuleNodePattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1921:1: ( ruleNodePattern EOF )
            // InternalOpenCypherParser.g:1922:1: ruleNodePattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodePattern"


    // $ANTLR start "ruleNodePattern"
    // InternalOpenCypherParser.g:1929:1: ruleNodePattern : ( ( rule__NodePattern__Group__0 ) ) ;
    public final void ruleNodePattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1933:2: ( ( ( rule__NodePattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:1934:2: ( ( rule__NodePattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1934:2: ( ( rule__NodePattern__Group__0 ) )
            // InternalOpenCypherParser.g:1935:3: ( rule__NodePattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1936:3: ( rule__NodePattern__Group__0 )
            // InternalOpenCypherParser.g:1936:4: rule__NodePattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodePattern"


    // $ANTLR start "entryRulePatternElementChain"
    // InternalOpenCypherParser.g:1945:1: entryRulePatternElementChain : rulePatternElementChain EOF ;
    public final void entryRulePatternElementChain() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1946:1: ( rulePatternElementChain EOF )
            // InternalOpenCypherParser.g:1947:1: rulePatternElementChain EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternElementChain();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternElementChain"


    // $ANTLR start "rulePatternElementChain"
    // InternalOpenCypherParser.g:1954:1: rulePatternElementChain : ( ( rule__PatternElementChain__Group__0 ) ) ;
    public final void rulePatternElementChain() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1958:2: ( ( ( rule__PatternElementChain__Group__0 ) ) )
            // InternalOpenCypherParser.g:1959:2: ( ( rule__PatternElementChain__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1959:2: ( ( rule__PatternElementChain__Group__0 ) )
            // InternalOpenCypherParser.g:1960:3: ( rule__PatternElementChain__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1961:3: ( rule__PatternElementChain__Group__0 )
            // InternalOpenCypherParser.g:1961:4: rule__PatternElementChain__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternElementChain"


    // $ANTLR start "entryRuleRelationshipPattern"
    // InternalOpenCypherParser.g:1970:1: entryRuleRelationshipPattern : ruleRelationshipPattern EOF ;
    public final void entryRuleRelationshipPattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1971:1: ( ruleRelationshipPattern EOF )
            // InternalOpenCypherParser.g:1972:1: ruleRelationshipPattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipPattern"


    // $ANTLR start "ruleRelationshipPattern"
    // InternalOpenCypherParser.g:1979:1: ruleRelationshipPattern : ( ( rule__RelationshipPattern__Group__0 ) ) ;
    public final void ruleRelationshipPattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:1983:2: ( ( ( rule__RelationshipPattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:1984:2: ( ( rule__RelationshipPattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:1984:2: ( ( rule__RelationshipPattern__Group__0 ) )
            // InternalOpenCypherParser.g:1985:3: ( rule__RelationshipPattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:1986:3: ( rule__RelationshipPattern__Group__0 )
            // InternalOpenCypherParser.g:1986:4: rule__RelationshipPattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipPattern"


    // $ANTLR start "entryRuleRelationshipDetail"
    // InternalOpenCypherParser.g:1995:1: entryRuleRelationshipDetail : ruleRelationshipDetail EOF ;
    public final void entryRuleRelationshipDetail() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:1996:1: ( ruleRelationshipDetail EOF )
            // InternalOpenCypherParser.g:1997:1: ruleRelationshipDetail EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipDetail"


    // $ANTLR start "ruleRelationshipDetail"
    // InternalOpenCypherParser.g:2004:1: ruleRelationshipDetail : ( ( rule__RelationshipDetail__Group__0 ) ) ;
    public final void ruleRelationshipDetail() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2008:2: ( ( ( rule__RelationshipDetail__Group__0 ) ) )
            // InternalOpenCypherParser.g:2009:2: ( ( rule__RelationshipDetail__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2009:2: ( ( rule__RelationshipDetail__Group__0 ) )
            // InternalOpenCypherParser.g:2010:3: ( rule__RelationshipDetail__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2011:3: ( rule__RelationshipDetail__Group__0 )
            // InternalOpenCypherParser.g:2011:4: rule__RelationshipDetail__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipDetail"


    // $ANTLR start "entryRuleProperties"
    // InternalOpenCypherParser.g:2020:1: entryRuleProperties : ruleProperties EOF ;
    public final void entryRuleProperties() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2021:1: ( ruleProperties EOF )
            // InternalOpenCypherParser.g:2022:1: ruleProperties EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertiesRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleProperties();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertiesRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProperties"


    // $ANTLR start "ruleProperties"
    // InternalOpenCypherParser.g:2029:1: ruleProperties : ( ( rule__Properties__Alternatives ) ) ;
    public final void ruleProperties() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2033:2: ( ( ( rule__Properties__Alternatives ) ) )
            // InternalOpenCypherParser.g:2034:2: ( ( rule__Properties__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2034:2: ( ( rule__Properties__Alternatives ) )
            // InternalOpenCypherParser.g:2035:3: ( rule__Properties__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertiesAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2036:3: ( rule__Properties__Alternatives )
            // InternalOpenCypherParser.g:2036:4: rule__Properties__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Properties__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertiesAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProperties"


    // $ANTLR start "entryRuleRelType"
    // InternalOpenCypherParser.g:2045:1: entryRuleRelType : ruleRelType EOF ;
    public final void entryRuleRelType() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2046:1: ( ruleRelType EOF )
            // InternalOpenCypherParser.g:2047:1: ruleRelType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelType"


    // $ANTLR start "ruleRelType"
    // InternalOpenCypherParser.g:2054:1: ruleRelType : ( ( rule__RelType__Group__0 ) ) ;
    public final void ruleRelType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2058:2: ( ( ( rule__RelType__Group__0 ) ) )
            // InternalOpenCypherParser.g:2059:2: ( ( rule__RelType__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2059:2: ( ( rule__RelType__Group__0 ) )
            // InternalOpenCypherParser.g:2060:3: ( rule__RelType__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2061:3: ( rule__RelType__Group__0 )
            // InternalOpenCypherParser.g:2061:4: rule__RelType__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelType__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelType"


    // $ANTLR start "entryRuleRelationshipTypes"
    // InternalOpenCypherParser.g:2070:1: entryRuleRelationshipTypes : ruleRelationshipTypes EOF ;
    public final void entryRuleRelationshipTypes() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2071:1: ( ruleRelationshipTypes EOF )
            // InternalOpenCypherParser.g:2072:1: ruleRelationshipTypes EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipTypes();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipTypes"


    // $ANTLR start "ruleRelationshipTypes"
    // InternalOpenCypherParser.g:2079:1: ruleRelationshipTypes : ( ( rule__RelationshipTypes__Group__0 ) ) ;
    public final void ruleRelationshipTypes() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2083:2: ( ( ( rule__RelationshipTypes__Group__0 ) ) )
            // InternalOpenCypherParser.g:2084:2: ( ( rule__RelationshipTypes__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2084:2: ( ( rule__RelationshipTypes__Group__0 ) )
            // InternalOpenCypherParser.g:2085:3: ( rule__RelationshipTypes__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2086:3: ( rule__RelationshipTypes__Group__0 )
            // InternalOpenCypherParser.g:2086:4: rule__RelationshipTypes__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipTypes"


    // $ANTLR start "entryRuleNodeLabels"
    // InternalOpenCypherParser.g:2095:1: entryRuleNodeLabels : ruleNodeLabels EOF ;
    public final void entryRuleNodeLabels() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2096:1: ( ruleNodeLabels EOF )
            // InternalOpenCypherParser.g:2097:1: ruleNodeLabels EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodeLabels"


    // $ANTLR start "ruleNodeLabels"
    // InternalOpenCypherParser.g:2104:1: ruleNodeLabels : ( ( rule__NodeLabels__Group__0 ) ) ;
    public final void ruleNodeLabels() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2108:2: ( ( ( rule__NodeLabels__Group__0 ) ) )
            // InternalOpenCypherParser.g:2109:2: ( ( rule__NodeLabels__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2109:2: ( ( rule__NodeLabels__Group__0 ) )
            // InternalOpenCypherParser.g:2110:3: ( rule__NodeLabels__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2111:3: ( rule__NodeLabels__Group__0 )
            // InternalOpenCypherParser.g:2111:4: rule__NodeLabels__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabels__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodeLabels"


    // $ANTLR start "entryRuleNodeLabel"
    // InternalOpenCypherParser.g:2120:1: entryRuleNodeLabel : ruleNodeLabel EOF ;
    public final void entryRuleNodeLabel() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2121:1: ( ruleNodeLabel EOF )
            // InternalOpenCypherParser.g:2122:1: ruleNodeLabel EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNodeLabel"


    // $ANTLR start "ruleNodeLabel"
    // InternalOpenCypherParser.g:2129:1: ruleNodeLabel : ( ( rule__NodeLabel__Group__0 ) ) ;
    public final void ruleNodeLabel() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2133:2: ( ( ( rule__NodeLabel__Group__0 ) ) )
            // InternalOpenCypherParser.g:2134:2: ( ( rule__NodeLabel__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2134:2: ( ( rule__NodeLabel__Group__0 ) )
            // InternalOpenCypherParser.g:2135:3: ( rule__NodeLabel__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2136:3: ( rule__NodeLabel__Group__0 )
            // InternalOpenCypherParser.g:2136:4: rule__NodeLabel__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabel__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNodeLabel"


    // $ANTLR start "entryRuleRangeLiteral"
    // InternalOpenCypherParser.g:2145:1: entryRuleRangeLiteral : ruleRangeLiteral EOF ;
    public final void entryRuleRangeLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2146:1: ( ruleRangeLiteral EOF )
            // InternalOpenCypherParser.g:2147:1: ruleRangeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRangeLiteral"


    // $ANTLR start "ruleRangeLiteral"
    // InternalOpenCypherParser.g:2154:1: ruleRangeLiteral : ( ( rule__RangeLiteral__Group__0 ) ) ;
    public final void ruleRangeLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2158:2: ( ( ( rule__RangeLiteral__Group__0 ) ) )
            // InternalOpenCypherParser.g:2159:2: ( ( rule__RangeLiteral__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2159:2: ( ( rule__RangeLiteral__Group__0 ) )
            // InternalOpenCypherParser.g:2160:3: ( rule__RangeLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2161:3: ( rule__RangeLiteral__Group__0 )
            // InternalOpenCypherParser.g:2161:4: rule__RangeLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRangeLiteral"


    // $ANTLR start "entryRuleLabelName"
    // InternalOpenCypherParser.g:2170:1: entryRuleLabelName : ruleLabelName EOF ;
    public final void entryRuleLabelName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2171:1: ( ruleLabelName EOF )
            // InternalOpenCypherParser.g:2172:1: ruleLabelName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLabelNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLabelName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLabelNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLabelName"


    // $ANTLR start "ruleLabelName"
    // InternalOpenCypherParser.g:2179:1: ruleLabelName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleLabelName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2183:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2184:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2184:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2185:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLabelNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLabelName"


    // $ANTLR start "entryRuleRelTypeName"
    // InternalOpenCypherParser.g:2195:1: entryRuleRelTypeName : ruleRelTypeName EOF ;
    public final void entryRuleRelTypeName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2196:1: ( ruleRelTypeName EOF )
            // InternalOpenCypherParser.g:2197:1: ruleRelTypeName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelTypeName"


    // $ANTLR start "ruleRelTypeName"
    // InternalOpenCypherParser.g:2204:1: ruleRelTypeName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleRelTypeName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2208:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2209:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2209:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2210:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelTypeName"


    // $ANTLR start "entryRuleExpression"
    // InternalOpenCypherParser.g:2220:1: entryRuleExpression : ruleExpression EOF ;
    public final void entryRuleExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2221:1: ( ruleExpression EOF )
            // InternalOpenCypherParser.g:2222:1: ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalOpenCypherParser.g:2229:1: ruleExpression : ( ruleExpressionOr ) ;
    public final void ruleExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2233:2: ( ( ruleExpressionOr ) )
            // InternalOpenCypherParser.g:2234:2: ( ruleExpressionOr )
            {
            // InternalOpenCypherParser.g:2234:2: ( ruleExpressionOr )
            // InternalOpenCypherParser.g:2235:3: ruleExpressionOr
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAccess().getExpressionOrParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionOr();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAccess().getExpressionOrParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleExpressionOr"
    // InternalOpenCypherParser.g:2245:1: entryRuleExpressionOr : ruleExpressionOr EOF ;
    public final void entryRuleExpressionOr() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2246:1: ( ruleExpressionOr EOF )
            // InternalOpenCypherParser.g:2247:1: ruleExpressionOr EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionOr();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionOr"


    // $ANTLR start "ruleExpressionOr"
    // InternalOpenCypherParser.g:2254:1: ruleExpressionOr : ( ( rule__ExpressionOr__Group__0 ) ) ;
    public final void ruleExpressionOr() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2258:2: ( ( ( rule__ExpressionOr__Group__0 ) ) )
            // InternalOpenCypherParser.g:2259:2: ( ( rule__ExpressionOr__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2259:2: ( ( rule__ExpressionOr__Group__0 ) )
            // InternalOpenCypherParser.g:2260:3: ( rule__ExpressionOr__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2261:3: ( rule__ExpressionOr__Group__0 )
            // InternalOpenCypherParser.g:2261:4: rule__ExpressionOr__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionOr"


    // $ANTLR start "entryRuleExpressionXor"
    // InternalOpenCypherParser.g:2270:1: entryRuleExpressionXor : ruleExpressionXor EOF ;
    public final void entryRuleExpressionXor() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2271:1: ( ruleExpressionXor EOF )
            // InternalOpenCypherParser.g:2272:1: ruleExpressionXor EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionXor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionXor"


    // $ANTLR start "ruleExpressionXor"
    // InternalOpenCypherParser.g:2279:1: ruleExpressionXor : ( ( rule__ExpressionXor__Group__0 ) ) ;
    public final void ruleExpressionXor() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2283:2: ( ( ( rule__ExpressionXor__Group__0 ) ) )
            // InternalOpenCypherParser.g:2284:2: ( ( rule__ExpressionXor__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2284:2: ( ( rule__ExpressionXor__Group__0 ) )
            // InternalOpenCypherParser.g:2285:3: ( rule__ExpressionXor__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2286:3: ( rule__ExpressionXor__Group__0 )
            // InternalOpenCypherParser.g:2286:4: rule__ExpressionXor__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionXor"


    // $ANTLR start "entryRuleExpressionAnd"
    // InternalOpenCypherParser.g:2295:1: entryRuleExpressionAnd : ruleExpressionAnd EOF ;
    public final void entryRuleExpressionAnd() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2296:1: ( ruleExpressionAnd EOF )
            // InternalOpenCypherParser.g:2297:1: ruleExpressionAnd EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionAnd"


    // $ANTLR start "ruleExpressionAnd"
    // InternalOpenCypherParser.g:2304:1: ruleExpressionAnd : ( ( rule__ExpressionAnd__Group__0 ) ) ;
    public final void ruleExpressionAnd() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2308:2: ( ( ( rule__ExpressionAnd__Group__0 ) ) )
            // InternalOpenCypherParser.g:2309:2: ( ( rule__ExpressionAnd__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2309:2: ( ( rule__ExpressionAnd__Group__0 ) )
            // InternalOpenCypherParser.g:2310:3: ( rule__ExpressionAnd__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2311:3: ( rule__ExpressionAnd__Group__0 )
            // InternalOpenCypherParser.g:2311:4: rule__ExpressionAnd__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionAnd"


    // $ANTLR start "entryRuleExpressionNot"
    // InternalOpenCypherParser.g:2320:1: entryRuleExpressionNot : ruleExpressionNot EOF ;
    public final void entryRuleExpressionNot() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2321:1: ( ruleExpressionNot EOF )
            // InternalOpenCypherParser.g:2322:1: ruleExpressionNot EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionNot();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionNot"


    // $ANTLR start "ruleExpressionNot"
    // InternalOpenCypherParser.g:2329:1: ruleExpressionNot : ( ( rule__ExpressionNot__Alternatives ) ) ;
    public final void ruleExpressionNot() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2333:2: ( ( ( rule__ExpressionNot__Alternatives ) ) )
            // InternalOpenCypherParser.g:2334:2: ( ( rule__ExpressionNot__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2334:2: ( ( rule__ExpressionNot__Alternatives ) )
            // InternalOpenCypherParser.g:2335:3: ( rule__ExpressionNot__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2336:3: ( rule__ExpressionNot__Alternatives )
            // InternalOpenCypherParser.g:2336:4: rule__ExpressionNot__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNot__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionNot"


    // $ANTLR start "entryRuleExpressionComparison"
    // InternalOpenCypherParser.g:2345:1: entryRuleExpressionComparison : ruleExpressionComparison EOF ;
    public final void entryRuleExpressionComparison() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2346:1: ( ruleExpressionComparison EOF )
            // InternalOpenCypherParser.g:2347:1: ruleExpressionComparison EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionComparison();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionComparison"


    // $ANTLR start "ruleExpressionComparison"
    // InternalOpenCypherParser.g:2354:1: ruleExpressionComparison : ( ( rule__ExpressionComparison__Group__0 ) ) ;
    public final void ruleExpressionComparison() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2358:2: ( ( ( rule__ExpressionComparison__Group__0 ) ) )
            // InternalOpenCypherParser.g:2359:2: ( ( rule__ExpressionComparison__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2359:2: ( ( rule__ExpressionComparison__Group__0 ) )
            // InternalOpenCypherParser.g:2360:3: ( rule__ExpressionComparison__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2361:3: ( rule__ExpressionComparison__Group__0 )
            // InternalOpenCypherParser.g:2361:4: rule__ExpressionComparison__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionComparison"


    // $ANTLR start "entryRuleExpressionPlusMinus"
    // InternalOpenCypherParser.g:2370:1: entryRuleExpressionPlusMinus : ruleExpressionPlusMinus EOF ;
    public final void entryRuleExpressionPlusMinus() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2371:1: ( ruleExpressionPlusMinus EOF )
            // InternalOpenCypherParser.g:2372:1: ruleExpressionPlusMinus EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionPlusMinus"


    // $ANTLR start "ruleExpressionPlusMinus"
    // InternalOpenCypherParser.g:2379:1: ruleExpressionPlusMinus : ( ( rule__ExpressionPlusMinus__Group__0 ) ) ;
    public final void ruleExpressionPlusMinus() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2383:2: ( ( ( rule__ExpressionPlusMinus__Group__0 ) ) )
            // InternalOpenCypherParser.g:2384:2: ( ( rule__ExpressionPlusMinus__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2384:2: ( ( rule__ExpressionPlusMinus__Group__0 ) )
            // InternalOpenCypherParser.g:2385:3: ( rule__ExpressionPlusMinus__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2386:3: ( rule__ExpressionPlusMinus__Group__0 )
            // InternalOpenCypherParser.g:2386:4: rule__ExpressionPlusMinus__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionPlusMinus"


    // $ANTLR start "entryRuleExpressionMulDiv"
    // InternalOpenCypherParser.g:2395:1: entryRuleExpressionMulDiv : ruleExpressionMulDiv EOF ;
    public final void entryRuleExpressionMulDiv() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2396:1: ( ruleExpressionMulDiv EOF )
            // InternalOpenCypherParser.g:2397:1: ruleExpressionMulDiv EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionMulDiv"


    // $ANTLR start "ruleExpressionMulDiv"
    // InternalOpenCypherParser.g:2404:1: ruleExpressionMulDiv : ( ( rule__ExpressionMulDiv__Group__0 ) ) ;
    public final void ruleExpressionMulDiv() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2408:2: ( ( ( rule__ExpressionMulDiv__Group__0 ) ) )
            // InternalOpenCypherParser.g:2409:2: ( ( rule__ExpressionMulDiv__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2409:2: ( ( rule__ExpressionMulDiv__Group__0 ) )
            // InternalOpenCypherParser.g:2410:3: ( rule__ExpressionMulDiv__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2411:3: ( rule__ExpressionMulDiv__Group__0 )
            // InternalOpenCypherParser.g:2411:4: rule__ExpressionMulDiv__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionMulDiv"


    // $ANTLR start "entryRuleExpressionPower"
    // InternalOpenCypherParser.g:2420:1: entryRuleExpressionPower : ruleExpressionPower EOF ;
    public final void entryRuleExpressionPower() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2421:1: ( ruleExpressionPower EOF )
            // InternalOpenCypherParser.g:2422:1: ruleExpressionPower EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionPower();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionPower"


    // $ANTLR start "ruleExpressionPower"
    // InternalOpenCypherParser.g:2429:1: ruleExpressionPower : ( ( rule__ExpressionPower__Group__0 ) ) ;
    public final void ruleExpressionPower() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2433:2: ( ( ( rule__ExpressionPower__Group__0 ) ) )
            // InternalOpenCypherParser.g:2434:2: ( ( rule__ExpressionPower__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2434:2: ( ( rule__ExpressionPower__Group__0 ) )
            // InternalOpenCypherParser.g:2435:3: ( rule__ExpressionPower__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2436:3: ( rule__ExpressionPower__Group__0 )
            // InternalOpenCypherParser.g:2436:4: rule__ExpressionPower__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionPower"


    // $ANTLR start "entryRuleExpressionUnaryPlusMinus"
    // InternalOpenCypherParser.g:2445:1: entryRuleExpressionUnaryPlusMinus : ruleExpressionUnaryPlusMinus EOF ;
    public final void entryRuleExpressionUnaryPlusMinus() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2446:1: ( ruleExpressionUnaryPlusMinus EOF )
            // InternalOpenCypherParser.g:2447:1: ruleExpressionUnaryPlusMinus EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionUnaryPlusMinus"


    // $ANTLR start "ruleExpressionUnaryPlusMinus"
    // InternalOpenCypherParser.g:2454:1: ruleExpressionUnaryPlusMinus : ( ( rule__ExpressionUnaryPlusMinus__Alternatives ) ) ;
    public final void ruleExpressionUnaryPlusMinus() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2458:2: ( ( ( rule__ExpressionUnaryPlusMinus__Alternatives ) ) )
            // InternalOpenCypherParser.g:2459:2: ( ( rule__ExpressionUnaryPlusMinus__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2459:2: ( ( rule__ExpressionUnaryPlusMinus__Alternatives ) )
            // InternalOpenCypherParser.g:2460:3: ( rule__ExpressionUnaryPlusMinus__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2461:3: ( rule__ExpressionUnaryPlusMinus__Alternatives )
            // InternalOpenCypherParser.g:2461:4: rule__ExpressionUnaryPlusMinus__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionUnaryPlusMinus"


    // $ANTLR start "entryRuleExpression3"
    // InternalOpenCypherParser.g:2470:1: entryRuleExpression3 : ruleExpression3 EOF ;
    public final void entryRuleExpression3() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2471:1: ( ruleExpression3 EOF )
            // InternalOpenCypherParser.g:2472:1: ruleExpression3 EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Rule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpression3();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Rule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpression3"


    // $ANTLR start "ruleExpression3"
    // InternalOpenCypherParser.g:2479:1: ruleExpression3 : ( ( rule__Expression3__Group__0 ) ) ;
    public final void ruleExpression3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2483:2: ( ( ( rule__Expression3__Group__0 ) ) )
            // InternalOpenCypherParser.g:2484:2: ( ( rule__Expression3__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2484:2: ( ( rule__Expression3__Group__0 ) )
            // InternalOpenCypherParser.g:2485:3: ( rule__Expression3__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getGroup()); 
            }
            // InternalOpenCypherParser.g:2486:3: ( rule__Expression3__Group__0 )
            // InternalOpenCypherParser.g:2486:4: rule__Expression3__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpression3"


    // $ANTLR start "entryRuleExpressionNodeLabelsAndPropertyLookup"
    // InternalOpenCypherParser.g:2495:1: entryRuleExpressionNodeLabelsAndPropertyLookup : ruleExpressionNodeLabelsAndPropertyLookup EOF ;
    public final void entryRuleExpressionNodeLabelsAndPropertyLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2496:1: ( ruleExpressionNodeLabelsAndPropertyLookup EOF )
            // InternalOpenCypherParser.g:2497:1: ruleExpressionNodeLabelsAndPropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExpressionNodeLabelsAndPropertyLookup"


    // $ANTLR start "ruleExpressionNodeLabelsAndPropertyLookup"
    // InternalOpenCypherParser.g:2504:1: ruleExpressionNodeLabelsAndPropertyLookup : ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 ) ) ;
    public final void ruleExpressionNodeLabelsAndPropertyLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2508:2: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:2509:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2509:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 ) )
            // InternalOpenCypherParser.g:2510:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2511:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 )
            // InternalOpenCypherParser.g:2511:4: rule__ExpressionNodeLabelsAndPropertyLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExpressionNodeLabelsAndPropertyLookup"


    // $ANTLR start "entryRuleAtom"
    // InternalOpenCypherParser.g:2520:1: entryRuleAtom : ruleAtom EOF ;
    public final void entryRuleAtom() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2521:1: ( ruleAtom EOF )
            // InternalOpenCypherParser.g:2522:1: ruleAtom EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAtom();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleAtom"


    // $ANTLR start "ruleAtom"
    // InternalOpenCypherParser.g:2529:1: ruleAtom : ( ( rule__Atom__Alternatives ) ) ;
    public final void ruleAtom() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2533:2: ( ( ( rule__Atom__Alternatives ) ) )
            // InternalOpenCypherParser.g:2534:2: ( ( rule__Atom__Alternatives ) )
            {
            // InternalOpenCypherParser.g:2534:2: ( ( rule__Atom__Alternatives ) )
            // InternalOpenCypherParser.g:2535:3: ( rule__Atom__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:2536:3: ( rule__Atom__Alternatives )
            // InternalOpenCypherParser.g:2536:4: rule__Atom__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAtom"


    // $ANTLR start "entryRuleReduce"
    // InternalOpenCypherParser.g:2545:1: entryRuleReduce : ruleReduce EOF ;
    public final void entryRuleReduce() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2546:1: ( ruleReduce EOF )
            // InternalOpenCypherParser.g:2547:1: ruleReduce EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleReduce();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleReduce"


    // $ANTLR start "ruleReduce"
    // InternalOpenCypherParser.g:2554:1: ruleReduce : ( ( rule__Reduce__Group__0 ) ) ;
    public final void ruleReduce() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2558:2: ( ( ( rule__Reduce__Group__0 ) ) )
            // InternalOpenCypherParser.g:2559:2: ( ( rule__Reduce__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2559:2: ( ( rule__Reduce__Group__0 ) )
            // InternalOpenCypherParser.g:2560:3: ( rule__Reduce__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2561:3: ( rule__Reduce__Group__0 )
            // InternalOpenCypherParser.g:2561:4: rule__Reduce__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleReduce"


    // $ANTLR start "entryRuleParenthesizedExpression"
    // InternalOpenCypherParser.g:2570:1: entryRuleParenthesizedExpression : ruleParenthesizedExpression EOF ;
    public final void entryRuleParenthesizedExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2571:1: ( ruleParenthesizedExpression EOF )
            // InternalOpenCypherParser.g:2572:1: ruleParenthesizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleParenthesizedExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleParenthesizedExpression"


    // $ANTLR start "ruleParenthesizedExpression"
    // InternalOpenCypherParser.g:2579:1: ruleParenthesizedExpression : ( ( rule__ParenthesizedExpression__Group__0 ) ) ;
    public final void ruleParenthesizedExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2583:2: ( ( ( rule__ParenthesizedExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2584:2: ( ( rule__ParenthesizedExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2584:2: ( ( rule__ParenthesizedExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2585:3: ( rule__ParenthesizedExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2586:3: ( rule__ParenthesizedExpression__Group__0 )
            // InternalOpenCypherParser.g:2586:4: rule__ParenthesizedExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleParenthesizedExpression"


    // $ANTLR start "entryRuleRelationshipsPattern"
    // InternalOpenCypherParser.g:2595:1: entryRuleRelationshipsPattern : ruleRelationshipsPattern EOF ;
    public final void entryRuleRelationshipsPattern() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2596:1: ( ruleRelationshipsPattern EOF )
            // InternalOpenCypherParser.g:2597:1: ruleRelationshipsPattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRelationshipsPattern"


    // $ANTLR start "ruleRelationshipsPattern"
    // InternalOpenCypherParser.g:2604:1: ruleRelationshipsPattern : ( ( rule__RelationshipsPattern__Group__0 ) ) ;
    public final void ruleRelationshipsPattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2608:2: ( ( ( rule__RelationshipsPattern__Group__0 ) ) )
            // InternalOpenCypherParser.g:2609:2: ( ( rule__RelationshipsPattern__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2609:2: ( ( rule__RelationshipsPattern__Group__0 ) )
            // InternalOpenCypherParser.g:2610:3: ( rule__RelationshipsPattern__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2611:3: ( rule__RelationshipsPattern__Group__0 )
            // InternalOpenCypherParser.g:2611:4: rule__RelationshipsPattern__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRelationshipsPattern"


    // $ANTLR start "entryRuleFilterExpression"
    // InternalOpenCypherParser.g:2620:1: entryRuleFilterExpression : ruleFilterExpression EOF ;
    public final void entryRuleFilterExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2621:1: ( ruleFilterExpression EOF )
            // InternalOpenCypherParser.g:2622:1: ruleFilterExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFilterExpression"


    // $ANTLR start "ruleFilterExpression"
    // InternalOpenCypherParser.g:2629:1: ruleFilterExpression : ( ( rule__FilterExpression__Group__0 ) ) ;
    public final void ruleFilterExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2633:2: ( ( ( rule__FilterExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2634:2: ( ( rule__FilterExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2634:2: ( ( rule__FilterExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2635:3: ( rule__FilterExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2636:3: ( rule__FilterExpression__Group__0 )
            // InternalOpenCypherParser.g:2636:4: rule__FilterExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__FilterExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFilterExpression"


    // $ANTLR start "entryRuleIdInColl"
    // InternalOpenCypherParser.g:2645:1: entryRuleIdInColl : ruleIdInColl EOF ;
    public final void entryRuleIdInColl() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2646:1: ( ruleIdInColl EOF )
            // InternalOpenCypherParser.g:2647:1: ruleIdInColl EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdInColl();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleIdInColl"


    // $ANTLR start "ruleIdInColl"
    // InternalOpenCypherParser.g:2654:1: ruleIdInColl : ( ( rule__IdInColl__Group__0 ) ) ;
    public final void ruleIdInColl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2658:2: ( ( ( rule__IdInColl__Group__0 ) ) )
            // InternalOpenCypherParser.g:2659:2: ( ( rule__IdInColl__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2659:2: ( ( rule__IdInColl__Group__0 ) )
            // InternalOpenCypherParser.g:2660:3: ( rule__IdInColl__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2661:3: ( rule__IdInColl__Group__0 )
            // InternalOpenCypherParser.g:2661:4: rule__IdInColl__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleIdInColl"


    // $ANTLR start "entryRuleFunctionInvocation"
    // InternalOpenCypherParser.g:2670:1: entryRuleFunctionInvocation : ruleFunctionInvocation EOF ;
    public final void entryRuleFunctionInvocation() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2671:1: ( ruleFunctionInvocation EOF )
            // InternalOpenCypherParser.g:2672:1: ruleFunctionInvocation EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFunctionInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFunctionInvocation"


    // $ANTLR start "ruleFunctionInvocation"
    // InternalOpenCypherParser.g:2679:1: ruleFunctionInvocation : ( ( rule__FunctionInvocation__Group__0 ) ) ;
    public final void ruleFunctionInvocation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2683:2: ( ( ( rule__FunctionInvocation__Group__0 ) ) )
            // InternalOpenCypherParser.g:2684:2: ( ( rule__FunctionInvocation__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2684:2: ( ( rule__FunctionInvocation__Group__0 ) )
            // InternalOpenCypherParser.g:2685:3: ( rule__FunctionInvocation__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2686:3: ( rule__FunctionInvocation__Group__0 )
            // InternalOpenCypherParser.g:2686:4: rule__FunctionInvocation__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFunctionInvocation"


    // $ANTLR start "entryRuleFunctionName"
    // InternalOpenCypherParser.g:2695:1: entryRuleFunctionName : ruleFunctionName EOF ;
    public final void entryRuleFunctionName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2696:1: ( ruleFunctionName EOF )
            // InternalOpenCypherParser.g:2697:1: ruleFunctionName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFunctionName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFunctionName"


    // $ANTLR start "ruleFunctionName"
    // InternalOpenCypherParser.g:2704:1: ruleFunctionName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleFunctionName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2708:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2709:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2709:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2710:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFunctionName"


    // $ANTLR start "entryRuleExplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2720:1: entryRuleExplicitProcedureInvocation : ruleExplicitProcedureInvocation EOF ;
    public final void entryRuleExplicitProcedureInvocation() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2721:1: ( ruleExplicitProcedureInvocation EOF )
            // InternalOpenCypherParser.g:2722:1: ruleExplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleExplicitProcedureInvocation"


    // $ANTLR start "ruleExplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2729:1: ruleExplicitProcedureInvocation : ( ( rule__ExplicitProcedureInvocation__Group__0 ) ) ;
    public final void ruleExplicitProcedureInvocation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2733:2: ( ( ( rule__ExplicitProcedureInvocation__Group__0 ) ) )
            // InternalOpenCypherParser.g:2734:2: ( ( rule__ExplicitProcedureInvocation__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2734:2: ( ( rule__ExplicitProcedureInvocation__Group__0 ) )
            // InternalOpenCypherParser.g:2735:3: ( rule__ExplicitProcedureInvocation__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2736:3: ( rule__ExplicitProcedureInvocation__Group__0 )
            // InternalOpenCypherParser.g:2736:4: rule__ExplicitProcedureInvocation__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleExplicitProcedureInvocation"


    // $ANTLR start "entryRuleProcedureResultField"
    // InternalOpenCypherParser.g:2745:1: entryRuleProcedureResultField : ruleProcedureResultField EOF ;
    public final void entryRuleProcedureResultField() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2746:1: ( ruleProcedureResultField EOF )
            // InternalOpenCypherParser.g:2747:1: ruleProcedureResultField EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureResultFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleProcedureResultField();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureResultFieldRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProcedureResultField"


    // $ANTLR start "ruleProcedureResultField"
    // InternalOpenCypherParser.g:2754:1: ruleProcedureResultField : ( ruleSYMBOLIC_NAME_X ) ;
    public final void ruleProcedureResultField() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2758:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:2759:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:2759:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:2760:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureResultFieldAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProcedureResultField"


    // $ANTLR start "entryRuleImplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2770:1: entryRuleImplicitProcedureInvocation : ruleImplicitProcedureInvocation EOF ;
    public final void entryRuleImplicitProcedureInvocation() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2771:1: ( ruleImplicitProcedureInvocation EOF )
            // InternalOpenCypherParser.g:2772:1: ruleImplicitProcedureInvocation EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleImplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleImplicitProcedureInvocation"


    // $ANTLR start "ruleImplicitProcedureInvocation"
    // InternalOpenCypherParser.g:2779:1: ruleImplicitProcedureInvocation : ( ruleProcedureName ) ;
    public final void ruleImplicitProcedureInvocation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2783:2: ( ( ruleProcedureName ) )
            // InternalOpenCypherParser.g:2784:2: ( ruleProcedureName )
            {
            // InternalOpenCypherParser.g:2784:2: ( ruleProcedureName )
            // InternalOpenCypherParser.g:2785:3: ruleProcedureName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleProcedureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImplicitProcedureInvocationAccess().getProcedureNameParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleImplicitProcedureInvocation"


    // $ANTLR start "entryRuleProcedureName"
    // InternalOpenCypherParser.g:2795:1: entryRuleProcedureName : ruleProcedureName EOF ;
    public final void entryRuleProcedureName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2796:1: ( ruleProcedureName EOF )
            // InternalOpenCypherParser.g:2797:1: ruleProcedureName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleProcedureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleProcedureName"


    // $ANTLR start "ruleProcedureName"
    // InternalOpenCypherParser.g:2804:1: ruleProcedureName : ( ( rule__ProcedureName__Group__0 ) ) ;
    public final void ruleProcedureName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2808:2: ( ( ( rule__ProcedureName__Group__0 ) ) )
            // InternalOpenCypherParser.g:2809:2: ( ( rule__ProcedureName__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2809:2: ( ( rule__ProcedureName__Group__0 ) )
            // InternalOpenCypherParser.g:2810:3: ( rule__ProcedureName__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2811:3: ( rule__ProcedureName__Group__0 )
            // InternalOpenCypherParser.g:2811:4: rule__ProcedureName__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleProcedureName"


    // $ANTLR start "entryRuleNamespace"
    // InternalOpenCypherParser.g:2820:1: entryRuleNamespace : ruleNamespace EOF ;
    public final void entryRuleNamespace() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2821:1: ( ruleNamespace EOF )
            // InternalOpenCypherParser.g:2822:1: ruleNamespace EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNamespace();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNamespace"


    // $ANTLR start "ruleNamespace"
    // InternalOpenCypherParser.g:2829:1: ruleNamespace : ( ( rule__Namespace__Group__0 )* ) ;
    public final void ruleNamespace() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2833:2: ( ( ( rule__Namespace__Group__0 )* ) )
            // InternalOpenCypherParser.g:2834:2: ( ( rule__Namespace__Group__0 )* )
            {
            // InternalOpenCypherParser.g:2834:2: ( ( rule__Namespace__Group__0 )* )
            // InternalOpenCypherParser.g:2835:3: ( rule__Namespace__Group__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2836:3: ( rule__Namespace__Group__0 )*
            loop1:
            do {
                int alt1=2;
                alt1 = dfa1.predict(input);
                switch (alt1) {
            	case 1 :
            	    // InternalOpenCypherParser.g:2836:4: rule__Namespace__Group__0
            	    {
            	    pushFollow(FOLLOW_3);
            	    rule__Namespace__Group__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNamespace"


    // $ANTLR start "entryRuleListComprehension"
    // InternalOpenCypherParser.g:2845:1: entryRuleListComprehension : ruleListComprehension EOF ;
    public final void entryRuleListComprehension() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2846:1: ( ruleListComprehension EOF )
            // InternalOpenCypherParser.g:2847:1: ruleListComprehension EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleListComprehension();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleListComprehension"


    // $ANTLR start "ruleListComprehension"
    // InternalOpenCypherParser.g:2854:1: ruleListComprehension : ( ( rule__ListComprehension__Group__0 ) ) ;
    public final void ruleListComprehension() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2858:2: ( ( ( rule__ListComprehension__Group__0 ) ) )
            // InternalOpenCypherParser.g:2859:2: ( ( rule__ListComprehension__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2859:2: ( ( rule__ListComprehension__Group__0 ) )
            // InternalOpenCypherParser.g:2860:3: ( rule__ListComprehension__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2861:3: ( rule__ListComprehension__Group__0 )
            // InternalOpenCypherParser.g:2861:4: rule__ListComprehension__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleListComprehension"


    // $ANTLR start "entryRulePatternComprehension"
    // InternalOpenCypherParser.g:2870:1: entryRulePatternComprehension : rulePatternComprehension EOF ;
    public final void entryRulePatternComprehension() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2871:1: ( rulePatternComprehension EOF )
            // InternalOpenCypherParser.g:2872:1: rulePatternComprehension EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePatternComprehension();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePatternComprehension"


    // $ANTLR start "rulePatternComprehension"
    // InternalOpenCypherParser.g:2879:1: rulePatternComprehension : ( ( rule__PatternComprehension__Group__0 ) ) ;
    public final void rulePatternComprehension() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2883:2: ( ( ( rule__PatternComprehension__Group__0 ) ) )
            // InternalOpenCypherParser.g:2884:2: ( ( rule__PatternComprehension__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2884:2: ( ( rule__PatternComprehension__Group__0 ) )
            // InternalOpenCypherParser.g:2885:3: ( rule__PatternComprehension__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2886:3: ( rule__PatternComprehension__Group__0 )
            // InternalOpenCypherParser.g:2886:4: rule__PatternComprehension__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePatternComprehension"


    // $ANTLR start "entryRulePropertyLookup"
    // InternalOpenCypherParser.g:2895:1: entryRulePropertyLookup : rulePropertyLookup EOF ;
    public final void entryRulePropertyLookup() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2896:1: ( rulePropertyLookup EOF )
            // InternalOpenCypherParser.g:2897:1: rulePropertyLookup EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyLookup"


    // $ANTLR start "rulePropertyLookup"
    // InternalOpenCypherParser.g:2904:1: rulePropertyLookup : ( ( rule__PropertyLookup__Group__0 ) ) ;
    public final void rulePropertyLookup() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2908:2: ( ( ( rule__PropertyLookup__Group__0 ) ) )
            // InternalOpenCypherParser.g:2909:2: ( ( rule__PropertyLookup__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2909:2: ( ( rule__PropertyLookup__Group__0 ) )
            // InternalOpenCypherParser.g:2910:3: ( rule__PropertyLookup__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2911:3: ( rule__PropertyLookup__Group__0 )
            // InternalOpenCypherParser.g:2911:4: rule__PropertyLookup__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyLookup"


    // $ANTLR start "entryRuleCaseExpression"
    // InternalOpenCypherParser.g:2920:1: entryRuleCaseExpression : ruleCaseExpression EOF ;
    public final void entryRuleCaseExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2921:1: ( ruleCaseExpression EOF )
            // InternalOpenCypherParser.g:2922:1: ruleCaseExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCaseExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCaseExpression"


    // $ANTLR start "ruleCaseExpression"
    // InternalOpenCypherParser.g:2929:1: ruleCaseExpression : ( ( rule__CaseExpression__Group__0 ) ) ;
    public final void ruleCaseExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2933:2: ( ( ( rule__CaseExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:2934:2: ( ( rule__CaseExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2934:2: ( ( rule__CaseExpression__Group__0 ) )
            // InternalOpenCypherParser.g:2935:3: ( rule__CaseExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2936:3: ( rule__CaseExpression__Group__0 )
            // InternalOpenCypherParser.g:2936:4: rule__CaseExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCaseExpression"


    // $ANTLR start "entryRuleCaseAlternatives"
    // InternalOpenCypherParser.g:2945:1: entryRuleCaseAlternatives : ruleCaseAlternatives EOF ;
    public final void entryRuleCaseAlternatives() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2946:1: ( ruleCaseAlternatives EOF )
            // InternalOpenCypherParser.g:2947:1: ruleCaseAlternatives EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleCaseAlternatives"


    // $ANTLR start "ruleCaseAlternatives"
    // InternalOpenCypherParser.g:2954:1: ruleCaseAlternatives : ( ( rule__CaseAlternatives__Group__0 ) ) ;
    public final void ruleCaseAlternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2958:2: ( ( ( rule__CaseAlternatives__Group__0 ) ) )
            // InternalOpenCypherParser.g:2959:2: ( ( rule__CaseAlternatives__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2959:2: ( ( rule__CaseAlternatives__Group__0 ) )
            // InternalOpenCypherParser.g:2960:3: ( rule__CaseAlternatives__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2961:3: ( rule__CaseAlternatives__Group__0 )
            // InternalOpenCypherParser.g:2961:4: rule__CaseAlternatives__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCaseAlternatives"


    // $ANTLR start "entryRuleVariableDeclaration"
    // InternalOpenCypherParser.g:2970:1: entryRuleVariableDeclaration : ruleVariableDeclaration EOF ;
    public final void entryRuleVariableDeclaration() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2971:1: ( ruleVariableDeclaration EOF )
            // InternalOpenCypherParser.g:2972:1: ruleVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleVariableDeclaration"


    // $ANTLR start "ruleVariableDeclaration"
    // InternalOpenCypherParser.g:2979:1: ruleVariableDeclaration : ( ( rule__VariableDeclaration__Group__0 ) ) ;
    public final void ruleVariableDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:2983:2: ( ( ( rule__VariableDeclaration__Group__0 ) ) )
            // InternalOpenCypherParser.g:2984:2: ( ( rule__VariableDeclaration__Group__0 ) )
            {
            // InternalOpenCypherParser.g:2984:2: ( ( rule__VariableDeclaration__Group__0 ) )
            // InternalOpenCypherParser.g:2985:3: ( rule__VariableDeclaration__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:2986:3: ( rule__VariableDeclaration__Group__0 )
            // InternalOpenCypherParser.g:2986:4: rule__VariableDeclaration__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleVariableDeclaration"


    // $ANTLR start "entryRuleMapLiteral"
    // InternalOpenCypherParser.g:2995:1: entryRuleMapLiteral : ruleMapLiteral EOF ;
    public final void entryRuleMapLiteral() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:2996:1: ( ruleMapLiteral EOF )
            // InternalOpenCypherParser.g:2997:1: ruleMapLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMapLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMapLiteral"


    // $ANTLR start "ruleMapLiteral"
    // InternalOpenCypherParser.g:3004:1: ruleMapLiteral : ( ( rule__MapLiteral__Group__0 ) ) ;
    public final void ruleMapLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3008:2: ( ( ( rule__MapLiteral__Group__0 ) ) )
            // InternalOpenCypherParser.g:3009:2: ( ( rule__MapLiteral__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3009:2: ( ( rule__MapLiteral__Group__0 ) )
            // InternalOpenCypherParser.g:3010:3: ( rule__MapLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3011:3: ( rule__MapLiteral__Group__0 )
            // InternalOpenCypherParser.g:3011:4: rule__MapLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMapLiteral"


    // $ANTLR start "entryRuleMapLiteralEntry"
    // InternalOpenCypherParser.g:3020:1: entryRuleMapLiteralEntry : ruleMapLiteralEntry EOF ;
    public final void entryRuleMapLiteralEntry() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3021:1: ( ruleMapLiteralEntry EOF )
            // InternalOpenCypherParser.g:3022:1: ruleMapLiteralEntry EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleMapLiteralEntry"


    // $ANTLR start "ruleMapLiteralEntry"
    // InternalOpenCypherParser.g:3029:1: ruleMapLiteralEntry : ( ( rule__MapLiteralEntry__Group__0 ) ) ;
    public final void ruleMapLiteralEntry() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3033:2: ( ( ( rule__MapLiteralEntry__Group__0 ) ) )
            // InternalOpenCypherParser.g:3034:2: ( ( rule__MapLiteralEntry__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3034:2: ( ( rule__MapLiteralEntry__Group__0 ) )
            // InternalOpenCypherParser.g:3035:3: ( rule__MapLiteralEntry__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3036:3: ( rule__MapLiteralEntry__Group__0 )
            // InternalOpenCypherParser.g:3036:4: rule__MapLiteralEntry__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMapLiteralEntry"


    // $ANTLR start "entryRuleLegacyParameter"
    // InternalOpenCypherParser.g:3045:1: entryRuleLegacyParameter : ruleLegacyParameter EOF ;
    public final void entryRuleLegacyParameter() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3046:1: ( ruleLegacyParameter EOF )
            // InternalOpenCypherParser.g:3047:1: ruleLegacyParameter EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLegacyParameter"


    // $ANTLR start "ruleLegacyParameter"
    // InternalOpenCypherParser.g:3054:1: ruleLegacyParameter : ( ( rule__LegacyParameter__Group__0 ) ) ;
    public final void ruleLegacyParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3058:2: ( ( ( rule__LegacyParameter__Group__0 ) ) )
            // InternalOpenCypherParser.g:3059:2: ( ( rule__LegacyParameter__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3059:2: ( ( rule__LegacyParameter__Group__0 ) )
            // InternalOpenCypherParser.g:3060:3: ( rule__LegacyParameter__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3061:3: ( rule__LegacyParameter__Group__0 )
            // InternalOpenCypherParser.g:3061:4: rule__LegacyParameter__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLegacyParameter"


    // $ANTLR start "entryRuleParameter"
    // InternalOpenCypherParser.g:3070:1: entryRuleParameter : ruleParameter EOF ;
    public final void entryRuleParameter() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3071:1: ( ruleParameter EOF )
            // InternalOpenCypherParser.g:3072:1: ruleParameter EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleParameter"


    // $ANTLR start "ruleParameter"
    // InternalOpenCypherParser.g:3079:1: ruleParameter : ( ( rule__Parameter__Group__0 ) ) ;
    public final void ruleParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3083:2: ( ( ( rule__Parameter__Group__0 ) ) )
            // InternalOpenCypherParser.g:3084:2: ( ( rule__Parameter__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3084:2: ( ( rule__Parameter__Group__0 ) )
            // InternalOpenCypherParser.g:3085:3: ( rule__Parameter__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3086:3: ( rule__Parameter__Group__0 )
            // InternalOpenCypherParser.g:3086:4: rule__Parameter__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleParameter"


    // $ANTLR start "entryRulePropertyExpression"
    // InternalOpenCypherParser.g:3095:1: entryRulePropertyExpression : rulePropertyExpression EOF ;
    public final void entryRulePropertyExpression() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3096:1: ( rulePropertyExpression EOF )
            // InternalOpenCypherParser.g:3097:1: rulePropertyExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyExpression"


    // $ANTLR start "rulePropertyExpression"
    // InternalOpenCypherParser.g:3104:1: rulePropertyExpression : ( ( rule__PropertyExpression__Group__0 ) ) ;
    public final void rulePropertyExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3108:2: ( ( ( rule__PropertyExpression__Group__0 ) ) )
            // InternalOpenCypherParser.g:3109:2: ( ( rule__PropertyExpression__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3109:2: ( ( rule__PropertyExpression__Group__0 ) )
            // InternalOpenCypherParser.g:3110:3: ( rule__PropertyExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3111:3: ( rule__PropertyExpression__Group__0 )
            // InternalOpenCypherParser.g:3111:4: rule__PropertyExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyExpression"


    // $ANTLR start "entryRulePropertyKeyName"
    // InternalOpenCypherParser.g:3120:1: entryRulePropertyKeyName : rulePropertyKeyName EOF ;
    public final void entryRulePropertyKeyName() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3121:1: ( rulePropertyKeyName EOF )
            // InternalOpenCypherParser.g:3122:1: rulePropertyKeyName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyKeyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyKeyNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePropertyKeyName"


    // $ANTLR start "rulePropertyKeyName"
    // InternalOpenCypherParser.g:3129:1: rulePropertyKeyName : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rulePropertyKeyName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3133:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:3134:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:3134:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:3135:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyKeyNameAccess().getSYMBOLIC_NAME_XParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePropertyKeyName"


    // $ANTLR start "entryRuleLeftArrowHead"
    // InternalOpenCypherParser.g:3145:1: entryRuleLeftArrowHead : ruleLeftArrowHead EOF ;
    public final void entryRuleLeftArrowHead() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3146:1: ( ruleLeftArrowHead EOF )
            // InternalOpenCypherParser.g:3147:1: ruleLeftArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLeftArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLeftArrowHeadRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLeftArrowHead"


    // $ANTLR start "ruleLeftArrowHead"
    // InternalOpenCypherParser.g:3154:1: ruleLeftArrowHead : ( LessThanSign ) ;
    public final void ruleLeftArrowHead() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3158:2: ( ( LessThanSign ) )
            // InternalOpenCypherParser.g:3159:2: ( LessThanSign )
            {
            // InternalOpenCypherParser.g:3159:2: ( LessThanSign )
            // InternalOpenCypherParser.g:3160:3: LessThanSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword()); 
            }
            match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLeftArrowHeadAccess().getLessThanSignKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLeftArrowHead"


    // $ANTLR start "entryRuleRightArrowHead"
    // InternalOpenCypherParser.g:3170:1: entryRuleRightArrowHead : ruleRightArrowHead EOF ;
    public final void entryRuleRightArrowHead() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3171:1: ( ruleRightArrowHead EOF )
            // InternalOpenCypherParser.g:3172:1: ruleRightArrowHead EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRightArrowHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRightArrowHeadRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleRightArrowHead"


    // $ANTLR start "ruleRightArrowHead"
    // InternalOpenCypherParser.g:3179:1: ruleRightArrowHead : ( GreaterThanSign ) ;
    public final void ruleRightArrowHead() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3183:2: ( ( GreaterThanSign ) )
            // InternalOpenCypherParser.g:3184:2: ( GreaterThanSign )
            {
            // InternalOpenCypherParser.g:3184:2: ( GreaterThanSign )
            // InternalOpenCypherParser.g:3185:3: GreaterThanSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword()); 
            }
            match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRightArrowHeadAccess().getGreaterThanSignKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleRightArrowHead"


    // $ANTLR start "entryRuleDash"
    // InternalOpenCypherParser.g:3195:1: entryRuleDash : ruleDash EOF ;
    public final void entryRuleDash() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3196:1: ( ruleDash EOF )
            // InternalOpenCypherParser.g:3197:1: ruleDash EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDashRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDashRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDash"


    // $ANTLR start "ruleDash"
    // InternalOpenCypherParser.g:3204:1: ruleDash : ( HyphenMinus ) ;
    public final void ruleDash() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3208:2: ( ( HyphenMinus ) )
            // InternalOpenCypherParser.g:3209:2: ( HyphenMinus )
            {
            // InternalOpenCypherParser.g:3209:2: ( HyphenMinus )
            // InternalOpenCypherParser.g:3210:3: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDashAccess().getHyphenMinusKeyword()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDashAccess().getHyphenMinusKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDash"


    // $ANTLR start "entryRuleDecimalInteger"
    // InternalOpenCypherParser.g:3220:1: entryRuleDecimalInteger : ruleDecimalInteger EOF ;
    public final void entryRuleDecimalInteger() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3221:1: ( ruleDecimalInteger EOF )
            // InternalOpenCypherParser.g:3222:1: ruleDecimalInteger EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDecimalInteger"


    // $ANTLR start "ruleDecimalInteger"
    // InternalOpenCypherParser.g:3229:1: ruleDecimalInteger : ( ( rule__DecimalInteger__Group__0 ) ) ;
    public final void ruleDecimalInteger() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3233:2: ( ( ( rule__DecimalInteger__Group__0 ) ) )
            // InternalOpenCypherParser.g:3234:2: ( ( rule__DecimalInteger__Group__0 ) )
            {
            // InternalOpenCypherParser.g:3234:2: ( ( rule__DecimalInteger__Group__0 ) )
            // InternalOpenCypherParser.g:3235:3: ( rule__DecimalInteger__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getGroup()); 
            }
            // InternalOpenCypherParser.g:3236:3: ( rule__DecimalInteger__Group__0 )
            // InternalOpenCypherParser.g:3236:4: rule__DecimalInteger__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDecimalInteger"


    // $ANTLR start "entryRuleNumber"
    // InternalOpenCypherParser.g:3245:1: entryRuleNumber : ruleNumber EOF ;
    public final void entryRuleNumber() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalOpenCypherParser.g:3249:1: ( ruleNumber EOF )
            // InternalOpenCypherParser.g:3250:1: ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalOpenCypherParser.g:3260:1: ruleNumber : ( ( rule__Number__Alternatives ) ) ;
    public final void ruleNumber() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3265:2: ( ( ( rule__Number__Alternatives ) ) )
            // InternalOpenCypherParser.g:3266:2: ( ( rule__Number__Alternatives ) )
            {
            // InternalOpenCypherParser.g:3266:2: ( ( rule__Number__Alternatives ) )
            // InternalOpenCypherParser.g:3267:3: ( rule__Number__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:3268:3: ( rule__Number__Alternatives )
            // InternalOpenCypherParser.g:3268:4: rule__Number__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:3278:1: entryRuleSYMBOLIC_NAME_X : ruleSYMBOLIC_NAME_X EOF ;
    public final void entryRuleSYMBOLIC_NAME_X() throws RecognitionException {
        try {
            // InternalOpenCypherParser.g:3279:1: ( ruleSYMBOLIC_NAME_X EOF )
            // InternalOpenCypherParser.g:3280:1: ruleSYMBOLIC_NAME_X EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSYMBOLIC_NAME_XRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSYMBOLIC_NAME_X"


    // $ANTLR start "ruleSYMBOLIC_NAME_X"
    // InternalOpenCypherParser.g:3287:1: ruleSYMBOLIC_NAME_X : ( ( rule__SYMBOLIC_NAME_X__Alternatives ) ) ;
    public final void ruleSYMBOLIC_NAME_X() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3291:2: ( ( ( rule__SYMBOLIC_NAME_X__Alternatives ) ) )
            // InternalOpenCypherParser.g:3292:2: ( ( rule__SYMBOLIC_NAME_X__Alternatives ) )
            {
            // InternalOpenCypherParser.g:3292:2: ( ( rule__SYMBOLIC_NAME_X__Alternatives ) )
            // InternalOpenCypherParser.g:3293:3: ( rule__SYMBOLIC_NAME_X__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives()); 
            }
            // InternalOpenCypherParser.g:3294:3: ( rule__SYMBOLIC_NAME_X__Alternatives )
            // InternalOpenCypherParser.g:3294:4: rule__SYMBOLIC_NAME_X__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__SYMBOLIC_NAME_X__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSYMBOLIC_NAME_XAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSYMBOLIC_NAME_X"


    // $ANTLR start "rule__Statement__Alternatives"
    // InternalOpenCypherParser.g:3302:1: rule__Statement__Alternatives : ( ( ruleCommand ) | ( ruleQuery ) );
    public final void rule__Statement__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3306:1: ( ( ruleCommand ) | ( ruleQuery ) )
            int alt2=2;
            switch ( input.LA(1) ) {
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case INDEX:
                    {
                    int LA2_4 = input.LA(3);

                    if ( (LA2_4==ON) ) {
                        alt2=1;
                    }
                    else if ( (LA2_4==EqualsSign) ) {
                        alt2=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case CONSTRAINT:
                    {
                    int LA2_5 = input.LA(3);

                    if ( (LA2_5==ON) ) {
                        alt2=1;
                    }
                    else if ( (LA2_5==EqualsSign) ) {
                        alt2=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case ALLSHORTESTPATHS:
                case FIELDTERMINATOR:
                case RELATIONSHIP:
                case SHORTESTPATH:
                case DESCENDING:
                case ASCENDING:
                case CONTAINS:
                case DISTINCT:
                case OPTIONAL:
                case PERIODIC:
                case EXPLAIN:
                case EXTRACT:
                case FOREACH:
                case HEADERS:
                case PROFILE:
                case ASSERT:
                case COMMIT:
                case CREATE:
                case CYPHER:
                case DELETE:
                case DETACH:
                case EXISTS:
                case FILTER:
                case REDUCE:
                case REMOVE:
                case RETURN:
                case SINGLE:
                case STARTS:
                case UNIQUE:
                case UNWIND:
                case COUNT:
                case FALSE:
                case LIMIT:
                case MATCH:
                case MERGE:
                case ORDER:
                case START:
                case UNION:
                case USING:
                case WHERE:
                case CASE:
                case DESC:
                case DROP:
                case ELSE:
                case ENDS:
                case FROM:
                case JOIN:
                case LOAD:
                case NODE:
                case NONE:
                case NULL:
                case SCAN:
                case SKIP:
                case THEN:
                case TRUE:
                case WHEN:
                case WITH:
                case ALL:
                case AND:
                case ANY:
                case ASC:
                case CSV:
                case END:
                case NOT:
                case REL:
                case SET:
                case XOR:
                case AS:
                case BY:
                case IN:
                case IS:
                case ON:
                case OR:
                case LeftParenthesis:
                case RULE_ID:
                    {
                    alt2=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }

                }
                break;
            case DROP:
                {
                alt2=1;
                }
                break;
            case OPTIONAL:
            case FOREACH:
            case DELETE:
            case DETACH:
            case REMOVE:
            case RETURN:
            case UNWIND:
            case MATCH:
            case MERGE:
            case START:
            case USING:
            case CALL:
            case LOAD:
            case WITH:
            case SET:
                {
                alt2=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }

            switch (alt2) {
                case 1 :
                    // InternalOpenCypherParser.g:3307:2: ( ruleCommand )
                    {
                    // InternalOpenCypherParser.g:3307:2: ( ruleCommand )
                    // InternalOpenCypherParser.g:3308:3: ruleCommand
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCommand();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStatementAccess().getCommandParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3313:2: ( ruleQuery )
                    {
                    // InternalOpenCypherParser.g:3313:2: ( ruleQuery )
                    // InternalOpenCypherParser.g:3314:3: ruleQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStatementAccess().getQueryParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStatementAccess().getQueryParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Statement__Alternatives"


    // $ANTLR start "rule__Query__Alternatives"
    // InternalOpenCypherParser.g:3323:1: rule__Query__Alternatives : ( ( ruleRegularQuery ) | ( ruleStandaloneCall ) | ( ruleBulkImportQuery ) );
    public final void rule__Query__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3327:1: ( ( ruleRegularQuery ) | ( ruleStandaloneCall ) | ( ruleBulkImportQuery ) )
            int alt3=3;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // InternalOpenCypherParser.g:3328:2: ( ruleRegularQuery )
                    {
                    // InternalOpenCypherParser.g:3328:2: ( ruleRegularQuery )
                    // InternalOpenCypherParser.g:3329:3: ruleRegularQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRegularQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3334:2: ( ruleStandaloneCall )
                    {
                    // InternalOpenCypherParser.g:3334:2: ( ruleStandaloneCall )
                    // InternalOpenCypherParser.g:3335:3: ruleStandaloneCall
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStandaloneCall();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3340:2: ( ruleBulkImportQuery )
                    {
                    // InternalOpenCypherParser.g:3340:2: ( ruleBulkImportQuery )
                    // InternalOpenCypherParser.g:3341:3: ruleBulkImportQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleBulkImportQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryAccess().getBulkImportQueryParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Query__Alternatives"


    // $ANTLR start "rule__Clause__Alternatives"
    // InternalOpenCypherParser.g:3350:1: rule__Clause__Alternatives : ( ( ruleLoadCSV ) | ( ruleStart ) | ( ruleMatch ) | ( ruleUnwind ) | ( ruleMerge ) | ( ruleCreate ) | ( ruleSet ) | ( ruleDelete ) | ( ruleRemove ) | ( ruleForeach ) | ( ruleWith ) | ( ruleReturn ) | ( ruleInQueryCall ) );
    public final void rule__Clause__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3354:1: ( ( ruleLoadCSV ) | ( ruleStart ) | ( ruleMatch ) | ( ruleUnwind ) | ( ruleMerge ) | ( ruleCreate ) | ( ruleSet ) | ( ruleDelete ) | ( ruleRemove ) | ( ruleForeach ) | ( ruleWith ) | ( ruleReturn ) | ( ruleInQueryCall ) )
            int alt4=13;
            switch ( input.LA(1) ) {
            case LOAD:
                {
                alt4=1;
                }
                break;
            case START:
                {
                alt4=2;
                }
                break;
            case OPTIONAL:
            case MATCH:
                {
                alt4=3;
                }
                break;
            case UNWIND:
                {
                alt4=4;
                }
                break;
            case MERGE:
                {
                alt4=5;
                }
                break;
            case CREATE:
                {
                alt4=6;
                }
                break;
            case SET:
                {
                alt4=7;
                }
                break;
            case DELETE:
            case DETACH:
                {
                alt4=8;
                }
                break;
            case REMOVE:
                {
                alt4=9;
                }
                break;
            case FOREACH:
                {
                alt4=10;
                }
                break;
            case WITH:
                {
                alt4=11;
                }
                break;
            case RETURN:
                {
                alt4=12;
                }
                break;
            case CALL:
                {
                alt4=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // InternalOpenCypherParser.g:3355:2: ( ruleLoadCSV )
                    {
                    // InternalOpenCypherParser.g:3355:2: ( ruleLoadCSV )
                    // InternalOpenCypherParser.g:3356:3: ruleLoadCSV
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getLoadCSVParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLoadCSV();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getLoadCSVParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3361:2: ( ruleStart )
                    {
                    // InternalOpenCypherParser.g:3361:2: ( ruleStart )
                    // InternalOpenCypherParser.g:3362:3: ruleStart
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getStartParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleStart();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getStartParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3367:2: ( ruleMatch )
                    {
                    // InternalOpenCypherParser.g:3367:2: ( ruleMatch )
                    // InternalOpenCypherParser.g:3368:3: ruleMatch
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getMatchParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMatch();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getMatchParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3373:2: ( ruleUnwind )
                    {
                    // InternalOpenCypherParser.g:3373:2: ( ruleUnwind )
                    // InternalOpenCypherParser.g:3374:3: ruleUnwind
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getUnwindParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleUnwind();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getUnwindParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:3379:2: ( ruleMerge )
                    {
                    // InternalOpenCypherParser.g:3379:2: ( ruleMerge )
                    // InternalOpenCypherParser.g:3380:3: ruleMerge
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getMergeParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMerge();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getMergeParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:3385:2: ( ruleCreate )
                    {
                    // InternalOpenCypherParser.g:3385:2: ( ruleCreate )
                    // InternalOpenCypherParser.g:3386:3: ruleCreate
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getCreateParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreate();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getCreateParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:3391:2: ( ruleSet )
                    {
                    // InternalOpenCypherParser.g:3391:2: ( ruleSet )
                    // InternalOpenCypherParser.g:3392:3: ruleSet
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getSetParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSet();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getSetParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:3397:2: ( ruleDelete )
                    {
                    // InternalOpenCypherParser.g:3397:2: ( ruleDelete )
                    // InternalOpenCypherParser.g:3398:3: ruleDelete
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getDeleteParserRuleCall_7()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDelete();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getDeleteParserRuleCall_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:3403:2: ( ruleRemove )
                    {
                    // InternalOpenCypherParser.g:3403:2: ( ruleRemove )
                    // InternalOpenCypherParser.g:3404:3: ruleRemove
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getRemoveParserRuleCall_8()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRemove();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getRemoveParserRuleCall_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:3409:2: ( ruleForeach )
                    {
                    // InternalOpenCypherParser.g:3409:2: ( ruleForeach )
                    // InternalOpenCypherParser.g:3410:3: ruleForeach
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getForeachParserRuleCall_9()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleForeach();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getForeachParserRuleCall_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:3415:2: ( ruleWith )
                    {
                    // InternalOpenCypherParser.g:3415:2: ( ruleWith )
                    // InternalOpenCypherParser.g:3416:3: ruleWith
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getWithParserRuleCall_10()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleWith();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getWithParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:3421:2: ( ruleReturn )
                    {
                    // InternalOpenCypherParser.g:3421:2: ( ruleReturn )
                    // InternalOpenCypherParser.g:3422:3: ruleReturn
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getReturnParserRuleCall_11()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleReturn();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getReturnParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:3427:2: ( ruleInQueryCall )
                    {
                    // InternalOpenCypherParser.g:3427:2: ( ruleInQueryCall )
                    // InternalOpenCypherParser.g:3428:3: ruleInQueryCall
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getClauseAccess().getInQueryCallParserRuleCall_12()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleInQueryCall();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getClauseAccess().getInQueryCallParserRuleCall_12()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Clause__Alternatives"


    // $ANTLR start "rule__Command__Alternatives"
    // InternalOpenCypherParser.g:3437:1: rule__Command__Alternatives : ( ( ruleCreateIndex ) | ( ruleDropIndex ) | ( ruleCreateUniqueConstraint ) | ( ruleDropUniqueConstraint ) | ( ruleCreateNodePropertyExistenceConstraint ) | ( ruleDropNodePropertyExistenceConstraint ) | ( ruleCreateRelationshipPropertyExistenceConstraint ) | ( ruleDropRelationshipPropertyExistenceConstraint ) );
    public final void rule__Command__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3441:1: ( ( ruleCreateIndex ) | ( ruleDropIndex ) | ( ruleCreateUniqueConstraint ) | ( ruleDropUniqueConstraint ) | ( ruleCreateNodePropertyExistenceConstraint ) | ( ruleDropNodePropertyExistenceConstraint ) | ( ruleCreateRelationshipPropertyExistenceConstraint ) | ( ruleDropRelationshipPropertyExistenceConstraint ) )
            int alt5=8;
            alt5 = dfa5.predict(input);
            switch (alt5) {
                case 1 :
                    // InternalOpenCypherParser.g:3442:2: ( ruleCreateIndex )
                    {
                    // InternalOpenCypherParser.g:3442:2: ( ruleCreateIndex )
                    // InternalOpenCypherParser.g:3443:3: ruleCreateIndex
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateIndex();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3448:2: ( ruleDropIndex )
                    {
                    // InternalOpenCypherParser.g:3448:2: ( ruleDropIndex )
                    // InternalOpenCypherParser.g:3449:3: ruleDropIndex
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropIndex();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3454:2: ( ruleCreateUniqueConstraint )
                    {
                    // InternalOpenCypherParser.g:3454:2: ( ruleCreateUniqueConstraint )
                    // InternalOpenCypherParser.g:3455:3: ruleCreateUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3460:2: ( ruleDropUniqueConstraint )
                    {
                    // InternalOpenCypherParser.g:3460:2: ( ruleDropUniqueConstraint )
                    // InternalOpenCypherParser.g:3461:3: ruleDropUniqueConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropUniqueConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:3466:2: ( ruleCreateNodePropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3466:2: ( ruleCreateNodePropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3467:3: ruleCreateNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:3472:2: ( ruleDropNodePropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3472:2: ( ruleDropNodePropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3473:3: ruleDropNodePropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropNodePropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:3478:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3478:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3479:3: ruleCreateRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCreateRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:3484:2: ( ruleDropRelationshipPropertyExistenceConstraint )
                    {
                    // InternalOpenCypherParser.g:3484:2: ( ruleDropRelationshipPropertyExistenceConstraint )
                    // InternalOpenCypherParser.g:3485:3: ruleDropRelationshipPropertyExistenceConstraint
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleDropRelationshipPropertyExistenceConstraint();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCommandAccess().getDropRelationshipPropertyExistenceConstraintParserRuleCall_7()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Command__Alternatives"


    // $ANTLR start "rule__MergeAction__ActionAlternatives_1_0"
    // InternalOpenCypherParser.g:3494:1: rule__MergeAction__ActionAlternatives_1_0 : ( ( MATCH ) | ( CREATE ) );
    public final void rule__MergeAction__ActionAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3498:1: ( ( MATCH ) | ( CREATE ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==MATCH) ) {
                alt6=1;
            }
            else if ( (LA6_0==CREATE) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalOpenCypherParser.g:3499:2: ( MATCH )
                    {
                    // InternalOpenCypherParser.g:3499:2: ( MATCH )
                    // InternalOpenCypherParser.g:3500:3: MATCH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0()); 
                    }
                    match(input,MATCH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMergeActionAccess().getActionMATCHKeyword_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3505:2: ( CREATE )
                    {
                    // InternalOpenCypherParser.g:3505:2: ( CREATE )
                    // InternalOpenCypherParser.g:3506:3: CREATE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1()); 
                    }
                    match(input,CREATE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMergeActionAccess().getActionCREATEKeyword_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__ActionAlternatives_1_0"


    // $ANTLR start "rule__SetItem__Alternatives"
    // InternalOpenCypherParser.g:3515:1: rule__SetItem__Alternatives : ( ( ( rule__SetItem__Group_0__0 ) ) | ( ( rule__SetItem__Group_1__0 ) ) | ( ( rule__SetItem__Group_2__0 ) ) | ( ( rule__SetItem__Group_3__0 ) ) );
    public final void rule__SetItem__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3519:1: ( ( ( rule__SetItem__Group_0__0 ) ) | ( ( rule__SetItem__Group_1__0 ) ) | ( ( rule__SetItem__Group_2__0 ) ) | ( ( rule__SetItem__Group_3__0 ) ) )
            int alt7=4;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // InternalOpenCypherParser.g:3520:2: ( ( rule__SetItem__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3520:2: ( ( rule__SetItem__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3521:3: ( rule__SetItem__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3522:3: ( rule__SetItem__Group_0__0 )
                    // InternalOpenCypherParser.g:3522:4: rule__SetItem__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3526:2: ( ( rule__SetItem__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3526:2: ( ( rule__SetItem__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3527:3: ( rule__SetItem__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3528:3: ( rule__SetItem__Group_1__0 )
                    // InternalOpenCypherParser.g:3528:4: rule__SetItem__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3532:2: ( ( rule__SetItem__Group_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:3532:2: ( ( rule__SetItem__Group_2__0 ) )
                    // InternalOpenCypherParser.g:3533:3: ( rule__SetItem__Group_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_2()); 
                    }
                    // InternalOpenCypherParser.g:3534:3: ( rule__SetItem__Group_2__0 )
                    // InternalOpenCypherParser.g:3534:4: rule__SetItem__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3538:2: ( ( rule__SetItem__Group_3__0 ) )
                    {
                    // InternalOpenCypherParser.g:3538:2: ( ( rule__SetItem__Group_3__0 ) )
                    // InternalOpenCypherParser.g:3539:3: ( rule__SetItem__Group_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSetItemAccess().getGroup_3()); 
                    }
                    // InternalOpenCypherParser.g:3540:3: ( rule__SetItem__Group_3__0 )
                    // InternalOpenCypherParser.g:3540:4: rule__SetItem__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__SetItem__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSetItemAccess().getGroup_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Alternatives"


    // $ANTLR start "rule__RemoveItem__Alternatives"
    // InternalOpenCypherParser.g:3548:1: rule__RemoveItem__Alternatives : ( ( ( rule__RemoveItem__Group_0__0 ) ) | ( ( rule__RemoveItem__Group_1__0 ) ) );
    public final void rule__RemoveItem__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3552:1: ( ( ( rule__RemoveItem__Group_0__0 ) ) | ( ( rule__RemoveItem__Group_1__0 ) ) )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // InternalOpenCypherParser.g:3553:2: ( ( rule__RemoveItem__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3553:2: ( ( rule__RemoveItem__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3554:3: ( rule__RemoveItem__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRemoveItemAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3555:3: ( rule__RemoveItem__Group_0__0 )
                    // InternalOpenCypherParser.g:3555:4: rule__RemoveItem__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RemoveItem__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRemoveItemAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3559:2: ( ( rule__RemoveItem__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3559:2: ( ( rule__RemoveItem__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3560:3: ( rule__RemoveItem__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRemoveItemAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3561:3: ( rule__RemoveItem__Group_1__0 )
                    // InternalOpenCypherParser.g:3561:4: rule__RemoveItem__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RemoveItem__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRemoveItemAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Alternatives"


    // $ANTLR start "rule__StandaloneCall__InvocationAlternatives_1_0"
    // InternalOpenCypherParser.g:3569:1: rule__StandaloneCall__InvocationAlternatives_1_0 : ( ( ruleExplicitProcedureInvocation ) | ( ruleImplicitProcedureInvocation ) );
    public final void rule__StandaloneCall__InvocationAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3573:1: ( ( ruleExplicitProcedureInvocation ) | ( ruleImplicitProcedureInvocation ) )
            int alt9=2;
            alt9 = dfa9.predict(input);
            switch (alt9) {
                case 1 :
                    // InternalOpenCypherParser.g:3574:2: ( ruleExplicitProcedureInvocation )
                    {
                    // InternalOpenCypherParser.g:3574:2: ( ruleExplicitProcedureInvocation )
                    // InternalOpenCypherParser.g:3575:3: ruleExplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleExplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStandaloneCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3580:2: ( ruleImplicitProcedureInvocation )
                    {
                    // InternalOpenCypherParser.g:3580:2: ( ruleImplicitProcedureInvocation )
                    // InternalOpenCypherParser.g:3581:3: ruleImplicitProcedureInvocation
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleImplicitProcedureInvocation();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getStandaloneCallAccess().getInvocationImplicitProcedureInvocationParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__InvocationAlternatives_1_0"


    // $ANTLR start "rule__YieldItems__Alternatives_1"
    // InternalOpenCypherParser.g:3590:1: rule__YieldItems__Alternatives_1 : ( ( ( rule__YieldItems__Group_1_0__0 ) ) | ( HyphenMinus ) );
    public final void rule__YieldItems__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3594:1: ( ( ( rule__YieldItems__Group_1_0__0 ) ) | ( HyphenMinus ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=ALLSHORTESTPATHS && LA10_0<=WHERE)||(LA10_0>=CASE && LA10_0<=XOR)||(LA10_0>=AS && LA10_0<=OR)||LA10_0==RULE_ID) ) {
                alt10=1;
            }
            else if ( (LA10_0==HyphenMinus) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // InternalOpenCypherParser.g:3595:2: ( ( rule__YieldItems__Group_1_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3595:2: ( ( rule__YieldItems__Group_1_0__0 ) )
                    // InternalOpenCypherParser.g:3596:3: ( rule__YieldItems__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getYieldItemsAccess().getGroup_1_0()); 
                    }
                    // InternalOpenCypherParser.g:3597:3: ( rule__YieldItems__Group_1_0__0 )
                    // InternalOpenCypherParser.g:3597:4: rule__YieldItems__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__YieldItems__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getYieldItemsAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3601:2: ( HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:3601:2: ( HyphenMinus )
                    // InternalOpenCypherParser.g:3602:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getYieldItemsAccess().getHyphenMinusKeyword_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Alternatives_1"


    // $ANTLR start "rule__ReturnItems__Alternatives"
    // InternalOpenCypherParser.g:3611:1: rule__ReturnItems__Alternatives : ( ( ( rule__ReturnItems__Group_0__0 ) ) | ( ( rule__ReturnItems__Group_1__0 ) ) );
    public final void rule__ReturnItems__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3615:1: ( ( ( rule__ReturnItems__Group_0__0 ) ) | ( ( rule__ReturnItems__Group_1__0 ) ) )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==Asterisk) ) {
                alt11=1;
            }
            else if ( ((LA11_0>=ALLSHORTESTPATHS && LA11_0<=WHERE)||(LA11_0>=CASE && LA11_0<=XOR)||(LA11_0>=AS && LA11_0<=OR)||LA11_0==DollarSign||LA11_0==LeftParenthesis||LA11_0==PlusSign||LA11_0==HyphenMinus||LA11_0==LeftSquareBracket||LA11_0==LeftCurlyBracket||LA11_0==RULE_ID||(LA11_0>=RULE_STRING_LITERAL && LA11_0<=RULE_DECIMAL)) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // InternalOpenCypherParser.g:3616:2: ( ( rule__ReturnItems__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3616:2: ( ( rule__ReturnItems__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3617:3: ( rule__ReturnItems__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReturnItemsAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3618:3: ( rule__ReturnItems__Group_0__0 )
                    // InternalOpenCypherParser.g:3618:4: rule__ReturnItems__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnItems__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReturnItemsAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3622:2: ( ( rule__ReturnItems__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3622:2: ( ( rule__ReturnItems__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3623:3: ( rule__ReturnItems__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getReturnItemsAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3624:3: ( rule__ReturnItems__Group_1__0 )
                    // InternalOpenCypherParser.g:3624:4: rule__ReturnItems__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnItems__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getReturnItemsAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Alternatives"


    // $ANTLR start "rule__SortItem__SortAlternatives_1_0"
    // InternalOpenCypherParser.g:3632:1: rule__SortItem__SortAlternatives_1_0 : ( ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) );
    public final void rule__SortItem__SortAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3636:1: ( ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) )
            int alt12=4;
            switch ( input.LA(1) ) {
            case DESCENDING:
                {
                alt12=1;
                }
                break;
            case DESC:
                {
                alt12=2;
                }
                break;
            case ASCENDING:
                {
                alt12=3;
                }
                break;
            case ASC:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // InternalOpenCypherParser.g:3637:2: ( DESCENDING )
                    {
                    // InternalOpenCypherParser.g:3637:2: ( DESCENDING )
                    // InternalOpenCypherParser.g:3638:3: DESCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0()); 
                    }
                    match(input,DESCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortDESCENDINGKeyword_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3643:2: ( DESC )
                    {
                    // InternalOpenCypherParser.g:3643:2: ( DESC )
                    // InternalOpenCypherParser.g:3644:3: DESC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1()); 
                    }
                    match(input,DESC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortDESCKeyword_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3649:2: ( ASCENDING )
                    {
                    // InternalOpenCypherParser.g:3649:2: ( ASCENDING )
                    // InternalOpenCypherParser.g:3650:3: ASCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2()); 
                    }
                    match(input,ASCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortASCENDINGKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:3655:2: ( ASC )
                    {
                    // InternalOpenCypherParser.g:3655:2: ( ASC )
                    // InternalOpenCypherParser.g:3656:3: ASC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3()); 
                    }
                    match(input,ASC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSortItemAccess().getSortASCKeyword_1_0_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__SortAlternatives_1_0"


    // $ANTLR start "rule__Hint__Alternatives"
    // InternalOpenCypherParser.g:3665:1: rule__Hint__Alternatives : ( ( ( rule__Hint__Group_0__0 ) ) | ( ( rule__Hint__Group_1__0 ) ) | ( ( rule__Hint__Group_2__0 ) ) );
    public final void rule__Hint__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3669:1: ( ( ( rule__Hint__Group_0__0 ) ) | ( ( rule__Hint__Group_1__0 ) ) | ( ( rule__Hint__Group_2__0 ) ) )
            int alt13=3;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==USING) ) {
                int LA13_1 = input.LA(2);

                if ( (LA13_1==RULE_WS) ) {
                    switch ( input.LA(3) ) {
                    case INDEX:
                        {
                        alt13=1;
                        }
                        break;
                    case SCAN:
                        {
                        alt13=3;
                        }
                        break;
                    case JOIN:
                        {
                        alt13=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // InternalOpenCypherParser.g:3670:2: ( ( rule__Hint__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3670:2: ( ( rule__Hint__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3671:3: ( rule__Hint__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHintAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3672:3: ( rule__Hint__Group_0__0 )
                    // InternalOpenCypherParser.g:3672:4: rule__Hint__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Hint__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHintAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3676:2: ( ( rule__Hint__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3676:2: ( ( rule__Hint__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3677:3: ( rule__Hint__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHintAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3678:3: ( rule__Hint__Group_1__0 )
                    // InternalOpenCypherParser.g:3678:4: rule__Hint__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Hint__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHintAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3682:2: ( ( rule__Hint__Group_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:3682:2: ( ( rule__Hint__Group_2__0 ) )
                    // InternalOpenCypherParser.g:3683:3: ( rule__Hint__Group_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHintAccess().getGroup_2()); 
                    }
                    // InternalOpenCypherParser.g:3684:3: ( rule__Hint__Group_2__0 )
                    // InternalOpenCypherParser.g:3684:4: rule__Hint__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Hint__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHintAccess().getGroup_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Alternatives"


    // $ANTLR start "rule__Lookup__Alternatives"
    // InternalOpenCypherParser.g:3692:1: rule__Lookup__Alternatives : ( ( ruleNodeLookup ) | ( ruleRelationshipLookup ) );
    public final void rule__Lookup__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3696:1: ( ( ruleNodeLookup ) | ( ruleRelationshipLookup ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NODE) ) {
                alt14=1;
            }
            else if ( (LA14_0==RELATIONSHIP||LA14_0==REL) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // InternalOpenCypherParser.g:3697:2: ( ruleNodeLookup )
                    {
                    // InternalOpenCypherParser.g:3697:2: ( ruleNodeLookup )
                    // InternalOpenCypherParser.g:3698:3: ruleNodeLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNodeLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLookupAccess().getNodeLookupParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3703:2: ( ruleRelationshipLookup )
                    {
                    // InternalOpenCypherParser.g:3703:2: ( ruleRelationshipLookup )
                    // InternalOpenCypherParser.g:3704:3: ruleRelationshipLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRelationshipLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLookupAccess().getRelationshipLookupParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Lookup__Alternatives"


    // $ANTLR start "rule__NodeLookup__Alternatives_1"
    // InternalOpenCypherParser.g:3713:1: rule__NodeLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );
    public final void rule__NodeLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3717:1: ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) )
            int alt15=3;
            alt15 = dfa15.predict(input);
            switch (alt15) {
                case 1 :
                    // InternalOpenCypherParser.g:3718:2: ( ruleIdentifiedIndexLookup )
                    {
                    // InternalOpenCypherParser.g:3718:2: ( ruleIdentifiedIndexLookup )
                    // InternalOpenCypherParser.g:3719:3: ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNodeLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3724:2: ( ruleIndexQuery )
                    {
                    // InternalOpenCypherParser.g:3724:2: ( ruleIndexQuery )
                    // InternalOpenCypherParser.g:3725:3: ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNodeLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3730:2: ( ruleIdLookup )
                    {
                    // InternalOpenCypherParser.g:3730:2: ( ruleIdLookup )
                    // InternalOpenCypherParser.g:3731:3: ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNodeLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Alternatives_1"


    // $ANTLR start "rule__RelationshipLookup__Alternatives_0"
    // InternalOpenCypherParser.g:3740:1: rule__RelationshipLookup__Alternatives_0 : ( ( RELATIONSHIP ) | ( REL ) );
    public final void rule__RelationshipLookup__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3744:1: ( ( RELATIONSHIP ) | ( REL ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==RELATIONSHIP) ) {
                alt16=1;
            }
            else if ( (LA16_0==REL) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalOpenCypherParser.g:3745:2: ( RELATIONSHIP )
                    {
                    // InternalOpenCypherParser.g:3745:2: ( RELATIONSHIP )
                    // InternalOpenCypherParser.g:3746:3: RELATIONSHIP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0()); 
                    }
                    match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getRELATIONSHIPKeyword_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3751:2: ( REL )
                    {
                    // InternalOpenCypherParser.g:3751:2: ( REL )
                    // InternalOpenCypherParser.g:3752:3: REL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1()); 
                    }
                    match(input,REL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getRELKeyword_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Alternatives_0"


    // $ANTLR start "rule__RelationshipLookup__Alternatives_1"
    // InternalOpenCypherParser.g:3761:1: rule__RelationshipLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );
    public final void rule__RelationshipLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3765:1: ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) )
            int alt17=3;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // InternalOpenCypherParser.g:3766:2: ( ruleIdentifiedIndexLookup )
                    {
                    // InternalOpenCypherParser.g:3766:2: ( ruleIdentifiedIndexLookup )
                    // InternalOpenCypherParser.g:3767:3: ruleIdentifiedIndexLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdentifiedIndexLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getIdentifiedIndexLookupParserRuleCall_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3772:2: ( ruleIndexQuery )
                    {
                    // InternalOpenCypherParser.g:3772:2: ( ruleIndexQuery )
                    // InternalOpenCypherParser.g:3773:3: ruleIndexQuery
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIndexQuery();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getIndexQueryParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3778:2: ( ruleIdLookup )
                    {
                    // InternalOpenCypherParser.g:3778:2: ( ruleIdLookup )
                    // InternalOpenCypherParser.g:3779:3: ruleIdLookup
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdLookup();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getRelationshipLookupAccess().getIdLookupParserRuleCall_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Alternatives_1"


    // $ANTLR start "rule__IdentifiedIndexLookup__Alternatives_5"
    // InternalOpenCypherParser.g:3788:1: rule__IdentifiedIndexLookup__Alternatives_5 : ( ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) ) | ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) ) );
    public final void rule__IdentifiedIndexLookup__Alternatives_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3792:1: ( ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) ) | ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==RULE_STRING_LITERAL) ) {
                alt18=1;
            }
            else if ( (LA18_0==LeftCurlyBracket) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // InternalOpenCypherParser.g:3793:2: ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) )
                    {
                    // InternalOpenCypherParser.g:3793:2: ( ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 ) )
                    // InternalOpenCypherParser.g:3794:3: ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0()); 
                    }
                    // InternalOpenCypherParser.g:3795:3: ( rule__IdentifiedIndexLookup__ValueAssignment_5_0 )
                    // InternalOpenCypherParser.g:3795:4: rule__IdentifiedIndexLookup__ValueAssignment_5_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdentifiedIndexLookup__ValueAssignment_5_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdentifiedIndexLookupAccess().getValueAssignment_5_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3799:2: ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) )
                    {
                    // InternalOpenCypherParser.g:3799:2: ( ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 ) )
                    // InternalOpenCypherParser.g:3800:3: ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1()); 
                    }
                    // InternalOpenCypherParser.g:3801:3: ( rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 )
                    // InternalOpenCypherParser.g:3801:4: rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterAssignment_5_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Alternatives_5"


    // $ANTLR start "rule__IndexQuery__Alternatives_3"
    // InternalOpenCypherParser.g:3809:1: rule__IndexQuery__Alternatives_3 : ( ( ( rule__IndexQuery__QueryAssignment_3_0 ) ) | ( ( rule__IndexQuery__ParameterAssignment_3_1 ) ) );
    public final void rule__IndexQuery__Alternatives_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3813:1: ( ( ( rule__IndexQuery__QueryAssignment_3_0 ) ) | ( ( rule__IndexQuery__ParameterAssignment_3_1 ) ) )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==RULE_STRING_LITERAL) ) {
                alt19=1;
            }
            else if ( (LA19_0==DollarSign) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // InternalOpenCypherParser.g:3814:2: ( ( rule__IndexQuery__QueryAssignment_3_0 ) )
                    {
                    // InternalOpenCypherParser.g:3814:2: ( ( rule__IndexQuery__QueryAssignment_3_0 ) )
                    // InternalOpenCypherParser.g:3815:3: ( rule__IndexQuery__QueryAssignment_3_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0()); 
                    }
                    // InternalOpenCypherParser.g:3816:3: ( rule__IndexQuery__QueryAssignment_3_0 )
                    // InternalOpenCypherParser.g:3816:4: rule__IndexQuery__QueryAssignment_3_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__IndexQuery__QueryAssignment_3_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIndexQueryAccess().getQueryAssignment_3_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3820:2: ( ( rule__IndexQuery__ParameterAssignment_3_1 ) )
                    {
                    // InternalOpenCypherParser.g:3820:2: ( ( rule__IndexQuery__ParameterAssignment_3_1 ) )
                    // InternalOpenCypherParser.g:3821:3: ( rule__IndexQuery__ParameterAssignment_3_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1()); 
                    }
                    // InternalOpenCypherParser.g:3822:3: ( rule__IndexQuery__ParameterAssignment_3_1 )
                    // InternalOpenCypherParser.g:3822:4: rule__IndexQuery__ParameterAssignment_3_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__IndexQuery__ParameterAssignment_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIndexQueryAccess().getParameterAssignment_3_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Alternatives_3"


    // $ANTLR start "rule__IdLookup__Alternatives_1"
    // InternalOpenCypherParser.g:3830:1: rule__IdLookup__Alternatives_1 : ( ( ( rule__IdLookup__IdsAssignment_1_0 ) ) | ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) ) | ( ( rule__IdLookup__WildcardAssignment_1_2 ) ) );
    public final void rule__IdLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3834:1: ( ( ( rule__IdLookup__IdsAssignment_1_0 ) ) | ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) ) | ( ( rule__IdLookup__WildcardAssignment_1_2 ) ) )
            int alt20=3;
            switch ( input.LA(1) ) {
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt20=1;
                }
                break;
            case DollarSign:
                {
                alt20=2;
                }
                break;
            case Asterisk:
                {
                alt20=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    // InternalOpenCypherParser.g:3835:2: ( ( rule__IdLookup__IdsAssignment_1_0 ) )
                    {
                    // InternalOpenCypherParser.g:3835:2: ( ( rule__IdLookup__IdsAssignment_1_0 ) )
                    // InternalOpenCypherParser.g:3836:3: ( rule__IdLookup__IdsAssignment_1_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0()); 
                    }
                    // InternalOpenCypherParser.g:3837:3: ( rule__IdLookup__IdsAssignment_1_0 )
                    // InternalOpenCypherParser.g:3837:4: rule__IdLookup__IdsAssignment_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdLookup__IdsAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdLookupAccess().getIdsAssignment_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3841:2: ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) )
                    {
                    // InternalOpenCypherParser.g:3841:2: ( ( rule__IdLookup__LegacyParameterAssignment_1_1 ) )
                    // InternalOpenCypherParser.g:3842:3: ( rule__IdLookup__LegacyParameterAssignment_1_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1()); 
                    }
                    // InternalOpenCypherParser.g:3843:3: ( rule__IdLookup__LegacyParameterAssignment_1_1 )
                    // InternalOpenCypherParser.g:3843:4: rule__IdLookup__LegacyParameterAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdLookup__LegacyParameterAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdLookupAccess().getLegacyParameterAssignment_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3847:2: ( ( rule__IdLookup__WildcardAssignment_1_2 ) )
                    {
                    // InternalOpenCypherParser.g:3847:2: ( ( rule__IdLookup__WildcardAssignment_1_2 ) )
                    // InternalOpenCypherParser.g:3848:3: ( rule__IdLookup__WildcardAssignment_1_2 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2()); 
                    }
                    // InternalOpenCypherParser.g:3849:3: ( rule__IdLookup__WildcardAssignment_1_2 )
                    // InternalOpenCypherParser.g:3849:4: rule__IdLookup__WildcardAssignment_1_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__IdLookup__WildcardAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getIdLookupAccess().getWildcardAssignment_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Alternatives_1"


    // $ANTLR start "rule__PatternPart__Alternatives"
    // InternalOpenCypherParser.g:3857:1: rule__PatternPart__Alternatives : ( ( ( rule__PatternPart__Group_0__0 ) ) | ( ruleAnonymousPatternPart ) );
    public final void rule__PatternPart__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3861:1: ( ( ( rule__PatternPart__Group_0__0 ) ) | ( ruleAnonymousPatternPart ) )
            int alt21=2;
            switch ( input.LA(1) ) {
            case FIELDTERMINATOR:
            case RELATIONSHIP:
            case CONSTRAINT:
            case DESCENDING:
            case ASCENDING:
            case CONTAINS:
            case DISTINCT:
            case OPTIONAL:
            case PERIODIC:
            case EXPLAIN:
            case EXTRACT:
            case FOREACH:
            case HEADERS:
            case PROFILE:
            case ASSERT:
            case COMMIT:
            case CREATE:
            case CYPHER:
            case DELETE:
            case DETACH:
            case EXISTS:
            case FILTER:
            case REDUCE:
            case REMOVE:
            case RETURN:
            case SINGLE:
            case STARTS:
            case UNIQUE:
            case UNWIND:
            case COUNT:
            case FALSE:
            case INDEX:
            case LIMIT:
            case MATCH:
            case MERGE:
            case ORDER:
            case START:
            case UNION:
            case USING:
            case WHERE:
            case CASE:
            case DESC:
            case DROP:
            case ELSE:
            case ENDS:
            case FROM:
            case JOIN:
            case LOAD:
            case NODE:
            case NONE:
            case NULL:
            case SCAN:
            case SKIP:
            case THEN:
            case TRUE:
            case WHEN:
            case WITH:
            case ALL:
            case AND:
            case ANY:
            case ASC:
            case CSV:
            case END:
            case NOT:
            case REL:
            case SET:
            case XOR:
            case AS:
            case BY:
            case IN:
            case IS:
            case ON:
            case OR:
            case RULE_ID:
                {
                alt21=1;
                }
                break;
            case SHORTESTPATH:
                {
                int LA21_2 = input.LA(2);

                if ( (LA21_2==EqualsSign) ) {
                    alt21=1;
                }
                else if ( (LA21_2==LeftParenthesis) ) {
                    alt21=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 2, input);

                    throw nvae;
                }
                }
                break;
            case ALLSHORTESTPATHS:
                {
                int LA21_3 = input.LA(2);

                if ( (LA21_3==LeftParenthesis) ) {
                    alt21=2;
                }
                else if ( (LA21_3==EqualsSign) ) {
                    alt21=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 3, input);

                    throw nvae;
                }
                }
                break;
            case LeftParenthesis:
                {
                alt21=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // InternalOpenCypherParser.g:3862:2: ( ( rule__PatternPart__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3862:2: ( ( rule__PatternPart__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3863:3: ( rule__PatternPart__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternPartAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3864:3: ( rule__PatternPart__Group_0__0 )
                    // InternalOpenCypherParser.g:3864:4: rule__PatternPart__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternPart__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternPartAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3868:2: ( ruleAnonymousPatternPart )
                    {
                    // InternalOpenCypherParser.g:3868:2: ( ruleAnonymousPatternPart )
                    // InternalOpenCypherParser.g:3869:3: ruleAnonymousPatternPart
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleAnonymousPatternPart();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternPartAccess().getAnonymousPatternPartParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Alternatives"


    // $ANTLR start "rule__AnonymousPatternPart__Alternatives"
    // InternalOpenCypherParser.g:3878:1: rule__AnonymousPatternPart__Alternatives : ( ( ruleShortestPathPattern ) | ( rulePatternElement ) );
    public final void rule__AnonymousPatternPart__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3882:1: ( ( ruleShortestPathPattern ) | ( rulePatternElement ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==ALLSHORTESTPATHS||LA22_0==SHORTESTPATH) ) {
                alt22=1;
            }
            else if ( (LA22_0==LeftParenthesis) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // InternalOpenCypherParser.g:3883:2: ( ruleShortestPathPattern )
                    {
                    // InternalOpenCypherParser.g:3883:2: ( ruleShortestPathPattern )
                    // InternalOpenCypherParser.g:3884:3: ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAnonymousPatternPartAccess().getShortestPathPatternParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3889:2: ( rulePatternElement )
                    {
                    // InternalOpenCypherParser.g:3889:2: ( rulePatternElement )
                    // InternalOpenCypherParser.g:3890:3: rulePatternElement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    rulePatternElement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAnonymousPatternPartAccess().getPatternElementParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AnonymousPatternPart__Alternatives"


    // $ANTLR start "rule__ShortestPathPattern__Alternatives"
    // InternalOpenCypherParser.g:3899:1: rule__ShortestPathPattern__Alternatives : ( ( ( rule__ShortestPathPattern__Group_0__0 ) ) | ( ( rule__ShortestPathPattern__Group_1__0 ) ) );
    public final void rule__ShortestPathPattern__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3903:1: ( ( ( rule__ShortestPathPattern__Group_0__0 ) ) | ( ( rule__ShortestPathPattern__Group_1__0 ) ) )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==SHORTESTPATH) ) {
                alt23=1;
            }
            else if ( (LA23_0==ALLSHORTESTPATHS) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // InternalOpenCypherParser.g:3904:2: ( ( rule__ShortestPathPattern__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3904:2: ( ( rule__ShortestPathPattern__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3905:3: ( rule__ShortestPathPattern__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getShortestPathPatternAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3906:3: ( rule__ShortestPathPattern__Group_0__0 )
                    // InternalOpenCypherParser.g:3906:4: rule__ShortestPathPattern__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ShortestPathPattern__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getShortestPathPatternAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3910:2: ( ( rule__ShortestPathPattern__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3910:2: ( ( rule__ShortestPathPattern__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3911:3: ( rule__ShortestPathPattern__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getShortestPathPatternAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3912:3: ( rule__ShortestPathPattern__Group_1__0 )
                    // InternalOpenCypherParser.g:3912:4: rule__ShortestPathPattern__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ShortestPathPattern__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getShortestPathPatternAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Alternatives"


    // $ANTLR start "rule__PatternElement__Alternatives"
    // InternalOpenCypherParser.g:3920:1: rule__PatternElement__Alternatives : ( ( ( rule__PatternElement__Group_0__0 ) ) | ( ( rule__PatternElement__Group_1__0 ) ) );
    public final void rule__PatternElement__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3924:1: ( ( ( rule__PatternElement__Group_0__0 ) ) | ( ( rule__PatternElement__Group_1__0 ) ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LeftParenthesis) ) {
                int LA24_1 = input.LA(2);

                if ( ((LA24_1>=ALLSHORTESTPATHS && LA24_1<=WHERE)||(LA24_1>=CASE && LA24_1<=XOR)||(LA24_1>=AS && LA24_1<=OR)||LA24_1==DollarSign||LA24_1==RightParenthesis||LA24_1==Colon||LA24_1==LeftCurlyBracket||LA24_1==RULE_ID) ) {
                    alt24=1;
                }
                else if ( (LA24_1==LeftParenthesis) ) {
                    alt24=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // InternalOpenCypherParser.g:3925:2: ( ( rule__PatternElement__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3925:2: ( ( rule__PatternElement__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3926:3: ( rule__PatternElement__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternElementAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3927:3: ( rule__PatternElement__Group_0__0 )
                    // InternalOpenCypherParser.g:3927:4: rule__PatternElement__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternElement__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternElementAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3931:2: ( ( rule__PatternElement__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:3931:2: ( ( rule__PatternElement__Group_1__0 ) )
                    // InternalOpenCypherParser.g:3932:3: ( rule__PatternElement__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternElementAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:3933:3: ( rule__PatternElement__Group_1__0 )
                    // InternalOpenCypherParser.g:3933:4: rule__PatternElement__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternElement__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternElementAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Alternatives"


    // $ANTLR start "rule__Properties__Alternatives"
    // InternalOpenCypherParser.g:3941:1: rule__Properties__Alternatives : ( ( ruleMapLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) );
    public final void rule__Properties__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3945:1: ( ( ruleMapLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) )
            int alt25=3;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    // InternalOpenCypherParser.g:3946:2: ( ruleMapLiteral )
                    {
                    // InternalOpenCypherParser.g:3946:2: ( ruleMapLiteral )
                    // InternalOpenCypherParser.g:3947:3: ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertiesAccess().getMapLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3952:2: ( ruleParameter )
                    {
                    // InternalOpenCypherParser.g:3952:2: ( ruleParameter )
                    // InternalOpenCypherParser.g:3953:3: ruleParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertiesAccess().getParameterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:3958:2: ( ruleLegacyParameter )
                    {
                    // InternalOpenCypherParser.g:3958:2: ( ruleLegacyParameter )
                    // InternalOpenCypherParser.g:3959:3: ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertiesAccess().getLegacyParameterParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Properties__Alternatives"


    // $ANTLR start "rule__ExpressionNot__Alternatives"
    // InternalOpenCypherParser.g:3968:1: rule__ExpressionNot__Alternatives : ( ( ( rule__ExpressionNot__Group_0__0 ) ) | ( ruleExpressionComparison ) );
    public final void rule__ExpressionNot__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3972:1: ( ( ( rule__ExpressionNot__Group_0__0 ) ) | ( ruleExpressionComparison ) )
            int alt26=2;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // InternalOpenCypherParser.g:3973:2: ( ( rule__ExpressionNot__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:3973:2: ( ( rule__ExpressionNot__Group_0__0 ) )
                    // InternalOpenCypherParser.g:3974:3: ( rule__ExpressionNot__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionNotAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:3975:3: ( rule__ExpressionNot__Group_0__0 )
                    // InternalOpenCypherParser.g:3975:4: rule__ExpressionNot__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ExpressionNot__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionNotAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:3979:2: ( ruleExpressionComparison )
                    {
                    // InternalOpenCypherParser.g:3979:2: ( ruleExpressionComparison )
                    // InternalOpenCypherParser.g:3980:3: ruleExpressionComparison
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionNotAccess().getExpressionComparisonParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleExpressionComparison();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionNotAccess().getExpressionComparisonParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Alternatives"


    // $ANTLR start "rule__ExpressionComparison__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:3989:1: rule__ExpressionComparison__OperatorAlternatives_1_1_0 : ( ( EqualsSign ) | ( LessThanSignGreaterThanSign ) | ( LessThanSign ) | ( GreaterThanSign ) | ( LessThanSignEqualsSign ) | ( GreaterThanSignEqualsSign ) );
    public final void rule__ExpressionComparison__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:3993:1: ( ( EqualsSign ) | ( LessThanSignGreaterThanSign ) | ( LessThanSign ) | ( GreaterThanSign ) | ( LessThanSignEqualsSign ) | ( GreaterThanSignEqualsSign ) )
            int alt27=6;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt27=1;
                }
                break;
            case LessThanSignGreaterThanSign:
                {
                alt27=2;
                }
                break;
            case LessThanSign:
                {
                alt27=3;
                }
                break;
            case GreaterThanSign:
                {
                alt27=4;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt27=5;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt27=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // InternalOpenCypherParser.g:3994:2: ( EqualsSign )
                    {
                    // InternalOpenCypherParser.g:3994:2: ( EqualsSign )
                    // InternalOpenCypherParser.g:3995:3: EqualsSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionComparisonAccess().getOperatorEqualsSignKeyword_1_1_0_0()); 
                    }
                    match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionComparisonAccess().getOperatorEqualsSignKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4000:2: ( LessThanSignGreaterThanSign )
                    {
                    // InternalOpenCypherParser.g:4000:2: ( LessThanSignGreaterThanSign )
                    // InternalOpenCypherParser.g:4001:3: LessThanSignGreaterThanSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); 
                    }
                    match(input,LessThanSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4006:2: ( LessThanSign )
                    {
                    // InternalOpenCypherParser.g:4006:2: ( LessThanSign )
                    // InternalOpenCypherParser.g:4007:3: LessThanSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_2()); 
                    }
                    match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4012:2: ( GreaterThanSign )
                    {
                    // InternalOpenCypherParser.g:4012:2: ( GreaterThanSign )
                    // InternalOpenCypherParser.g:4013:3: GreaterThanSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); 
                    }
                    match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4018:2: ( LessThanSignEqualsSign )
                    {
                    // InternalOpenCypherParser.g:4018:2: ( LessThanSignEqualsSign )
                    // InternalOpenCypherParser.g:4019:3: LessThanSignEqualsSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); 
                    }
                    match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4024:2: ( GreaterThanSignEqualsSign )
                    {
                    // InternalOpenCypherParser.g:4024:2: ( GreaterThanSignEqualsSign )
                    // InternalOpenCypherParser.g:4025:3: GreaterThanSignEqualsSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); 
                    }
                    match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4034:1: rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 : ( ( PlusSign ) | ( HyphenMinus ) );
    public final void rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4038:1: ( ( PlusSign ) | ( HyphenMinus ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==PlusSign) ) {
                alt28=1;
            }
            else if ( (LA28_0==HyphenMinus) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // InternalOpenCypherParser.g:4039:2: ( PlusSign )
                    {
                    // InternalOpenCypherParser.g:4039:2: ( PlusSign )
                    // InternalOpenCypherParser.g:4040:3: PlusSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4045:2: ( HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:4045:2: ( HyphenMinus )
                    // InternalOpenCypherParser.g:4046:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__ExpressionMulDiv__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4055:1: rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 : ( ( Asterisk ) | ( Solidus ) | ( PercentSign ) );
    public final void rule__ExpressionMulDiv__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4059:1: ( ( Asterisk ) | ( Solidus ) | ( PercentSign ) )
            int alt29=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt29=1;
                }
                break;
            case Solidus:
                {
                alt29=2;
                }
                break;
            case PercentSign:
                {
                alt29=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // InternalOpenCypherParser.g:4060:2: ( Asterisk )
                    {
                    // InternalOpenCypherParser.g:4060:2: ( Asterisk )
                    // InternalOpenCypherParser.g:4061:3: Asterisk
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionMulDivAccess().getOperatorAsteriskKeyword_1_1_0_0()); 
                    }
                    match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionMulDivAccess().getOperatorAsteriskKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4066:2: ( Solidus )
                    {
                    // InternalOpenCypherParser.g:4066:2: ( Solidus )
                    // InternalOpenCypherParser.g:4067:3: Solidus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionMulDivAccess().getOperatorSolidusKeyword_1_1_0_1()); 
                    }
                    match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionMulDivAccess().getOperatorSolidusKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4072:2: ( PercentSign )
                    {
                    // InternalOpenCypherParser.g:4072:2: ( PercentSign )
                    // InternalOpenCypherParser.g:4073:3: PercentSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionMulDivAccess().getOperatorPercentSignKeyword_1_1_0_2()); 
                    }
                    match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionMulDivAccess().getOperatorPercentSignKeyword_1_1_0_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Alternatives"
    // InternalOpenCypherParser.g:4082:1: rule__ExpressionUnaryPlusMinus__Alternatives : ( ( ruleExpression3 ) | ( ( rule__ExpressionUnaryPlusMinus__Group_1__0 ) ) );
    public final void rule__ExpressionUnaryPlusMinus__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4086:1: ( ( ruleExpression3 ) | ( ( rule__ExpressionUnaryPlusMinus__Group_1__0 ) ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( ((LA30_0>=ALLSHORTESTPATHS && LA30_0<=WHERE)||(LA30_0>=CASE && LA30_0<=XOR)||(LA30_0>=AS && LA30_0<=OR)||LA30_0==DollarSign||LA30_0==LeftParenthesis||LA30_0==LeftSquareBracket||LA30_0==LeftCurlyBracket||LA30_0==RULE_ID||(LA30_0>=RULE_STRING_LITERAL && LA30_0<=RULE_DECIMAL)) ) {
                alt30=1;
            }
            else if ( (LA30_0==PlusSign||LA30_0==HyphenMinus) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // InternalOpenCypherParser.g:4087:2: ( ruleExpression3 )
                    {
                    // InternalOpenCypherParser.g:4087:2: ( ruleExpression3 )
                    // InternalOpenCypherParser.g:4088:3: ruleExpression3
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionUnaryPlusMinusAccess().getExpression3ParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleExpression3();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionUnaryPlusMinusAccess().getExpression3ParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4093:2: ( ( rule__ExpressionUnaryPlusMinus__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4093:2: ( ( rule__ExpressionUnaryPlusMinus__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4094:3: ( rule__ExpressionUnaryPlusMinus__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionUnaryPlusMinusAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4095:3: ( rule__ExpressionUnaryPlusMinus__Group_1__0 )
                    // InternalOpenCypherParser.g:4095:4: rule__ExpressionUnaryPlusMinus__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ExpressionUnaryPlusMinus__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionUnaryPlusMinusAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Alternatives"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0"
    // InternalOpenCypherParser.g:4103:1: rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 : ( ( PlusSign ) | ( HyphenMinus ) );
    public final void rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4107:1: ( ( PlusSign ) | ( HyphenMinus ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==PlusSign) ) {
                alt31=1;
            }
            else if ( (LA31_0==HyphenMinus) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // InternalOpenCypherParser.g:4108:2: ( PlusSign )
                    {
                    // InternalOpenCypherParser.g:4108:2: ( PlusSign )
                    // InternalOpenCypherParser.g:4109:3: PlusSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorPlusSignKeyword_1_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4114:2: ( HyphenMinus )
                    {
                    // InternalOpenCypherParser.g:4114:2: ( HyphenMinus )
                    // InternalOpenCypherParser.g:4115:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0"


    // $ANTLR start "rule__Expression3__Alternatives_1"
    // InternalOpenCypherParser.g:4124:1: rule__Expression3__Alternatives_1 : ( ( ( rule__Expression3__Group_1_0__0 ) ) | ( ( rule__Expression3__Group_1_1__0 ) ) | ( ( rule__Expression3__Group_1_2__0 ) ) | ( ( rule__Expression3__Group_1_3__0 ) ) | ( ( rule__Expression3__Group_1_4__0 ) ) | ( ( rule__Expression3__Group_1_5__0 ) ) | ( ( rule__Expression3__Group_1_6__0 ) ) | ( ( rule__Expression3__Group_1_7__0 ) ) );
    public final void rule__Expression3__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4128:1: ( ( ( rule__Expression3__Group_1_0__0 ) ) | ( ( rule__Expression3__Group_1_1__0 ) ) | ( ( rule__Expression3__Group_1_2__0 ) ) | ( ( rule__Expression3__Group_1_3__0 ) ) | ( ( rule__Expression3__Group_1_4__0 ) ) | ( ( rule__Expression3__Group_1_5__0 ) ) | ( ( rule__Expression3__Group_1_6__0 ) ) | ( ( rule__Expression3__Group_1_7__0 ) ) )
            int alt32=8;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // InternalOpenCypherParser.g:4129:2: ( ( rule__Expression3__Group_1_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4129:2: ( ( rule__Expression3__Group_1_0__0 ) )
                    // InternalOpenCypherParser.g:4130:3: ( rule__Expression3__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_0()); 
                    }
                    // InternalOpenCypherParser.g:4131:3: ( rule__Expression3__Group_1_0__0 )
                    // InternalOpenCypherParser.g:4131:4: rule__Expression3__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4135:2: ( ( rule__Expression3__Group_1_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4135:2: ( ( rule__Expression3__Group_1_1__0 ) )
                    // InternalOpenCypherParser.g:4136:3: ( rule__Expression3__Group_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_1()); 
                    }
                    // InternalOpenCypherParser.g:4137:3: ( rule__Expression3__Group_1_1__0 )
                    // InternalOpenCypherParser.g:4137:4: rule__Expression3__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4141:2: ( ( rule__Expression3__Group_1_2__0 ) )
                    {
                    // InternalOpenCypherParser.g:4141:2: ( ( rule__Expression3__Group_1_2__0 ) )
                    // InternalOpenCypherParser.g:4142:3: ( rule__Expression3__Group_1_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_2()); 
                    }
                    // InternalOpenCypherParser.g:4143:3: ( rule__Expression3__Group_1_2__0 )
                    // InternalOpenCypherParser.g:4143:4: rule__Expression3__Group_1_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4147:2: ( ( rule__Expression3__Group_1_3__0 ) )
                    {
                    // InternalOpenCypherParser.g:4147:2: ( ( rule__Expression3__Group_1_3__0 ) )
                    // InternalOpenCypherParser.g:4148:3: ( rule__Expression3__Group_1_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_3()); 
                    }
                    // InternalOpenCypherParser.g:4149:3: ( rule__Expression3__Group_1_3__0 )
                    // InternalOpenCypherParser.g:4149:4: rule__Expression3__Group_1_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4153:2: ( ( rule__Expression3__Group_1_4__0 ) )
                    {
                    // InternalOpenCypherParser.g:4153:2: ( ( rule__Expression3__Group_1_4__0 ) )
                    // InternalOpenCypherParser.g:4154:3: ( rule__Expression3__Group_1_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_4()); 
                    }
                    // InternalOpenCypherParser.g:4155:3: ( rule__Expression3__Group_1_4__0 )
                    // InternalOpenCypherParser.g:4155:4: rule__Expression3__Group_1_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4159:2: ( ( rule__Expression3__Group_1_5__0 ) )
                    {
                    // InternalOpenCypherParser.g:4159:2: ( ( rule__Expression3__Group_1_5__0 ) )
                    // InternalOpenCypherParser.g:4160:3: ( rule__Expression3__Group_1_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_5()); 
                    }
                    // InternalOpenCypherParser.g:4161:3: ( rule__Expression3__Group_1_5__0 )
                    // InternalOpenCypherParser.g:4161:4: rule__Expression3__Group_1_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:4165:2: ( ( rule__Expression3__Group_1_6__0 ) )
                    {
                    // InternalOpenCypherParser.g:4165:2: ( ( rule__Expression3__Group_1_6__0 ) )
                    // InternalOpenCypherParser.g:4166:3: ( rule__Expression3__Group_1_6__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_6()); 
                    }
                    // InternalOpenCypherParser.g:4167:3: ( rule__Expression3__Group_1_6__0 )
                    // InternalOpenCypherParser.g:4167:4: rule__Expression3__Group_1_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:4171:2: ( ( rule__Expression3__Group_1_7__0 ) )
                    {
                    // InternalOpenCypherParser.g:4171:2: ( ( rule__Expression3__Group_1_7__0 ) )
                    // InternalOpenCypherParser.g:4172:3: ( rule__Expression3__Group_1_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getExpression3Access().getGroup_1_7()); 
                    }
                    // InternalOpenCypherParser.g:4173:3: ( rule__Expression3__Group_1_7__0 )
                    // InternalOpenCypherParser.g:4173:4: rule__Expression3__Group_1_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getExpression3Access().getGroup_1_7()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Alternatives_1"


    // $ANTLR start "rule__Atom__Alternatives"
    // InternalOpenCypherParser.g:4181:1: rule__Atom__Alternatives : ( ( ( rule__Atom__Group_0__0 ) ) | ( ( rule__Atom__Group_1__0 ) ) | ( ruleParameter ) | ( ruleLegacyParameter ) | ( ( rule__Atom__Group_4__0 ) ) | ( ( rule__Atom__Group_5__0 ) ) | ( ruleCaseExpression ) | ( ( rule__Atom__Group_7__0 ) ) | ( ruleMapLiteral ) | ( ruleListComprehension ) | ( rulePatternComprehension ) | ( ( rule__Atom__Group_11__0 ) ) | ( ( rule__Atom__Group_12__0 ) ) | ( ruleReduce ) | ( ( rule__Atom__Group_14__0 ) ) | ( ( rule__Atom__Group_15__0 ) ) | ( ( rule__Atom__Group_16__0 ) ) | ( ( rule__Atom__Group_17__0 ) ) | ( ( rule__Atom__Group_18__0 ) ) | ( ruleShortestPathPattern ) | ( ruleRelationshipsPattern ) | ( ruleParenthesizedExpression ) | ( ruleFunctionInvocation ) | ( ( rule__Atom__Group_23__0 ) ) );
    public final void rule__Atom__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4185:1: ( ( ( rule__Atom__Group_0__0 ) ) | ( ( rule__Atom__Group_1__0 ) ) | ( ruleParameter ) | ( ruleLegacyParameter ) | ( ( rule__Atom__Group_4__0 ) ) | ( ( rule__Atom__Group_5__0 ) ) | ( ruleCaseExpression ) | ( ( rule__Atom__Group_7__0 ) ) | ( ruleMapLiteral ) | ( ruleListComprehension ) | ( rulePatternComprehension ) | ( ( rule__Atom__Group_11__0 ) ) | ( ( rule__Atom__Group_12__0 ) ) | ( ruleReduce ) | ( ( rule__Atom__Group_14__0 ) ) | ( ( rule__Atom__Group_15__0 ) ) | ( ( rule__Atom__Group_16__0 ) ) | ( ( rule__Atom__Group_17__0 ) ) | ( ( rule__Atom__Group_18__0 ) ) | ( ruleShortestPathPattern ) | ( ruleRelationshipsPattern ) | ( ruleParenthesizedExpression ) | ( ruleFunctionInvocation ) | ( ( rule__Atom__Group_23__0 ) ) )
            int alt33=24;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // InternalOpenCypherParser.g:4186:2: ( ( rule__Atom__Group_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4186:2: ( ( rule__Atom__Group_0__0 ) )
                    // InternalOpenCypherParser.g:4187:3: ( rule__Atom__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_0()); 
                    }
                    // InternalOpenCypherParser.g:4188:3: ( rule__Atom__Group_0__0 )
                    // InternalOpenCypherParser.g:4188:4: rule__Atom__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4192:2: ( ( rule__Atom__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4192:2: ( ( rule__Atom__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4193:3: ( rule__Atom__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4194:3: ( rule__Atom__Group_1__0 )
                    // InternalOpenCypherParser.g:4194:4: rule__Atom__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4198:2: ( ruleParameter )
                    {
                    // InternalOpenCypherParser.g:4198:2: ( ruleParameter )
                    // InternalOpenCypherParser.g:4199:3: ruleParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getParameterParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getParameterParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4204:2: ( ruleLegacyParameter )
                    {
                    // InternalOpenCypherParser.g:4204:2: ( ruleLegacyParameter )
                    // InternalOpenCypherParser.g:4205:3: ruleLegacyParameter
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleLegacyParameter();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4210:2: ( ( rule__Atom__Group_4__0 ) )
                    {
                    // InternalOpenCypherParser.g:4210:2: ( ( rule__Atom__Group_4__0 ) )
                    // InternalOpenCypherParser.g:4211:3: ( rule__Atom__Group_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_4()); 
                    }
                    // InternalOpenCypherParser.g:4212:3: ( rule__Atom__Group_4__0 )
                    // InternalOpenCypherParser.g:4212:4: rule__Atom__Group_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4216:2: ( ( rule__Atom__Group_5__0 ) )
                    {
                    // InternalOpenCypherParser.g:4216:2: ( ( rule__Atom__Group_5__0 ) )
                    // InternalOpenCypherParser.g:4217:3: ( rule__Atom__Group_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_5()); 
                    }
                    // InternalOpenCypherParser.g:4218:3: ( rule__Atom__Group_5__0 )
                    // InternalOpenCypherParser.g:4218:4: rule__Atom__Group_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:4222:2: ( ruleCaseExpression )
                    {
                    // InternalOpenCypherParser.g:4222:2: ( ruleCaseExpression )
                    // InternalOpenCypherParser.g:4223:3: ruleCaseExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleCaseExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:4228:2: ( ( rule__Atom__Group_7__0 ) )
                    {
                    // InternalOpenCypherParser.g:4228:2: ( ( rule__Atom__Group_7__0 ) )
                    // InternalOpenCypherParser.g:4229:3: ( rule__Atom__Group_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_7()); 
                    }
                    // InternalOpenCypherParser.g:4230:3: ( rule__Atom__Group_7__0 )
                    // InternalOpenCypherParser.g:4230:4: rule__Atom__Group_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:4234:2: ( ruleMapLiteral )
                    {
                    // InternalOpenCypherParser.g:4234:2: ( ruleMapLiteral )
                    // InternalOpenCypherParser.g:4235:3: ruleMapLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getMapLiteralParserRuleCall_8()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleMapLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getMapLiteralParserRuleCall_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:4240:2: ( ruleListComprehension )
                    {
                    // InternalOpenCypherParser.g:4240:2: ( ruleListComprehension )
                    // InternalOpenCypherParser.g:4241:3: ruleListComprehension
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_9()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleListComprehension();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:4246:2: ( rulePatternComprehension )
                    {
                    // InternalOpenCypherParser.g:4246:2: ( rulePatternComprehension )
                    // InternalOpenCypherParser.g:4247:3: rulePatternComprehension
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_10()); 
                    }
                    pushFollow(FOLLOW_2);
                    rulePatternComprehension();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:4252:2: ( ( rule__Atom__Group_11__0 ) )
                    {
                    // InternalOpenCypherParser.g:4252:2: ( ( rule__Atom__Group_11__0 ) )
                    // InternalOpenCypherParser.g:4253:3: ( rule__Atom__Group_11__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_11()); 
                    }
                    // InternalOpenCypherParser.g:4254:3: ( rule__Atom__Group_11__0 )
                    // InternalOpenCypherParser.g:4254:4: rule__Atom__Group_11__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_11__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:4258:2: ( ( rule__Atom__Group_12__0 ) )
                    {
                    // InternalOpenCypherParser.g:4258:2: ( ( rule__Atom__Group_12__0 ) )
                    // InternalOpenCypherParser.g:4259:3: ( rule__Atom__Group_12__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_12()); 
                    }
                    // InternalOpenCypherParser.g:4260:3: ( rule__Atom__Group_12__0 )
                    // InternalOpenCypherParser.g:4260:4: rule__Atom__Group_12__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_12__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_12()); 
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:4264:2: ( ruleReduce )
                    {
                    // InternalOpenCypherParser.g:4264:2: ( ruleReduce )
                    // InternalOpenCypherParser.g:4265:3: ruleReduce
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getReduceParserRuleCall_13()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleReduce();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getReduceParserRuleCall_13()); 
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:4270:2: ( ( rule__Atom__Group_14__0 ) )
                    {
                    // InternalOpenCypherParser.g:4270:2: ( ( rule__Atom__Group_14__0 ) )
                    // InternalOpenCypherParser.g:4271:3: ( rule__Atom__Group_14__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_14()); 
                    }
                    // InternalOpenCypherParser.g:4272:3: ( rule__Atom__Group_14__0 )
                    // InternalOpenCypherParser.g:4272:4: rule__Atom__Group_14__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_14__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_14()); 
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:4276:2: ( ( rule__Atom__Group_15__0 ) )
                    {
                    // InternalOpenCypherParser.g:4276:2: ( ( rule__Atom__Group_15__0 ) )
                    // InternalOpenCypherParser.g:4277:3: ( rule__Atom__Group_15__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_15()); 
                    }
                    // InternalOpenCypherParser.g:4278:3: ( rule__Atom__Group_15__0 )
                    // InternalOpenCypherParser.g:4278:4: rule__Atom__Group_15__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_15__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_15()); 
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:4282:2: ( ( rule__Atom__Group_16__0 ) )
                    {
                    // InternalOpenCypherParser.g:4282:2: ( ( rule__Atom__Group_16__0 ) )
                    // InternalOpenCypherParser.g:4283:3: ( rule__Atom__Group_16__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_16()); 
                    }
                    // InternalOpenCypherParser.g:4284:3: ( rule__Atom__Group_16__0 )
                    // InternalOpenCypherParser.g:4284:4: rule__Atom__Group_16__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_16__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_16()); 
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:4288:2: ( ( rule__Atom__Group_17__0 ) )
                    {
                    // InternalOpenCypherParser.g:4288:2: ( ( rule__Atom__Group_17__0 ) )
                    // InternalOpenCypherParser.g:4289:3: ( rule__Atom__Group_17__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_17()); 
                    }
                    // InternalOpenCypherParser.g:4290:3: ( rule__Atom__Group_17__0 )
                    // InternalOpenCypherParser.g:4290:4: rule__Atom__Group_17__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_17__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_17()); 
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:4294:2: ( ( rule__Atom__Group_18__0 ) )
                    {
                    // InternalOpenCypherParser.g:4294:2: ( ( rule__Atom__Group_18__0 ) )
                    // InternalOpenCypherParser.g:4295:3: ( rule__Atom__Group_18__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_18()); 
                    }
                    // InternalOpenCypherParser.g:4296:3: ( rule__Atom__Group_18__0 )
                    // InternalOpenCypherParser.g:4296:4: rule__Atom__Group_18__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_18__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_18()); 
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:4300:2: ( ruleShortestPathPattern )
                    {
                    // InternalOpenCypherParser.g:4300:2: ( ruleShortestPathPattern )
                    // InternalOpenCypherParser.g:4301:3: ruleShortestPathPattern
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_19()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleShortestPathPattern();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_19()); 
                    }

                    }


                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:4306:2: ( ruleRelationshipsPattern )
                    {
                    // InternalOpenCypherParser.g:4306:2: ( ruleRelationshipsPattern )
                    // InternalOpenCypherParser.g:4307:3: ruleRelationshipsPattern
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_20()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRelationshipsPattern();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_20()); 
                    }

                    }


                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:4312:2: ( ruleParenthesizedExpression )
                    {
                    // InternalOpenCypherParser.g:4312:2: ( ruleParenthesizedExpression )
                    // InternalOpenCypherParser.g:4313:3: ruleParenthesizedExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_21()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_21()); 
                    }

                    }


                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:4318:2: ( ruleFunctionInvocation )
                    {
                    // InternalOpenCypherParser.g:4318:2: ( ruleFunctionInvocation )
                    // InternalOpenCypherParser.g:4319:3: ruleFunctionInvocation
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_22()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleFunctionInvocation();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_22()); 
                    }

                    }


                    }
                    break;
                case 24 :
                    // InternalOpenCypherParser.g:4324:2: ( ( rule__Atom__Group_23__0 ) )
                    {
                    // InternalOpenCypherParser.g:4324:2: ( ( rule__Atom__Group_23__0 ) )
                    // InternalOpenCypherParser.g:4325:3: ( rule__Atom__Group_23__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getGroup_23()); 
                    }
                    // InternalOpenCypherParser.g:4326:3: ( rule__Atom__Group_23__0 )
                    // InternalOpenCypherParser.g:4326:4: rule__Atom__Group_23__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_23__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getGroup_23()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Alternatives"


    // $ANTLR start "rule__Atom__ValueAlternatives_4_1_0"
    // InternalOpenCypherParser.g:4334:1: rule__Atom__ValueAlternatives_4_1_0 : ( ( TRUE ) | ( FALSE ) );
    public final void rule__Atom__ValueAlternatives_4_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4338:1: ( ( TRUE ) | ( FALSE ) )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==TRUE) ) {
                alt34=1;
            }
            else if ( (LA34_0==FALSE) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // InternalOpenCypherParser.g:4339:2: ( TRUE )
                    {
                    // InternalOpenCypherParser.g:4339:2: ( TRUE )
                    // InternalOpenCypherParser.g:4340:3: TRUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getValueTRUEKeyword_4_1_0_0()); 
                    }
                    match(input,TRUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getValueTRUEKeyword_4_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4345:2: ( FALSE )
                    {
                    // InternalOpenCypherParser.g:4345:2: ( FALSE )
                    // InternalOpenCypherParser.g:4346:3: FALSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAtomAccess().getValueFALSEKeyword_4_1_0_1()); 
                    }
                    match(input,FALSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAtomAccess().getValueFALSEKeyword_4_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ValueAlternatives_4_1_0"


    // $ANTLR start "rule__PropertyLookup__Alternatives_1"
    // InternalOpenCypherParser.g:4355:1: rule__PropertyLookup__Alternatives_1 : ( ( ( rule__PropertyLookup__Group_1_0__0 ) ) | ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) ) );
    public final void rule__PropertyLookup__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4359:1: ( ( ( rule__PropertyLookup__Group_1_0__0 ) ) | ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) ) )
            int alt35=2;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // InternalOpenCypherParser.g:4360:2: ( ( rule__PropertyLookup__Group_1_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4360:2: ( ( rule__PropertyLookup__Group_1_0__0 ) )
                    // InternalOpenCypherParser.g:4361:3: ( rule__PropertyLookup__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getGroup_1_0()); 
                    }
                    // InternalOpenCypherParser.g:4362:3: ( rule__PropertyLookup__Group_1_0__0 )
                    // InternalOpenCypherParser.g:4362:4: rule__PropertyLookup__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PropertyLookup__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4366:2: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) )
                    {
                    // InternalOpenCypherParser.g:4366:2: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) )
                    // InternalOpenCypherParser.g:4367:3: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1()); 
                    }
                    // InternalOpenCypherParser.g:4368:3: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 )
                    // InternalOpenCypherParser.g:4368:4: rule__PropertyLookup__PropertyKeyNameAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__PropertyLookup__PropertyKeyNameAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Alternatives_1"


    // $ANTLR start "rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0"
    // InternalOpenCypherParser.g:4376:1: rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 : ( ( QuestionMark ) | ( ExclamationMark ) );
    public final void rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4380:1: ( ( QuestionMark ) | ( ExclamationMark ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==QuestionMark) ) {
                alt36=1;
            }
            else if ( (LA36_0==ExclamationMark) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // InternalOpenCypherParser.g:4381:2: ( QuestionMark )
                    {
                    // InternalOpenCypherParser.g:4381:2: ( QuestionMark )
                    // InternalOpenCypherParser.g:4382:3: QuestionMark
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0()); 
                    }
                    match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorQuestionMarkKeyword_1_0_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4387:2: ( ExclamationMark )
                    {
                    // InternalOpenCypherParser.g:4387:2: ( ExclamationMark )
                    // InternalOpenCypherParser.g:4388:3: ExclamationMark
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1()); 
                    }
                    match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorExclamationMarkKeyword_1_0_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0"


    // $ANTLR start "rule__CaseExpression__Alternatives_0"
    // InternalOpenCypherParser.g:4397:1: rule__CaseExpression__Alternatives_0 : ( ( ( rule__CaseExpression__Group_0_0__0 ) ) | ( ( rule__CaseExpression__Group_0_1__0 ) ) );
    public final void rule__CaseExpression__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4401:1: ( ( ( rule__CaseExpression__Group_0_0__0 ) ) | ( ( rule__CaseExpression__Group_0_1__0 ) ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==CASE) ) {
                int LA37_1 = input.LA(2);

                if ( (synpred97_InternalOpenCypherParser()) ) {
                    alt37=1;
                }
                else if ( (true) ) {
                    alt37=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // InternalOpenCypherParser.g:4402:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
                    {
                    // InternalOpenCypherParser.g:4402:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
                    // InternalOpenCypherParser.g:4403:3: ( rule__CaseExpression__Group_0_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); 
                    }
                    // InternalOpenCypherParser.g:4404:3: ( rule__CaseExpression__Group_0_0__0 )
                    // InternalOpenCypherParser.g:4404:4: rule__CaseExpression__Group_0_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__CaseExpression__Group_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4408:2: ( ( rule__CaseExpression__Group_0_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4408:2: ( ( rule__CaseExpression__Group_0_1__0 ) )
                    // InternalOpenCypherParser.g:4409:3: ( rule__CaseExpression__Group_0_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCaseExpressionAccess().getGroup_0_1()); 
                    }
                    // InternalOpenCypherParser.g:4410:3: ( rule__CaseExpression__Group_0_1__0 )
                    // InternalOpenCypherParser.g:4410:4: rule__CaseExpression__Group_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__CaseExpression__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCaseExpressionAccess().getGroup_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Alternatives_0"


    // $ANTLR start "rule__LegacyParameter__ParameterAlternatives_1_0"
    // InternalOpenCypherParser.g:4418:1: rule__LegacyParameter__ParameterAlternatives_1_0 : ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) );
    public final void rule__LegacyParameter__ParameterAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4422:1: ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0>=ALLSHORTESTPATHS && LA38_0<=WHERE)||(LA38_0>=CASE && LA38_0<=XOR)||(LA38_0>=AS && LA38_0<=OR)||LA38_0==RULE_ID) ) {
                alt38=1;
            }
            else if ( ((LA38_0>=RULE_HEX && LA38_0<=RULE_DECIMAL)) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // InternalOpenCypherParser.g:4423:2: ( ruleSYMBOLIC_NAME_X )
                    {
                    // InternalOpenCypherParser.g:4423:2: ( ruleSYMBOLIC_NAME_X )
                    // InternalOpenCypherParser.g:4424:3: ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLegacyParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4429:2: ( ruleNumber )
                    {
                    // InternalOpenCypherParser.g:4429:2: ( ruleNumber )
                    // InternalOpenCypherParser.g:4430:3: ruleNumber
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNumber();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLegacyParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__ParameterAlternatives_1_0"


    // $ANTLR start "rule__Parameter__ParameterAlternatives_1_0"
    // InternalOpenCypherParser.g:4439:1: rule__Parameter__ParameterAlternatives_1_0 : ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) );
    public final void rule__Parameter__ParameterAlternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4443:1: ( ( ruleSYMBOLIC_NAME_X ) | ( ruleNumber ) )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( ((LA39_0>=ALLSHORTESTPATHS && LA39_0<=WHERE)||(LA39_0>=CASE && LA39_0<=XOR)||(LA39_0>=AS && LA39_0<=OR)||LA39_0==RULE_ID) ) {
                alt39=1;
            }
            else if ( ((LA39_0>=RULE_HEX && LA39_0<=RULE_DECIMAL)) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // InternalOpenCypherParser.g:4444:2: ( ruleSYMBOLIC_NAME_X )
                    {
                    // InternalOpenCypherParser.g:4444:2: ( ruleSYMBOLIC_NAME_X )
                    // InternalOpenCypherParser.g:4445:3: ruleSYMBOLIC_NAME_X
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSYMBOLIC_NAME_X();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getParameterAccess().getParameterSYMBOLIC_NAME_XParserRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4450:2: ( ruleNumber )
                    {
                    // InternalOpenCypherParser.g:4450:2: ( ruleNumber )
                    // InternalOpenCypherParser.g:4451:3: ruleNumber
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNumber();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getParameterAccess().getParameterNumberParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__ParameterAlternatives_1_0"


    // $ANTLR start "rule__Number__Alternatives"
    // InternalOpenCypherParser.g:4460:1: rule__Number__Alternatives : ( ( RULE_HEX ) | ( ( rule__Number__Group_1__0 ) ) );
    public final void rule__Number__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4464:1: ( ( RULE_HEX ) | ( ( rule__Number__Group_1__0 ) ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==RULE_HEX) ) {
                alt40=1;
            }
            else if ( ((LA40_0>=RULE_INT && LA40_0<=RULE_DECIMAL)) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // InternalOpenCypherParser.g:4465:2: ( RULE_HEX )
                    {
                    // InternalOpenCypherParser.g:4465:2: ( RULE_HEX )
                    // InternalOpenCypherParser.g:4466:3: RULE_HEX
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                    }
                    match(input,RULE_HEX,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4471:2: ( ( rule__Number__Group_1__0 ) )
                    {
                    // InternalOpenCypherParser.g:4471:2: ( ( rule__Number__Group_1__0 ) )
                    // InternalOpenCypherParser.g:4472:3: ( rule__Number__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getGroup_1()); 
                    }
                    // InternalOpenCypherParser.g:4473:3: ( rule__Number__Group_1__0 )
                    // InternalOpenCypherParser.g:4473:4: rule__Number__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives"


    // $ANTLR start "rule__Number__Alternatives_1_0"
    // InternalOpenCypherParser.g:4481:1: rule__Number__Alternatives_1_0 : ( ( RULE_INT ) | ( RULE_DECIMAL ) );
    public final void rule__Number__Alternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4485:1: ( ( RULE_INT ) | ( RULE_DECIMAL ) )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==RULE_INT) ) {
                alt41=1;
            }
            else if ( (LA41_0==RULE_DECIMAL) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // InternalOpenCypherParser.g:4486:2: ( RULE_INT )
                    {
                    // InternalOpenCypherParser.g:4486:2: ( RULE_INT )
                    // InternalOpenCypherParser.g:4487:3: RULE_INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4492:2: ( RULE_DECIMAL )
                    {
                    // InternalOpenCypherParser.g:4492:2: ( RULE_DECIMAL )
                    // InternalOpenCypherParser.g:4493:3: RULE_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_1_0"


    // $ANTLR start "rule__Number__Alternatives_1_1_1"
    // InternalOpenCypherParser.g:4502:1: rule__Number__Alternatives_1_1_1 : ( ( RULE_INT ) | ( RULE_DECIMAL ) );
    public final void rule__Number__Alternatives_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4506:1: ( ( RULE_INT ) | ( RULE_DECIMAL ) )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==RULE_INT) ) {
                alt42=1;
            }
            else if ( (LA42_0==RULE_DECIMAL) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // InternalOpenCypherParser.g:4507:2: ( RULE_INT )
                    {
                    // InternalOpenCypherParser.g:4507:2: ( RULE_INT )
                    // InternalOpenCypherParser.g:4508:3: RULE_INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4513:2: ( RULE_DECIMAL )
                    {
                    // InternalOpenCypherParser.g:4513:2: ( RULE_DECIMAL )
                    // InternalOpenCypherParser.g:4514:3: RULE_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_1_1_1"


    // $ANTLR start "rule__SYMBOLIC_NAME_X__Alternatives"
    // InternalOpenCypherParser.g:4523:1: rule__SYMBOLIC_NAME_X__Alternatives : ( ( RULE_ID ) | ( CYPHER ) | ( EXPLAIN ) | ( PROFILE ) | ( USING ) | ( PERIODIC ) | ( COMMIT ) | ( UNION ) | ( ALL ) | ( CREATE ) | ( INDEX ) | ( ON ) | ( DROP ) | ( CONSTRAINT ) | ( ASSERT ) | ( IS ) | ( UNIQUE ) | ( EXISTS ) | ( LOAD ) | ( CSV ) | ( WITH ) | ( HEADERS ) | ( FROM ) | ( AS ) | ( FIELDTERMINATOR ) | ( OPTIONAL ) | ( MATCH ) | ( UNWIND ) | ( MERGE ) | ( SET ) | ( DELETE ) | ( DETACH ) | ( REMOVE ) | ( FOREACH ) | ( IN ) | ( DISTINCT ) | ( RETURN ) | ( ORDER ) | ( BY ) | ( SKIP ) | ( LIMIT ) | ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) | ( JOIN ) | ( SCAN ) | ( START ) | ( NODE ) | ( RELATIONSHIP ) | ( REL ) | ( WHERE ) | ( SHORTESTPATH ) | ( ALLSHORTESTPATHS ) | ( OR ) | ( XOR ) | ( AND ) | ( NOT ) | ( STARTS ) | ( ENDS ) | ( CONTAINS ) | ( NULL ) | ( TRUE ) | ( FALSE ) | ( COUNT ) | ( FILTER ) | ( EXTRACT ) | ( ANY ) | ( NONE ) | ( SINGLE ) | ( REDUCE ) | ( CASE ) | ( ELSE ) | ( END ) | ( WHEN ) | ( THEN ) );
    public final void rule__SYMBOLIC_NAME_X__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4527:1: ( ( RULE_ID ) | ( CYPHER ) | ( EXPLAIN ) | ( PROFILE ) | ( USING ) | ( PERIODIC ) | ( COMMIT ) | ( UNION ) | ( ALL ) | ( CREATE ) | ( INDEX ) | ( ON ) | ( DROP ) | ( CONSTRAINT ) | ( ASSERT ) | ( IS ) | ( UNIQUE ) | ( EXISTS ) | ( LOAD ) | ( CSV ) | ( WITH ) | ( HEADERS ) | ( FROM ) | ( AS ) | ( FIELDTERMINATOR ) | ( OPTIONAL ) | ( MATCH ) | ( UNWIND ) | ( MERGE ) | ( SET ) | ( DELETE ) | ( DETACH ) | ( REMOVE ) | ( FOREACH ) | ( IN ) | ( DISTINCT ) | ( RETURN ) | ( ORDER ) | ( BY ) | ( SKIP ) | ( LIMIT ) | ( DESCENDING ) | ( DESC ) | ( ASCENDING ) | ( ASC ) | ( JOIN ) | ( SCAN ) | ( START ) | ( NODE ) | ( RELATIONSHIP ) | ( REL ) | ( WHERE ) | ( SHORTESTPATH ) | ( ALLSHORTESTPATHS ) | ( OR ) | ( XOR ) | ( AND ) | ( NOT ) | ( STARTS ) | ( ENDS ) | ( CONTAINS ) | ( NULL ) | ( TRUE ) | ( FALSE ) | ( COUNT ) | ( FILTER ) | ( EXTRACT ) | ( ANY ) | ( NONE ) | ( SINGLE ) | ( REDUCE ) | ( CASE ) | ( ELSE ) | ( END ) | ( WHEN ) | ( THEN ) )
            int alt43=76;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt43=1;
                }
                break;
            case CYPHER:
                {
                alt43=2;
                }
                break;
            case EXPLAIN:
                {
                alt43=3;
                }
                break;
            case PROFILE:
                {
                alt43=4;
                }
                break;
            case USING:
                {
                alt43=5;
                }
                break;
            case PERIODIC:
                {
                alt43=6;
                }
                break;
            case COMMIT:
                {
                alt43=7;
                }
                break;
            case UNION:
                {
                alt43=8;
                }
                break;
            case ALL:
                {
                alt43=9;
                }
                break;
            case CREATE:
                {
                alt43=10;
                }
                break;
            case INDEX:
                {
                alt43=11;
                }
                break;
            case ON:
                {
                alt43=12;
                }
                break;
            case DROP:
                {
                alt43=13;
                }
                break;
            case CONSTRAINT:
                {
                alt43=14;
                }
                break;
            case ASSERT:
                {
                alt43=15;
                }
                break;
            case IS:
                {
                alt43=16;
                }
                break;
            case UNIQUE:
                {
                alt43=17;
                }
                break;
            case EXISTS:
                {
                alt43=18;
                }
                break;
            case LOAD:
                {
                alt43=19;
                }
                break;
            case CSV:
                {
                alt43=20;
                }
                break;
            case WITH:
                {
                alt43=21;
                }
                break;
            case HEADERS:
                {
                alt43=22;
                }
                break;
            case FROM:
                {
                alt43=23;
                }
                break;
            case AS:
                {
                alt43=24;
                }
                break;
            case FIELDTERMINATOR:
                {
                alt43=25;
                }
                break;
            case OPTIONAL:
                {
                alt43=26;
                }
                break;
            case MATCH:
                {
                alt43=27;
                }
                break;
            case UNWIND:
                {
                alt43=28;
                }
                break;
            case MERGE:
                {
                alt43=29;
                }
                break;
            case SET:
                {
                alt43=30;
                }
                break;
            case DELETE:
                {
                alt43=31;
                }
                break;
            case DETACH:
                {
                alt43=32;
                }
                break;
            case REMOVE:
                {
                alt43=33;
                }
                break;
            case FOREACH:
                {
                alt43=34;
                }
                break;
            case IN:
                {
                alt43=35;
                }
                break;
            case DISTINCT:
                {
                alt43=36;
                }
                break;
            case RETURN:
                {
                alt43=37;
                }
                break;
            case ORDER:
                {
                alt43=38;
                }
                break;
            case BY:
                {
                alt43=39;
                }
                break;
            case SKIP:
                {
                alt43=40;
                }
                break;
            case LIMIT:
                {
                alt43=41;
                }
                break;
            case DESCENDING:
                {
                alt43=42;
                }
                break;
            case DESC:
                {
                alt43=43;
                }
                break;
            case ASCENDING:
                {
                alt43=44;
                }
                break;
            case ASC:
                {
                alt43=45;
                }
                break;
            case JOIN:
                {
                alt43=46;
                }
                break;
            case SCAN:
                {
                alt43=47;
                }
                break;
            case START:
                {
                alt43=48;
                }
                break;
            case NODE:
                {
                alt43=49;
                }
                break;
            case RELATIONSHIP:
                {
                alt43=50;
                }
                break;
            case REL:
                {
                alt43=51;
                }
                break;
            case WHERE:
                {
                alt43=52;
                }
                break;
            case SHORTESTPATH:
                {
                alt43=53;
                }
                break;
            case ALLSHORTESTPATHS:
                {
                alt43=54;
                }
                break;
            case OR:
                {
                alt43=55;
                }
                break;
            case XOR:
                {
                alt43=56;
                }
                break;
            case AND:
                {
                alt43=57;
                }
                break;
            case NOT:
                {
                alt43=58;
                }
                break;
            case STARTS:
                {
                alt43=59;
                }
                break;
            case ENDS:
                {
                alt43=60;
                }
                break;
            case CONTAINS:
                {
                alt43=61;
                }
                break;
            case NULL:
                {
                alt43=62;
                }
                break;
            case TRUE:
                {
                alt43=63;
                }
                break;
            case FALSE:
                {
                alt43=64;
                }
                break;
            case COUNT:
                {
                alt43=65;
                }
                break;
            case FILTER:
                {
                alt43=66;
                }
                break;
            case EXTRACT:
                {
                alt43=67;
                }
                break;
            case ANY:
                {
                alt43=68;
                }
                break;
            case NONE:
                {
                alt43=69;
                }
                break;
            case SINGLE:
                {
                alt43=70;
                }
                break;
            case REDUCE:
                {
                alt43=71;
                }
                break;
            case CASE:
                {
                alt43=72;
                }
                break;
            case ELSE:
                {
                alt43=73;
                }
                break;
            case END:
                {
                alt43=74;
                }
                break;
            case WHEN:
                {
                alt43=75;
                }
                break;
            case THEN:
                {
                alt43=76;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // InternalOpenCypherParser.g:4528:2: ( RULE_ID )
                    {
                    // InternalOpenCypherParser.g:4528:2: ( RULE_ID )
                    // InternalOpenCypherParser.g:4529:3: RULE_ID
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0()); 
                    }
                    match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getIDTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:4534:2: ( CYPHER )
                    {
                    // InternalOpenCypherParser.g:4534:2: ( CYPHER )
                    // InternalOpenCypherParser.g:4535:3: CYPHER
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1()); 
                    }
                    match(input,CYPHER,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCYPHERKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:4540:2: ( EXPLAIN )
                    {
                    // InternalOpenCypherParser.g:4540:2: ( EXPLAIN )
                    // InternalOpenCypherParser.g:4541:3: EXPLAIN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2()); 
                    }
                    match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXPLAINKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalOpenCypherParser.g:4546:2: ( PROFILE )
                    {
                    // InternalOpenCypherParser.g:4546:2: ( PROFILE )
                    // InternalOpenCypherParser.g:4547:3: PROFILE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3()); 
                    }
                    match(input,PROFILE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getPROFILEKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalOpenCypherParser.g:4552:2: ( USING )
                    {
                    // InternalOpenCypherParser.g:4552:2: ( USING )
                    // InternalOpenCypherParser.g:4553:3: USING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4()); 
                    }
                    match(input,USING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUSINGKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalOpenCypherParser.g:4558:2: ( PERIODIC )
                    {
                    // InternalOpenCypherParser.g:4558:2: ( PERIODIC )
                    // InternalOpenCypherParser.g:4559:3: PERIODIC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5()); 
                    }
                    match(input,PERIODIC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getPERIODICKeyword_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalOpenCypherParser.g:4564:2: ( COMMIT )
                    {
                    // InternalOpenCypherParser.g:4564:2: ( COMMIT )
                    // InternalOpenCypherParser.g:4565:3: COMMIT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6()); 
                    }
                    match(input,COMMIT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOMMITKeyword_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalOpenCypherParser.g:4570:2: ( UNION )
                    {
                    // InternalOpenCypherParser.g:4570:2: ( UNION )
                    // InternalOpenCypherParser.g:4571:3: UNION
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7()); 
                    }
                    match(input,UNION,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIONKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalOpenCypherParser.g:4576:2: ( ALL )
                    {
                    // InternalOpenCypherParser.g:4576:2: ( ALL )
                    // InternalOpenCypherParser.g:4577:3: ALL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8()); 
                    }
                    match(input,ALL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLKeyword_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalOpenCypherParser.g:4582:2: ( CREATE )
                    {
                    // InternalOpenCypherParser.g:4582:2: ( CREATE )
                    // InternalOpenCypherParser.g:4583:3: CREATE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9()); 
                    }
                    match(input,CREATE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCREATEKeyword_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalOpenCypherParser.g:4588:2: ( INDEX )
                    {
                    // InternalOpenCypherParser.g:4588:2: ( INDEX )
                    // InternalOpenCypherParser.g:4589:3: INDEX
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10()); 
                    }
                    match(input,INDEX,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getINDEXKeyword_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalOpenCypherParser.g:4594:2: ( ON )
                    {
                    // InternalOpenCypherParser.g:4594:2: ( ON )
                    // InternalOpenCypherParser.g:4595:3: ON
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11()); 
                    }
                    match(input,ON,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getONKeyword_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalOpenCypherParser.g:4600:2: ( DROP )
                    {
                    // InternalOpenCypherParser.g:4600:2: ( DROP )
                    // InternalOpenCypherParser.g:4601:3: DROP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12()); 
                    }
                    match(input,DROP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDROPKeyword_12()); 
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalOpenCypherParser.g:4606:2: ( CONSTRAINT )
                    {
                    // InternalOpenCypherParser.g:4606:2: ( CONSTRAINT )
                    // InternalOpenCypherParser.g:4607:3: CONSTRAINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13()); 
                    }
                    match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONSTRAINTKeyword_13()); 
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalOpenCypherParser.g:4612:2: ( ASSERT )
                    {
                    // InternalOpenCypherParser.g:4612:2: ( ASSERT )
                    // InternalOpenCypherParser.g:4613:3: ASSERT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14()); 
                    }
                    match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASSERTKeyword_14()); 
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalOpenCypherParser.g:4618:2: ( IS )
                    {
                    // InternalOpenCypherParser.g:4618:2: ( IS )
                    // InternalOpenCypherParser.g:4619:3: IS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15()); 
                    }
                    match(input,IS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getISKeyword_15()); 
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalOpenCypherParser.g:4624:2: ( UNIQUE )
                    {
                    // InternalOpenCypherParser.g:4624:2: ( UNIQUE )
                    // InternalOpenCypherParser.g:4625:3: UNIQUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16()); 
                    }
                    match(input,UNIQUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNIQUEKeyword_16()); 
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalOpenCypherParser.g:4630:2: ( EXISTS )
                    {
                    // InternalOpenCypherParser.g:4630:2: ( EXISTS )
                    // InternalOpenCypherParser.g:4631:3: EXISTS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17()); 
                    }
                    match(input,EXISTS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXISTSKeyword_17()); 
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalOpenCypherParser.g:4636:2: ( LOAD )
                    {
                    // InternalOpenCypherParser.g:4636:2: ( LOAD )
                    // InternalOpenCypherParser.g:4637:3: LOAD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18()); 
                    }
                    match(input,LOAD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getLOADKeyword_18()); 
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalOpenCypherParser.g:4642:2: ( CSV )
                    {
                    // InternalOpenCypherParser.g:4642:2: ( CSV )
                    // InternalOpenCypherParser.g:4643:3: CSV
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19()); 
                    }
                    match(input,CSV,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCSVKeyword_19()); 
                    }

                    }


                    }
                    break;
                case 21 :
                    // InternalOpenCypherParser.g:4648:2: ( WITH )
                    {
                    // InternalOpenCypherParser.g:4648:2: ( WITH )
                    // InternalOpenCypherParser.g:4649:3: WITH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20()); 
                    }
                    match(input,WITH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWITHKeyword_20()); 
                    }

                    }


                    }
                    break;
                case 22 :
                    // InternalOpenCypherParser.g:4654:2: ( HEADERS )
                    {
                    // InternalOpenCypherParser.g:4654:2: ( HEADERS )
                    // InternalOpenCypherParser.g:4655:3: HEADERS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21()); 
                    }
                    match(input,HEADERS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getHEADERSKeyword_21()); 
                    }

                    }


                    }
                    break;
                case 23 :
                    // InternalOpenCypherParser.g:4660:2: ( FROM )
                    {
                    // InternalOpenCypherParser.g:4660:2: ( FROM )
                    // InternalOpenCypherParser.g:4661:3: FROM
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22()); 
                    }
                    match(input,FROM,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFROMKeyword_22()); 
                    }

                    }


                    }
                    break;
                case 24 :
                    // InternalOpenCypherParser.g:4666:2: ( AS )
                    {
                    // InternalOpenCypherParser.g:4666:2: ( AS )
                    // InternalOpenCypherParser.g:4667:3: AS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23()); 
                    }
                    match(input,AS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASKeyword_23()); 
                    }

                    }


                    }
                    break;
                case 25 :
                    // InternalOpenCypherParser.g:4672:2: ( FIELDTERMINATOR )
                    {
                    // InternalOpenCypherParser.g:4672:2: ( FIELDTERMINATOR )
                    // InternalOpenCypherParser.g:4673:3: FIELDTERMINATOR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24()); 
                    }
                    match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFIELDTERMINATORKeyword_24()); 
                    }

                    }


                    }
                    break;
                case 26 :
                    // InternalOpenCypherParser.g:4678:2: ( OPTIONAL )
                    {
                    // InternalOpenCypherParser.g:4678:2: ( OPTIONAL )
                    // InternalOpenCypherParser.g:4679:3: OPTIONAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25()); 
                    }
                    match(input,OPTIONAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getOPTIONALKeyword_25()); 
                    }

                    }


                    }
                    break;
                case 27 :
                    // InternalOpenCypherParser.g:4684:2: ( MATCH )
                    {
                    // InternalOpenCypherParser.g:4684:2: ( MATCH )
                    // InternalOpenCypherParser.g:4685:3: MATCH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26()); 
                    }
                    match(input,MATCH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getMATCHKeyword_26()); 
                    }

                    }


                    }
                    break;
                case 28 :
                    // InternalOpenCypherParser.g:4690:2: ( UNWIND )
                    {
                    // InternalOpenCypherParser.g:4690:2: ( UNWIND )
                    // InternalOpenCypherParser.g:4691:3: UNWIND
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27()); 
                    }
                    match(input,UNWIND,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getUNWINDKeyword_27()); 
                    }

                    }


                    }
                    break;
                case 29 :
                    // InternalOpenCypherParser.g:4696:2: ( MERGE )
                    {
                    // InternalOpenCypherParser.g:4696:2: ( MERGE )
                    // InternalOpenCypherParser.g:4697:3: MERGE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28()); 
                    }
                    match(input,MERGE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getMERGEKeyword_28()); 
                    }

                    }


                    }
                    break;
                case 30 :
                    // InternalOpenCypherParser.g:4702:2: ( SET )
                    {
                    // InternalOpenCypherParser.g:4702:2: ( SET )
                    // InternalOpenCypherParser.g:4703:3: SET
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29()); 
                    }
                    match(input,SET,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSETKeyword_29()); 
                    }

                    }


                    }
                    break;
                case 31 :
                    // InternalOpenCypherParser.g:4708:2: ( DELETE )
                    {
                    // InternalOpenCypherParser.g:4708:2: ( DELETE )
                    // InternalOpenCypherParser.g:4709:3: DELETE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30()); 
                    }
                    match(input,DELETE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDELETEKeyword_30()); 
                    }

                    }


                    }
                    break;
                case 32 :
                    // InternalOpenCypherParser.g:4714:2: ( DETACH )
                    {
                    // InternalOpenCypherParser.g:4714:2: ( DETACH )
                    // InternalOpenCypherParser.g:4715:3: DETACH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31()); 
                    }
                    match(input,DETACH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDETACHKeyword_31()); 
                    }

                    }


                    }
                    break;
                case 33 :
                    // InternalOpenCypherParser.g:4720:2: ( REMOVE )
                    {
                    // InternalOpenCypherParser.g:4720:2: ( REMOVE )
                    // InternalOpenCypherParser.g:4721:3: REMOVE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32()); 
                    }
                    match(input,REMOVE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getREMOVEKeyword_32()); 
                    }

                    }


                    }
                    break;
                case 34 :
                    // InternalOpenCypherParser.g:4726:2: ( FOREACH )
                    {
                    // InternalOpenCypherParser.g:4726:2: ( FOREACH )
                    // InternalOpenCypherParser.g:4727:3: FOREACH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33()); 
                    }
                    match(input,FOREACH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFOREACHKeyword_33()); 
                    }

                    }


                    }
                    break;
                case 35 :
                    // InternalOpenCypherParser.g:4732:2: ( IN )
                    {
                    // InternalOpenCypherParser.g:4732:2: ( IN )
                    // InternalOpenCypherParser.g:4733:3: IN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34()); 
                    }
                    match(input,IN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getINKeyword_34()); 
                    }

                    }


                    }
                    break;
                case 36 :
                    // InternalOpenCypherParser.g:4738:2: ( DISTINCT )
                    {
                    // InternalOpenCypherParser.g:4738:2: ( DISTINCT )
                    // InternalOpenCypherParser.g:4739:3: DISTINCT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35()); 
                    }
                    match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDISTINCTKeyword_35()); 
                    }

                    }


                    }
                    break;
                case 37 :
                    // InternalOpenCypherParser.g:4744:2: ( RETURN )
                    {
                    // InternalOpenCypherParser.g:4744:2: ( RETURN )
                    // InternalOpenCypherParser.g:4745:3: RETURN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36()); 
                    }
                    match(input,RETURN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRETURNKeyword_36()); 
                    }

                    }


                    }
                    break;
                case 38 :
                    // InternalOpenCypherParser.g:4750:2: ( ORDER )
                    {
                    // InternalOpenCypherParser.g:4750:2: ( ORDER )
                    // InternalOpenCypherParser.g:4751:3: ORDER
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37()); 
                    }
                    match(input,ORDER,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getORDERKeyword_37()); 
                    }

                    }


                    }
                    break;
                case 39 :
                    // InternalOpenCypherParser.g:4756:2: ( BY )
                    {
                    // InternalOpenCypherParser.g:4756:2: ( BY )
                    // InternalOpenCypherParser.g:4757:3: BY
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38()); 
                    }
                    match(input,BY,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getBYKeyword_38()); 
                    }

                    }


                    }
                    break;
                case 40 :
                    // InternalOpenCypherParser.g:4762:2: ( SKIP )
                    {
                    // InternalOpenCypherParser.g:4762:2: ( SKIP )
                    // InternalOpenCypherParser.g:4763:3: SKIP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39()); 
                    }
                    match(input,SKIP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSKIPKeyword_39()); 
                    }

                    }


                    }
                    break;
                case 41 :
                    // InternalOpenCypherParser.g:4768:2: ( LIMIT )
                    {
                    // InternalOpenCypherParser.g:4768:2: ( LIMIT )
                    // InternalOpenCypherParser.g:4769:3: LIMIT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40()); 
                    }
                    match(input,LIMIT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getLIMITKeyword_40()); 
                    }

                    }


                    }
                    break;
                case 42 :
                    // InternalOpenCypherParser.g:4774:2: ( DESCENDING )
                    {
                    // InternalOpenCypherParser.g:4774:2: ( DESCENDING )
                    // InternalOpenCypherParser.g:4775:3: DESCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41()); 
                    }
                    match(input,DESCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCENDINGKeyword_41()); 
                    }

                    }


                    }
                    break;
                case 43 :
                    // InternalOpenCypherParser.g:4780:2: ( DESC )
                    {
                    // InternalOpenCypherParser.g:4780:2: ( DESC )
                    // InternalOpenCypherParser.g:4781:3: DESC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42()); 
                    }
                    match(input,DESC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getDESCKeyword_42()); 
                    }

                    }


                    }
                    break;
                case 44 :
                    // InternalOpenCypherParser.g:4786:2: ( ASCENDING )
                    {
                    // InternalOpenCypherParser.g:4786:2: ( ASCENDING )
                    // InternalOpenCypherParser.g:4787:3: ASCENDING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43()); 
                    }
                    match(input,ASCENDING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCENDINGKeyword_43()); 
                    }

                    }


                    }
                    break;
                case 45 :
                    // InternalOpenCypherParser.g:4792:2: ( ASC )
                    {
                    // InternalOpenCypherParser.g:4792:2: ( ASC )
                    // InternalOpenCypherParser.g:4793:3: ASC
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44()); 
                    }
                    match(input,ASC,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getASCKeyword_44()); 
                    }

                    }


                    }
                    break;
                case 46 :
                    // InternalOpenCypherParser.g:4798:2: ( JOIN )
                    {
                    // InternalOpenCypherParser.g:4798:2: ( JOIN )
                    // InternalOpenCypherParser.g:4799:3: JOIN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45()); 
                    }
                    match(input,JOIN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getJOINKeyword_45()); 
                    }

                    }


                    }
                    break;
                case 47 :
                    // InternalOpenCypherParser.g:4804:2: ( SCAN )
                    {
                    // InternalOpenCypherParser.g:4804:2: ( SCAN )
                    // InternalOpenCypherParser.g:4805:3: SCAN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46()); 
                    }
                    match(input,SCAN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSCANKeyword_46()); 
                    }

                    }


                    }
                    break;
                case 48 :
                    // InternalOpenCypherParser.g:4810:2: ( START )
                    {
                    // InternalOpenCypherParser.g:4810:2: ( START )
                    // InternalOpenCypherParser.g:4811:3: START
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47()); 
                    }
                    match(input,START,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTKeyword_47()); 
                    }

                    }


                    }
                    break;
                case 49 :
                    // InternalOpenCypherParser.g:4816:2: ( NODE )
                    {
                    // InternalOpenCypherParser.g:4816:2: ( NODE )
                    // InternalOpenCypherParser.g:4817:3: NODE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48()); 
                    }
                    match(input,NODE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNODEKeyword_48()); 
                    }

                    }


                    }
                    break;
                case 50 :
                    // InternalOpenCypherParser.g:4822:2: ( RELATIONSHIP )
                    {
                    // InternalOpenCypherParser.g:4822:2: ( RELATIONSHIP )
                    // InternalOpenCypherParser.g:4823:3: RELATIONSHIP
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49()); 
                    }
                    match(input,RELATIONSHIP,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELATIONSHIPKeyword_49()); 
                    }

                    }


                    }
                    break;
                case 51 :
                    // InternalOpenCypherParser.g:4828:2: ( REL )
                    {
                    // InternalOpenCypherParser.g:4828:2: ( REL )
                    // InternalOpenCypherParser.g:4829:3: REL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50()); 
                    }
                    match(input,REL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getRELKeyword_50()); 
                    }

                    }


                    }
                    break;
                case 52 :
                    // InternalOpenCypherParser.g:4834:2: ( WHERE )
                    {
                    // InternalOpenCypherParser.g:4834:2: ( WHERE )
                    // InternalOpenCypherParser.g:4835:3: WHERE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51()); 
                    }
                    match(input,WHERE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHEREKeyword_51()); 
                    }

                    }


                    }
                    break;
                case 53 :
                    // InternalOpenCypherParser.g:4840:2: ( SHORTESTPATH )
                    {
                    // InternalOpenCypherParser.g:4840:2: ( SHORTESTPATH )
                    // InternalOpenCypherParser.g:4841:3: SHORTESTPATH
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52()); 
                    }
                    match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSHORTESTPATHKeyword_52()); 
                    }

                    }


                    }
                    break;
                case 54 :
                    // InternalOpenCypherParser.g:4846:2: ( ALLSHORTESTPATHS )
                    {
                    // InternalOpenCypherParser.g:4846:2: ( ALLSHORTESTPATHS )
                    // InternalOpenCypherParser.g:4847:3: ALLSHORTESTPATHS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53()); 
                    }
                    match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getALLSHORTESTPATHSKeyword_53()); 
                    }

                    }


                    }
                    break;
                case 55 :
                    // InternalOpenCypherParser.g:4852:2: ( OR )
                    {
                    // InternalOpenCypherParser.g:4852:2: ( OR )
                    // InternalOpenCypherParser.g:4853:3: OR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54()); 
                    }
                    match(input,OR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getORKeyword_54()); 
                    }

                    }


                    }
                    break;
                case 56 :
                    // InternalOpenCypherParser.g:4858:2: ( XOR )
                    {
                    // InternalOpenCypherParser.g:4858:2: ( XOR )
                    // InternalOpenCypherParser.g:4859:3: XOR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55()); 
                    }
                    match(input,XOR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getXORKeyword_55()); 
                    }

                    }


                    }
                    break;
                case 57 :
                    // InternalOpenCypherParser.g:4864:2: ( AND )
                    {
                    // InternalOpenCypherParser.g:4864:2: ( AND )
                    // InternalOpenCypherParser.g:4865:3: AND
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56()); 
                    }
                    match(input,AND,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getANDKeyword_56()); 
                    }

                    }


                    }
                    break;
                case 58 :
                    // InternalOpenCypherParser.g:4870:2: ( NOT )
                    {
                    // InternalOpenCypherParser.g:4870:2: ( NOT )
                    // InternalOpenCypherParser.g:4871:3: NOT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57()); 
                    }
                    match(input,NOT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNOTKeyword_57()); 
                    }

                    }


                    }
                    break;
                case 59 :
                    // InternalOpenCypherParser.g:4876:2: ( STARTS )
                    {
                    // InternalOpenCypherParser.g:4876:2: ( STARTS )
                    // InternalOpenCypherParser.g:4877:3: STARTS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58()); 
                    }
                    match(input,STARTS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSTARTSKeyword_58()); 
                    }

                    }


                    }
                    break;
                case 60 :
                    // InternalOpenCypherParser.g:4882:2: ( ENDS )
                    {
                    // InternalOpenCypherParser.g:4882:2: ( ENDS )
                    // InternalOpenCypherParser.g:4883:3: ENDS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59()); 
                    }
                    match(input,ENDS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDSKeyword_59()); 
                    }

                    }


                    }
                    break;
                case 61 :
                    // InternalOpenCypherParser.g:4888:2: ( CONTAINS )
                    {
                    // InternalOpenCypherParser.g:4888:2: ( CONTAINS )
                    // InternalOpenCypherParser.g:4889:3: CONTAINS
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60()); 
                    }
                    match(input,CONTAINS,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCONTAINSKeyword_60()); 
                    }

                    }


                    }
                    break;
                case 62 :
                    // InternalOpenCypherParser.g:4894:2: ( NULL )
                    {
                    // InternalOpenCypherParser.g:4894:2: ( NULL )
                    // InternalOpenCypherParser.g:4895:3: NULL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61()); 
                    }
                    match(input,NULL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNULLKeyword_61()); 
                    }

                    }


                    }
                    break;
                case 63 :
                    // InternalOpenCypherParser.g:4900:2: ( TRUE )
                    {
                    // InternalOpenCypherParser.g:4900:2: ( TRUE )
                    // InternalOpenCypherParser.g:4901:3: TRUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62()); 
                    }
                    match(input,TRUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getTRUEKeyword_62()); 
                    }

                    }


                    }
                    break;
                case 64 :
                    // InternalOpenCypherParser.g:4906:2: ( FALSE )
                    {
                    // InternalOpenCypherParser.g:4906:2: ( FALSE )
                    // InternalOpenCypherParser.g:4907:3: FALSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63()); 
                    }
                    match(input,FALSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFALSEKeyword_63()); 
                    }

                    }


                    }
                    break;
                case 65 :
                    // InternalOpenCypherParser.g:4912:2: ( COUNT )
                    {
                    // InternalOpenCypherParser.g:4912:2: ( COUNT )
                    // InternalOpenCypherParser.g:4913:3: COUNT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64()); 
                    }
                    match(input,COUNT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCOUNTKeyword_64()); 
                    }

                    }


                    }
                    break;
                case 66 :
                    // InternalOpenCypherParser.g:4918:2: ( FILTER )
                    {
                    // InternalOpenCypherParser.g:4918:2: ( FILTER )
                    // InternalOpenCypherParser.g:4919:3: FILTER
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65()); 
                    }
                    match(input,FILTER,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getFILTERKeyword_65()); 
                    }

                    }


                    }
                    break;
                case 67 :
                    // InternalOpenCypherParser.g:4924:2: ( EXTRACT )
                    {
                    // InternalOpenCypherParser.g:4924:2: ( EXTRACT )
                    // InternalOpenCypherParser.g:4925:3: EXTRACT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66()); 
                    }
                    match(input,EXTRACT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getEXTRACTKeyword_66()); 
                    }

                    }


                    }
                    break;
                case 68 :
                    // InternalOpenCypherParser.g:4930:2: ( ANY )
                    {
                    // InternalOpenCypherParser.g:4930:2: ( ANY )
                    // InternalOpenCypherParser.g:4931:3: ANY
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67()); 
                    }
                    match(input,ANY,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getANYKeyword_67()); 
                    }

                    }


                    }
                    break;
                case 69 :
                    // InternalOpenCypherParser.g:4936:2: ( NONE )
                    {
                    // InternalOpenCypherParser.g:4936:2: ( NONE )
                    // InternalOpenCypherParser.g:4937:3: NONE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68()); 
                    }
                    match(input,NONE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getNONEKeyword_68()); 
                    }

                    }


                    }
                    break;
                case 70 :
                    // InternalOpenCypherParser.g:4942:2: ( SINGLE )
                    {
                    // InternalOpenCypherParser.g:4942:2: ( SINGLE )
                    // InternalOpenCypherParser.g:4943:3: SINGLE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69()); 
                    }
                    match(input,SINGLE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getSINGLEKeyword_69()); 
                    }

                    }


                    }
                    break;
                case 71 :
                    // InternalOpenCypherParser.g:4948:2: ( REDUCE )
                    {
                    // InternalOpenCypherParser.g:4948:2: ( REDUCE )
                    // InternalOpenCypherParser.g:4949:3: REDUCE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70()); 
                    }
                    match(input,REDUCE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getREDUCEKeyword_70()); 
                    }

                    }


                    }
                    break;
                case 72 :
                    // InternalOpenCypherParser.g:4954:2: ( CASE )
                    {
                    // InternalOpenCypherParser.g:4954:2: ( CASE )
                    // InternalOpenCypherParser.g:4955:3: CASE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71()); 
                    }
                    match(input,CASE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getCASEKeyword_71()); 
                    }

                    }


                    }
                    break;
                case 73 :
                    // InternalOpenCypherParser.g:4960:2: ( ELSE )
                    {
                    // InternalOpenCypherParser.g:4960:2: ( ELSE )
                    // InternalOpenCypherParser.g:4961:3: ELSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72()); 
                    }
                    match(input,ELSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getELSEKeyword_72()); 
                    }

                    }


                    }
                    break;
                case 74 :
                    // InternalOpenCypherParser.g:4966:2: ( END )
                    {
                    // InternalOpenCypherParser.g:4966:2: ( END )
                    // InternalOpenCypherParser.g:4967:3: END
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73()); 
                    }
                    match(input,END,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getENDKeyword_73()); 
                    }

                    }


                    }
                    break;
                case 75 :
                    // InternalOpenCypherParser.g:4972:2: ( WHEN )
                    {
                    // InternalOpenCypherParser.g:4972:2: ( WHEN )
                    // InternalOpenCypherParser.g:4973:3: WHEN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74()); 
                    }
                    match(input,WHEN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getWHENKeyword_74()); 
                    }

                    }


                    }
                    break;
                case 76 :
                    // InternalOpenCypherParser.g:4978:2: ( THEN )
                    {
                    // InternalOpenCypherParser.g:4978:2: ( THEN )
                    // InternalOpenCypherParser.g:4979:3: THEN
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75()); 
                    }
                    match(input,THEN,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSYMBOLIC_NAME_XAccess().getTHENKeyword_75()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SYMBOLIC_NAME_X__Alternatives"


    // $ANTLR start "rule__Cypher__Group__0"
    // InternalOpenCypherParser.g:4988:1: rule__Cypher__Group__0 : rule__Cypher__Group__0__Impl rule__Cypher__Group__1 ;
    public final void rule__Cypher__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:4992:1: ( rule__Cypher__Group__0__Impl rule__Cypher__Group__1 )
            // InternalOpenCypherParser.g:4993:2: rule__Cypher__Group__0__Impl rule__Cypher__Group__1
            {
            pushFollow(FOLLOW_4);
            rule__Cypher__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__0"


    // $ANTLR start "rule__Cypher__Group__0__Impl"
    // InternalOpenCypherParser.g:5000:1: rule__Cypher__Group__0__Impl : ( () ) ;
    public final void rule__Cypher__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5004:1: ( ( () ) )
            // InternalOpenCypherParser.g:5005:1: ( () )
            {
            // InternalOpenCypherParser.g:5005:1: ( () )
            // InternalOpenCypherParser.g:5006:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getCypherAction_0()); 
            }
            // InternalOpenCypherParser.g:5007:2: ()
            // InternalOpenCypherParser.g:5007:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getCypherAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__0__Impl"


    // $ANTLR start "rule__Cypher__Group__1"
    // InternalOpenCypherParser.g:5015:1: rule__Cypher__Group__1 : rule__Cypher__Group__1__Impl rule__Cypher__Group__2 ;
    public final void rule__Cypher__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5019:1: ( rule__Cypher__Group__1__Impl rule__Cypher__Group__2 )
            // InternalOpenCypherParser.g:5020:2: rule__Cypher__Group__1__Impl rule__Cypher__Group__2
            {
            pushFollow(FOLLOW_5);
            rule__Cypher__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__1"


    // $ANTLR start "rule__Cypher__Group__1__Impl"
    // InternalOpenCypherParser.g:5027:1: rule__Cypher__Group__1__Impl : ( ( rule__Cypher__QueryOptionsAssignment_1 ) ) ;
    public final void rule__Cypher__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5031:1: ( ( ( rule__Cypher__QueryOptionsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:5032:1: ( ( rule__Cypher__QueryOptionsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:5032:1: ( ( rule__Cypher__QueryOptionsAssignment_1 ) )
            // InternalOpenCypherParser.g:5033:2: ( rule__Cypher__QueryOptionsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5034:2: ( rule__Cypher__QueryOptionsAssignment_1 )
            // InternalOpenCypherParser.g:5034:3: rule__Cypher__QueryOptionsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__QueryOptionsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getQueryOptionsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__1__Impl"


    // $ANTLR start "rule__Cypher__Group__2"
    // InternalOpenCypherParser.g:5042:1: rule__Cypher__Group__2 : rule__Cypher__Group__2__Impl rule__Cypher__Group__3 ;
    public final void rule__Cypher__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5046:1: ( rule__Cypher__Group__2__Impl rule__Cypher__Group__3 )
            // InternalOpenCypherParser.g:5047:2: rule__Cypher__Group__2__Impl rule__Cypher__Group__3
            {
            pushFollow(FOLLOW_6);
            rule__Cypher__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__2"


    // $ANTLR start "rule__Cypher__Group__2__Impl"
    // InternalOpenCypherParser.g:5054:1: rule__Cypher__Group__2__Impl : ( ( rule__Cypher__StatementAssignment_2 ) ) ;
    public final void rule__Cypher__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5058:1: ( ( ( rule__Cypher__StatementAssignment_2 ) ) )
            // InternalOpenCypherParser.g:5059:1: ( ( rule__Cypher__StatementAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:5059:1: ( ( rule__Cypher__StatementAssignment_2 ) )
            // InternalOpenCypherParser.g:5060:2: ( rule__Cypher__StatementAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getStatementAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5061:2: ( rule__Cypher__StatementAssignment_2 )
            // InternalOpenCypherParser.g:5061:3: rule__Cypher__StatementAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__StatementAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getStatementAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__2__Impl"


    // $ANTLR start "rule__Cypher__Group__3"
    // InternalOpenCypherParser.g:5069:1: rule__Cypher__Group__3 : rule__Cypher__Group__3__Impl ;
    public final void rule__Cypher__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5073:1: ( rule__Cypher__Group__3__Impl )
            // InternalOpenCypherParser.g:5074:2: rule__Cypher__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Cypher__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__3"


    // $ANTLR start "rule__Cypher__Group__3__Impl"
    // InternalOpenCypherParser.g:5080:1: rule__Cypher__Group__3__Impl : ( ( Semicolon )? ) ;
    public final void rule__Cypher__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5084:1: ( ( ( Semicolon )? ) )
            // InternalOpenCypherParser.g:5085:1: ( ( Semicolon )? )
            {
            // InternalOpenCypherParser.g:5085:1: ( ( Semicolon )? )
            // InternalOpenCypherParser.g:5086:2: ( Semicolon )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getSemicolonKeyword_3()); 
            }
            // InternalOpenCypherParser.g:5087:2: ( Semicolon )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==Semicolon) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalOpenCypherParser.g:5087:3: Semicolon
                    {
                    match(input,Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getSemicolonKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__Group__3__Impl"


    // $ANTLR start "rule__QueryOptions__Group__0"
    // InternalOpenCypherParser.g:5096:1: rule__QueryOptions__Group__0 : rule__QueryOptions__Group__0__Impl rule__QueryOptions__Group__1 ;
    public final void rule__QueryOptions__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5100:1: ( rule__QueryOptions__Group__0__Impl rule__QueryOptions__Group__1 )
            // InternalOpenCypherParser.g:5101:2: rule__QueryOptions__Group__0__Impl rule__QueryOptions__Group__1
            {
            pushFollow(FOLLOW_4);
            rule__QueryOptions__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QueryOptions__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__0"


    // $ANTLR start "rule__QueryOptions__Group__0__Impl"
    // InternalOpenCypherParser.g:5108:1: rule__QueryOptions__Group__0__Impl : ( () ) ;
    public final void rule__QueryOptions__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5112:1: ( ( () ) )
            // InternalOpenCypherParser.g:5113:1: ( () )
            {
            // InternalOpenCypherParser.g:5113:1: ( () )
            // InternalOpenCypherParser.g:5114:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0()); 
            }
            // InternalOpenCypherParser.g:5115:2: ()
            // InternalOpenCypherParser.g:5115:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getAllOptionsAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__0__Impl"


    // $ANTLR start "rule__QueryOptions__Group__1"
    // InternalOpenCypherParser.g:5123:1: rule__QueryOptions__Group__1 : rule__QueryOptions__Group__1__Impl ;
    public final void rule__QueryOptions__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5127:1: ( rule__QueryOptions__Group__1__Impl )
            // InternalOpenCypherParser.g:5128:2: rule__QueryOptions__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__1"


    // $ANTLR start "rule__QueryOptions__Group__1__Impl"
    // InternalOpenCypherParser.g:5134:1: rule__QueryOptions__Group__1__Impl : ( ( rule__QueryOptions__UnorderedGroup_1 ) ) ;
    public final void rule__QueryOptions__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5138:1: ( ( ( rule__QueryOptions__UnorderedGroup_1 ) ) )
            // InternalOpenCypherParser.g:5139:1: ( ( rule__QueryOptions__UnorderedGroup_1 ) )
            {
            // InternalOpenCypherParser.g:5139:1: ( ( rule__QueryOptions__UnorderedGroup_1 ) )
            // InternalOpenCypherParser.g:5140:2: ( rule__QueryOptions__UnorderedGroup_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()); 
            }
            // InternalOpenCypherParser.g:5141:2: ( rule__QueryOptions__UnorderedGroup_1 )
            // InternalOpenCypherParser.g:5141:3: rule__QueryOptions__UnorderedGroup_1
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__UnorderedGroup_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__Group__1__Impl"


    // $ANTLR start "rule__CypherOption__Group__0"
    // InternalOpenCypherParser.g:5150:1: rule__CypherOption__Group__0 : rule__CypherOption__Group__0__Impl rule__CypherOption__Group__1 ;
    public final void rule__CypherOption__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5154:1: ( rule__CypherOption__Group__0__Impl rule__CypherOption__Group__1 )
            // InternalOpenCypherParser.g:5155:2: rule__CypherOption__Group__0__Impl rule__CypherOption__Group__1
            {
            pushFollow(FOLLOW_4);
            rule__CypherOption__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__0"


    // $ANTLR start "rule__CypherOption__Group__0__Impl"
    // InternalOpenCypherParser.g:5162:1: rule__CypherOption__Group__0__Impl : ( () ) ;
    public final void rule__CypherOption__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5166:1: ( ( () ) )
            // InternalOpenCypherParser.g:5167:1: ( () )
            {
            // InternalOpenCypherParser.g:5167:1: ( () )
            // InternalOpenCypherParser.g:5168:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getCypherOptionAction_0()); 
            }
            // InternalOpenCypherParser.g:5169:2: ()
            // InternalOpenCypherParser.g:5169:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getCypherOptionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__0__Impl"


    // $ANTLR start "rule__CypherOption__Group__1"
    // InternalOpenCypherParser.g:5177:1: rule__CypherOption__Group__1 : rule__CypherOption__Group__1__Impl rule__CypherOption__Group__2 ;
    public final void rule__CypherOption__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5181:1: ( rule__CypherOption__Group__1__Impl rule__CypherOption__Group__2 )
            // InternalOpenCypherParser.g:5182:2: rule__CypherOption__Group__1__Impl rule__CypherOption__Group__2
            {
            pushFollow(FOLLOW_7);
            rule__CypherOption__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__1"


    // $ANTLR start "rule__CypherOption__Group__1__Impl"
    // InternalOpenCypherParser.g:5189:1: rule__CypherOption__Group__1__Impl : ( CYPHER ) ;
    public final void rule__CypherOption__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5193:1: ( ( CYPHER ) )
            // InternalOpenCypherParser.g:5194:1: ( CYPHER )
            {
            // InternalOpenCypherParser.g:5194:1: ( CYPHER )
            // InternalOpenCypherParser.g:5195:2: CYPHER
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1()); 
            }
            match(input,CYPHER,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getCYPHERKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__1__Impl"


    // $ANTLR start "rule__CypherOption__Group__2"
    // InternalOpenCypherParser.g:5204:1: rule__CypherOption__Group__2 : rule__CypherOption__Group__2__Impl rule__CypherOption__Group__3 ;
    public final void rule__CypherOption__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5208:1: ( rule__CypherOption__Group__2__Impl rule__CypherOption__Group__3 )
            // InternalOpenCypherParser.g:5209:2: rule__CypherOption__Group__2__Impl rule__CypherOption__Group__3
            {
            pushFollow(FOLLOW_7);
            rule__CypherOption__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__2"


    // $ANTLR start "rule__CypherOption__Group__2__Impl"
    // InternalOpenCypherParser.g:5216:1: rule__CypherOption__Group__2__Impl : ( ( rule__CypherOption__VersionNumberAssignment_2 )? ) ;
    public final void rule__CypherOption__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5220:1: ( ( ( rule__CypherOption__VersionNumberAssignment_2 )? ) )
            // InternalOpenCypherParser.g:5221:1: ( ( rule__CypherOption__VersionNumberAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:5221:1: ( ( rule__CypherOption__VersionNumberAssignment_2 )? )
            // InternalOpenCypherParser.g:5222:2: ( rule__CypherOption__VersionNumberAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5223:2: ( rule__CypherOption__VersionNumberAssignment_2 )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=RULE_HEX && LA45_0<=RULE_DECIMAL)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // InternalOpenCypherParser.g:5223:3: rule__CypherOption__VersionNumberAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__CypherOption__VersionNumberAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getVersionNumberAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__2__Impl"


    // $ANTLR start "rule__CypherOption__Group__3"
    // InternalOpenCypherParser.g:5231:1: rule__CypherOption__Group__3 : rule__CypherOption__Group__3__Impl ;
    public final void rule__CypherOption__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5235:1: ( rule__CypherOption__Group__3__Impl )
            // InternalOpenCypherParser.g:5236:2: rule__CypherOption__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CypherOption__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__3"


    // $ANTLR start "rule__CypherOption__Group__3__Impl"
    // InternalOpenCypherParser.g:5242:1: rule__CypherOption__Group__3__Impl : ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* ) ;
    public final void rule__CypherOption__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5246:1: ( ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* ) )
            // InternalOpenCypherParser.g:5247:1: ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* )
            {
            // InternalOpenCypherParser.g:5247:1: ( ( rule__CypherOption__ConfigurationOptionAssignment_3 )* )
            // InternalOpenCypherParser.g:5248:2: ( rule__CypherOption__ConfigurationOptionAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3()); 
            }
            // InternalOpenCypherParser.g:5249:2: ( rule__CypherOption__ConfigurationOptionAssignment_3 )*
            loop46:
            do {
                int alt46=2;
                alt46 = dfa46.predict(input);
                switch (alt46) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5249:3: rule__CypherOption__ConfigurationOptionAssignment_3
            	    {
            	    pushFollow(FOLLOW_3);
            	    rule__CypherOption__ConfigurationOptionAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getConfigurationOptionAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__Group__3__Impl"


    // $ANTLR start "rule__ConfigurationOption__Group__0"
    // InternalOpenCypherParser.g:5258:1: rule__ConfigurationOption__Group__0 : rule__ConfigurationOption__Group__0__Impl rule__ConfigurationOption__Group__1 ;
    public final void rule__ConfigurationOption__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5262:1: ( rule__ConfigurationOption__Group__0__Impl rule__ConfigurationOption__Group__1 )
            // InternalOpenCypherParser.g:5263:2: rule__ConfigurationOption__Group__0__Impl rule__ConfigurationOption__Group__1
            {
            pushFollow(FOLLOW_8);
            rule__ConfigurationOption__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__0"


    // $ANTLR start "rule__ConfigurationOption__Group__0__Impl"
    // InternalOpenCypherParser.g:5270:1: rule__ConfigurationOption__Group__0__Impl : ( ( rule__ConfigurationOption__KeyAssignment_0 ) ) ;
    public final void rule__ConfigurationOption__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5274:1: ( ( ( rule__ConfigurationOption__KeyAssignment_0 ) ) )
            // InternalOpenCypherParser.g:5275:1: ( ( rule__ConfigurationOption__KeyAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:5275:1: ( ( rule__ConfigurationOption__KeyAssignment_0 ) )
            // InternalOpenCypherParser.g:5276:2: ( rule__ConfigurationOption__KeyAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0()); 
            }
            // InternalOpenCypherParser.g:5277:2: ( rule__ConfigurationOption__KeyAssignment_0 )
            // InternalOpenCypherParser.g:5277:3: rule__ConfigurationOption__KeyAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__KeyAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getKeyAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__0__Impl"


    // $ANTLR start "rule__ConfigurationOption__Group__1"
    // InternalOpenCypherParser.g:5285:1: rule__ConfigurationOption__Group__1 : rule__ConfigurationOption__Group__1__Impl rule__ConfigurationOption__Group__2 ;
    public final void rule__ConfigurationOption__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5289:1: ( rule__ConfigurationOption__Group__1__Impl rule__ConfigurationOption__Group__2 )
            // InternalOpenCypherParser.g:5290:2: rule__ConfigurationOption__Group__1__Impl rule__ConfigurationOption__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__ConfigurationOption__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__1"


    // $ANTLR start "rule__ConfigurationOption__Group__1__Impl"
    // InternalOpenCypherParser.g:5297:1: rule__ConfigurationOption__Group__1__Impl : ( EqualsSign ) ;
    public final void rule__ConfigurationOption__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5301:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:5302:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:5302:1: ( EqualsSign )
            // InternalOpenCypherParser.g:5303:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__1__Impl"


    // $ANTLR start "rule__ConfigurationOption__Group__2"
    // InternalOpenCypherParser.g:5312:1: rule__ConfigurationOption__Group__2 : rule__ConfigurationOption__Group__2__Impl ;
    public final void rule__ConfigurationOption__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5316:1: ( rule__ConfigurationOption__Group__2__Impl )
            // InternalOpenCypherParser.g:5317:2: rule__ConfigurationOption__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__2"


    // $ANTLR start "rule__ConfigurationOption__Group__2__Impl"
    // InternalOpenCypherParser.g:5323:1: rule__ConfigurationOption__Group__2__Impl : ( ( rule__ConfigurationOption__ValueAssignment_2 ) ) ;
    public final void rule__ConfigurationOption__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5327:1: ( ( ( rule__ConfigurationOption__ValueAssignment_2 ) ) )
            // InternalOpenCypherParser.g:5328:1: ( ( rule__ConfigurationOption__ValueAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:5328:1: ( ( rule__ConfigurationOption__ValueAssignment_2 ) )
            // InternalOpenCypherParser.g:5329:2: ( rule__ConfigurationOption__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5330:2: ( rule__ConfigurationOption__ValueAssignment_2 )
            // InternalOpenCypherParser.g:5330:3: rule__ConfigurationOption__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__ConfigurationOption__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__Group__2__Impl"


    // $ANTLR start "rule__RegularQuery__Group__0"
    // InternalOpenCypherParser.g:5339:1: rule__RegularQuery__Group__0 : rule__RegularQuery__Group__0__Impl rule__RegularQuery__Group__1 ;
    public final void rule__RegularQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5343:1: ( rule__RegularQuery__Group__0__Impl rule__RegularQuery__Group__1 )
            // InternalOpenCypherParser.g:5344:2: rule__RegularQuery__Group__0__Impl rule__RegularQuery__Group__1
            {
            pushFollow(FOLLOW_10);
            rule__RegularQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__0"


    // $ANTLR start "rule__RegularQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:5351:1: rule__RegularQuery__Group__0__Impl : ( ruleSingleQuery ) ;
    public final void rule__RegularQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5355:1: ( ( ruleSingleQuery ) )
            // InternalOpenCypherParser.g:5356:1: ( ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:5356:1: ( ruleSingleQuery )
            // InternalOpenCypherParser.g:5357:2: ruleSingleQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getSingleQueryParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__0__Impl"


    // $ANTLR start "rule__RegularQuery__Group__1"
    // InternalOpenCypherParser.g:5366:1: rule__RegularQuery__Group__1 : rule__RegularQuery__Group__1__Impl ;
    public final void rule__RegularQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5370:1: ( rule__RegularQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:5371:2: rule__RegularQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__1"


    // $ANTLR start "rule__RegularQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:5377:1: rule__RegularQuery__Group__1__Impl : ( ( rule__RegularQuery__Group_1__0 )? ) ;
    public final void rule__RegularQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5381:1: ( ( ( rule__RegularQuery__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:5382:1: ( ( rule__RegularQuery__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:5382:1: ( ( rule__RegularQuery__Group_1__0 )? )
            // InternalOpenCypherParser.g:5383:2: ( rule__RegularQuery__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:5384:2: ( rule__RegularQuery__Group_1__0 )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==UNION) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // InternalOpenCypherParser.g:5384:3: rule__RegularQuery__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RegularQuery__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group__1__Impl"


    // $ANTLR start "rule__RegularQuery__Group_1__0"
    // InternalOpenCypherParser.g:5393:1: rule__RegularQuery__Group_1__0 : rule__RegularQuery__Group_1__0__Impl rule__RegularQuery__Group_1__1 ;
    public final void rule__RegularQuery__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5397:1: ( rule__RegularQuery__Group_1__0__Impl rule__RegularQuery__Group_1__1 )
            // InternalOpenCypherParser.g:5398:2: rule__RegularQuery__Group_1__0__Impl rule__RegularQuery__Group_1__1
            {
            pushFollow(FOLLOW_10);
            rule__RegularQuery__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__0"


    // $ANTLR start "rule__RegularQuery__Group_1__0__Impl"
    // InternalOpenCypherParser.g:5405:1: rule__RegularQuery__Group_1__0__Impl : ( () ) ;
    public final void rule__RegularQuery__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5409:1: ( ( () ) )
            // InternalOpenCypherParser.g:5410:1: ( () )
            {
            // InternalOpenCypherParser.g:5410:1: ( () )
            // InternalOpenCypherParser.g:5411:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0()); 
            }
            // InternalOpenCypherParser.g:5412:2: ()
            // InternalOpenCypherParser.g:5412:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getCombinedQuerySingleQueryAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__0__Impl"


    // $ANTLR start "rule__RegularQuery__Group_1__1"
    // InternalOpenCypherParser.g:5420:1: rule__RegularQuery__Group_1__1 : rule__RegularQuery__Group_1__1__Impl ;
    public final void rule__RegularQuery__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5424:1: ( rule__RegularQuery__Group_1__1__Impl )
            // InternalOpenCypherParser.g:5425:2: rule__RegularQuery__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RegularQuery__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__1"


    // $ANTLR start "rule__RegularQuery__Group_1__1__Impl"
    // InternalOpenCypherParser.g:5431:1: rule__RegularQuery__Group_1__1__Impl : ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) ) ;
    public final void rule__RegularQuery__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5435:1: ( ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) ) )
            // InternalOpenCypherParser.g:5436:1: ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) )
            {
            // InternalOpenCypherParser.g:5436:1: ( ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* ) )
            // InternalOpenCypherParser.g:5437:2: ( ( rule__RegularQuery__UnionAssignment_1_1 ) ) ( ( rule__RegularQuery__UnionAssignment_1_1 )* )
            {
            // InternalOpenCypherParser.g:5437:2: ( ( rule__RegularQuery__UnionAssignment_1_1 ) )
            // InternalOpenCypherParser.g:5438:3: ( rule__RegularQuery__UnionAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:5439:3: ( rule__RegularQuery__UnionAssignment_1_1 )
            // InternalOpenCypherParser.g:5439:4: rule__RegularQuery__UnionAssignment_1_1
            {
            pushFollow(FOLLOW_11);
            rule__RegularQuery__UnionAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }

            }

            // InternalOpenCypherParser.g:5442:2: ( ( rule__RegularQuery__UnionAssignment_1_1 )* )
            // InternalOpenCypherParser.g:5443:3: ( rule__RegularQuery__UnionAssignment_1_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:5444:3: ( rule__RegularQuery__UnionAssignment_1_1 )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==UNION) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5444:4: rule__RegularQuery__UnionAssignment_1_1
            	    {
            	    pushFollow(FOLLOW_11);
            	    rule__RegularQuery__UnionAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getUnionAssignment_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__Group_1__1__Impl"


    // $ANTLR start "rule__BulkImportQuery__Group__0"
    // InternalOpenCypherParser.g:5454:1: rule__BulkImportQuery__Group__0 : rule__BulkImportQuery__Group__0__Impl rule__BulkImportQuery__Group__1 ;
    public final void rule__BulkImportQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5458:1: ( rule__BulkImportQuery__Group__0__Impl rule__BulkImportQuery__Group__1 )
            // InternalOpenCypherParser.g:5459:2: rule__BulkImportQuery__Group__0__Impl rule__BulkImportQuery__Group__1
            {
            pushFollow(FOLLOW_12);
            rule__BulkImportQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__0"


    // $ANTLR start "rule__BulkImportQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:5466:1: rule__BulkImportQuery__Group__0__Impl : ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) ) ;
    public final void rule__BulkImportQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5470:1: ( ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) ) )
            // InternalOpenCypherParser.g:5471:1: ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:5471:1: ( ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 ) )
            // InternalOpenCypherParser.g:5472:2: ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0()); 
            }
            // InternalOpenCypherParser.g:5473:2: ( rule__BulkImportQuery__PeriodicCommitHintAssignment_0 )
            // InternalOpenCypherParser.g:5473:3: rule__BulkImportQuery__PeriodicCommitHintAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__PeriodicCommitHintAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__0__Impl"


    // $ANTLR start "rule__BulkImportQuery__Group__1"
    // InternalOpenCypherParser.g:5481:1: rule__BulkImportQuery__Group__1 : rule__BulkImportQuery__Group__1__Impl ;
    public final void rule__BulkImportQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5485:1: ( rule__BulkImportQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:5486:2: rule__BulkImportQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__1"


    // $ANTLR start "rule__BulkImportQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:5492:1: rule__BulkImportQuery__Group__1__Impl : ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) ) ;
    public final void rule__BulkImportQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5496:1: ( ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) ) )
            // InternalOpenCypherParser.g:5497:1: ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:5497:1: ( ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 ) )
            // InternalOpenCypherParser.g:5498:2: ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5499:2: ( rule__BulkImportQuery__LoadCSVQueryAssignment_1 )
            // InternalOpenCypherParser.g:5499:3: rule__BulkImportQuery__LoadCSVQueryAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__BulkImportQuery__LoadCSVQueryAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__Group__1__Impl"


    // $ANTLR start "rule__SingleQuery__Group__0"
    // InternalOpenCypherParser.g:5508:1: rule__SingleQuery__Group__0 : rule__SingleQuery__Group__0__Impl rule__SingleQuery__Group__1 ;
    public final void rule__SingleQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5512:1: ( rule__SingleQuery__Group__0__Impl rule__SingleQuery__Group__1 )
            // InternalOpenCypherParser.g:5513:2: rule__SingleQuery__Group__0__Impl rule__SingleQuery__Group__1
            {
            pushFollow(FOLLOW_13);
            rule__SingleQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SingleQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__Group__0"


    // $ANTLR start "rule__SingleQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:5520:1: rule__SingleQuery__Group__0__Impl : ( ( rule__SingleQuery__ClausesAssignment_0 ) ) ;
    public final void rule__SingleQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5524:1: ( ( ( rule__SingleQuery__ClausesAssignment_0 ) ) )
            // InternalOpenCypherParser.g:5525:1: ( ( rule__SingleQuery__ClausesAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:5525:1: ( ( rule__SingleQuery__ClausesAssignment_0 ) )
            // InternalOpenCypherParser.g:5526:2: ( rule__SingleQuery__ClausesAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryAccess().getClausesAssignment_0()); 
            }
            // InternalOpenCypherParser.g:5527:2: ( rule__SingleQuery__ClausesAssignment_0 )
            // InternalOpenCypherParser.g:5527:3: rule__SingleQuery__ClausesAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__SingleQuery__ClausesAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryAccess().getClausesAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__Group__0__Impl"


    // $ANTLR start "rule__SingleQuery__Group__1"
    // InternalOpenCypherParser.g:5535:1: rule__SingleQuery__Group__1 : rule__SingleQuery__Group__1__Impl ;
    public final void rule__SingleQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5539:1: ( rule__SingleQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:5540:2: rule__SingleQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SingleQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__Group__1"


    // $ANTLR start "rule__SingleQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:5546:1: rule__SingleQuery__Group__1__Impl : ( ( rule__SingleQuery__ClausesAssignment_1 )* ) ;
    public final void rule__SingleQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5550:1: ( ( ( rule__SingleQuery__ClausesAssignment_1 )* ) )
            // InternalOpenCypherParser.g:5551:1: ( ( rule__SingleQuery__ClausesAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:5551:1: ( ( rule__SingleQuery__ClausesAssignment_1 )* )
            // InternalOpenCypherParser.g:5552:2: ( rule__SingleQuery__ClausesAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryAccess().getClausesAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5553:2: ( rule__SingleQuery__ClausesAssignment_1 )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==OPTIONAL||LA49_0==FOREACH||LA49_0==CREATE||(LA49_0>=DELETE && LA49_0<=DETACH)||(LA49_0>=REMOVE && LA49_0<=RETURN)||LA49_0==UNWIND||(LA49_0>=MATCH && LA49_0<=MERGE)||LA49_0==START||LA49_0==CALL||LA49_0==LOAD||LA49_0==WITH||LA49_0==SET) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5553:3: rule__SingleQuery__ClausesAssignment_1
            	    {
            	    pushFollow(FOLLOW_14);
            	    rule__SingleQuery__ClausesAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryAccess().getClausesAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__Group__1__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__0"
    // InternalOpenCypherParser.g:5562:1: rule__PeriodicCommitHint__Group__0 : rule__PeriodicCommitHint__Group__0__Impl rule__PeriodicCommitHint__Group__1 ;
    public final void rule__PeriodicCommitHint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5566:1: ( rule__PeriodicCommitHint__Group__0__Impl rule__PeriodicCommitHint__Group__1 )
            // InternalOpenCypherParser.g:5567:2: rule__PeriodicCommitHint__Group__0__Impl rule__PeriodicCommitHint__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__PeriodicCommitHint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__0"


    // $ANTLR start "rule__PeriodicCommitHint__Group__0__Impl"
    // InternalOpenCypherParser.g:5574:1: rule__PeriodicCommitHint__Group__0__Impl : ( () ) ;
    public final void rule__PeriodicCommitHint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5578:1: ( ( () ) )
            // InternalOpenCypherParser.g:5579:1: ( () )
            {
            // InternalOpenCypherParser.g:5579:1: ( () )
            // InternalOpenCypherParser.g:5580:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0()); 
            }
            // InternalOpenCypherParser.g:5581:2: ()
            // InternalOpenCypherParser.g:5581:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getPeriodicCommitHintAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__0__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__1"
    // InternalOpenCypherParser.g:5589:1: rule__PeriodicCommitHint__Group__1 : rule__PeriodicCommitHint__Group__1__Impl rule__PeriodicCommitHint__Group__2 ;
    public final void rule__PeriodicCommitHint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5593:1: ( rule__PeriodicCommitHint__Group__1__Impl rule__PeriodicCommitHint__Group__2 )
            // InternalOpenCypherParser.g:5594:2: rule__PeriodicCommitHint__Group__1__Impl rule__PeriodicCommitHint__Group__2
            {
            pushFollow(FOLLOW_15);
            rule__PeriodicCommitHint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__1"


    // $ANTLR start "rule__PeriodicCommitHint__Group__1__Impl"
    // InternalOpenCypherParser.g:5601:1: rule__PeriodicCommitHint__Group__1__Impl : ( USING ) ;
    public final void rule__PeriodicCommitHint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5605:1: ( ( USING ) )
            // InternalOpenCypherParser.g:5606:1: ( USING )
            {
            // InternalOpenCypherParser.g:5606:1: ( USING )
            // InternalOpenCypherParser.g:5607:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getUSINGKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__1__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__2"
    // InternalOpenCypherParser.g:5616:1: rule__PeriodicCommitHint__Group__2 : rule__PeriodicCommitHint__Group__2__Impl rule__PeriodicCommitHint__Group__3 ;
    public final void rule__PeriodicCommitHint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5620:1: ( rule__PeriodicCommitHint__Group__2__Impl rule__PeriodicCommitHint__Group__3 )
            // InternalOpenCypherParser.g:5621:2: rule__PeriodicCommitHint__Group__2__Impl rule__PeriodicCommitHint__Group__3
            {
            pushFollow(FOLLOW_16);
            rule__PeriodicCommitHint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__2"


    // $ANTLR start "rule__PeriodicCommitHint__Group__2__Impl"
    // InternalOpenCypherParser.g:5628:1: rule__PeriodicCommitHint__Group__2__Impl : ( PERIODIC ) ;
    public final void rule__PeriodicCommitHint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5632:1: ( ( PERIODIC ) )
            // InternalOpenCypherParser.g:5633:1: ( PERIODIC )
            {
            // InternalOpenCypherParser.g:5633:1: ( PERIODIC )
            // InternalOpenCypherParser.g:5634:2: PERIODIC
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2()); 
            }
            match(input,PERIODIC,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getPERIODICKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__2__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__3"
    // InternalOpenCypherParser.g:5643:1: rule__PeriodicCommitHint__Group__3 : rule__PeriodicCommitHint__Group__3__Impl rule__PeriodicCommitHint__Group__4 ;
    public final void rule__PeriodicCommitHint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5647:1: ( rule__PeriodicCommitHint__Group__3__Impl rule__PeriodicCommitHint__Group__4 )
            // InternalOpenCypherParser.g:5648:2: rule__PeriodicCommitHint__Group__3__Impl rule__PeriodicCommitHint__Group__4
            {
            pushFollow(FOLLOW_17);
            rule__PeriodicCommitHint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__3"


    // $ANTLR start "rule__PeriodicCommitHint__Group__3__Impl"
    // InternalOpenCypherParser.g:5655:1: rule__PeriodicCommitHint__Group__3__Impl : ( COMMIT ) ;
    public final void rule__PeriodicCommitHint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5659:1: ( ( COMMIT ) )
            // InternalOpenCypherParser.g:5660:1: ( COMMIT )
            {
            // InternalOpenCypherParser.g:5660:1: ( COMMIT )
            // InternalOpenCypherParser.g:5661:2: COMMIT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3()); 
            }
            match(input,COMMIT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getCOMMITKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__3__Impl"


    // $ANTLR start "rule__PeriodicCommitHint__Group__4"
    // InternalOpenCypherParser.g:5670:1: rule__PeriodicCommitHint__Group__4 : rule__PeriodicCommitHint__Group__4__Impl ;
    public final void rule__PeriodicCommitHint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5674:1: ( rule__PeriodicCommitHint__Group__4__Impl )
            // InternalOpenCypherParser.g:5675:2: rule__PeriodicCommitHint__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PeriodicCommitHint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__4"


    // $ANTLR start "rule__PeriodicCommitHint__Group__4__Impl"
    // InternalOpenCypherParser.g:5681:1: rule__PeriodicCommitHint__Group__4__Impl : ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? ) ;
    public final void rule__PeriodicCommitHint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5685:1: ( ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? ) )
            // InternalOpenCypherParser.g:5686:1: ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:5686:1: ( ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )? )
            // InternalOpenCypherParser.g:5687:2: ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4()); 
            }
            // InternalOpenCypherParser.g:5688:2: ( rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=RULE_HEX && LA50_0<=RULE_DECIMAL)) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // InternalOpenCypherParser.g:5688:3: rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__Group__4__Impl"


    // $ANTLR start "rule__LoadCSVQuery__Group__0"
    // InternalOpenCypherParser.g:5697:1: rule__LoadCSVQuery__Group__0 : rule__LoadCSVQuery__Group__0__Impl rule__LoadCSVQuery__Group__1 ;
    public final void rule__LoadCSVQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5701:1: ( rule__LoadCSVQuery__Group__0__Impl rule__LoadCSVQuery__Group__1 )
            // InternalOpenCypherParser.g:5702:2: rule__LoadCSVQuery__Group__0__Impl rule__LoadCSVQuery__Group__1
            {
            pushFollow(FOLLOW_13);
            rule__LoadCSVQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__0"


    // $ANTLR start "rule__LoadCSVQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:5709:1: rule__LoadCSVQuery__Group__0__Impl : ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) ) ;
    public final void rule__LoadCSVQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5713:1: ( ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) ) )
            // InternalOpenCypherParser.g:5714:1: ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:5714:1: ( ( rule__LoadCSVQuery__LoadCSVAssignment_0 ) )
            // InternalOpenCypherParser.g:5715:2: ( rule__LoadCSVQuery__LoadCSVAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0()); 
            }
            // InternalOpenCypherParser.g:5716:2: ( rule__LoadCSVQuery__LoadCSVAssignment_0 )
            // InternalOpenCypherParser.g:5716:3: rule__LoadCSVQuery__LoadCSVAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__LoadCSVAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getLoadCSVAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__0__Impl"


    // $ANTLR start "rule__LoadCSVQuery__Group__1"
    // InternalOpenCypherParser.g:5724:1: rule__LoadCSVQuery__Group__1 : rule__LoadCSVQuery__Group__1__Impl ;
    public final void rule__LoadCSVQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5728:1: ( rule__LoadCSVQuery__Group__1__Impl )
            // InternalOpenCypherParser.g:5729:2: rule__LoadCSVQuery__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__1"


    // $ANTLR start "rule__LoadCSVQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:5735:1: rule__LoadCSVQuery__Group__1__Impl : ( ( rule__LoadCSVQuery__ClausesAssignment_1 )* ) ;
    public final void rule__LoadCSVQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5739:1: ( ( ( rule__LoadCSVQuery__ClausesAssignment_1 )* ) )
            // InternalOpenCypherParser.g:5740:1: ( ( rule__LoadCSVQuery__ClausesAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:5740:1: ( ( rule__LoadCSVQuery__ClausesAssignment_1 )* )
            // InternalOpenCypherParser.g:5741:2: ( rule__LoadCSVQuery__ClausesAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getClausesAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5742:2: ( rule__LoadCSVQuery__ClausesAssignment_1 )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==OPTIONAL||LA51_0==FOREACH||LA51_0==CREATE||(LA51_0>=DELETE && LA51_0<=DETACH)||(LA51_0>=REMOVE && LA51_0<=RETURN)||LA51_0==UNWIND||(LA51_0>=MATCH && LA51_0<=MERGE)||LA51_0==START||LA51_0==CALL||LA51_0==LOAD||LA51_0==WITH||LA51_0==SET) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // InternalOpenCypherParser.g:5742:3: rule__LoadCSVQuery__ClausesAssignment_1
            	    {
            	    pushFollow(FOLLOW_14);
            	    rule__LoadCSVQuery__ClausesAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getClausesAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__Group__1__Impl"


    // $ANTLR start "rule__Union__Group__0"
    // InternalOpenCypherParser.g:5751:1: rule__Union__Group__0 : rule__Union__Group__0__Impl rule__Union__Group__1 ;
    public final void rule__Union__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5755:1: ( rule__Union__Group__0__Impl rule__Union__Group__1 )
            // InternalOpenCypherParser.g:5756:2: rule__Union__Group__0__Impl rule__Union__Group__1
            {
            pushFollow(FOLLOW_18);
            rule__Union__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Union__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__0"


    // $ANTLR start "rule__Union__Group__0__Impl"
    // InternalOpenCypherParser.g:5763:1: rule__Union__Group__0__Impl : ( UNION ) ;
    public final void rule__Union__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5767:1: ( ( UNION ) )
            // InternalOpenCypherParser.g:5768:1: ( UNION )
            {
            // InternalOpenCypherParser.g:5768:1: ( UNION )
            // InternalOpenCypherParser.g:5769:2: UNION
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getUNIONKeyword_0()); 
            }
            match(input,UNION,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getUNIONKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__0__Impl"


    // $ANTLR start "rule__Union__Group__1"
    // InternalOpenCypherParser.g:5778:1: rule__Union__Group__1 : rule__Union__Group__1__Impl rule__Union__Group__2 ;
    public final void rule__Union__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5782:1: ( rule__Union__Group__1__Impl rule__Union__Group__2 )
            // InternalOpenCypherParser.g:5783:2: rule__Union__Group__1__Impl rule__Union__Group__2
            {
            pushFollow(FOLLOW_18);
            rule__Union__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Union__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__1"


    // $ANTLR start "rule__Union__Group__1__Impl"
    // InternalOpenCypherParser.g:5790:1: rule__Union__Group__1__Impl : ( ( rule__Union__AllAssignment_1 )? ) ;
    public final void rule__Union__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5794:1: ( ( ( rule__Union__AllAssignment_1 )? ) )
            // InternalOpenCypherParser.g:5795:1: ( ( rule__Union__AllAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:5795:1: ( ( rule__Union__AllAssignment_1 )? )
            // InternalOpenCypherParser.g:5796:2: ( rule__Union__AllAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getAllAssignment_1()); 
            }
            // InternalOpenCypherParser.g:5797:2: ( rule__Union__AllAssignment_1 )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ALL) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalOpenCypherParser.g:5797:3: rule__Union__AllAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Union__AllAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getAllAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__1__Impl"


    // $ANTLR start "rule__Union__Group__2"
    // InternalOpenCypherParser.g:5805:1: rule__Union__Group__2 : rule__Union__Group__2__Impl ;
    public final void rule__Union__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5809:1: ( rule__Union__Group__2__Impl )
            // InternalOpenCypherParser.g:5810:2: rule__Union__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Union__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__2"


    // $ANTLR start "rule__Union__Group__2__Impl"
    // InternalOpenCypherParser.g:5816:1: rule__Union__Group__2__Impl : ( ( rule__Union__SingleQueryAssignment_2 ) ) ;
    public final void rule__Union__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5820:1: ( ( ( rule__Union__SingleQueryAssignment_2 ) ) )
            // InternalOpenCypherParser.g:5821:1: ( ( rule__Union__SingleQueryAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:5821:1: ( ( rule__Union__SingleQueryAssignment_2 ) )
            // InternalOpenCypherParser.g:5822:2: ( rule__Union__SingleQueryAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getSingleQueryAssignment_2()); 
            }
            // InternalOpenCypherParser.g:5823:2: ( rule__Union__SingleQueryAssignment_2 )
            // InternalOpenCypherParser.g:5823:3: rule__Union__SingleQueryAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Union__SingleQueryAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getSingleQueryAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__Group__2__Impl"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__0"
    // InternalOpenCypherParser.g:5832:1: rule__CreateUniqueConstraint__Group__0 : rule__CreateUniqueConstraint__Group__0__Impl rule__CreateUniqueConstraint__Group__1 ;
    public final void rule__CreateUniqueConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5836:1: ( rule__CreateUniqueConstraint__Group__0__Impl rule__CreateUniqueConstraint__Group__1 )
            // InternalOpenCypherParser.g:5837:2: rule__CreateUniqueConstraint__Group__0__Impl rule__CreateUniqueConstraint__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__CreateUniqueConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateUniqueConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__0"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:5844:1: rule__CreateUniqueConstraint__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateUniqueConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5848:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:5849:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:5849:1: ( CREATE )
            // InternalOpenCypherParser.g:5850:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__0__Impl"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__1"
    // InternalOpenCypherParser.g:5859:1: rule__CreateUniqueConstraint__Group__1 : rule__CreateUniqueConstraint__Group__1__Impl ;
    public final void rule__CreateUniqueConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5863:1: ( rule__CreateUniqueConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:5864:2: rule__CreateUniqueConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateUniqueConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__1"


    // $ANTLR start "rule__CreateUniqueConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:5870:1: rule__CreateUniqueConstraint__Group__1__Impl : ( ruleUniqueConstraint ) ;
    public final void rule__CreateUniqueConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5874:1: ( ( ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:5875:1: ( ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:5875:1: ( ruleUniqueConstraint )
            // InternalOpenCypherParser.g:5876:2: ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateUniqueConstraintAccess().getUniqueConstraintParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateUniqueConstraint__Group__1__Impl"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:5886:1: rule__CreateNodePropertyExistenceConstraint__Group__0 : rule__CreateNodePropertyExistenceConstraint__Group__0__Impl rule__CreateNodePropertyExistenceConstraint__Group__1 ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5890:1: ( rule__CreateNodePropertyExistenceConstraint__Group__0__Impl rule__CreateNodePropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:5891:2: rule__CreateNodePropertyExistenceConstraint__Group__0__Impl rule__CreateNodePropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__CreateNodePropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateNodePropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:5898:1: rule__CreateNodePropertyExistenceConstraint__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5902:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:5903:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:5903:1: ( CREATE )
            // InternalOpenCypherParser.g:5904:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:5913:1: rule__CreateNodePropertyExistenceConstraint__Group__1 : rule__CreateNodePropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5917:1: ( rule__CreateNodePropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:5918:2: rule__CreateNodePropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateNodePropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__CreateNodePropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:5924:1: rule__CreateNodePropertyExistenceConstraint__Group__1__Impl : ( ruleNodePropertyExistenceConstraint ) ;
    public final void rule__CreateNodePropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5928:1: ( ( ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:5929:1: ( ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:5929:1: ( ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:5930:2: ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateNodePropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:5940:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__0 : rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl rule__CreateRelationshipPropertyExistenceConstraint__Group__1 ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5944:1: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl rule__CreateRelationshipPropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:5945:2: rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl rule__CreateRelationshipPropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:5952:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5956:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:5957:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:5957:1: ( CREATE )
            // InternalOpenCypherParser.g:5958:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:5967:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__1 : rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5971:1: ( rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:5972:2: rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:5978:1: rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl : ( ruleRelationshipPropertyExistenceConstraint ) ;
    public final void rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5982:1: ( ( ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:5983:1: ( ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:5983:1: ( ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:5984:2: ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateRelationshipPropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__CreateIndex__Group__0"
    // InternalOpenCypherParser.g:5994:1: rule__CreateIndex__Group__0 : rule__CreateIndex__Group__0__Impl rule__CreateIndex__Group__1 ;
    public final void rule__CreateIndex__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:5998:1: ( rule__CreateIndex__Group__0__Impl rule__CreateIndex__Group__1 )
            // InternalOpenCypherParser.g:5999:2: rule__CreateIndex__Group__0__Impl rule__CreateIndex__Group__1
            {
            pushFollow(FOLLOW_20);
            rule__CreateIndex__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateIndex__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__0"


    // $ANTLR start "rule__CreateIndex__Group__0__Impl"
    // InternalOpenCypherParser.g:6006:1: rule__CreateIndex__Group__0__Impl : ( CREATE ) ;
    public final void rule__CreateIndex__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6010:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:6011:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:6011:1: ( CREATE )
            // InternalOpenCypherParser.g:6012:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__0__Impl"


    // $ANTLR start "rule__CreateIndex__Group__1"
    // InternalOpenCypherParser.g:6021:1: rule__CreateIndex__Group__1 : rule__CreateIndex__Group__1__Impl ;
    public final void rule__CreateIndex__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6025:1: ( rule__CreateIndex__Group__1__Impl )
            // InternalOpenCypherParser.g:6026:2: rule__CreateIndex__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CreateIndex__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__1"


    // $ANTLR start "rule__CreateIndex__Group__1__Impl"
    // InternalOpenCypherParser.g:6032:1: rule__CreateIndex__Group__1__Impl : ( ( rule__CreateIndex__IndexAssignment_1 ) ) ;
    public final void rule__CreateIndex__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6036:1: ( ( ( rule__CreateIndex__IndexAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6037:1: ( ( rule__CreateIndex__IndexAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6037:1: ( ( rule__CreateIndex__IndexAssignment_1 ) )
            // InternalOpenCypherParser.g:6038:2: ( rule__CreateIndex__IndexAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getIndexAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6039:2: ( rule__CreateIndex__IndexAssignment_1 )
            // InternalOpenCypherParser.g:6039:3: rule__CreateIndex__IndexAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__CreateIndex__IndexAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getIndexAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__Group__1__Impl"


    // $ANTLR start "rule__DropUniqueConstraint__Group__0"
    // InternalOpenCypherParser.g:6048:1: rule__DropUniqueConstraint__Group__0 : rule__DropUniqueConstraint__Group__0__Impl rule__DropUniqueConstraint__Group__1 ;
    public final void rule__DropUniqueConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6052:1: ( rule__DropUniqueConstraint__Group__0__Impl rule__DropUniqueConstraint__Group__1 )
            // InternalOpenCypherParser.g:6053:2: rule__DropUniqueConstraint__Group__0__Impl rule__DropUniqueConstraint__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__DropUniqueConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__0"


    // $ANTLR start "rule__DropUniqueConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6060:1: rule__DropUniqueConstraint__Group__0__Impl : ( DROP ) ;
    public final void rule__DropUniqueConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6064:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6065:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6065:1: ( DROP )
            // InternalOpenCypherParser.g:6066:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__0__Impl"


    // $ANTLR start "rule__DropUniqueConstraint__Group__1"
    // InternalOpenCypherParser.g:6075:1: rule__DropUniqueConstraint__Group__1 : rule__DropUniqueConstraint__Group__1__Impl ;
    public final void rule__DropUniqueConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6079:1: ( rule__DropUniqueConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6080:2: rule__DropUniqueConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__1"


    // $ANTLR start "rule__DropUniqueConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6086:1: rule__DropUniqueConstraint__Group__1__Impl : ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) ) ;
    public final void rule__DropUniqueConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6090:1: ( ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6091:1: ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6091:1: ( ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 ) )
            // InternalOpenCypherParser.g:6092:2: ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6093:2: ( rule__DropUniqueConstraint__UniqueConstraintAssignment_1 )
            // InternalOpenCypherParser.g:6093:3: rule__DropUniqueConstraint__UniqueConstraintAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropUniqueConstraint__UniqueConstraintAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__Group__1__Impl"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6102:1: rule__DropNodePropertyExistenceConstraint__Group__0 : rule__DropNodePropertyExistenceConstraint__Group__0__Impl rule__DropNodePropertyExistenceConstraint__Group__1 ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6106:1: ( rule__DropNodePropertyExistenceConstraint__Group__0__Impl rule__DropNodePropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6107:2: rule__DropNodePropertyExistenceConstraint__Group__0__Impl rule__DropNodePropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__DropNodePropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6114:1: rule__DropNodePropertyExistenceConstraint__Group__0__Impl : ( DROP ) ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6118:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6119:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6119:1: ( DROP )
            // InternalOpenCypherParser.g:6120:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6129:1: rule__DropNodePropertyExistenceConstraint__Group__1 : rule__DropNodePropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6133:1: ( rule__DropNodePropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6134:2: rule__DropNodePropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6140:1: rule__DropNodePropertyExistenceConstraint__Group__1__Impl : ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) ) ;
    public final void rule__DropNodePropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6144:1: ( ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6145:1: ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6145:1: ( ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 ) )
            // InternalOpenCypherParser.g:6146:2: ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6147:2: ( rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 )
            // InternalOpenCypherParser.g:6147:3: rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6156:1: rule__DropRelationshipPropertyExistenceConstraint__Group__0 : rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl rule__DropRelationshipPropertyExistenceConstraint__Group__1 ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6160:1: ( rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl rule__DropRelationshipPropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6161:2: rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl rule__DropRelationshipPropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6168:1: rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl : ( DROP ) ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6172:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6173:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6173:1: ( DROP )
            // InternalOpenCypherParser.g:6174:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6183:1: rule__DropRelationshipPropertyExistenceConstraint__Group__1 : rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6187:1: ( rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl )
            // InternalOpenCypherParser.g:6188:2: rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6194:1: rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl : ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) ) ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6198:1: ( ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6199:1: ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6199:1: ( ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 ) )
            // InternalOpenCypherParser.g:6200:2: ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6201:2: ( rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 )
            // InternalOpenCypherParser.g:6201:3: rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__DropIndex__Group__0"
    // InternalOpenCypherParser.g:6210:1: rule__DropIndex__Group__0 : rule__DropIndex__Group__0__Impl rule__DropIndex__Group__1 ;
    public final void rule__DropIndex__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6214:1: ( rule__DropIndex__Group__0__Impl rule__DropIndex__Group__1 )
            // InternalOpenCypherParser.g:6215:2: rule__DropIndex__Group__0__Impl rule__DropIndex__Group__1
            {
            pushFollow(FOLLOW_20);
            rule__DropIndex__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DropIndex__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__0"


    // $ANTLR start "rule__DropIndex__Group__0__Impl"
    // InternalOpenCypherParser.g:6222:1: rule__DropIndex__Group__0__Impl : ( DROP ) ;
    public final void rule__DropIndex__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6226:1: ( ( DROP ) )
            // InternalOpenCypherParser.g:6227:1: ( DROP )
            {
            // InternalOpenCypherParser.g:6227:1: ( DROP )
            // InternalOpenCypherParser.g:6228:2: DROP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getDROPKeyword_0()); 
            }
            match(input,DROP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getDROPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__0__Impl"


    // $ANTLR start "rule__DropIndex__Group__1"
    // InternalOpenCypherParser.g:6237:1: rule__DropIndex__Group__1 : rule__DropIndex__Group__1__Impl ;
    public final void rule__DropIndex__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6241:1: ( rule__DropIndex__Group__1__Impl )
            // InternalOpenCypherParser.g:6242:2: rule__DropIndex__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DropIndex__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__1"


    // $ANTLR start "rule__DropIndex__Group__1__Impl"
    // InternalOpenCypherParser.g:6248:1: rule__DropIndex__Group__1__Impl : ( ( rule__DropIndex__IndexAssignment_1 ) ) ;
    public final void rule__DropIndex__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6252:1: ( ( ( rule__DropIndex__IndexAssignment_1 ) ) )
            // InternalOpenCypherParser.g:6253:1: ( ( rule__DropIndex__IndexAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:6253:1: ( ( rule__DropIndex__IndexAssignment_1 ) )
            // InternalOpenCypherParser.g:6254:2: ( rule__DropIndex__IndexAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getIndexAssignment_1()); 
            }
            // InternalOpenCypherParser.g:6255:2: ( rule__DropIndex__IndexAssignment_1 )
            // InternalOpenCypherParser.g:6255:3: rule__DropIndex__IndexAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DropIndex__IndexAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getIndexAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__Group__1__Impl"


    // $ANTLR start "rule__Index__Group__0"
    // InternalOpenCypherParser.g:6264:1: rule__Index__Group__0 : rule__Index__Group__0__Impl rule__Index__Group__1 ;
    public final void rule__Index__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6268:1: ( rule__Index__Group__0__Impl rule__Index__Group__1 )
            // InternalOpenCypherParser.g:6269:2: rule__Index__Group__0__Impl rule__Index__Group__1
            {
            pushFollow(FOLLOW_21);
            rule__Index__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__0"


    // $ANTLR start "rule__Index__Group__0__Impl"
    // InternalOpenCypherParser.g:6276:1: rule__Index__Group__0__Impl : ( INDEX ) ;
    public final void rule__Index__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6280:1: ( ( INDEX ) )
            // InternalOpenCypherParser.g:6281:1: ( INDEX )
            {
            // InternalOpenCypherParser.g:6281:1: ( INDEX )
            // InternalOpenCypherParser.g:6282:2: INDEX
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getINDEXKeyword_0()); 
            }
            match(input,INDEX,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getINDEXKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__0__Impl"


    // $ANTLR start "rule__Index__Group__1"
    // InternalOpenCypherParser.g:6291:1: rule__Index__Group__1 : rule__Index__Group__1__Impl rule__Index__Group__2 ;
    public final void rule__Index__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6295:1: ( rule__Index__Group__1__Impl rule__Index__Group__2 )
            // InternalOpenCypherParser.g:6296:2: rule__Index__Group__1__Impl rule__Index__Group__2
            {
            pushFollow(FOLLOW_22);
            rule__Index__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__1"


    // $ANTLR start "rule__Index__Group__1__Impl"
    // InternalOpenCypherParser.g:6303:1: rule__Index__Group__1__Impl : ( ON ) ;
    public final void rule__Index__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6307:1: ( ( ON ) )
            // InternalOpenCypherParser.g:6308:1: ( ON )
            {
            // InternalOpenCypherParser.g:6308:1: ( ON )
            // InternalOpenCypherParser.g:6309:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__1__Impl"


    // $ANTLR start "rule__Index__Group__2"
    // InternalOpenCypherParser.g:6318:1: rule__Index__Group__2 : rule__Index__Group__2__Impl rule__Index__Group__3 ;
    public final void rule__Index__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6322:1: ( rule__Index__Group__2__Impl rule__Index__Group__3 )
            // InternalOpenCypherParser.g:6323:2: rule__Index__Group__2__Impl rule__Index__Group__3
            {
            pushFollow(FOLLOW_23);
            rule__Index__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__2"


    // $ANTLR start "rule__Index__Group__2__Impl"
    // InternalOpenCypherParser.g:6330:1: rule__Index__Group__2__Impl : ( ( rule__Index__NodeLabelAssignment_2 ) ) ;
    public final void rule__Index__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6334:1: ( ( ( rule__Index__NodeLabelAssignment_2 ) ) )
            // InternalOpenCypherParser.g:6335:1: ( ( rule__Index__NodeLabelAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:6335:1: ( ( rule__Index__NodeLabelAssignment_2 ) )
            // InternalOpenCypherParser.g:6336:2: ( rule__Index__NodeLabelAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getNodeLabelAssignment_2()); 
            }
            // InternalOpenCypherParser.g:6337:2: ( rule__Index__NodeLabelAssignment_2 )
            // InternalOpenCypherParser.g:6337:3: rule__Index__NodeLabelAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Index__NodeLabelAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getNodeLabelAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__2__Impl"


    // $ANTLR start "rule__Index__Group__3"
    // InternalOpenCypherParser.g:6345:1: rule__Index__Group__3 : rule__Index__Group__3__Impl rule__Index__Group__4 ;
    public final void rule__Index__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6349:1: ( rule__Index__Group__3__Impl rule__Index__Group__4 )
            // InternalOpenCypherParser.g:6350:2: rule__Index__Group__3__Impl rule__Index__Group__4
            {
            pushFollow(FOLLOW_9);
            rule__Index__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__3"


    // $ANTLR start "rule__Index__Group__3__Impl"
    // InternalOpenCypherParser.g:6357:1: rule__Index__Group__3__Impl : ( LeftParenthesis ) ;
    public final void rule__Index__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6361:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:6362:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:6362:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:6363:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getLeftParenthesisKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__3__Impl"


    // $ANTLR start "rule__Index__Group__4"
    // InternalOpenCypherParser.g:6372:1: rule__Index__Group__4 : rule__Index__Group__4__Impl rule__Index__Group__5 ;
    public final void rule__Index__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6376:1: ( rule__Index__Group__4__Impl rule__Index__Group__5 )
            // InternalOpenCypherParser.g:6377:2: rule__Index__Group__4__Impl rule__Index__Group__5
            {
            pushFollow(FOLLOW_24);
            rule__Index__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Index__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__4"


    // $ANTLR start "rule__Index__Group__4__Impl"
    // InternalOpenCypherParser.g:6384:1: rule__Index__Group__4__Impl : ( ( rule__Index__PropertyKeyNameAssignment_4 ) ) ;
    public final void rule__Index__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6388:1: ( ( ( rule__Index__PropertyKeyNameAssignment_4 ) ) )
            // InternalOpenCypherParser.g:6389:1: ( ( rule__Index__PropertyKeyNameAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:6389:1: ( ( rule__Index__PropertyKeyNameAssignment_4 ) )
            // InternalOpenCypherParser.g:6390:2: ( rule__Index__PropertyKeyNameAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4()); 
            }
            // InternalOpenCypherParser.g:6391:2: ( rule__Index__PropertyKeyNameAssignment_4 )
            // InternalOpenCypherParser.g:6391:3: rule__Index__PropertyKeyNameAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Index__PropertyKeyNameAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getPropertyKeyNameAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__4__Impl"


    // $ANTLR start "rule__Index__Group__5"
    // InternalOpenCypherParser.g:6399:1: rule__Index__Group__5 : rule__Index__Group__5__Impl ;
    public final void rule__Index__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6403:1: ( rule__Index__Group__5__Impl )
            // InternalOpenCypherParser.g:6404:2: rule__Index__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Index__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__5"


    // $ANTLR start "rule__Index__Group__5__Impl"
    // InternalOpenCypherParser.g:6410:1: rule__Index__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__Index__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6414:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:6415:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:6415:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:6416:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__Group__5__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__0"
    // InternalOpenCypherParser.g:6426:1: rule__UniqueConstraint__Group__0 : rule__UniqueConstraint__Group__0__Impl rule__UniqueConstraint__Group__1 ;
    public final void rule__UniqueConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6430:1: ( rule__UniqueConstraint__Group__0__Impl rule__UniqueConstraint__Group__1 )
            // InternalOpenCypherParser.g:6431:2: rule__UniqueConstraint__Group__0__Impl rule__UniqueConstraint__Group__1
            {
            pushFollow(FOLLOW_21);
            rule__UniqueConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__0"


    // $ANTLR start "rule__UniqueConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6438:1: rule__UniqueConstraint__Group__0__Impl : ( CONSTRAINT ) ;
    public final void rule__UniqueConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6442:1: ( ( CONSTRAINT ) )
            // InternalOpenCypherParser.g:6443:1: ( CONSTRAINT )
            {
            // InternalOpenCypherParser.g:6443:1: ( CONSTRAINT )
            // InternalOpenCypherParser.g:6444:2: CONSTRAINT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0()); 
            }
            match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getCONSTRAINTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__0__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__1"
    // InternalOpenCypherParser.g:6453:1: rule__UniqueConstraint__Group__1 : rule__UniqueConstraint__Group__1__Impl rule__UniqueConstraint__Group__2 ;
    public final void rule__UniqueConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6457:1: ( rule__UniqueConstraint__Group__1__Impl rule__UniqueConstraint__Group__2 )
            // InternalOpenCypherParser.g:6458:2: rule__UniqueConstraint__Group__1__Impl rule__UniqueConstraint__Group__2
            {
            pushFollow(FOLLOW_23);
            rule__UniqueConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__1"


    // $ANTLR start "rule__UniqueConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6465:1: rule__UniqueConstraint__Group__1__Impl : ( ON ) ;
    public final void rule__UniqueConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6469:1: ( ( ON ) )
            // InternalOpenCypherParser.g:6470:1: ( ON )
            {
            // InternalOpenCypherParser.g:6470:1: ( ON )
            // InternalOpenCypherParser.g:6471:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__1__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__2"
    // InternalOpenCypherParser.g:6480:1: rule__UniqueConstraint__Group__2 : rule__UniqueConstraint__Group__2__Impl rule__UniqueConstraint__Group__3 ;
    public final void rule__UniqueConstraint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6484:1: ( rule__UniqueConstraint__Group__2__Impl rule__UniqueConstraint__Group__3 )
            // InternalOpenCypherParser.g:6485:2: rule__UniqueConstraint__Group__2__Impl rule__UniqueConstraint__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__UniqueConstraint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__2"


    // $ANTLR start "rule__UniqueConstraint__Group__2__Impl"
    // InternalOpenCypherParser.g:6492:1: rule__UniqueConstraint__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__UniqueConstraint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6496:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:6497:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:6497:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:6498:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__2__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__3"
    // InternalOpenCypherParser.g:6507:1: rule__UniqueConstraint__Group__3 : rule__UniqueConstraint__Group__3__Impl rule__UniqueConstraint__Group__4 ;
    public final void rule__UniqueConstraint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6511:1: ( rule__UniqueConstraint__Group__3__Impl rule__UniqueConstraint__Group__4 )
            // InternalOpenCypherParser.g:6512:2: rule__UniqueConstraint__Group__3__Impl rule__UniqueConstraint__Group__4
            {
            pushFollow(FOLLOW_22);
            rule__UniqueConstraint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__3"


    // $ANTLR start "rule__UniqueConstraint__Group__3__Impl"
    // InternalOpenCypherParser.g:6519:1: rule__UniqueConstraint__Group__3__Impl : ( ( rule__UniqueConstraint__VariableAssignment_3 ) ) ;
    public final void rule__UniqueConstraint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6523:1: ( ( ( rule__UniqueConstraint__VariableAssignment_3 ) ) )
            // InternalOpenCypherParser.g:6524:1: ( ( rule__UniqueConstraint__VariableAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:6524:1: ( ( rule__UniqueConstraint__VariableAssignment_3 ) )
            // InternalOpenCypherParser.g:6525:2: ( rule__UniqueConstraint__VariableAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3()); 
            }
            // InternalOpenCypherParser.g:6526:2: ( rule__UniqueConstraint__VariableAssignment_3 )
            // InternalOpenCypherParser.g:6526:3: rule__UniqueConstraint__VariableAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__VariableAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getVariableAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__3__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__4"
    // InternalOpenCypherParser.g:6534:1: rule__UniqueConstraint__Group__4 : rule__UniqueConstraint__Group__4__Impl rule__UniqueConstraint__Group__5 ;
    public final void rule__UniqueConstraint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6538:1: ( rule__UniqueConstraint__Group__4__Impl rule__UniqueConstraint__Group__5 )
            // InternalOpenCypherParser.g:6539:2: rule__UniqueConstraint__Group__4__Impl rule__UniqueConstraint__Group__5
            {
            pushFollow(FOLLOW_24);
            rule__UniqueConstraint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__4"


    // $ANTLR start "rule__UniqueConstraint__Group__4__Impl"
    // InternalOpenCypherParser.g:6546:1: rule__UniqueConstraint__Group__4__Impl : ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) ) ;
    public final void rule__UniqueConstraint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6550:1: ( ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) ) )
            // InternalOpenCypherParser.g:6551:1: ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:6551:1: ( ( rule__UniqueConstraint__NodeLabelAssignment_4 ) )
            // InternalOpenCypherParser.g:6552:2: ( rule__UniqueConstraint__NodeLabelAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4()); 
            }
            // InternalOpenCypherParser.g:6553:2: ( rule__UniqueConstraint__NodeLabelAssignment_4 )
            // InternalOpenCypherParser.g:6553:3: rule__UniqueConstraint__NodeLabelAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__NodeLabelAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getNodeLabelAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__4__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__5"
    // InternalOpenCypherParser.g:6561:1: rule__UniqueConstraint__Group__5 : rule__UniqueConstraint__Group__5__Impl rule__UniqueConstraint__Group__6 ;
    public final void rule__UniqueConstraint__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6565:1: ( rule__UniqueConstraint__Group__5__Impl rule__UniqueConstraint__Group__6 )
            // InternalOpenCypherParser.g:6566:2: rule__UniqueConstraint__Group__5__Impl rule__UniqueConstraint__Group__6
            {
            pushFollow(FOLLOW_25);
            rule__UniqueConstraint__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__5"


    // $ANTLR start "rule__UniqueConstraint__Group__5__Impl"
    // InternalOpenCypherParser.g:6573:1: rule__UniqueConstraint__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__UniqueConstraint__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6577:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:6578:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:6578:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:6579:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__5__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__6"
    // InternalOpenCypherParser.g:6588:1: rule__UniqueConstraint__Group__6 : rule__UniqueConstraint__Group__6__Impl rule__UniqueConstraint__Group__7 ;
    public final void rule__UniqueConstraint__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6592:1: ( rule__UniqueConstraint__Group__6__Impl rule__UniqueConstraint__Group__7 )
            // InternalOpenCypherParser.g:6593:2: rule__UniqueConstraint__Group__6__Impl rule__UniqueConstraint__Group__7
            {
            pushFollow(FOLLOW_26);
            rule__UniqueConstraint__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__6"


    // $ANTLR start "rule__UniqueConstraint__Group__6__Impl"
    // InternalOpenCypherParser.g:6600:1: rule__UniqueConstraint__Group__6__Impl : ( ASSERT ) ;
    public final void rule__UniqueConstraint__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6604:1: ( ( ASSERT ) )
            // InternalOpenCypherParser.g:6605:1: ( ASSERT )
            {
            // InternalOpenCypherParser.g:6605:1: ( ASSERT )
            // InternalOpenCypherParser.g:6606:2: ASSERT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6()); 
            }
            match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getASSERTKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__6__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__7"
    // InternalOpenCypherParser.g:6615:1: rule__UniqueConstraint__Group__7 : rule__UniqueConstraint__Group__7__Impl rule__UniqueConstraint__Group__8 ;
    public final void rule__UniqueConstraint__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6619:1: ( rule__UniqueConstraint__Group__7__Impl rule__UniqueConstraint__Group__8 )
            // InternalOpenCypherParser.g:6620:2: rule__UniqueConstraint__Group__7__Impl rule__UniqueConstraint__Group__8
            {
            pushFollow(FOLLOW_27);
            rule__UniqueConstraint__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__7"


    // $ANTLR start "rule__UniqueConstraint__Group__7__Impl"
    // InternalOpenCypherParser.g:6627:1: rule__UniqueConstraint__Group__7__Impl : ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) ) ;
    public final void rule__UniqueConstraint__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6631:1: ( ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) ) )
            // InternalOpenCypherParser.g:6632:1: ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) )
            {
            // InternalOpenCypherParser.g:6632:1: ( ( rule__UniqueConstraint__PropertyExpressionAssignment_7 ) )
            // InternalOpenCypherParser.g:6633:2: ( rule__UniqueConstraint__PropertyExpressionAssignment_7 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7()); 
            }
            // InternalOpenCypherParser.g:6634:2: ( rule__UniqueConstraint__PropertyExpressionAssignment_7 )
            // InternalOpenCypherParser.g:6634:3: rule__UniqueConstraint__PropertyExpressionAssignment_7
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__PropertyExpressionAssignment_7();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionAssignment_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__7__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__8"
    // InternalOpenCypherParser.g:6642:1: rule__UniqueConstraint__Group__8 : rule__UniqueConstraint__Group__8__Impl rule__UniqueConstraint__Group__9 ;
    public final void rule__UniqueConstraint__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6646:1: ( rule__UniqueConstraint__Group__8__Impl rule__UniqueConstraint__Group__9 )
            // InternalOpenCypherParser.g:6647:2: rule__UniqueConstraint__Group__8__Impl rule__UniqueConstraint__Group__9
            {
            pushFollow(FOLLOW_28);
            rule__UniqueConstraint__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__8"


    // $ANTLR start "rule__UniqueConstraint__Group__8__Impl"
    // InternalOpenCypherParser.g:6654:1: rule__UniqueConstraint__Group__8__Impl : ( IS ) ;
    public final void rule__UniqueConstraint__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6658:1: ( ( IS ) )
            // InternalOpenCypherParser.g:6659:1: ( IS )
            {
            // InternalOpenCypherParser.g:6659:1: ( IS )
            // InternalOpenCypherParser.g:6660:2: IS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getISKeyword_8()); 
            }
            match(input,IS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getISKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__8__Impl"


    // $ANTLR start "rule__UniqueConstraint__Group__9"
    // InternalOpenCypherParser.g:6669:1: rule__UniqueConstraint__Group__9 : rule__UniqueConstraint__Group__9__Impl ;
    public final void rule__UniqueConstraint__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6673:1: ( rule__UniqueConstraint__Group__9__Impl )
            // InternalOpenCypherParser.g:6674:2: rule__UniqueConstraint__Group__9__Impl
            {
            pushFollow(FOLLOW_2);
            rule__UniqueConstraint__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__9"


    // $ANTLR start "rule__UniqueConstraint__Group__9__Impl"
    // InternalOpenCypherParser.g:6680:1: rule__UniqueConstraint__Group__9__Impl : ( UNIQUE ) ;
    public final void rule__UniqueConstraint__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6684:1: ( ( UNIQUE ) )
            // InternalOpenCypherParser.g:6685:1: ( UNIQUE )
            {
            // InternalOpenCypherParser.g:6685:1: ( UNIQUE )
            // InternalOpenCypherParser.g:6686:2: UNIQUE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9()); 
            }
            match(input,UNIQUE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getUNIQUEKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__Group__9__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6696:1: rule__NodePropertyExistenceConstraint__Group__0 : rule__NodePropertyExistenceConstraint__Group__0__Impl rule__NodePropertyExistenceConstraint__Group__1 ;
    public final void rule__NodePropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6700:1: ( rule__NodePropertyExistenceConstraint__Group__0__Impl rule__NodePropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6701:2: rule__NodePropertyExistenceConstraint__Group__0__Impl rule__NodePropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_21);
            rule__NodePropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:6708:1: rule__NodePropertyExistenceConstraint__Group__0__Impl : ( CONSTRAINT ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6712:1: ( ( CONSTRAINT ) )
            // InternalOpenCypherParser.g:6713:1: ( CONSTRAINT )
            {
            // InternalOpenCypherParser.g:6713:1: ( CONSTRAINT )
            // InternalOpenCypherParser.g:6714:2: CONSTRAINT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }
            match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:6723:1: rule__NodePropertyExistenceConstraint__Group__1 : rule__NodePropertyExistenceConstraint__Group__1__Impl rule__NodePropertyExistenceConstraint__Group__2 ;
    public final void rule__NodePropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6727:1: ( rule__NodePropertyExistenceConstraint__Group__1__Impl rule__NodePropertyExistenceConstraint__Group__2 )
            // InternalOpenCypherParser.g:6728:2: rule__NodePropertyExistenceConstraint__Group__1__Impl rule__NodePropertyExistenceConstraint__Group__2
            {
            pushFollow(FOLLOW_23);
            rule__NodePropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:6735:1: rule__NodePropertyExistenceConstraint__Group__1__Impl : ( ON ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6739:1: ( ( ON ) )
            // InternalOpenCypherParser.g:6740:1: ( ON )
            {
            // InternalOpenCypherParser.g:6740:1: ( ON )
            // InternalOpenCypherParser.g:6741:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__2"
    // InternalOpenCypherParser.g:6750:1: rule__NodePropertyExistenceConstraint__Group__2 : rule__NodePropertyExistenceConstraint__Group__2__Impl rule__NodePropertyExistenceConstraint__Group__3 ;
    public final void rule__NodePropertyExistenceConstraint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6754:1: ( rule__NodePropertyExistenceConstraint__Group__2__Impl rule__NodePropertyExistenceConstraint__Group__3 )
            // InternalOpenCypherParser.g:6755:2: rule__NodePropertyExistenceConstraint__Group__2__Impl rule__NodePropertyExistenceConstraint__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__NodePropertyExistenceConstraint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__2"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__2__Impl"
    // InternalOpenCypherParser.g:6762:1: rule__NodePropertyExistenceConstraint__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6766:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:6767:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:6767:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:6768:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__2__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__3"
    // InternalOpenCypherParser.g:6777:1: rule__NodePropertyExistenceConstraint__Group__3 : rule__NodePropertyExistenceConstraint__Group__3__Impl rule__NodePropertyExistenceConstraint__Group__4 ;
    public final void rule__NodePropertyExistenceConstraint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6781:1: ( rule__NodePropertyExistenceConstraint__Group__3__Impl rule__NodePropertyExistenceConstraint__Group__4 )
            // InternalOpenCypherParser.g:6782:2: rule__NodePropertyExistenceConstraint__Group__3__Impl rule__NodePropertyExistenceConstraint__Group__4
            {
            pushFollow(FOLLOW_22);
            rule__NodePropertyExistenceConstraint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__3"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__3__Impl"
    // InternalOpenCypherParser.g:6789:1: rule__NodePropertyExistenceConstraint__Group__3__Impl : ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6793:1: ( ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) ) )
            // InternalOpenCypherParser.g:6794:1: ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:6794:1: ( ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 ) )
            // InternalOpenCypherParser.g:6795:2: ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3()); 
            }
            // InternalOpenCypherParser.g:6796:2: ( rule__NodePropertyExistenceConstraint__VariableAssignment_3 )
            // InternalOpenCypherParser.g:6796:3: rule__NodePropertyExistenceConstraint__VariableAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__VariableAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__3__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__4"
    // InternalOpenCypherParser.g:6804:1: rule__NodePropertyExistenceConstraint__Group__4 : rule__NodePropertyExistenceConstraint__Group__4__Impl rule__NodePropertyExistenceConstraint__Group__5 ;
    public final void rule__NodePropertyExistenceConstraint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6808:1: ( rule__NodePropertyExistenceConstraint__Group__4__Impl rule__NodePropertyExistenceConstraint__Group__5 )
            // InternalOpenCypherParser.g:6809:2: rule__NodePropertyExistenceConstraint__Group__4__Impl rule__NodePropertyExistenceConstraint__Group__5
            {
            pushFollow(FOLLOW_24);
            rule__NodePropertyExistenceConstraint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__4"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__4__Impl"
    // InternalOpenCypherParser.g:6816:1: rule__NodePropertyExistenceConstraint__Group__4__Impl : ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6820:1: ( ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) ) )
            // InternalOpenCypherParser.g:6821:1: ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:6821:1: ( ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 ) )
            // InternalOpenCypherParser.g:6822:2: ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4()); 
            }
            // InternalOpenCypherParser.g:6823:2: ( rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 )
            // InternalOpenCypherParser.g:6823:3: rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__4__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__5"
    // InternalOpenCypherParser.g:6831:1: rule__NodePropertyExistenceConstraint__Group__5 : rule__NodePropertyExistenceConstraint__Group__5__Impl rule__NodePropertyExistenceConstraint__Group__6 ;
    public final void rule__NodePropertyExistenceConstraint__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6835:1: ( rule__NodePropertyExistenceConstraint__Group__5__Impl rule__NodePropertyExistenceConstraint__Group__6 )
            // InternalOpenCypherParser.g:6836:2: rule__NodePropertyExistenceConstraint__Group__5__Impl rule__NodePropertyExistenceConstraint__Group__6
            {
            pushFollow(FOLLOW_25);
            rule__NodePropertyExistenceConstraint__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__5"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__5__Impl"
    // InternalOpenCypherParser.g:6843:1: rule__NodePropertyExistenceConstraint__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6847:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:6848:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:6848:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:6849:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__5__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__6"
    // InternalOpenCypherParser.g:6858:1: rule__NodePropertyExistenceConstraint__Group__6 : rule__NodePropertyExistenceConstraint__Group__6__Impl rule__NodePropertyExistenceConstraint__Group__7 ;
    public final void rule__NodePropertyExistenceConstraint__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6862:1: ( rule__NodePropertyExistenceConstraint__Group__6__Impl rule__NodePropertyExistenceConstraint__Group__7 )
            // InternalOpenCypherParser.g:6863:2: rule__NodePropertyExistenceConstraint__Group__6__Impl rule__NodePropertyExistenceConstraint__Group__7
            {
            pushFollow(FOLLOW_29);
            rule__NodePropertyExistenceConstraint__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__6"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__6__Impl"
    // InternalOpenCypherParser.g:6870:1: rule__NodePropertyExistenceConstraint__Group__6__Impl : ( ASSERT ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6874:1: ( ( ASSERT ) )
            // InternalOpenCypherParser.g:6875:1: ( ASSERT )
            {
            // InternalOpenCypherParser.g:6875:1: ( ASSERT )
            // InternalOpenCypherParser.g:6876:2: ASSERT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6()); 
            }
            match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getASSERTKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__6__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__7"
    // InternalOpenCypherParser.g:6885:1: rule__NodePropertyExistenceConstraint__Group__7 : rule__NodePropertyExistenceConstraint__Group__7__Impl rule__NodePropertyExistenceConstraint__Group__8 ;
    public final void rule__NodePropertyExistenceConstraint__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6889:1: ( rule__NodePropertyExistenceConstraint__Group__7__Impl rule__NodePropertyExistenceConstraint__Group__8 )
            // InternalOpenCypherParser.g:6890:2: rule__NodePropertyExistenceConstraint__Group__7__Impl rule__NodePropertyExistenceConstraint__Group__8
            {
            pushFollow(FOLLOW_23);
            rule__NodePropertyExistenceConstraint__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__7"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__7__Impl"
    // InternalOpenCypherParser.g:6897:1: rule__NodePropertyExistenceConstraint__Group__7__Impl : ( EXISTS ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6901:1: ( ( EXISTS ) )
            // InternalOpenCypherParser.g:6902:1: ( EXISTS )
            {
            // InternalOpenCypherParser.g:6902:1: ( EXISTS )
            // InternalOpenCypherParser.g:6903:2: EXISTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7()); 
            }
            match(input,EXISTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getEXISTSKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__7__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__8"
    // InternalOpenCypherParser.g:6912:1: rule__NodePropertyExistenceConstraint__Group__8 : rule__NodePropertyExistenceConstraint__Group__8__Impl rule__NodePropertyExistenceConstraint__Group__9 ;
    public final void rule__NodePropertyExistenceConstraint__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6916:1: ( rule__NodePropertyExistenceConstraint__Group__8__Impl rule__NodePropertyExistenceConstraint__Group__9 )
            // InternalOpenCypherParser.g:6917:2: rule__NodePropertyExistenceConstraint__Group__8__Impl rule__NodePropertyExistenceConstraint__Group__9
            {
            pushFollow(FOLLOW_26);
            rule__NodePropertyExistenceConstraint__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__8"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__8__Impl"
    // InternalOpenCypherParser.g:6924:1: rule__NodePropertyExistenceConstraint__Group__8__Impl : ( LeftParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6928:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:6929:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:6929:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:6930:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getLeftParenthesisKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__8__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__9"
    // InternalOpenCypherParser.g:6939:1: rule__NodePropertyExistenceConstraint__Group__9 : rule__NodePropertyExistenceConstraint__Group__9__Impl rule__NodePropertyExistenceConstraint__Group__10 ;
    public final void rule__NodePropertyExistenceConstraint__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6943:1: ( rule__NodePropertyExistenceConstraint__Group__9__Impl rule__NodePropertyExistenceConstraint__Group__10 )
            // InternalOpenCypherParser.g:6944:2: rule__NodePropertyExistenceConstraint__Group__9__Impl rule__NodePropertyExistenceConstraint__Group__10
            {
            pushFollow(FOLLOW_24);
            rule__NodePropertyExistenceConstraint__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__9"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__9__Impl"
    // InternalOpenCypherParser.g:6951:1: rule__NodePropertyExistenceConstraint__Group__9__Impl : ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6955:1: ( ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) ) )
            // InternalOpenCypherParser.g:6956:1: ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) )
            {
            // InternalOpenCypherParser.g:6956:1: ( ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 ) )
            // InternalOpenCypherParser.g:6957:2: ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9()); 
            }
            // InternalOpenCypherParser.g:6958:2: ( rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 )
            // InternalOpenCypherParser.g:6958:3: rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionAssignment_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__9__Impl"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__10"
    // InternalOpenCypherParser.g:6966:1: rule__NodePropertyExistenceConstraint__Group__10 : rule__NodePropertyExistenceConstraint__Group__10__Impl ;
    public final void rule__NodePropertyExistenceConstraint__Group__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6970:1: ( rule__NodePropertyExistenceConstraint__Group__10__Impl )
            // InternalOpenCypherParser.g:6971:2: rule__NodePropertyExistenceConstraint__Group__10__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodePropertyExistenceConstraint__Group__10__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__10"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__Group__10__Impl"
    // InternalOpenCypherParser.g:6977:1: rule__NodePropertyExistenceConstraint__Group__10__Impl : ( RightParenthesis ) ;
    public final void rule__NodePropertyExistenceConstraint__Group__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6981:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:6982:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:6982:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:6983:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getRightParenthesisKeyword_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__Group__10__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__0"
    // InternalOpenCypherParser.g:6993:1: rule__RelationshipPropertyExistenceConstraint__Group__0 : rule__RelationshipPropertyExistenceConstraint__Group__0__Impl rule__RelationshipPropertyExistenceConstraint__Group__1 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:6997:1: ( rule__RelationshipPropertyExistenceConstraint__Group__0__Impl rule__RelationshipPropertyExistenceConstraint__Group__1 )
            // InternalOpenCypherParser.g:6998:2: rule__RelationshipPropertyExistenceConstraint__Group__0__Impl rule__RelationshipPropertyExistenceConstraint__Group__1
            {
            pushFollow(FOLLOW_21);
            rule__RelationshipPropertyExistenceConstraint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__0"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__0__Impl"
    // InternalOpenCypherParser.g:7005:1: rule__RelationshipPropertyExistenceConstraint__Group__0__Impl : ( CONSTRAINT ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7009:1: ( ( CONSTRAINT ) )
            // InternalOpenCypherParser.g:7010:1: ( CONSTRAINT )
            {
            // InternalOpenCypherParser.g:7010:1: ( CONSTRAINT )
            // InternalOpenCypherParser.g:7011:2: CONSTRAINT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }
            match(input,CONSTRAINT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getCONSTRAINTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__0__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__1"
    // InternalOpenCypherParser.g:7020:1: rule__RelationshipPropertyExistenceConstraint__Group__1 : rule__RelationshipPropertyExistenceConstraint__Group__1__Impl rule__RelationshipPropertyExistenceConstraint__Group__2 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7024:1: ( rule__RelationshipPropertyExistenceConstraint__Group__1__Impl rule__RelationshipPropertyExistenceConstraint__Group__2 )
            // InternalOpenCypherParser.g:7025:2: rule__RelationshipPropertyExistenceConstraint__Group__1__Impl rule__RelationshipPropertyExistenceConstraint__Group__2
            {
            pushFollow(FOLLOW_23);
            rule__RelationshipPropertyExistenceConstraint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__1"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__1__Impl"
    // InternalOpenCypherParser.g:7032:1: rule__RelationshipPropertyExistenceConstraint__Group__1__Impl : ( ON ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7036:1: ( ( ON ) )
            // InternalOpenCypherParser.g:7037:1: ( ON )
            {
            // InternalOpenCypherParser.g:7037:1: ( ON )
            // InternalOpenCypherParser.g:7038:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getONKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__2"
    // InternalOpenCypherParser.g:7047:1: rule__RelationshipPropertyExistenceConstraint__Group__2 : rule__RelationshipPropertyExistenceConstraint__Group__2__Impl rule__RelationshipPropertyExistenceConstraint__Group__3 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7051:1: ( rule__RelationshipPropertyExistenceConstraint__Group__2__Impl rule__RelationshipPropertyExistenceConstraint__Group__3 )
            // InternalOpenCypherParser.g:7052:2: rule__RelationshipPropertyExistenceConstraint__Group__2__Impl rule__RelationshipPropertyExistenceConstraint__Group__3
            {
            pushFollow(FOLLOW_25);
            rule__RelationshipPropertyExistenceConstraint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__2"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__2__Impl"
    // InternalOpenCypherParser.g:7059:1: rule__RelationshipPropertyExistenceConstraint__Group__2__Impl : ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7063:1: ( ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:7064:1: ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:7064:1: ( ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 ) )
            // InternalOpenCypherParser.g:7065:2: ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:7066:2: ( rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 )
            // InternalOpenCypherParser.g:7066:3: rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__2__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__3"
    // InternalOpenCypherParser.g:7074:1: rule__RelationshipPropertyExistenceConstraint__Group__3 : rule__RelationshipPropertyExistenceConstraint__Group__3__Impl rule__RelationshipPropertyExistenceConstraint__Group__4 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7078:1: ( rule__RelationshipPropertyExistenceConstraint__Group__3__Impl rule__RelationshipPropertyExistenceConstraint__Group__4 )
            // InternalOpenCypherParser.g:7079:2: rule__RelationshipPropertyExistenceConstraint__Group__3__Impl rule__RelationshipPropertyExistenceConstraint__Group__4
            {
            pushFollow(FOLLOW_29);
            rule__RelationshipPropertyExistenceConstraint__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__3"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__3__Impl"
    // InternalOpenCypherParser.g:7086:1: rule__RelationshipPropertyExistenceConstraint__Group__3__Impl : ( ASSERT ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7090:1: ( ( ASSERT ) )
            // InternalOpenCypherParser.g:7091:1: ( ASSERT )
            {
            // InternalOpenCypherParser.g:7091:1: ( ASSERT )
            // InternalOpenCypherParser.g:7092:2: ASSERT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3()); 
            }
            match(input,ASSERT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getASSERTKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__3__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__4"
    // InternalOpenCypherParser.g:7101:1: rule__RelationshipPropertyExistenceConstraint__Group__4 : rule__RelationshipPropertyExistenceConstraint__Group__4__Impl rule__RelationshipPropertyExistenceConstraint__Group__5 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7105:1: ( rule__RelationshipPropertyExistenceConstraint__Group__4__Impl rule__RelationshipPropertyExistenceConstraint__Group__5 )
            // InternalOpenCypherParser.g:7106:2: rule__RelationshipPropertyExistenceConstraint__Group__4__Impl rule__RelationshipPropertyExistenceConstraint__Group__5
            {
            pushFollow(FOLLOW_23);
            rule__RelationshipPropertyExistenceConstraint__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__4"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__4__Impl"
    // InternalOpenCypherParser.g:7113:1: rule__RelationshipPropertyExistenceConstraint__Group__4__Impl : ( EXISTS ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7117:1: ( ( EXISTS ) )
            // InternalOpenCypherParser.g:7118:1: ( EXISTS )
            {
            // InternalOpenCypherParser.g:7118:1: ( EXISTS )
            // InternalOpenCypherParser.g:7119:2: EXISTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4()); 
            }
            match(input,EXISTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getEXISTSKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__4__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__5"
    // InternalOpenCypherParser.g:7128:1: rule__RelationshipPropertyExistenceConstraint__Group__5 : rule__RelationshipPropertyExistenceConstraint__Group__5__Impl rule__RelationshipPropertyExistenceConstraint__Group__6 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7132:1: ( rule__RelationshipPropertyExistenceConstraint__Group__5__Impl rule__RelationshipPropertyExistenceConstraint__Group__6 )
            // InternalOpenCypherParser.g:7133:2: rule__RelationshipPropertyExistenceConstraint__Group__5__Impl rule__RelationshipPropertyExistenceConstraint__Group__6
            {
            pushFollow(FOLLOW_26);
            rule__RelationshipPropertyExistenceConstraint__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__5"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__5__Impl"
    // InternalOpenCypherParser.g:7140:1: rule__RelationshipPropertyExistenceConstraint__Group__5__Impl : ( LeftParenthesis ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7144:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7145:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7145:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7146:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getLeftParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__5__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__6"
    // InternalOpenCypherParser.g:7155:1: rule__RelationshipPropertyExistenceConstraint__Group__6 : rule__RelationshipPropertyExistenceConstraint__Group__6__Impl rule__RelationshipPropertyExistenceConstraint__Group__7 ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7159:1: ( rule__RelationshipPropertyExistenceConstraint__Group__6__Impl rule__RelationshipPropertyExistenceConstraint__Group__7 )
            // InternalOpenCypherParser.g:7160:2: rule__RelationshipPropertyExistenceConstraint__Group__6__Impl rule__RelationshipPropertyExistenceConstraint__Group__7
            {
            pushFollow(FOLLOW_24);
            rule__RelationshipPropertyExistenceConstraint__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__6"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__6__Impl"
    // InternalOpenCypherParser.g:7167:1: rule__RelationshipPropertyExistenceConstraint__Group__6__Impl : ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7171:1: ( ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) ) )
            // InternalOpenCypherParser.g:7172:1: ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) )
            {
            // InternalOpenCypherParser.g:7172:1: ( ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 ) )
            // InternalOpenCypherParser.g:7173:2: ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6()); 
            }
            // InternalOpenCypherParser.g:7174:2: ( rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 )
            // InternalOpenCypherParser.g:7174:3: rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__6__Impl"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__7"
    // InternalOpenCypherParser.g:7182:1: rule__RelationshipPropertyExistenceConstraint__Group__7 : rule__RelationshipPropertyExistenceConstraint__Group__7__Impl ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7186:1: ( rule__RelationshipPropertyExistenceConstraint__Group__7__Impl )
            // InternalOpenCypherParser.g:7187:2: rule__RelationshipPropertyExistenceConstraint__Group__7__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPropertyExistenceConstraint__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__7"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__Group__7__Impl"
    // InternalOpenCypherParser.g:7193:1: rule__RelationshipPropertyExistenceConstraint__Group__7__Impl : ( RightParenthesis ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7197:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7198:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7198:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7199:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRightParenthesisKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__Group__7__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__0"
    // InternalOpenCypherParser.g:7209:1: rule__RelationshipPatternSyntax__Group__0 : rule__RelationshipPatternSyntax__Group__0__Impl rule__RelationshipPatternSyntax__Group__1 ;
    public final void rule__RelationshipPatternSyntax__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7213:1: ( rule__RelationshipPatternSyntax__Group__0__Impl rule__RelationshipPatternSyntax__Group__1 )
            // InternalOpenCypherParser.g:7214:2: rule__RelationshipPatternSyntax__Group__0__Impl rule__RelationshipPatternSyntax__Group__1
            {
            pushFollow(FOLLOW_24);
            rule__RelationshipPatternSyntax__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__0"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__0__Impl"
    // InternalOpenCypherParser.g:7221:1: rule__RelationshipPatternSyntax__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7225:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7226:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7226:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7227:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__0__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__1"
    // InternalOpenCypherParser.g:7236:1: rule__RelationshipPatternSyntax__Group__1 : rule__RelationshipPatternSyntax__Group__1__Impl rule__RelationshipPatternSyntax__Group__2 ;
    public final void rule__RelationshipPatternSyntax__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7240:1: ( rule__RelationshipPatternSyntax__Group__1__Impl rule__RelationshipPatternSyntax__Group__2 )
            // InternalOpenCypherParser.g:7241:2: rule__RelationshipPatternSyntax__Group__1__Impl rule__RelationshipPatternSyntax__Group__2
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPatternSyntax__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__1"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__1__Impl"
    // InternalOpenCypherParser.g:7248:1: rule__RelationshipPatternSyntax__Group__1__Impl : ( RightParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7252:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7253:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7253:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7254:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__2"
    // InternalOpenCypherParser.g:7263:1: rule__RelationshipPatternSyntax__Group__2 : rule__RelationshipPatternSyntax__Group__2__Impl rule__RelationshipPatternSyntax__Group__3 ;
    public final void rule__RelationshipPatternSyntax__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7267:1: ( rule__RelationshipPatternSyntax__Group__2__Impl rule__RelationshipPatternSyntax__Group__3 )
            // InternalOpenCypherParser.g:7268:2: rule__RelationshipPatternSyntax__Group__2__Impl rule__RelationshipPatternSyntax__Group__3
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPatternSyntax__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__2"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__2__Impl"
    // InternalOpenCypherParser.g:7275:1: rule__RelationshipPatternSyntax__Group__2__Impl : ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? ) ;
    public final void rule__RelationshipPatternSyntax__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7279:1: ( ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? ) )
            // InternalOpenCypherParser.g:7280:1: ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:7280:1: ( ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )? )
            // InternalOpenCypherParser.g:7281:2: ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2()); 
            }
            // InternalOpenCypherParser.g:7282:2: ( rule__RelationshipPatternSyntax__IncomingAssignment_2 )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==LessThanSign) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalOpenCypherParser.g:7282:3: rule__RelationshipPatternSyntax__IncomingAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPatternSyntax__IncomingAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__2__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__3"
    // InternalOpenCypherParser.g:7290:1: rule__RelationshipPatternSyntax__Group__3 : rule__RelationshipPatternSyntax__Group__3__Impl rule__RelationshipPatternSyntax__Group__4 ;
    public final void rule__RelationshipPatternSyntax__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7294:1: ( rule__RelationshipPatternSyntax__Group__3__Impl rule__RelationshipPatternSyntax__Group__4 )
            // InternalOpenCypherParser.g:7295:2: rule__RelationshipPatternSyntax__Group__3__Impl rule__RelationshipPatternSyntax__Group__4
            {
            pushFollow(FOLLOW_31);
            rule__RelationshipPatternSyntax__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__3"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__3__Impl"
    // InternalOpenCypherParser.g:7302:1: rule__RelationshipPatternSyntax__Group__3__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPatternSyntax__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7306:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:7307:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:7307:1: ( ruleDash )
            // InternalOpenCypherParser.g:7308:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__3__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__4"
    // InternalOpenCypherParser.g:7317:1: rule__RelationshipPatternSyntax__Group__4 : rule__RelationshipPatternSyntax__Group__4__Impl rule__RelationshipPatternSyntax__Group__5 ;
    public final void rule__RelationshipPatternSyntax__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7321:1: ( rule__RelationshipPatternSyntax__Group__4__Impl rule__RelationshipPatternSyntax__Group__5 )
            // InternalOpenCypherParser.g:7322:2: rule__RelationshipPatternSyntax__Group__4__Impl rule__RelationshipPatternSyntax__Group__5
            {
            pushFollow(FOLLOW_9);
            rule__RelationshipPatternSyntax__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__4"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__4__Impl"
    // InternalOpenCypherParser.g:7329:1: rule__RelationshipPatternSyntax__Group__4__Impl : ( LeftSquareBracket ) ;
    public final void rule__RelationshipPatternSyntax__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7333:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:7334:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:7334:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:7335:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftSquareBracketKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__4__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__5"
    // InternalOpenCypherParser.g:7344:1: rule__RelationshipPatternSyntax__Group__5 : rule__RelationshipPatternSyntax__Group__5__Impl rule__RelationshipPatternSyntax__Group__6 ;
    public final void rule__RelationshipPatternSyntax__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7348:1: ( rule__RelationshipPatternSyntax__Group__5__Impl rule__RelationshipPatternSyntax__Group__6 )
            // InternalOpenCypherParser.g:7349:2: rule__RelationshipPatternSyntax__Group__5__Impl rule__RelationshipPatternSyntax__Group__6
            {
            pushFollow(FOLLOW_22);
            rule__RelationshipPatternSyntax__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__5"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__5__Impl"
    // InternalOpenCypherParser.g:7356:1: rule__RelationshipPatternSyntax__Group__5__Impl : ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) ) ;
    public final void rule__RelationshipPatternSyntax__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7360:1: ( ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) ) )
            // InternalOpenCypherParser.g:7361:1: ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) )
            {
            // InternalOpenCypherParser.g:7361:1: ( ( rule__RelationshipPatternSyntax__VariableAssignment_5 ) )
            // InternalOpenCypherParser.g:7362:2: ( rule__RelationshipPatternSyntax__VariableAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5()); 
            }
            // InternalOpenCypherParser.g:7363:2: ( rule__RelationshipPatternSyntax__VariableAssignment_5 )
            // InternalOpenCypherParser.g:7363:3: rule__RelationshipPatternSyntax__VariableAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__VariableAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__5__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__6"
    // InternalOpenCypherParser.g:7371:1: rule__RelationshipPatternSyntax__Group__6 : rule__RelationshipPatternSyntax__Group__6__Impl rule__RelationshipPatternSyntax__Group__7 ;
    public final void rule__RelationshipPatternSyntax__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7375:1: ( rule__RelationshipPatternSyntax__Group__6__Impl rule__RelationshipPatternSyntax__Group__7 )
            // InternalOpenCypherParser.g:7376:2: rule__RelationshipPatternSyntax__Group__6__Impl rule__RelationshipPatternSyntax__Group__7
            {
            pushFollow(FOLLOW_32);
            rule__RelationshipPatternSyntax__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__6"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__6__Impl"
    // InternalOpenCypherParser.g:7383:1: rule__RelationshipPatternSyntax__Group__6__Impl : ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) ) ;
    public final void rule__RelationshipPatternSyntax__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7387:1: ( ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) ) )
            // InternalOpenCypherParser.g:7388:1: ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) )
            {
            // InternalOpenCypherParser.g:7388:1: ( ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 ) )
            // InternalOpenCypherParser.g:7389:2: ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6()); 
            }
            // InternalOpenCypherParser.g:7390:2: ( rule__RelationshipPatternSyntax__RelTypeAssignment_6 )
            // InternalOpenCypherParser.g:7390:3: rule__RelationshipPatternSyntax__RelTypeAssignment_6
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__RelTypeAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__6__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__7"
    // InternalOpenCypherParser.g:7398:1: rule__RelationshipPatternSyntax__Group__7 : rule__RelationshipPatternSyntax__Group__7__Impl rule__RelationshipPatternSyntax__Group__8 ;
    public final void rule__RelationshipPatternSyntax__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7402:1: ( rule__RelationshipPatternSyntax__Group__7__Impl rule__RelationshipPatternSyntax__Group__8 )
            // InternalOpenCypherParser.g:7403:2: rule__RelationshipPatternSyntax__Group__7__Impl rule__RelationshipPatternSyntax__Group__8
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPatternSyntax__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__7"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__7__Impl"
    // InternalOpenCypherParser.g:7410:1: rule__RelationshipPatternSyntax__Group__7__Impl : ( RightSquareBracket ) ;
    public final void rule__RelationshipPatternSyntax__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7414:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:7415:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:7415:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:7416:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightSquareBracketKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__7__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__8"
    // InternalOpenCypherParser.g:7425:1: rule__RelationshipPatternSyntax__Group__8 : rule__RelationshipPatternSyntax__Group__8__Impl rule__RelationshipPatternSyntax__Group__9 ;
    public final void rule__RelationshipPatternSyntax__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7429:1: ( rule__RelationshipPatternSyntax__Group__8__Impl rule__RelationshipPatternSyntax__Group__9 )
            // InternalOpenCypherParser.g:7430:2: rule__RelationshipPatternSyntax__Group__8__Impl rule__RelationshipPatternSyntax__Group__9
            {
            pushFollow(FOLLOW_33);
            rule__RelationshipPatternSyntax__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__8"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__8__Impl"
    // InternalOpenCypherParser.g:7437:1: rule__RelationshipPatternSyntax__Group__8__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPatternSyntax__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7441:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:7442:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:7442:1: ( ruleDash )
            // InternalOpenCypherParser.g:7443:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getDashParserRuleCall_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__8__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__9"
    // InternalOpenCypherParser.g:7452:1: rule__RelationshipPatternSyntax__Group__9 : rule__RelationshipPatternSyntax__Group__9__Impl rule__RelationshipPatternSyntax__Group__10 ;
    public final void rule__RelationshipPatternSyntax__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7456:1: ( rule__RelationshipPatternSyntax__Group__9__Impl rule__RelationshipPatternSyntax__Group__10 )
            // InternalOpenCypherParser.g:7457:2: rule__RelationshipPatternSyntax__Group__9__Impl rule__RelationshipPatternSyntax__Group__10
            {
            pushFollow(FOLLOW_33);
            rule__RelationshipPatternSyntax__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__9"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__9__Impl"
    // InternalOpenCypherParser.g:7464:1: rule__RelationshipPatternSyntax__Group__9__Impl : ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? ) ;
    public final void rule__RelationshipPatternSyntax__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7468:1: ( ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? ) )
            // InternalOpenCypherParser.g:7469:1: ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? )
            {
            // InternalOpenCypherParser.g:7469:1: ( ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )? )
            // InternalOpenCypherParser.g:7470:2: ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9()); 
            }
            // InternalOpenCypherParser.g:7471:2: ( rule__RelationshipPatternSyntax__OutgoingAssignment_9 )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==GreaterThanSign) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // InternalOpenCypherParser.g:7471:3: rule__RelationshipPatternSyntax__OutgoingAssignment_9
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPatternSyntax__OutgoingAssignment_9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingAssignment_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__9__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__10"
    // InternalOpenCypherParser.g:7479:1: rule__RelationshipPatternSyntax__Group__10 : rule__RelationshipPatternSyntax__Group__10__Impl rule__RelationshipPatternSyntax__Group__11 ;
    public final void rule__RelationshipPatternSyntax__Group__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7483:1: ( rule__RelationshipPatternSyntax__Group__10__Impl rule__RelationshipPatternSyntax__Group__11 )
            // InternalOpenCypherParser.g:7484:2: rule__RelationshipPatternSyntax__Group__10__Impl rule__RelationshipPatternSyntax__Group__11
            {
            pushFollow(FOLLOW_24);
            rule__RelationshipPatternSyntax__Group__10__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__11();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__10"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__10__Impl"
    // InternalOpenCypherParser.g:7491:1: rule__RelationshipPatternSyntax__Group__10__Impl : ( LeftParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7495:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:7496:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:7496:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:7497:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getLeftParenthesisKeyword_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__10__Impl"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__11"
    // InternalOpenCypherParser.g:7506:1: rule__RelationshipPatternSyntax__Group__11 : rule__RelationshipPatternSyntax__Group__11__Impl ;
    public final void rule__RelationshipPatternSyntax__Group__11() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7510:1: ( rule__RelationshipPatternSyntax__Group__11__Impl )
            // InternalOpenCypherParser.g:7511:2: rule__RelationshipPatternSyntax__Group__11__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPatternSyntax__Group__11__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__11"


    // $ANTLR start "rule__RelationshipPatternSyntax__Group__11__Impl"
    // InternalOpenCypherParser.g:7517:1: rule__RelationshipPatternSyntax__Group__11__Impl : ( RightParenthesis ) ;
    public final void rule__RelationshipPatternSyntax__Group__11__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7521:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:7522:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:7522:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:7523:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRightParenthesisKeyword_11()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__Group__11__Impl"


    // $ANTLR start "rule__LoadCSV__Group__0"
    // InternalOpenCypherParser.g:7533:1: rule__LoadCSV__Group__0 : rule__LoadCSV__Group__0__Impl rule__LoadCSV__Group__1 ;
    public final void rule__LoadCSV__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7537:1: ( rule__LoadCSV__Group__0__Impl rule__LoadCSV__Group__1 )
            // InternalOpenCypherParser.g:7538:2: rule__LoadCSV__Group__0__Impl rule__LoadCSV__Group__1
            {
            pushFollow(FOLLOW_12);
            rule__LoadCSV__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__0"


    // $ANTLR start "rule__LoadCSV__Group__0__Impl"
    // InternalOpenCypherParser.g:7545:1: rule__LoadCSV__Group__0__Impl : ( () ) ;
    public final void rule__LoadCSV__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7549:1: ( ( () ) )
            // InternalOpenCypherParser.g:7550:1: ( () )
            {
            // InternalOpenCypherParser.g:7550:1: ( () )
            // InternalOpenCypherParser.g:7551:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getLoadCSVAction_0()); 
            }
            // InternalOpenCypherParser.g:7552:2: ()
            // InternalOpenCypherParser.g:7552:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getLoadCSVAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__0__Impl"


    // $ANTLR start "rule__LoadCSV__Group__1"
    // InternalOpenCypherParser.g:7560:1: rule__LoadCSV__Group__1 : rule__LoadCSV__Group__1__Impl rule__LoadCSV__Group__2 ;
    public final void rule__LoadCSV__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7564:1: ( rule__LoadCSV__Group__1__Impl rule__LoadCSV__Group__2 )
            // InternalOpenCypherParser.g:7565:2: rule__LoadCSV__Group__1__Impl rule__LoadCSV__Group__2
            {
            pushFollow(FOLLOW_34);
            rule__LoadCSV__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__1"


    // $ANTLR start "rule__LoadCSV__Group__1__Impl"
    // InternalOpenCypherParser.g:7572:1: rule__LoadCSV__Group__1__Impl : ( LOAD ) ;
    public final void rule__LoadCSV__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7576:1: ( ( LOAD ) )
            // InternalOpenCypherParser.g:7577:1: ( LOAD )
            {
            // InternalOpenCypherParser.g:7577:1: ( LOAD )
            // InternalOpenCypherParser.g:7578:2: LOAD
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getLOADKeyword_1()); 
            }
            match(input,LOAD,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getLOADKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__1__Impl"


    // $ANTLR start "rule__LoadCSV__Group__2"
    // InternalOpenCypherParser.g:7587:1: rule__LoadCSV__Group__2 : rule__LoadCSV__Group__2__Impl rule__LoadCSV__Group__3 ;
    public final void rule__LoadCSV__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7591:1: ( rule__LoadCSV__Group__2__Impl rule__LoadCSV__Group__3 )
            // InternalOpenCypherParser.g:7592:2: rule__LoadCSV__Group__2__Impl rule__LoadCSV__Group__3
            {
            pushFollow(FOLLOW_35);
            rule__LoadCSV__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__2"


    // $ANTLR start "rule__LoadCSV__Group__2__Impl"
    // InternalOpenCypherParser.g:7599:1: rule__LoadCSV__Group__2__Impl : ( CSV ) ;
    public final void rule__LoadCSV__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7603:1: ( ( CSV ) )
            // InternalOpenCypherParser.g:7604:1: ( CSV )
            {
            // InternalOpenCypherParser.g:7604:1: ( CSV )
            // InternalOpenCypherParser.g:7605:2: CSV
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getCSVKeyword_2()); 
            }
            match(input,CSV,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getCSVKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__2__Impl"


    // $ANTLR start "rule__LoadCSV__Group__3"
    // InternalOpenCypherParser.g:7614:1: rule__LoadCSV__Group__3 : rule__LoadCSV__Group__3__Impl rule__LoadCSV__Group__4 ;
    public final void rule__LoadCSV__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7618:1: ( rule__LoadCSV__Group__3__Impl rule__LoadCSV__Group__4 )
            // InternalOpenCypherParser.g:7619:2: rule__LoadCSV__Group__3__Impl rule__LoadCSV__Group__4
            {
            pushFollow(FOLLOW_35);
            rule__LoadCSV__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__3"


    // $ANTLR start "rule__LoadCSV__Group__3__Impl"
    // InternalOpenCypherParser.g:7626:1: rule__LoadCSV__Group__3__Impl : ( ( rule__LoadCSV__WithHeadersAssignment_3 )? ) ;
    public final void rule__LoadCSV__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7630:1: ( ( ( rule__LoadCSV__WithHeadersAssignment_3 )? ) )
            // InternalOpenCypherParser.g:7631:1: ( ( rule__LoadCSV__WithHeadersAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:7631:1: ( ( rule__LoadCSV__WithHeadersAssignment_3 )? )
            // InternalOpenCypherParser.g:7632:2: ( rule__LoadCSV__WithHeadersAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3()); 
            }
            // InternalOpenCypherParser.g:7633:2: ( rule__LoadCSV__WithHeadersAssignment_3 )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==WITH) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalOpenCypherParser.g:7633:3: rule__LoadCSV__WithHeadersAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__LoadCSV__WithHeadersAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getWithHeadersAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__3__Impl"


    // $ANTLR start "rule__LoadCSV__Group__4"
    // InternalOpenCypherParser.g:7641:1: rule__LoadCSV__Group__4 : rule__LoadCSV__Group__4__Impl rule__LoadCSV__Group__5 ;
    public final void rule__LoadCSV__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7645:1: ( rule__LoadCSV__Group__4__Impl rule__LoadCSV__Group__5 )
            // InternalOpenCypherParser.g:7646:2: rule__LoadCSV__Group__4__Impl rule__LoadCSV__Group__5
            {
            pushFollow(FOLLOW_36);
            rule__LoadCSV__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__4"


    // $ANTLR start "rule__LoadCSV__Group__4__Impl"
    // InternalOpenCypherParser.g:7653:1: rule__LoadCSV__Group__4__Impl : ( FROM ) ;
    public final void rule__LoadCSV__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7657:1: ( ( FROM ) )
            // InternalOpenCypherParser.g:7658:1: ( FROM )
            {
            // InternalOpenCypherParser.g:7658:1: ( FROM )
            // InternalOpenCypherParser.g:7659:2: FROM
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFROMKeyword_4()); 
            }
            match(input,FROM,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFROMKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__4__Impl"


    // $ANTLR start "rule__LoadCSV__Group__5"
    // InternalOpenCypherParser.g:7668:1: rule__LoadCSV__Group__5 : rule__LoadCSV__Group__5__Impl rule__LoadCSV__Group__6 ;
    public final void rule__LoadCSV__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7672:1: ( rule__LoadCSV__Group__5__Impl rule__LoadCSV__Group__6 )
            // InternalOpenCypherParser.g:7673:2: rule__LoadCSV__Group__5__Impl rule__LoadCSV__Group__6
            {
            pushFollow(FOLLOW_37);
            rule__LoadCSV__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__5"


    // $ANTLR start "rule__LoadCSV__Group__5__Impl"
    // InternalOpenCypherParser.g:7680:1: rule__LoadCSV__Group__5__Impl : ( ( rule__LoadCSV__ExpressionAssignment_5 ) ) ;
    public final void rule__LoadCSV__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7684:1: ( ( ( rule__LoadCSV__ExpressionAssignment_5 ) ) )
            // InternalOpenCypherParser.g:7685:1: ( ( rule__LoadCSV__ExpressionAssignment_5 ) )
            {
            // InternalOpenCypherParser.g:7685:1: ( ( rule__LoadCSV__ExpressionAssignment_5 ) )
            // InternalOpenCypherParser.g:7686:2: ( rule__LoadCSV__ExpressionAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5()); 
            }
            // InternalOpenCypherParser.g:7687:2: ( rule__LoadCSV__ExpressionAssignment_5 )
            // InternalOpenCypherParser.g:7687:3: rule__LoadCSV__ExpressionAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__ExpressionAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getExpressionAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__5__Impl"


    // $ANTLR start "rule__LoadCSV__Group__6"
    // InternalOpenCypherParser.g:7695:1: rule__LoadCSV__Group__6 : rule__LoadCSV__Group__6__Impl rule__LoadCSV__Group__7 ;
    public final void rule__LoadCSV__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7699:1: ( rule__LoadCSV__Group__6__Impl rule__LoadCSV__Group__7 )
            // InternalOpenCypherParser.g:7700:2: rule__LoadCSV__Group__6__Impl rule__LoadCSV__Group__7
            {
            pushFollow(FOLLOW_9);
            rule__LoadCSV__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__6"


    // $ANTLR start "rule__LoadCSV__Group__6__Impl"
    // InternalOpenCypherParser.g:7707:1: rule__LoadCSV__Group__6__Impl : ( AS ) ;
    public final void rule__LoadCSV__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7711:1: ( ( AS ) )
            // InternalOpenCypherParser.g:7712:1: ( AS )
            {
            // InternalOpenCypherParser.g:7712:1: ( AS )
            // InternalOpenCypherParser.g:7713:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getASKeyword_6()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getASKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__6__Impl"


    // $ANTLR start "rule__LoadCSV__Group__7"
    // InternalOpenCypherParser.g:7722:1: rule__LoadCSV__Group__7 : rule__LoadCSV__Group__7__Impl rule__LoadCSV__Group__8 ;
    public final void rule__LoadCSV__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7726:1: ( rule__LoadCSV__Group__7__Impl rule__LoadCSV__Group__8 )
            // InternalOpenCypherParser.g:7727:2: rule__LoadCSV__Group__7__Impl rule__LoadCSV__Group__8
            {
            pushFollow(FOLLOW_38);
            rule__LoadCSV__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__7"


    // $ANTLR start "rule__LoadCSV__Group__7__Impl"
    // InternalOpenCypherParser.g:7734:1: rule__LoadCSV__Group__7__Impl : ( ( rule__LoadCSV__VariableAssignment_7 ) ) ;
    public final void rule__LoadCSV__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7738:1: ( ( ( rule__LoadCSV__VariableAssignment_7 ) ) )
            // InternalOpenCypherParser.g:7739:1: ( ( rule__LoadCSV__VariableAssignment_7 ) )
            {
            // InternalOpenCypherParser.g:7739:1: ( ( rule__LoadCSV__VariableAssignment_7 ) )
            // InternalOpenCypherParser.g:7740:2: ( rule__LoadCSV__VariableAssignment_7 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getVariableAssignment_7()); 
            }
            // InternalOpenCypherParser.g:7741:2: ( rule__LoadCSV__VariableAssignment_7 )
            // InternalOpenCypherParser.g:7741:3: rule__LoadCSV__VariableAssignment_7
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__VariableAssignment_7();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getVariableAssignment_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__7__Impl"


    // $ANTLR start "rule__LoadCSV__Group__8"
    // InternalOpenCypherParser.g:7749:1: rule__LoadCSV__Group__8 : rule__LoadCSV__Group__8__Impl ;
    public final void rule__LoadCSV__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7753:1: ( rule__LoadCSV__Group__8__Impl )
            // InternalOpenCypherParser.g:7754:2: rule__LoadCSV__Group__8__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__8"


    // $ANTLR start "rule__LoadCSV__Group__8__Impl"
    // InternalOpenCypherParser.g:7760:1: rule__LoadCSV__Group__8__Impl : ( ( rule__LoadCSV__Group_8__0 )? ) ;
    public final void rule__LoadCSV__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7764:1: ( ( ( rule__LoadCSV__Group_8__0 )? ) )
            // InternalOpenCypherParser.g:7765:1: ( ( rule__LoadCSV__Group_8__0 )? )
            {
            // InternalOpenCypherParser.g:7765:1: ( ( rule__LoadCSV__Group_8__0 )? )
            // InternalOpenCypherParser.g:7766:2: ( rule__LoadCSV__Group_8__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getGroup_8()); 
            }
            // InternalOpenCypherParser.g:7767:2: ( rule__LoadCSV__Group_8__0 )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==FIELDTERMINATOR) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // InternalOpenCypherParser.g:7767:3: rule__LoadCSV__Group_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__LoadCSV__Group_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getGroup_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group__8__Impl"


    // $ANTLR start "rule__LoadCSV__Group_8__0"
    // InternalOpenCypherParser.g:7776:1: rule__LoadCSV__Group_8__0 : rule__LoadCSV__Group_8__0__Impl rule__LoadCSV__Group_8__1 ;
    public final void rule__LoadCSV__Group_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7780:1: ( rule__LoadCSV__Group_8__0__Impl rule__LoadCSV__Group_8__1 )
            // InternalOpenCypherParser.g:7781:2: rule__LoadCSV__Group_8__0__Impl rule__LoadCSV__Group_8__1
            {
            pushFollow(FOLLOW_39);
            rule__LoadCSV__Group_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__0"


    // $ANTLR start "rule__LoadCSV__Group_8__0__Impl"
    // InternalOpenCypherParser.g:7788:1: rule__LoadCSV__Group_8__0__Impl : ( FIELDTERMINATOR ) ;
    public final void rule__LoadCSV__Group_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7792:1: ( ( FIELDTERMINATOR ) )
            // InternalOpenCypherParser.g:7793:1: ( FIELDTERMINATOR )
            {
            // InternalOpenCypherParser.g:7793:1: ( FIELDTERMINATOR )
            // InternalOpenCypherParser.g:7794:2: FIELDTERMINATOR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0()); 
            }
            match(input,FIELDTERMINATOR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFIELDTERMINATORKeyword_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__0__Impl"


    // $ANTLR start "rule__LoadCSV__Group_8__1"
    // InternalOpenCypherParser.g:7803:1: rule__LoadCSV__Group_8__1 : rule__LoadCSV__Group_8__1__Impl ;
    public final void rule__LoadCSV__Group_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7807:1: ( rule__LoadCSV__Group_8__1__Impl )
            // InternalOpenCypherParser.g:7808:2: rule__LoadCSV__Group_8__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__Group_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__1"


    // $ANTLR start "rule__LoadCSV__Group_8__1__Impl"
    // InternalOpenCypherParser.g:7814:1: rule__LoadCSV__Group_8__1__Impl : ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) ) ;
    public final void rule__LoadCSV__Group_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7818:1: ( ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) ) )
            // InternalOpenCypherParser.g:7819:1: ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) )
            {
            // InternalOpenCypherParser.g:7819:1: ( ( rule__LoadCSV__FieldterminatorAssignment_8_1 ) )
            // InternalOpenCypherParser.g:7820:2: ( rule__LoadCSV__FieldterminatorAssignment_8_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1()); 
            }
            // InternalOpenCypherParser.g:7821:2: ( rule__LoadCSV__FieldterminatorAssignment_8_1 )
            // InternalOpenCypherParser.g:7821:3: rule__LoadCSV__FieldterminatorAssignment_8_1
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSV__FieldterminatorAssignment_8_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFieldterminatorAssignment_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__Group_8__1__Impl"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__0"
    // InternalOpenCypherParser.g:7830:1: rule__LoadCSVWithHeaders__Group__0 : rule__LoadCSVWithHeaders__Group__0__Impl rule__LoadCSVWithHeaders__Group__1 ;
    public final void rule__LoadCSVWithHeaders__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7834:1: ( rule__LoadCSVWithHeaders__Group__0__Impl rule__LoadCSVWithHeaders__Group__1 )
            // InternalOpenCypherParser.g:7835:2: rule__LoadCSVWithHeaders__Group__0__Impl rule__LoadCSVWithHeaders__Group__1
            {
            pushFollow(FOLLOW_40);
            rule__LoadCSVWithHeaders__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LoadCSVWithHeaders__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__0"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__0__Impl"
    // InternalOpenCypherParser.g:7842:1: rule__LoadCSVWithHeaders__Group__0__Impl : ( WITH ) ;
    public final void rule__LoadCSVWithHeaders__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7846:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:7847:1: ( WITH )
            {
            // InternalOpenCypherParser.g:7847:1: ( WITH )
            // InternalOpenCypherParser.g:7848:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersAccess().getWITHKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__0__Impl"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__1"
    // InternalOpenCypherParser.g:7857:1: rule__LoadCSVWithHeaders__Group__1 : rule__LoadCSVWithHeaders__Group__1__Impl ;
    public final void rule__LoadCSVWithHeaders__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7861:1: ( rule__LoadCSVWithHeaders__Group__1__Impl )
            // InternalOpenCypherParser.g:7862:2: rule__LoadCSVWithHeaders__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LoadCSVWithHeaders__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__1"


    // $ANTLR start "rule__LoadCSVWithHeaders__Group__1__Impl"
    // InternalOpenCypherParser.g:7868:1: rule__LoadCSVWithHeaders__Group__1__Impl : ( HEADERS ) ;
    public final void rule__LoadCSVWithHeaders__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7872:1: ( ( HEADERS ) )
            // InternalOpenCypherParser.g:7873:1: ( HEADERS )
            {
            // InternalOpenCypherParser.g:7873:1: ( HEADERS )
            // InternalOpenCypherParser.g:7874:2: HEADERS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1()); 
            }
            match(input,HEADERS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVWithHeadersAccess().getHEADERSKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVWithHeaders__Group__1__Impl"


    // $ANTLR start "rule__Match__Group__0"
    // InternalOpenCypherParser.g:7884:1: rule__Match__Group__0 : rule__Match__Group__0__Impl rule__Match__Group__1 ;
    public final void rule__Match__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7888:1: ( rule__Match__Group__0__Impl rule__Match__Group__1 )
            // InternalOpenCypherParser.g:7889:2: rule__Match__Group__0__Impl rule__Match__Group__1
            {
            pushFollow(FOLLOW_41);
            rule__Match__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__0"


    // $ANTLR start "rule__Match__Group__0__Impl"
    // InternalOpenCypherParser.g:7896:1: rule__Match__Group__0__Impl : ( ( rule__Match__OptionalAssignment_0 )? ) ;
    public final void rule__Match__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7900:1: ( ( ( rule__Match__OptionalAssignment_0 )? ) )
            // InternalOpenCypherParser.g:7901:1: ( ( rule__Match__OptionalAssignment_0 )? )
            {
            // InternalOpenCypherParser.g:7901:1: ( ( rule__Match__OptionalAssignment_0 )? )
            // InternalOpenCypherParser.g:7902:2: ( rule__Match__OptionalAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getOptionalAssignment_0()); 
            }
            // InternalOpenCypherParser.g:7903:2: ( rule__Match__OptionalAssignment_0 )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==OPTIONAL) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // InternalOpenCypherParser.g:7903:3: rule__Match__OptionalAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Match__OptionalAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getOptionalAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__0__Impl"


    // $ANTLR start "rule__Match__Group__1"
    // InternalOpenCypherParser.g:7911:1: rule__Match__Group__1 : rule__Match__Group__1__Impl rule__Match__Group__2 ;
    public final void rule__Match__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7915:1: ( rule__Match__Group__1__Impl rule__Match__Group__2 )
            // InternalOpenCypherParser.g:7916:2: rule__Match__Group__1__Impl rule__Match__Group__2
            {
            pushFollow(FOLLOW_42);
            rule__Match__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__1"


    // $ANTLR start "rule__Match__Group__1__Impl"
    // InternalOpenCypherParser.g:7923:1: rule__Match__Group__1__Impl : ( MATCH ) ;
    public final void rule__Match__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7927:1: ( ( MATCH ) )
            // InternalOpenCypherParser.g:7928:1: ( MATCH )
            {
            // InternalOpenCypherParser.g:7928:1: ( MATCH )
            // InternalOpenCypherParser.g:7929:2: MATCH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getMATCHKeyword_1()); 
            }
            match(input,MATCH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getMATCHKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__1__Impl"


    // $ANTLR start "rule__Match__Group__2"
    // InternalOpenCypherParser.g:7938:1: rule__Match__Group__2 : rule__Match__Group__2__Impl rule__Match__Group__3 ;
    public final void rule__Match__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7942:1: ( rule__Match__Group__2__Impl rule__Match__Group__3 )
            // InternalOpenCypherParser.g:7943:2: rule__Match__Group__2__Impl rule__Match__Group__3
            {
            pushFollow(FOLLOW_43);
            rule__Match__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__2"


    // $ANTLR start "rule__Match__Group__2__Impl"
    // InternalOpenCypherParser.g:7950:1: rule__Match__Group__2__Impl : ( ( rule__Match__PatternAssignment_2 ) ) ;
    public final void rule__Match__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7954:1: ( ( ( rule__Match__PatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:7955:1: ( ( rule__Match__PatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:7955:1: ( ( rule__Match__PatternAssignment_2 ) )
            // InternalOpenCypherParser.g:7956:2: ( rule__Match__PatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:7957:2: ( rule__Match__PatternAssignment_2 )
            // InternalOpenCypherParser.g:7957:3: rule__Match__PatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Match__PatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__2__Impl"


    // $ANTLR start "rule__Match__Group__3"
    // InternalOpenCypherParser.g:7965:1: rule__Match__Group__3 : rule__Match__Group__3__Impl rule__Match__Group__4 ;
    public final void rule__Match__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7969:1: ( rule__Match__Group__3__Impl rule__Match__Group__4 )
            // InternalOpenCypherParser.g:7970:2: rule__Match__Group__3__Impl rule__Match__Group__4
            {
            pushFollow(FOLLOW_43);
            rule__Match__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Match__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__3"


    // $ANTLR start "rule__Match__Group__3__Impl"
    // InternalOpenCypherParser.g:7977:1: rule__Match__Group__3__Impl : ( ( rule__Match__HintsAssignment_3 )* ) ;
    public final void rule__Match__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7981:1: ( ( ( rule__Match__HintsAssignment_3 )* ) )
            // InternalOpenCypherParser.g:7982:1: ( ( rule__Match__HintsAssignment_3 )* )
            {
            // InternalOpenCypherParser.g:7982:1: ( ( rule__Match__HintsAssignment_3 )* )
            // InternalOpenCypherParser.g:7983:2: ( rule__Match__HintsAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getHintsAssignment_3()); 
            }
            // InternalOpenCypherParser.g:7984:2: ( rule__Match__HintsAssignment_3 )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==USING) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // InternalOpenCypherParser.g:7984:3: rule__Match__HintsAssignment_3
            	    {
            	    pushFollow(FOLLOW_44);
            	    rule__Match__HintsAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getHintsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__3__Impl"


    // $ANTLR start "rule__Match__Group__4"
    // InternalOpenCypherParser.g:7992:1: rule__Match__Group__4 : rule__Match__Group__4__Impl ;
    public final void rule__Match__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:7996:1: ( rule__Match__Group__4__Impl )
            // InternalOpenCypherParser.g:7997:2: rule__Match__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Match__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__4"


    // $ANTLR start "rule__Match__Group__4__Impl"
    // InternalOpenCypherParser.g:8003:1: rule__Match__Group__4__Impl : ( ( rule__Match__WhereAssignment_4 )? ) ;
    public final void rule__Match__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8007:1: ( ( ( rule__Match__WhereAssignment_4 )? ) )
            // InternalOpenCypherParser.g:8008:1: ( ( rule__Match__WhereAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:8008:1: ( ( rule__Match__WhereAssignment_4 )? )
            // InternalOpenCypherParser.g:8009:2: ( rule__Match__WhereAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getWhereAssignment_4()); 
            }
            // InternalOpenCypherParser.g:8010:2: ( rule__Match__WhereAssignment_4 )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==WHERE) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalOpenCypherParser.g:8010:3: rule__Match__WhereAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Match__WhereAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getWhereAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__Group__4__Impl"


    // $ANTLR start "rule__Unwind__Group__0"
    // InternalOpenCypherParser.g:8019:1: rule__Unwind__Group__0 : rule__Unwind__Group__0__Impl rule__Unwind__Group__1 ;
    public final void rule__Unwind__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8023:1: ( rule__Unwind__Group__0__Impl rule__Unwind__Group__1 )
            // InternalOpenCypherParser.g:8024:2: rule__Unwind__Group__0__Impl rule__Unwind__Group__1
            {
            pushFollow(FOLLOW_36);
            rule__Unwind__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__0"


    // $ANTLR start "rule__Unwind__Group__0__Impl"
    // InternalOpenCypherParser.g:8031:1: rule__Unwind__Group__0__Impl : ( UNWIND ) ;
    public final void rule__Unwind__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8035:1: ( ( UNWIND ) )
            // InternalOpenCypherParser.g:8036:1: ( UNWIND )
            {
            // InternalOpenCypherParser.g:8036:1: ( UNWIND )
            // InternalOpenCypherParser.g:8037:2: UNWIND
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getUNWINDKeyword_0()); 
            }
            match(input,UNWIND,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getUNWINDKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__0__Impl"


    // $ANTLR start "rule__Unwind__Group__1"
    // InternalOpenCypherParser.g:8046:1: rule__Unwind__Group__1 : rule__Unwind__Group__1__Impl rule__Unwind__Group__2 ;
    public final void rule__Unwind__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8050:1: ( rule__Unwind__Group__1__Impl rule__Unwind__Group__2 )
            // InternalOpenCypherParser.g:8051:2: rule__Unwind__Group__1__Impl rule__Unwind__Group__2
            {
            pushFollow(FOLLOW_37);
            rule__Unwind__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__1"


    // $ANTLR start "rule__Unwind__Group__1__Impl"
    // InternalOpenCypherParser.g:8058:1: rule__Unwind__Group__1__Impl : ( ( rule__Unwind__ExpressionAssignment_1 ) ) ;
    public final void rule__Unwind__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8062:1: ( ( ( rule__Unwind__ExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8063:1: ( ( rule__Unwind__ExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8063:1: ( ( rule__Unwind__ExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:8064:2: ( rule__Unwind__ExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8065:2: ( rule__Unwind__ExpressionAssignment_1 )
            // InternalOpenCypherParser.g:8065:3: rule__Unwind__ExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__1__Impl"


    // $ANTLR start "rule__Unwind__Group__2"
    // InternalOpenCypherParser.g:8073:1: rule__Unwind__Group__2 : rule__Unwind__Group__2__Impl rule__Unwind__Group__3 ;
    public final void rule__Unwind__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8077:1: ( rule__Unwind__Group__2__Impl rule__Unwind__Group__3 )
            // InternalOpenCypherParser.g:8078:2: rule__Unwind__Group__2__Impl rule__Unwind__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__Unwind__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__2"


    // $ANTLR start "rule__Unwind__Group__2__Impl"
    // InternalOpenCypherParser.g:8085:1: rule__Unwind__Group__2__Impl : ( AS ) ;
    public final void rule__Unwind__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8089:1: ( ( AS ) )
            // InternalOpenCypherParser.g:8090:1: ( AS )
            {
            // InternalOpenCypherParser.g:8090:1: ( AS )
            // InternalOpenCypherParser.g:8091:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getASKeyword_2()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getASKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__2__Impl"


    // $ANTLR start "rule__Unwind__Group__3"
    // InternalOpenCypherParser.g:8100:1: rule__Unwind__Group__3 : rule__Unwind__Group__3__Impl ;
    public final void rule__Unwind__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8104:1: ( rule__Unwind__Group__3__Impl )
            // InternalOpenCypherParser.g:8105:2: rule__Unwind__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__3"


    // $ANTLR start "rule__Unwind__Group__3__Impl"
    // InternalOpenCypherParser.g:8111:1: rule__Unwind__Group__3__Impl : ( ( rule__Unwind__VariableAssignment_3 ) ) ;
    public final void rule__Unwind__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8115:1: ( ( ( rule__Unwind__VariableAssignment_3 ) ) )
            // InternalOpenCypherParser.g:8116:1: ( ( rule__Unwind__VariableAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:8116:1: ( ( rule__Unwind__VariableAssignment_3 ) )
            // InternalOpenCypherParser.g:8117:2: ( rule__Unwind__VariableAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getVariableAssignment_3()); 
            }
            // InternalOpenCypherParser.g:8118:2: ( rule__Unwind__VariableAssignment_3 )
            // InternalOpenCypherParser.g:8118:3: rule__Unwind__VariableAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__Unwind__VariableAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getVariableAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__Group__3__Impl"


    // $ANTLR start "rule__Merge__Group__0"
    // InternalOpenCypherParser.g:8127:1: rule__Merge__Group__0 : rule__Merge__Group__0__Impl rule__Merge__Group__1 ;
    public final void rule__Merge__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8131:1: ( rule__Merge__Group__0__Impl rule__Merge__Group__1 )
            // InternalOpenCypherParser.g:8132:2: rule__Merge__Group__0__Impl rule__Merge__Group__1
            {
            pushFollow(FOLLOW_42);
            rule__Merge__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Merge__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__0"


    // $ANTLR start "rule__Merge__Group__0__Impl"
    // InternalOpenCypherParser.g:8139:1: rule__Merge__Group__0__Impl : ( MERGE ) ;
    public final void rule__Merge__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8143:1: ( ( MERGE ) )
            // InternalOpenCypherParser.g:8144:1: ( MERGE )
            {
            // InternalOpenCypherParser.g:8144:1: ( MERGE )
            // InternalOpenCypherParser.g:8145:2: MERGE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getMERGEKeyword_0()); 
            }
            match(input,MERGE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getMERGEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__0__Impl"


    // $ANTLR start "rule__Merge__Group__1"
    // InternalOpenCypherParser.g:8154:1: rule__Merge__Group__1 : rule__Merge__Group__1__Impl rule__Merge__Group__2 ;
    public final void rule__Merge__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8158:1: ( rule__Merge__Group__1__Impl rule__Merge__Group__2 )
            // InternalOpenCypherParser.g:8159:2: rule__Merge__Group__1__Impl rule__Merge__Group__2
            {
            pushFollow(FOLLOW_21);
            rule__Merge__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Merge__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__1"


    // $ANTLR start "rule__Merge__Group__1__Impl"
    // InternalOpenCypherParser.g:8166:1: rule__Merge__Group__1__Impl : ( ( rule__Merge__PatternPartAssignment_1 ) ) ;
    public final void rule__Merge__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8170:1: ( ( ( rule__Merge__PatternPartAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8171:1: ( ( rule__Merge__PatternPartAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8171:1: ( ( rule__Merge__PatternPartAssignment_1 ) )
            // InternalOpenCypherParser.g:8172:2: ( rule__Merge__PatternPartAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getPatternPartAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8173:2: ( rule__Merge__PatternPartAssignment_1 )
            // InternalOpenCypherParser.g:8173:3: rule__Merge__PatternPartAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Merge__PatternPartAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getPatternPartAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__1__Impl"


    // $ANTLR start "rule__Merge__Group__2"
    // InternalOpenCypherParser.g:8181:1: rule__Merge__Group__2 : rule__Merge__Group__2__Impl ;
    public final void rule__Merge__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8185:1: ( rule__Merge__Group__2__Impl )
            // InternalOpenCypherParser.g:8186:2: rule__Merge__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Merge__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__2"


    // $ANTLR start "rule__Merge__Group__2__Impl"
    // InternalOpenCypherParser.g:8192:1: rule__Merge__Group__2__Impl : ( ( rule__Merge__MergeActionsAssignment_2 )* ) ;
    public final void rule__Merge__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8196:1: ( ( ( rule__Merge__MergeActionsAssignment_2 )* ) )
            // InternalOpenCypherParser.g:8197:1: ( ( rule__Merge__MergeActionsAssignment_2 )* )
            {
            // InternalOpenCypherParser.g:8197:1: ( ( rule__Merge__MergeActionsAssignment_2 )* )
            // InternalOpenCypherParser.g:8198:2: ( rule__Merge__MergeActionsAssignment_2 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getMergeActionsAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8199:2: ( rule__Merge__MergeActionsAssignment_2 )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==ON) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8199:3: rule__Merge__MergeActionsAssignment_2
            	    {
            	    pushFollow(FOLLOW_45);
            	    rule__Merge__MergeActionsAssignment_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getMergeActionsAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__Group__2__Impl"


    // $ANTLR start "rule__MergeAction__Group__0"
    // InternalOpenCypherParser.g:8208:1: rule__MergeAction__Group__0 : rule__MergeAction__Group__0__Impl rule__MergeAction__Group__1 ;
    public final void rule__MergeAction__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8212:1: ( rule__MergeAction__Group__0__Impl rule__MergeAction__Group__1 )
            // InternalOpenCypherParser.g:8213:2: rule__MergeAction__Group__0__Impl rule__MergeAction__Group__1
            {
            pushFollow(FOLLOW_46);
            rule__MergeAction__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__0"


    // $ANTLR start "rule__MergeAction__Group__0__Impl"
    // InternalOpenCypherParser.g:8220:1: rule__MergeAction__Group__0__Impl : ( ON ) ;
    public final void rule__MergeAction__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8224:1: ( ( ON ) )
            // InternalOpenCypherParser.g:8225:1: ( ON )
            {
            // InternalOpenCypherParser.g:8225:1: ( ON )
            // InternalOpenCypherParser.g:8226:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getONKeyword_0()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getONKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__0__Impl"


    // $ANTLR start "rule__MergeAction__Group__1"
    // InternalOpenCypherParser.g:8235:1: rule__MergeAction__Group__1 : rule__MergeAction__Group__1__Impl rule__MergeAction__Group__2 ;
    public final void rule__MergeAction__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8239:1: ( rule__MergeAction__Group__1__Impl rule__MergeAction__Group__2 )
            // InternalOpenCypherParser.g:8240:2: rule__MergeAction__Group__1__Impl rule__MergeAction__Group__2
            {
            pushFollow(FOLLOW_47);
            rule__MergeAction__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__1"


    // $ANTLR start "rule__MergeAction__Group__1__Impl"
    // InternalOpenCypherParser.g:8247:1: rule__MergeAction__Group__1__Impl : ( ( rule__MergeAction__ActionAssignment_1 ) ) ;
    public final void rule__MergeAction__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8251:1: ( ( ( rule__MergeAction__ActionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8252:1: ( ( rule__MergeAction__ActionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8252:1: ( ( rule__MergeAction__ActionAssignment_1 ) )
            // InternalOpenCypherParser.g:8253:2: ( rule__MergeAction__ActionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getActionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8254:2: ( rule__MergeAction__ActionAssignment_1 )
            // InternalOpenCypherParser.g:8254:3: rule__MergeAction__ActionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__ActionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getActionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__1__Impl"


    // $ANTLR start "rule__MergeAction__Group__2"
    // InternalOpenCypherParser.g:8262:1: rule__MergeAction__Group__2 : rule__MergeAction__Group__2__Impl ;
    public final void rule__MergeAction__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8266:1: ( rule__MergeAction__Group__2__Impl )
            // InternalOpenCypherParser.g:8267:2: rule__MergeAction__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__2"


    // $ANTLR start "rule__MergeAction__Group__2__Impl"
    // InternalOpenCypherParser.g:8273:1: rule__MergeAction__Group__2__Impl : ( ( rule__MergeAction__SetAssignment_2 ) ) ;
    public final void rule__MergeAction__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8277:1: ( ( ( rule__MergeAction__SetAssignment_2 ) ) )
            // InternalOpenCypherParser.g:8278:1: ( ( rule__MergeAction__SetAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:8278:1: ( ( rule__MergeAction__SetAssignment_2 ) )
            // InternalOpenCypherParser.g:8279:2: ( rule__MergeAction__SetAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getSetAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8280:2: ( rule__MergeAction__SetAssignment_2 )
            // InternalOpenCypherParser.g:8280:3: rule__MergeAction__SetAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__SetAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getSetAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__Group__2__Impl"


    // $ANTLR start "rule__Create__Group__0"
    // InternalOpenCypherParser.g:8289:1: rule__Create__Group__0 : rule__Create__Group__0__Impl rule__Create__Group__1 ;
    public final void rule__Create__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8293:1: ( rule__Create__Group__0__Impl rule__Create__Group__1 )
            // InternalOpenCypherParser.g:8294:2: rule__Create__Group__0__Impl rule__Create__Group__1
            {
            pushFollow(FOLLOW_42);
            rule__Create__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Create__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__0"


    // $ANTLR start "rule__Create__Group__0__Impl"
    // InternalOpenCypherParser.g:8301:1: rule__Create__Group__0__Impl : ( CREATE ) ;
    public final void rule__Create__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8305:1: ( ( CREATE ) )
            // InternalOpenCypherParser.g:8306:1: ( CREATE )
            {
            // InternalOpenCypherParser.g:8306:1: ( CREATE )
            // InternalOpenCypherParser.g:8307:2: CREATE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getCREATEKeyword_0()); 
            }
            match(input,CREATE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getCREATEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__0__Impl"


    // $ANTLR start "rule__Create__Group__1"
    // InternalOpenCypherParser.g:8316:1: rule__Create__Group__1 : rule__Create__Group__1__Impl rule__Create__Group__2 ;
    public final void rule__Create__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8320:1: ( rule__Create__Group__1__Impl rule__Create__Group__2 )
            // InternalOpenCypherParser.g:8321:2: rule__Create__Group__1__Impl rule__Create__Group__2
            {
            pushFollow(FOLLOW_42);
            rule__Create__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Create__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__1"


    // $ANTLR start "rule__Create__Group__1__Impl"
    // InternalOpenCypherParser.g:8328:1: rule__Create__Group__1__Impl : ( ( rule__Create__UniqueAssignment_1 )? ) ;
    public final void rule__Create__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8332:1: ( ( ( rule__Create__UniqueAssignment_1 )? ) )
            // InternalOpenCypherParser.g:8333:1: ( ( rule__Create__UniqueAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:8333:1: ( ( rule__Create__UniqueAssignment_1 )? )
            // InternalOpenCypherParser.g:8334:2: ( rule__Create__UniqueAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getUniqueAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8335:2: ( rule__Create__UniqueAssignment_1 )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==UNIQUE) ) {
                int LA61_1 = input.LA(2);

                if ( ((LA61_1>=ALLSHORTESTPATHS && LA61_1<=WHERE)||(LA61_1>=CASE && LA61_1<=XOR)||(LA61_1>=AS && LA61_1<=OR)||LA61_1==LeftParenthesis||LA61_1==RULE_ID) ) {
                    alt61=1;
                }
            }
            switch (alt61) {
                case 1 :
                    // InternalOpenCypherParser.g:8335:3: rule__Create__UniqueAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Create__UniqueAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getUniqueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__1__Impl"


    // $ANTLR start "rule__Create__Group__2"
    // InternalOpenCypherParser.g:8343:1: rule__Create__Group__2 : rule__Create__Group__2__Impl ;
    public final void rule__Create__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8347:1: ( rule__Create__Group__2__Impl )
            // InternalOpenCypherParser.g:8348:2: rule__Create__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Create__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__2"


    // $ANTLR start "rule__Create__Group__2__Impl"
    // InternalOpenCypherParser.g:8354:1: rule__Create__Group__2__Impl : ( ( rule__Create__PatternAssignment_2 ) ) ;
    public final void rule__Create__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8358:1: ( ( ( rule__Create__PatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:8359:1: ( ( rule__Create__PatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:8359:1: ( ( rule__Create__PatternAssignment_2 ) )
            // InternalOpenCypherParser.g:8360:2: ( rule__Create__PatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8361:2: ( rule__Create__PatternAssignment_2 )
            // InternalOpenCypherParser.g:8361:3: rule__Create__PatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Create__PatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__Group__2__Impl"


    // $ANTLR start "rule__Set__Group__0"
    // InternalOpenCypherParser.g:8370:1: rule__Set__Group__0 : rule__Set__Group__0__Impl rule__Set__Group__1 ;
    public final void rule__Set__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8374:1: ( rule__Set__Group__0__Impl rule__Set__Group__1 )
            // InternalOpenCypherParser.g:8375:2: rule__Set__Group__0__Impl rule__Set__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__Set__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Set__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__0"


    // $ANTLR start "rule__Set__Group__0__Impl"
    // InternalOpenCypherParser.g:8382:1: rule__Set__Group__0__Impl : ( SET ) ;
    public final void rule__Set__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8386:1: ( ( SET ) )
            // InternalOpenCypherParser.g:8387:1: ( SET )
            {
            // InternalOpenCypherParser.g:8387:1: ( SET )
            // InternalOpenCypherParser.g:8388:2: SET
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSETKeyword_0()); 
            }
            match(input,SET,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSETKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__0__Impl"


    // $ANTLR start "rule__Set__Group__1"
    // InternalOpenCypherParser.g:8397:1: rule__Set__Group__1 : rule__Set__Group__1__Impl rule__Set__Group__2 ;
    public final void rule__Set__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8401:1: ( rule__Set__Group__1__Impl rule__Set__Group__2 )
            // InternalOpenCypherParser.g:8402:2: rule__Set__Group__1__Impl rule__Set__Group__2
            {
            pushFollow(FOLLOW_48);
            rule__Set__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Set__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__1"


    // $ANTLR start "rule__Set__Group__1__Impl"
    // InternalOpenCypherParser.g:8409:1: rule__Set__Group__1__Impl : ( ( rule__Set__SetItemsAssignment_1 ) ) ;
    public final void rule__Set__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8413:1: ( ( ( rule__Set__SetItemsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:8414:1: ( ( rule__Set__SetItemsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:8414:1: ( ( rule__Set__SetItemsAssignment_1 ) )
            // InternalOpenCypherParser.g:8415:2: ( rule__Set__SetItemsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:8416:2: ( rule__Set__SetItemsAssignment_1 )
            // InternalOpenCypherParser.g:8416:3: rule__Set__SetItemsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Set__SetItemsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__1__Impl"


    // $ANTLR start "rule__Set__Group__2"
    // InternalOpenCypherParser.g:8424:1: rule__Set__Group__2 : rule__Set__Group__2__Impl ;
    public final void rule__Set__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8428:1: ( rule__Set__Group__2__Impl )
            // InternalOpenCypherParser.g:8429:2: rule__Set__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Set__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__2"


    // $ANTLR start "rule__Set__Group__2__Impl"
    // InternalOpenCypherParser.g:8435:1: rule__Set__Group__2__Impl : ( ( rule__Set__Group_2__0 )* ) ;
    public final void rule__Set__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8439:1: ( ( ( rule__Set__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:8440:1: ( ( rule__Set__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:8440:1: ( ( rule__Set__Group_2__0 )* )
            // InternalOpenCypherParser.g:8441:2: ( rule__Set__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:8442:2: ( rule__Set__Group_2__0 )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==Comma) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8442:3: rule__Set__Group_2__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Set__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group__2__Impl"


    // $ANTLR start "rule__Set__Group_2__0"
    // InternalOpenCypherParser.g:8451:1: rule__Set__Group_2__0 : rule__Set__Group_2__0__Impl rule__Set__Group_2__1 ;
    public final void rule__Set__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8455:1: ( rule__Set__Group_2__0__Impl rule__Set__Group_2__1 )
            // InternalOpenCypherParser.g:8456:2: rule__Set__Group_2__0__Impl rule__Set__Group_2__1
            {
            pushFollow(FOLLOW_26);
            rule__Set__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Set__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__0"


    // $ANTLR start "rule__Set__Group_2__0__Impl"
    // InternalOpenCypherParser.g:8463:1: rule__Set__Group_2__0__Impl : ( Comma ) ;
    public final void rule__Set__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8467:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:8468:1: ( Comma )
            {
            // InternalOpenCypherParser.g:8468:1: ( Comma )
            // InternalOpenCypherParser.g:8469:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__0__Impl"


    // $ANTLR start "rule__Set__Group_2__1"
    // InternalOpenCypherParser.g:8478:1: rule__Set__Group_2__1 : rule__Set__Group_2__1__Impl ;
    public final void rule__Set__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8482:1: ( rule__Set__Group_2__1__Impl )
            // InternalOpenCypherParser.g:8483:2: rule__Set__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Set__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__1"


    // $ANTLR start "rule__Set__Group_2__1__Impl"
    // InternalOpenCypherParser.g:8489:1: rule__Set__Group_2__1__Impl : ( ( rule__Set__SetItemsAssignment_2_1 ) ) ;
    public final void rule__Set__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8493:1: ( ( ( rule__Set__SetItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:8494:1: ( ( rule__Set__SetItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:8494:1: ( ( rule__Set__SetItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:8495:2: ( rule__Set__SetItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:8496:2: ( rule__Set__SetItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:8496:3: rule__Set__SetItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Set__SetItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__Group_2__1__Impl"


    // $ANTLR start "rule__SetItem__Group_0__0"
    // InternalOpenCypherParser.g:8505:1: rule__SetItem__Group_0__0 : rule__SetItem__Group_0__0__Impl rule__SetItem__Group_0__1 ;
    public final void rule__SetItem__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8509:1: ( rule__SetItem__Group_0__0__Impl rule__SetItem__Group_0__1 )
            // InternalOpenCypherParser.g:8510:2: rule__SetItem__Group_0__0__Impl rule__SetItem__Group_0__1
            {
            pushFollow(FOLLOW_8);
            rule__SetItem__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__0"


    // $ANTLR start "rule__SetItem__Group_0__0__Impl"
    // InternalOpenCypherParser.g:8517:1: rule__SetItem__Group_0__0__Impl : ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) ) ;
    public final void rule__SetItem__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8521:1: ( ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:8522:1: ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:8522:1: ( ( rule__SetItem__PropertyExpressionAssignment_0_0 ) )
            // InternalOpenCypherParser.g:8523:2: ( rule__SetItem__PropertyExpressionAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:8524:2: ( rule__SetItem__PropertyExpressionAssignment_0_0 )
            // InternalOpenCypherParser.g:8524:3: rule__SetItem__PropertyExpressionAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__PropertyExpressionAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getPropertyExpressionAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__0__Impl"


    // $ANTLR start "rule__SetItem__Group_0__1"
    // InternalOpenCypherParser.g:8532:1: rule__SetItem__Group_0__1 : rule__SetItem__Group_0__1__Impl rule__SetItem__Group_0__2 ;
    public final void rule__SetItem__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8536:1: ( rule__SetItem__Group_0__1__Impl rule__SetItem__Group_0__2 )
            // InternalOpenCypherParser.g:8537:2: rule__SetItem__Group_0__1__Impl rule__SetItem__Group_0__2
            {
            pushFollow(FOLLOW_36);
            rule__SetItem__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__1"


    // $ANTLR start "rule__SetItem__Group_0__1__Impl"
    // InternalOpenCypherParser.g:8544:1: rule__SetItem__Group_0__1__Impl : ( EqualsSign ) ;
    public final void rule__SetItem__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8548:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:8549:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:8549:1: ( EqualsSign )
            // InternalOpenCypherParser.g:8550:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getEqualsSignKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__1__Impl"


    // $ANTLR start "rule__SetItem__Group_0__2"
    // InternalOpenCypherParser.g:8559:1: rule__SetItem__Group_0__2 : rule__SetItem__Group_0__2__Impl ;
    public final void rule__SetItem__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8563:1: ( rule__SetItem__Group_0__2__Impl )
            // InternalOpenCypherParser.g:8564:2: rule__SetItem__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__2"


    // $ANTLR start "rule__SetItem__Group_0__2__Impl"
    // InternalOpenCypherParser.g:8570:1: rule__SetItem__Group_0__2__Impl : ( ( rule__SetItem__ExpressionAssignment_0_2 ) ) ;
    public final void rule__SetItem__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8574:1: ( ( ( rule__SetItem__ExpressionAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:8575:1: ( ( rule__SetItem__ExpressionAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:8575:1: ( ( rule__SetItem__ExpressionAssignment_0_2 ) )
            // InternalOpenCypherParser.g:8576:2: ( rule__SetItem__ExpressionAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:8577:2: ( rule__SetItem__ExpressionAssignment_0_2 )
            // InternalOpenCypherParser.g:8577:3: rule__SetItem__ExpressionAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__ExpressionAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_0__2__Impl"


    // $ANTLR start "rule__SetItem__Group_1__0"
    // InternalOpenCypherParser.g:8586:1: rule__SetItem__Group_1__0 : rule__SetItem__Group_1__0__Impl rule__SetItem__Group_1__1 ;
    public final void rule__SetItem__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8590:1: ( rule__SetItem__Group_1__0__Impl rule__SetItem__Group_1__1 )
            // InternalOpenCypherParser.g:8591:2: rule__SetItem__Group_1__0__Impl rule__SetItem__Group_1__1
            {
            pushFollow(FOLLOW_8);
            rule__SetItem__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__0"


    // $ANTLR start "rule__SetItem__Group_1__0__Impl"
    // InternalOpenCypherParser.g:8598:1: rule__SetItem__Group_1__0__Impl : ( ( rule__SetItem__VariableAssignment_1_0 ) ) ;
    public final void rule__SetItem__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8602:1: ( ( ( rule__SetItem__VariableAssignment_1_0 ) ) )
            // InternalOpenCypherParser.g:8603:1: ( ( rule__SetItem__VariableAssignment_1_0 ) )
            {
            // InternalOpenCypherParser.g:8603:1: ( ( rule__SetItem__VariableAssignment_1_0 ) )
            // InternalOpenCypherParser.g:8604:2: ( rule__SetItem__VariableAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:8605:2: ( rule__SetItem__VariableAssignment_1_0 )
            // InternalOpenCypherParser.g:8605:3: rule__SetItem__VariableAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__VariableAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__0__Impl"


    // $ANTLR start "rule__SetItem__Group_1__1"
    // InternalOpenCypherParser.g:8613:1: rule__SetItem__Group_1__1 : rule__SetItem__Group_1__1__Impl rule__SetItem__Group_1__2 ;
    public final void rule__SetItem__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8617:1: ( rule__SetItem__Group_1__1__Impl rule__SetItem__Group_1__2 )
            // InternalOpenCypherParser.g:8618:2: rule__SetItem__Group_1__1__Impl rule__SetItem__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__SetItem__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__1"


    // $ANTLR start "rule__SetItem__Group_1__1__Impl"
    // InternalOpenCypherParser.g:8625:1: rule__SetItem__Group_1__1__Impl : ( EqualsSign ) ;
    public final void rule__SetItem__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8629:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:8630:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:8630:1: ( EqualsSign )
            // InternalOpenCypherParser.g:8631:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getEqualsSignKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__1__Impl"


    // $ANTLR start "rule__SetItem__Group_1__2"
    // InternalOpenCypherParser.g:8640:1: rule__SetItem__Group_1__2 : rule__SetItem__Group_1__2__Impl ;
    public final void rule__SetItem__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8644:1: ( rule__SetItem__Group_1__2__Impl )
            // InternalOpenCypherParser.g:8645:2: rule__SetItem__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__2"


    // $ANTLR start "rule__SetItem__Group_1__2__Impl"
    // InternalOpenCypherParser.g:8651:1: rule__SetItem__Group_1__2__Impl : ( ( rule__SetItem__ExpressionAssignment_1_2 ) ) ;
    public final void rule__SetItem__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8655:1: ( ( ( rule__SetItem__ExpressionAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:8656:1: ( ( rule__SetItem__ExpressionAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:8656:1: ( ( rule__SetItem__ExpressionAssignment_1_2 ) )
            // InternalOpenCypherParser.g:8657:2: ( rule__SetItem__ExpressionAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:8658:2: ( rule__SetItem__ExpressionAssignment_1_2 )
            // InternalOpenCypherParser.g:8658:3: rule__SetItem__ExpressionAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__ExpressionAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_1__2__Impl"


    // $ANTLR start "rule__SetItem__Group_2__0"
    // InternalOpenCypherParser.g:8667:1: rule__SetItem__Group_2__0 : rule__SetItem__Group_2__0__Impl rule__SetItem__Group_2__1 ;
    public final void rule__SetItem__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8671:1: ( rule__SetItem__Group_2__0__Impl rule__SetItem__Group_2__1 )
            // InternalOpenCypherParser.g:8672:2: rule__SetItem__Group_2__0__Impl rule__SetItem__Group_2__1
            {
            pushFollow(FOLLOW_50);
            rule__SetItem__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__0"


    // $ANTLR start "rule__SetItem__Group_2__0__Impl"
    // InternalOpenCypherParser.g:8679:1: rule__SetItem__Group_2__0__Impl : ( ( rule__SetItem__VariableAssignment_2_0 ) ) ;
    public final void rule__SetItem__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8683:1: ( ( ( rule__SetItem__VariableAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:8684:1: ( ( rule__SetItem__VariableAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:8684:1: ( ( rule__SetItem__VariableAssignment_2_0 ) )
            // InternalOpenCypherParser.g:8685:2: ( rule__SetItem__VariableAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:8686:2: ( rule__SetItem__VariableAssignment_2_0 )
            // InternalOpenCypherParser.g:8686:3: rule__SetItem__VariableAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__VariableAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__0__Impl"


    // $ANTLR start "rule__SetItem__Group_2__1"
    // InternalOpenCypherParser.g:8694:1: rule__SetItem__Group_2__1 : rule__SetItem__Group_2__1__Impl rule__SetItem__Group_2__2 ;
    public final void rule__SetItem__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8698:1: ( rule__SetItem__Group_2__1__Impl rule__SetItem__Group_2__2 )
            // InternalOpenCypherParser.g:8699:2: rule__SetItem__Group_2__1__Impl rule__SetItem__Group_2__2
            {
            pushFollow(FOLLOW_36);
            rule__SetItem__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__1"


    // $ANTLR start "rule__SetItem__Group_2__1__Impl"
    // InternalOpenCypherParser.g:8706:1: rule__SetItem__Group_2__1__Impl : ( PlusSignEqualsSign ) ;
    public final void rule__SetItem__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8710:1: ( ( PlusSignEqualsSign ) )
            // InternalOpenCypherParser.g:8711:1: ( PlusSignEqualsSign )
            {
            // InternalOpenCypherParser.g:8711:1: ( PlusSignEqualsSign )
            // InternalOpenCypherParser.g:8712:2: PlusSignEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1()); 
            }
            match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getPlusSignEqualsSignKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__1__Impl"


    // $ANTLR start "rule__SetItem__Group_2__2"
    // InternalOpenCypherParser.g:8721:1: rule__SetItem__Group_2__2 : rule__SetItem__Group_2__2__Impl ;
    public final void rule__SetItem__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8725:1: ( rule__SetItem__Group_2__2__Impl )
            // InternalOpenCypherParser.g:8726:2: rule__SetItem__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__2"


    // $ANTLR start "rule__SetItem__Group_2__2__Impl"
    // InternalOpenCypherParser.g:8732:1: rule__SetItem__Group_2__2__Impl : ( ( rule__SetItem__ExpressionAssignment_2_2 ) ) ;
    public final void rule__SetItem__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8736:1: ( ( ( rule__SetItem__ExpressionAssignment_2_2 ) ) )
            // InternalOpenCypherParser.g:8737:1: ( ( rule__SetItem__ExpressionAssignment_2_2 ) )
            {
            // InternalOpenCypherParser.g:8737:1: ( ( rule__SetItem__ExpressionAssignment_2_2 ) )
            // InternalOpenCypherParser.g:8738:2: ( rule__SetItem__ExpressionAssignment_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2()); 
            }
            // InternalOpenCypherParser.g:8739:2: ( rule__SetItem__ExpressionAssignment_2_2 )
            // InternalOpenCypherParser.g:8739:3: rule__SetItem__ExpressionAssignment_2_2
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__ExpressionAssignment_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionAssignment_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_2__2__Impl"


    // $ANTLR start "rule__SetItem__Group_3__0"
    // InternalOpenCypherParser.g:8748:1: rule__SetItem__Group_3__0 : rule__SetItem__Group_3__0__Impl rule__SetItem__Group_3__1 ;
    public final void rule__SetItem__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8752:1: ( rule__SetItem__Group_3__0__Impl rule__SetItem__Group_3__1 )
            // InternalOpenCypherParser.g:8753:2: rule__SetItem__Group_3__0__Impl rule__SetItem__Group_3__1
            {
            pushFollow(FOLLOW_22);
            rule__SetItem__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__0"


    // $ANTLR start "rule__SetItem__Group_3__0__Impl"
    // InternalOpenCypherParser.g:8760:1: rule__SetItem__Group_3__0__Impl : ( ( rule__SetItem__VariableAssignment_3_0 ) ) ;
    public final void rule__SetItem__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8764:1: ( ( ( rule__SetItem__VariableAssignment_3_0 ) ) )
            // InternalOpenCypherParser.g:8765:1: ( ( rule__SetItem__VariableAssignment_3_0 ) )
            {
            // InternalOpenCypherParser.g:8765:1: ( ( rule__SetItem__VariableAssignment_3_0 ) )
            // InternalOpenCypherParser.g:8766:2: ( rule__SetItem__VariableAssignment_3_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableAssignment_3_0()); 
            }
            // InternalOpenCypherParser.g:8767:2: ( rule__SetItem__VariableAssignment_3_0 )
            // InternalOpenCypherParser.g:8767:3: rule__SetItem__VariableAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__VariableAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__0__Impl"


    // $ANTLR start "rule__SetItem__Group_3__1"
    // InternalOpenCypherParser.g:8775:1: rule__SetItem__Group_3__1 : rule__SetItem__Group_3__1__Impl ;
    public final void rule__SetItem__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8779:1: ( rule__SetItem__Group_3__1__Impl )
            // InternalOpenCypherParser.g:8780:2: rule__SetItem__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__1"


    // $ANTLR start "rule__SetItem__Group_3__1__Impl"
    // InternalOpenCypherParser.g:8786:1: rule__SetItem__Group_3__1__Impl : ( ( rule__SetItem__NodeLabelsAssignment_3_1 ) ) ;
    public final void rule__SetItem__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8790:1: ( ( ( rule__SetItem__NodeLabelsAssignment_3_1 ) ) )
            // InternalOpenCypherParser.g:8791:1: ( ( rule__SetItem__NodeLabelsAssignment_3_1 ) )
            {
            // InternalOpenCypherParser.g:8791:1: ( ( rule__SetItem__NodeLabelsAssignment_3_1 ) )
            // InternalOpenCypherParser.g:8792:2: ( rule__SetItem__NodeLabelsAssignment_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getNodeLabelsAssignment_3_1()); 
            }
            // InternalOpenCypherParser.g:8793:2: ( rule__SetItem__NodeLabelsAssignment_3_1 )
            // InternalOpenCypherParser.g:8793:3: rule__SetItem__NodeLabelsAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__SetItem__NodeLabelsAssignment_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getNodeLabelsAssignment_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__Group_3__1__Impl"


    // $ANTLR start "rule__Delete__Group__0"
    // InternalOpenCypherParser.g:8802:1: rule__Delete__Group__0 : rule__Delete__Group__0__Impl rule__Delete__Group__1 ;
    public final void rule__Delete__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8806:1: ( rule__Delete__Group__0__Impl rule__Delete__Group__1 )
            // InternalOpenCypherParser.g:8807:2: rule__Delete__Group__0__Impl rule__Delete__Group__1
            {
            pushFollow(FOLLOW_51);
            rule__Delete__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__0"


    // $ANTLR start "rule__Delete__Group__0__Impl"
    // InternalOpenCypherParser.g:8814:1: rule__Delete__Group__0__Impl : ( ( rule__Delete__DetachAssignment_0 )? ) ;
    public final void rule__Delete__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8818:1: ( ( ( rule__Delete__DetachAssignment_0 )? ) )
            // InternalOpenCypherParser.g:8819:1: ( ( rule__Delete__DetachAssignment_0 )? )
            {
            // InternalOpenCypherParser.g:8819:1: ( ( rule__Delete__DetachAssignment_0 )? )
            // InternalOpenCypherParser.g:8820:2: ( rule__Delete__DetachAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDetachAssignment_0()); 
            }
            // InternalOpenCypherParser.g:8821:2: ( rule__Delete__DetachAssignment_0 )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==DETACH) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalOpenCypherParser.g:8821:3: rule__Delete__DetachAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Delete__DetachAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDetachAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__0__Impl"


    // $ANTLR start "rule__Delete__Group__1"
    // InternalOpenCypherParser.g:8829:1: rule__Delete__Group__1 : rule__Delete__Group__1__Impl rule__Delete__Group__2 ;
    public final void rule__Delete__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8833:1: ( rule__Delete__Group__1__Impl rule__Delete__Group__2 )
            // InternalOpenCypherParser.g:8834:2: rule__Delete__Group__1__Impl rule__Delete__Group__2
            {
            pushFollow(FOLLOW_36);
            rule__Delete__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__1"


    // $ANTLR start "rule__Delete__Group__1__Impl"
    // InternalOpenCypherParser.g:8841:1: rule__Delete__Group__1__Impl : ( DELETE ) ;
    public final void rule__Delete__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8845:1: ( ( DELETE ) )
            // InternalOpenCypherParser.g:8846:1: ( DELETE )
            {
            // InternalOpenCypherParser.g:8846:1: ( DELETE )
            // InternalOpenCypherParser.g:8847:2: DELETE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDELETEKeyword_1()); 
            }
            match(input,DELETE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDELETEKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__1__Impl"


    // $ANTLR start "rule__Delete__Group__2"
    // InternalOpenCypherParser.g:8856:1: rule__Delete__Group__2 : rule__Delete__Group__2__Impl rule__Delete__Group__3 ;
    public final void rule__Delete__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8860:1: ( rule__Delete__Group__2__Impl rule__Delete__Group__3 )
            // InternalOpenCypherParser.g:8861:2: rule__Delete__Group__2__Impl rule__Delete__Group__3
            {
            pushFollow(FOLLOW_48);
            rule__Delete__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__2"


    // $ANTLR start "rule__Delete__Group__2__Impl"
    // InternalOpenCypherParser.g:8868:1: rule__Delete__Group__2__Impl : ( ( rule__Delete__ExpressionsAssignment_2 ) ) ;
    public final void rule__Delete__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8872:1: ( ( ( rule__Delete__ExpressionsAssignment_2 ) ) )
            // InternalOpenCypherParser.g:8873:1: ( ( rule__Delete__ExpressionsAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:8873:1: ( ( rule__Delete__ExpressionsAssignment_2 ) )
            // InternalOpenCypherParser.g:8874:2: ( rule__Delete__ExpressionsAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsAssignment_2()); 
            }
            // InternalOpenCypherParser.g:8875:2: ( rule__Delete__ExpressionsAssignment_2 )
            // InternalOpenCypherParser.g:8875:3: rule__Delete__ExpressionsAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Delete__ExpressionsAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__2__Impl"


    // $ANTLR start "rule__Delete__Group__3"
    // InternalOpenCypherParser.g:8883:1: rule__Delete__Group__3 : rule__Delete__Group__3__Impl ;
    public final void rule__Delete__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8887:1: ( rule__Delete__Group__3__Impl )
            // InternalOpenCypherParser.g:8888:2: rule__Delete__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Delete__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__3"


    // $ANTLR start "rule__Delete__Group__3__Impl"
    // InternalOpenCypherParser.g:8894:1: rule__Delete__Group__3__Impl : ( ( rule__Delete__Group_3__0 )* ) ;
    public final void rule__Delete__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8898:1: ( ( ( rule__Delete__Group_3__0 )* ) )
            // InternalOpenCypherParser.g:8899:1: ( ( rule__Delete__Group_3__0 )* )
            {
            // InternalOpenCypherParser.g:8899:1: ( ( rule__Delete__Group_3__0 )* )
            // InternalOpenCypherParser.g:8900:2: ( rule__Delete__Group_3__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getGroup_3()); 
            }
            // InternalOpenCypherParser.g:8901:2: ( rule__Delete__Group_3__0 )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==Comma) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // InternalOpenCypherParser.g:8901:3: rule__Delete__Group_3__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Delete__Group_3__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group__3__Impl"


    // $ANTLR start "rule__Delete__Group_3__0"
    // InternalOpenCypherParser.g:8910:1: rule__Delete__Group_3__0 : rule__Delete__Group_3__0__Impl rule__Delete__Group_3__1 ;
    public final void rule__Delete__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8914:1: ( rule__Delete__Group_3__0__Impl rule__Delete__Group_3__1 )
            // InternalOpenCypherParser.g:8915:2: rule__Delete__Group_3__0__Impl rule__Delete__Group_3__1
            {
            pushFollow(FOLLOW_36);
            rule__Delete__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Delete__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__0"


    // $ANTLR start "rule__Delete__Group_3__0__Impl"
    // InternalOpenCypherParser.g:8922:1: rule__Delete__Group_3__0__Impl : ( Comma ) ;
    public final void rule__Delete__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8926:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:8927:1: ( Comma )
            {
            // InternalOpenCypherParser.g:8927:1: ( Comma )
            // InternalOpenCypherParser.g:8928:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getCommaKeyword_3_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getCommaKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__0__Impl"


    // $ANTLR start "rule__Delete__Group_3__1"
    // InternalOpenCypherParser.g:8937:1: rule__Delete__Group_3__1 : rule__Delete__Group_3__1__Impl ;
    public final void rule__Delete__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8941:1: ( rule__Delete__Group_3__1__Impl )
            // InternalOpenCypherParser.g:8942:2: rule__Delete__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Delete__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__1"


    // $ANTLR start "rule__Delete__Group_3__1__Impl"
    // InternalOpenCypherParser.g:8948:1: rule__Delete__Group_3__1__Impl : ( ( rule__Delete__ExpressionsAssignment_3_1 ) ) ;
    public final void rule__Delete__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8952:1: ( ( ( rule__Delete__ExpressionsAssignment_3_1 ) ) )
            // InternalOpenCypherParser.g:8953:1: ( ( rule__Delete__ExpressionsAssignment_3_1 ) )
            {
            // InternalOpenCypherParser.g:8953:1: ( ( rule__Delete__ExpressionsAssignment_3_1 ) )
            // InternalOpenCypherParser.g:8954:2: ( rule__Delete__ExpressionsAssignment_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1()); 
            }
            // InternalOpenCypherParser.g:8955:2: ( rule__Delete__ExpressionsAssignment_3_1 )
            // InternalOpenCypherParser.g:8955:3: rule__Delete__ExpressionsAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__Delete__ExpressionsAssignment_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsAssignment_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__Group_3__1__Impl"


    // $ANTLR start "rule__Remove__Group__0"
    // InternalOpenCypherParser.g:8964:1: rule__Remove__Group__0 : rule__Remove__Group__0__Impl rule__Remove__Group__1 ;
    public final void rule__Remove__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8968:1: ( rule__Remove__Group__0__Impl rule__Remove__Group__1 )
            // InternalOpenCypherParser.g:8969:2: rule__Remove__Group__0__Impl rule__Remove__Group__1
            {
            pushFollow(FOLLOW_26);
            rule__Remove__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Remove__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__0"


    // $ANTLR start "rule__Remove__Group__0__Impl"
    // InternalOpenCypherParser.g:8976:1: rule__Remove__Group__0__Impl : ( REMOVE ) ;
    public final void rule__Remove__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8980:1: ( ( REMOVE ) )
            // InternalOpenCypherParser.g:8981:1: ( REMOVE )
            {
            // InternalOpenCypherParser.g:8981:1: ( REMOVE )
            // InternalOpenCypherParser.g:8982:2: REMOVE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); 
            }
            match(input,REMOVE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getREMOVEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__0__Impl"


    // $ANTLR start "rule__Remove__Group__1"
    // InternalOpenCypherParser.g:8991:1: rule__Remove__Group__1 : rule__Remove__Group__1__Impl rule__Remove__Group__2 ;
    public final void rule__Remove__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:8995:1: ( rule__Remove__Group__1__Impl rule__Remove__Group__2 )
            // InternalOpenCypherParser.g:8996:2: rule__Remove__Group__1__Impl rule__Remove__Group__2
            {
            pushFollow(FOLLOW_48);
            rule__Remove__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Remove__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__1"


    // $ANTLR start "rule__Remove__Group__1__Impl"
    // InternalOpenCypherParser.g:9003:1: rule__Remove__Group__1__Impl : ( ( rule__Remove__RemoveItemsAssignment_1 ) ) ;
    public final void rule__Remove__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9007:1: ( ( ( rule__Remove__RemoveItemsAssignment_1 ) ) )
            // InternalOpenCypherParser.g:9008:1: ( ( rule__Remove__RemoveItemsAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:9008:1: ( ( rule__Remove__RemoveItemsAssignment_1 ) )
            // InternalOpenCypherParser.g:9009:2: ( rule__Remove__RemoveItemsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:9010:2: ( rule__Remove__RemoveItemsAssignment_1 )
            // InternalOpenCypherParser.g:9010:3: rule__Remove__RemoveItemsAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Remove__RemoveItemsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__1__Impl"


    // $ANTLR start "rule__Remove__Group__2"
    // InternalOpenCypherParser.g:9018:1: rule__Remove__Group__2 : rule__Remove__Group__2__Impl ;
    public final void rule__Remove__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9022:1: ( rule__Remove__Group__2__Impl )
            // InternalOpenCypherParser.g:9023:2: rule__Remove__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Remove__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__2"


    // $ANTLR start "rule__Remove__Group__2__Impl"
    // InternalOpenCypherParser.g:9029:1: rule__Remove__Group__2__Impl : ( ( rule__Remove__Group_2__0 )* ) ;
    public final void rule__Remove__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9033:1: ( ( ( rule__Remove__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:9034:1: ( ( rule__Remove__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:9034:1: ( ( rule__Remove__Group_2__0 )* )
            // InternalOpenCypherParser.g:9035:2: ( rule__Remove__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:9036:2: ( rule__Remove__Group_2__0 )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==Comma) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9036:3: rule__Remove__Group_2__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Remove__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group__2__Impl"


    // $ANTLR start "rule__Remove__Group_2__0"
    // InternalOpenCypherParser.g:9045:1: rule__Remove__Group_2__0 : rule__Remove__Group_2__0__Impl rule__Remove__Group_2__1 ;
    public final void rule__Remove__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9049:1: ( rule__Remove__Group_2__0__Impl rule__Remove__Group_2__1 )
            // InternalOpenCypherParser.g:9050:2: rule__Remove__Group_2__0__Impl rule__Remove__Group_2__1
            {
            pushFollow(FOLLOW_26);
            rule__Remove__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Remove__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__0"


    // $ANTLR start "rule__Remove__Group_2__0__Impl"
    // InternalOpenCypherParser.g:9057:1: rule__Remove__Group_2__0__Impl : ( Comma ) ;
    public final void rule__Remove__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9061:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:9062:1: ( Comma )
            {
            // InternalOpenCypherParser.g:9062:1: ( Comma )
            // InternalOpenCypherParser.g:9063:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__0__Impl"


    // $ANTLR start "rule__Remove__Group_2__1"
    // InternalOpenCypherParser.g:9072:1: rule__Remove__Group_2__1 : rule__Remove__Group_2__1__Impl ;
    public final void rule__Remove__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9076:1: ( rule__Remove__Group_2__1__Impl )
            // InternalOpenCypherParser.g:9077:2: rule__Remove__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Remove__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__1"


    // $ANTLR start "rule__Remove__Group_2__1__Impl"
    // InternalOpenCypherParser.g:9083:1: rule__Remove__Group_2__1__Impl : ( ( rule__Remove__RemoveItemsAssignment_2_1 ) ) ;
    public final void rule__Remove__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9087:1: ( ( ( rule__Remove__RemoveItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:9088:1: ( ( rule__Remove__RemoveItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:9088:1: ( ( rule__Remove__RemoveItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:9089:2: ( rule__Remove__RemoveItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:9090:2: ( rule__Remove__RemoveItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:9090:3: rule__Remove__RemoveItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Remove__RemoveItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__Group_2__1__Impl"


    // $ANTLR start "rule__RemoveItem__Group_0__0"
    // InternalOpenCypherParser.g:9099:1: rule__RemoveItem__Group_0__0 : rule__RemoveItem__Group_0__0__Impl rule__RemoveItem__Group_0__1 ;
    public final void rule__RemoveItem__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9103:1: ( rule__RemoveItem__Group_0__0__Impl rule__RemoveItem__Group_0__1 )
            // InternalOpenCypherParser.g:9104:2: rule__RemoveItem__Group_0__0__Impl rule__RemoveItem__Group_0__1
            {
            pushFollow(FOLLOW_9);
            rule__RemoveItem__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__0"


    // $ANTLR start "rule__RemoveItem__Group_0__0__Impl"
    // InternalOpenCypherParser.g:9111:1: rule__RemoveItem__Group_0__0__Impl : ( () ) ;
    public final void rule__RemoveItem__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9115:1: ( ( () ) )
            // InternalOpenCypherParser.g:9116:1: ( () )
            {
            // InternalOpenCypherParser.g:9116:1: ( () )
            // InternalOpenCypherParser.g:9117:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0()); 
            }
            // InternalOpenCypherParser.g:9118:2: ()
            // InternalOpenCypherParser.g:9118:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getRemoveItemLabelAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__0__Impl"


    // $ANTLR start "rule__RemoveItem__Group_0__1"
    // InternalOpenCypherParser.g:9126:1: rule__RemoveItem__Group_0__1 : rule__RemoveItem__Group_0__1__Impl rule__RemoveItem__Group_0__2 ;
    public final void rule__RemoveItem__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9130:1: ( rule__RemoveItem__Group_0__1__Impl rule__RemoveItem__Group_0__2 )
            // InternalOpenCypherParser.g:9131:2: rule__RemoveItem__Group_0__1__Impl rule__RemoveItem__Group_0__2
            {
            pushFollow(FOLLOW_22);
            rule__RemoveItem__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__1"


    // $ANTLR start "rule__RemoveItem__Group_0__1__Impl"
    // InternalOpenCypherParser.g:9138:1: rule__RemoveItem__Group_0__1__Impl : ( ( rule__RemoveItem__VariableAssignment_0_1 ) ) ;
    public final void rule__RemoveItem__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9142:1: ( ( ( rule__RemoveItem__VariableAssignment_0_1 ) ) )
            // InternalOpenCypherParser.g:9143:1: ( ( rule__RemoveItem__VariableAssignment_0_1 ) )
            {
            // InternalOpenCypherParser.g:9143:1: ( ( rule__RemoveItem__VariableAssignment_0_1 ) )
            // InternalOpenCypherParser.g:9144:2: ( rule__RemoveItem__VariableAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:9145:2: ( rule__RemoveItem__VariableAssignment_0_1 )
            // InternalOpenCypherParser.g:9145:3: rule__RemoveItem__VariableAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__VariableAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getVariableAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__1__Impl"


    // $ANTLR start "rule__RemoveItem__Group_0__2"
    // InternalOpenCypherParser.g:9153:1: rule__RemoveItem__Group_0__2 : rule__RemoveItem__Group_0__2__Impl ;
    public final void rule__RemoveItem__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9157:1: ( rule__RemoveItem__Group_0__2__Impl )
            // InternalOpenCypherParser.g:9158:2: rule__RemoveItem__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__2"


    // $ANTLR start "rule__RemoveItem__Group_0__2__Impl"
    // InternalOpenCypherParser.g:9164:1: rule__RemoveItem__Group_0__2__Impl : ( ( rule__RemoveItem__NodeLabelsAssignment_0_2 ) ) ;
    public final void rule__RemoveItem__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9168:1: ( ( ( rule__RemoveItem__NodeLabelsAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:9169:1: ( ( rule__RemoveItem__NodeLabelsAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:9169:1: ( ( rule__RemoveItem__NodeLabelsAssignment_0_2 ) )
            // InternalOpenCypherParser.g:9170:2: ( rule__RemoveItem__NodeLabelsAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getNodeLabelsAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:9171:2: ( rule__RemoveItem__NodeLabelsAssignment_0_2 )
            // InternalOpenCypherParser.g:9171:3: rule__RemoveItem__NodeLabelsAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__NodeLabelsAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getNodeLabelsAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_0__2__Impl"


    // $ANTLR start "rule__RemoveItem__Group_1__0"
    // InternalOpenCypherParser.g:9180:1: rule__RemoveItem__Group_1__0 : rule__RemoveItem__Group_1__0__Impl rule__RemoveItem__Group_1__1 ;
    public final void rule__RemoveItem__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9184:1: ( rule__RemoveItem__Group_1__0__Impl rule__RemoveItem__Group_1__1 )
            // InternalOpenCypherParser.g:9185:2: rule__RemoveItem__Group_1__0__Impl rule__RemoveItem__Group_1__1
            {
            pushFollow(FOLLOW_26);
            rule__RemoveItem__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__0"


    // $ANTLR start "rule__RemoveItem__Group_1__0__Impl"
    // InternalOpenCypherParser.g:9192:1: rule__RemoveItem__Group_1__0__Impl : ( () ) ;
    public final void rule__RemoveItem__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9196:1: ( ( () ) )
            // InternalOpenCypherParser.g:9197:1: ( () )
            {
            // InternalOpenCypherParser.g:9197:1: ( () )
            // InternalOpenCypherParser.g:9198:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0()); 
            }
            // InternalOpenCypherParser.g:9199:2: ()
            // InternalOpenCypherParser.g:9199:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getRemoveItemPropertyAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__0__Impl"


    // $ANTLR start "rule__RemoveItem__Group_1__1"
    // InternalOpenCypherParser.g:9207:1: rule__RemoveItem__Group_1__1 : rule__RemoveItem__Group_1__1__Impl ;
    public final void rule__RemoveItem__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9211:1: ( rule__RemoveItem__Group_1__1__Impl )
            // InternalOpenCypherParser.g:9212:2: rule__RemoveItem__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__1"


    // $ANTLR start "rule__RemoveItem__Group_1__1__Impl"
    // InternalOpenCypherParser.g:9218:1: rule__RemoveItem__Group_1__1__Impl : ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) ) ;
    public final void rule__RemoveItem__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9222:1: ( ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:9223:1: ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:9223:1: ( ( rule__RemoveItem__PropertyExpressionAssignment_1_1 ) )
            // InternalOpenCypherParser.g:9224:2: ( rule__RemoveItem__PropertyExpressionAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:9225:2: ( rule__RemoveItem__PropertyExpressionAssignment_1_1 )
            // InternalOpenCypherParser.g:9225:3: rule__RemoveItem__PropertyExpressionAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__RemoveItem__PropertyExpressionAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getPropertyExpressionAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__Group_1__1__Impl"


    // $ANTLR start "rule__Foreach__Group__0"
    // InternalOpenCypherParser.g:9234:1: rule__Foreach__Group__0 : rule__Foreach__Group__0__Impl rule__Foreach__Group__1 ;
    public final void rule__Foreach__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9238:1: ( rule__Foreach__Group__0__Impl rule__Foreach__Group__1 )
            // InternalOpenCypherParser.g:9239:2: rule__Foreach__Group__0__Impl rule__Foreach__Group__1
            {
            pushFollow(FOLLOW_23);
            rule__Foreach__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__0"


    // $ANTLR start "rule__Foreach__Group__0__Impl"
    // InternalOpenCypherParser.g:9246:1: rule__Foreach__Group__0__Impl : ( FOREACH ) ;
    public final void rule__Foreach__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9250:1: ( ( FOREACH ) )
            // InternalOpenCypherParser.g:9251:1: ( FOREACH )
            {
            // InternalOpenCypherParser.g:9251:1: ( FOREACH )
            // InternalOpenCypherParser.g:9252:2: FOREACH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getFOREACHKeyword_0()); 
            }
            match(input,FOREACH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getFOREACHKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__0__Impl"


    // $ANTLR start "rule__Foreach__Group__1"
    // InternalOpenCypherParser.g:9261:1: rule__Foreach__Group__1 : rule__Foreach__Group__1__Impl rule__Foreach__Group__2 ;
    public final void rule__Foreach__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9265:1: ( rule__Foreach__Group__1__Impl rule__Foreach__Group__2 )
            // InternalOpenCypherParser.g:9266:2: rule__Foreach__Group__1__Impl rule__Foreach__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__Foreach__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__1"


    // $ANTLR start "rule__Foreach__Group__1__Impl"
    // InternalOpenCypherParser.g:9273:1: rule__Foreach__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__Foreach__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9277:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:9278:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:9278:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:9279:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__1__Impl"


    // $ANTLR start "rule__Foreach__Group__2"
    // InternalOpenCypherParser.g:9288:1: rule__Foreach__Group__2 : rule__Foreach__Group__2__Impl rule__Foreach__Group__3 ;
    public final void rule__Foreach__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9292:1: ( rule__Foreach__Group__2__Impl rule__Foreach__Group__3 )
            // InternalOpenCypherParser.g:9293:2: rule__Foreach__Group__2__Impl rule__Foreach__Group__3
            {
            pushFollow(FOLLOW_52);
            rule__Foreach__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__2"


    // $ANTLR start "rule__Foreach__Group__2__Impl"
    // InternalOpenCypherParser.g:9300:1: rule__Foreach__Group__2__Impl : ( ( rule__Foreach__VariableAssignment_2 ) ) ;
    public final void rule__Foreach__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9304:1: ( ( ( rule__Foreach__VariableAssignment_2 ) ) )
            // InternalOpenCypherParser.g:9305:1: ( ( rule__Foreach__VariableAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:9305:1: ( ( rule__Foreach__VariableAssignment_2 ) )
            // InternalOpenCypherParser.g:9306:2: ( rule__Foreach__VariableAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getVariableAssignment_2()); 
            }
            // InternalOpenCypherParser.g:9307:2: ( rule__Foreach__VariableAssignment_2 )
            // InternalOpenCypherParser.g:9307:3: rule__Foreach__VariableAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__VariableAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getVariableAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__2__Impl"


    // $ANTLR start "rule__Foreach__Group__3"
    // InternalOpenCypherParser.g:9315:1: rule__Foreach__Group__3 : rule__Foreach__Group__3__Impl rule__Foreach__Group__4 ;
    public final void rule__Foreach__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9319:1: ( rule__Foreach__Group__3__Impl rule__Foreach__Group__4 )
            // InternalOpenCypherParser.g:9320:2: rule__Foreach__Group__3__Impl rule__Foreach__Group__4
            {
            pushFollow(FOLLOW_36);
            rule__Foreach__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__3"


    // $ANTLR start "rule__Foreach__Group__3__Impl"
    // InternalOpenCypherParser.g:9327:1: rule__Foreach__Group__3__Impl : ( IN ) ;
    public final void rule__Foreach__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9331:1: ( ( IN ) )
            // InternalOpenCypherParser.g:9332:1: ( IN )
            {
            // InternalOpenCypherParser.g:9332:1: ( IN )
            // InternalOpenCypherParser.g:9333:2: IN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getINKeyword_3()); 
            }
            match(input,IN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getINKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__3__Impl"


    // $ANTLR start "rule__Foreach__Group__4"
    // InternalOpenCypherParser.g:9342:1: rule__Foreach__Group__4 : rule__Foreach__Group__4__Impl rule__Foreach__Group__5 ;
    public final void rule__Foreach__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9346:1: ( rule__Foreach__Group__4__Impl rule__Foreach__Group__5 )
            // InternalOpenCypherParser.g:9347:2: rule__Foreach__Group__4__Impl rule__Foreach__Group__5
            {
            pushFollow(FOLLOW_53);
            rule__Foreach__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__4"


    // $ANTLR start "rule__Foreach__Group__4__Impl"
    // InternalOpenCypherParser.g:9354:1: rule__Foreach__Group__4__Impl : ( ( rule__Foreach__ExpressionAssignment_4 ) ) ;
    public final void rule__Foreach__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9358:1: ( ( ( rule__Foreach__ExpressionAssignment_4 ) ) )
            // InternalOpenCypherParser.g:9359:1: ( ( rule__Foreach__ExpressionAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:9359:1: ( ( rule__Foreach__ExpressionAssignment_4 ) )
            // InternalOpenCypherParser.g:9360:2: ( rule__Foreach__ExpressionAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getExpressionAssignment_4()); 
            }
            // InternalOpenCypherParser.g:9361:2: ( rule__Foreach__ExpressionAssignment_4 )
            // InternalOpenCypherParser.g:9361:3: rule__Foreach__ExpressionAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__ExpressionAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getExpressionAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__4__Impl"


    // $ANTLR start "rule__Foreach__Group__5"
    // InternalOpenCypherParser.g:9369:1: rule__Foreach__Group__5 : rule__Foreach__Group__5__Impl rule__Foreach__Group__6 ;
    public final void rule__Foreach__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9373:1: ( rule__Foreach__Group__5__Impl rule__Foreach__Group__6 )
            // InternalOpenCypherParser.g:9374:2: rule__Foreach__Group__5__Impl rule__Foreach__Group__6
            {
            pushFollow(FOLLOW_13);
            rule__Foreach__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__5"


    // $ANTLR start "rule__Foreach__Group__5__Impl"
    // InternalOpenCypherParser.g:9381:1: rule__Foreach__Group__5__Impl : ( VerticalLine ) ;
    public final void rule__Foreach__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9385:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:9386:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:9386:1: ( VerticalLine )
            // InternalOpenCypherParser.g:9387:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getVerticalLineKeyword_5()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getVerticalLineKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__5__Impl"


    // $ANTLR start "rule__Foreach__Group__6"
    // InternalOpenCypherParser.g:9396:1: rule__Foreach__Group__6 : rule__Foreach__Group__6__Impl rule__Foreach__Group__7 ;
    public final void rule__Foreach__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9400:1: ( rule__Foreach__Group__6__Impl rule__Foreach__Group__7 )
            // InternalOpenCypherParser.g:9401:2: rule__Foreach__Group__6__Impl rule__Foreach__Group__7
            {
            pushFollow(FOLLOW_24);
            rule__Foreach__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__6"


    // $ANTLR start "rule__Foreach__Group__6__Impl"
    // InternalOpenCypherParser.g:9408:1: rule__Foreach__Group__6__Impl : ( ( ( rule__Foreach__ClausesAssignment_6 ) ) ( ( rule__Foreach__ClausesAssignment_6 )* ) ) ;
    public final void rule__Foreach__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9412:1: ( ( ( ( rule__Foreach__ClausesAssignment_6 ) ) ( ( rule__Foreach__ClausesAssignment_6 )* ) ) )
            // InternalOpenCypherParser.g:9413:1: ( ( ( rule__Foreach__ClausesAssignment_6 ) ) ( ( rule__Foreach__ClausesAssignment_6 )* ) )
            {
            // InternalOpenCypherParser.g:9413:1: ( ( ( rule__Foreach__ClausesAssignment_6 ) ) ( ( rule__Foreach__ClausesAssignment_6 )* ) )
            // InternalOpenCypherParser.g:9414:2: ( ( rule__Foreach__ClausesAssignment_6 ) ) ( ( rule__Foreach__ClausesAssignment_6 )* )
            {
            // InternalOpenCypherParser.g:9414:2: ( ( rule__Foreach__ClausesAssignment_6 ) )
            // InternalOpenCypherParser.g:9415:3: ( rule__Foreach__ClausesAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getClausesAssignment_6()); 
            }
            // InternalOpenCypherParser.g:9416:3: ( rule__Foreach__ClausesAssignment_6 )
            // InternalOpenCypherParser.g:9416:4: rule__Foreach__ClausesAssignment_6
            {
            pushFollow(FOLLOW_14);
            rule__Foreach__ClausesAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getClausesAssignment_6()); 
            }

            }

            // InternalOpenCypherParser.g:9419:2: ( ( rule__Foreach__ClausesAssignment_6 )* )
            // InternalOpenCypherParser.g:9420:3: ( rule__Foreach__ClausesAssignment_6 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getClausesAssignment_6()); 
            }
            // InternalOpenCypherParser.g:9421:3: ( rule__Foreach__ClausesAssignment_6 )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==OPTIONAL||LA66_0==FOREACH||LA66_0==CREATE||(LA66_0>=DELETE && LA66_0<=DETACH)||(LA66_0>=REMOVE && LA66_0<=RETURN)||LA66_0==UNWIND||(LA66_0>=MATCH && LA66_0<=MERGE)||LA66_0==START||LA66_0==CALL||LA66_0==LOAD||LA66_0==WITH||LA66_0==SET) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9421:4: rule__Foreach__ClausesAssignment_6
            	    {
            	    pushFollow(FOLLOW_14);
            	    rule__Foreach__ClausesAssignment_6();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getClausesAssignment_6()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__6__Impl"


    // $ANTLR start "rule__Foreach__Group__7"
    // InternalOpenCypherParser.g:9430:1: rule__Foreach__Group__7 : rule__Foreach__Group__7__Impl ;
    public final void rule__Foreach__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9434:1: ( rule__Foreach__Group__7__Impl )
            // InternalOpenCypherParser.g:9435:2: rule__Foreach__Group__7__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foreach__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__7"


    // $ANTLR start "rule__Foreach__Group__7__Impl"
    // InternalOpenCypherParser.g:9441:1: rule__Foreach__Group__7__Impl : ( RightParenthesis ) ;
    public final void rule__Foreach__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9445:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:9446:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:9446:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:9447:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getRightParenthesisKeyword_7()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getRightParenthesisKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__Group__7__Impl"


    // $ANTLR start "rule__InQueryCall__Group__0"
    // InternalOpenCypherParser.g:9457:1: rule__InQueryCall__Group__0 : rule__InQueryCall__Group__0__Impl rule__InQueryCall__Group__1 ;
    public final void rule__InQueryCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9461:1: ( rule__InQueryCall__Group__0__Impl rule__InQueryCall__Group__1 )
            // InternalOpenCypherParser.g:9462:2: rule__InQueryCall__Group__0__Impl rule__InQueryCall__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__InQueryCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__0"


    // $ANTLR start "rule__InQueryCall__Group__0__Impl"
    // InternalOpenCypherParser.g:9469:1: rule__InQueryCall__Group__0__Impl : ( CALL ) ;
    public final void rule__InQueryCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9473:1: ( ( CALL ) )
            // InternalOpenCypherParser.g:9474:1: ( CALL )
            {
            // InternalOpenCypherParser.g:9474:1: ( CALL )
            // InternalOpenCypherParser.g:9475:2: CALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getCALLKeyword_0()); 
            }
            match(input,CALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getCALLKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__0__Impl"


    // $ANTLR start "rule__InQueryCall__Group__1"
    // InternalOpenCypherParser.g:9484:1: rule__InQueryCall__Group__1 : rule__InQueryCall__Group__1__Impl rule__InQueryCall__Group__2 ;
    public final void rule__InQueryCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9488:1: ( rule__InQueryCall__Group__1__Impl rule__InQueryCall__Group__2 )
            // InternalOpenCypherParser.g:9489:2: rule__InQueryCall__Group__1__Impl rule__InQueryCall__Group__2
            {
            pushFollow(FOLLOW_54);
            rule__InQueryCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__1"


    // $ANTLR start "rule__InQueryCall__Group__1__Impl"
    // InternalOpenCypherParser.g:9496:1: rule__InQueryCall__Group__1__Impl : ( ( rule__InQueryCall__InvocationAssignment_1 ) ) ;
    public final void rule__InQueryCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9500:1: ( ( ( rule__InQueryCall__InvocationAssignment_1 ) ) )
            // InternalOpenCypherParser.g:9501:1: ( ( rule__InQueryCall__InvocationAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:9501:1: ( ( rule__InQueryCall__InvocationAssignment_1 ) )
            // InternalOpenCypherParser.g:9502:2: ( rule__InQueryCall__InvocationAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1()); 
            }
            // InternalOpenCypherParser.g:9503:2: ( rule__InQueryCall__InvocationAssignment_1 )
            // InternalOpenCypherParser.g:9503:3: rule__InQueryCall__InvocationAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__InvocationAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getInvocationAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__1__Impl"


    // $ANTLR start "rule__InQueryCall__Group__2"
    // InternalOpenCypherParser.g:9511:1: rule__InQueryCall__Group__2 : rule__InQueryCall__Group__2__Impl ;
    public final void rule__InQueryCall__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9515:1: ( rule__InQueryCall__Group__2__Impl )
            // InternalOpenCypherParser.g:9516:2: rule__InQueryCall__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__2"


    // $ANTLR start "rule__InQueryCall__Group__2__Impl"
    // InternalOpenCypherParser.g:9522:1: rule__InQueryCall__Group__2__Impl : ( ( rule__InQueryCall__Group_2__0 )? ) ;
    public final void rule__InQueryCall__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9526:1: ( ( ( rule__InQueryCall__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:9527:1: ( ( rule__InQueryCall__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:9527:1: ( ( rule__InQueryCall__Group_2__0 )? )
            // InternalOpenCypherParser.g:9528:2: ( rule__InQueryCall__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:9529:2: ( rule__InQueryCall__Group_2__0 )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==YIELD) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalOpenCypherParser.g:9529:3: rule__InQueryCall__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InQueryCall__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group__2__Impl"


    // $ANTLR start "rule__InQueryCall__Group_2__0"
    // InternalOpenCypherParser.g:9538:1: rule__InQueryCall__Group_2__0 : rule__InQueryCall__Group_2__0__Impl rule__InQueryCall__Group_2__1 ;
    public final void rule__InQueryCall__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9542:1: ( rule__InQueryCall__Group_2__0__Impl rule__InQueryCall__Group_2__1 )
            // InternalOpenCypherParser.g:9543:2: rule__InQueryCall__Group_2__0__Impl rule__InQueryCall__Group_2__1
            {
            pushFollow(FOLLOW_55);
            rule__InQueryCall__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__0"


    // $ANTLR start "rule__InQueryCall__Group_2__0__Impl"
    // InternalOpenCypherParser.g:9550:1: rule__InQueryCall__Group_2__0__Impl : ( YIELD ) ;
    public final void rule__InQueryCall__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9554:1: ( ( YIELD ) )
            // InternalOpenCypherParser.g:9555:1: ( YIELD )
            {
            // InternalOpenCypherParser.g:9555:1: ( YIELD )
            // InternalOpenCypherParser.g:9556:2: YIELD
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0()); 
            }
            match(input,YIELD,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getYIELDKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__0__Impl"


    // $ANTLR start "rule__InQueryCall__Group_2__1"
    // InternalOpenCypherParser.g:9565:1: rule__InQueryCall__Group_2__1 : rule__InQueryCall__Group_2__1__Impl ;
    public final void rule__InQueryCall__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9569:1: ( rule__InQueryCall__Group_2__1__Impl )
            // InternalOpenCypherParser.g:9570:2: rule__InQueryCall__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__1"


    // $ANTLR start "rule__InQueryCall__Group_2__1__Impl"
    // InternalOpenCypherParser.g:9576:1: rule__InQueryCall__Group_2__1__Impl : ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) ) ;
    public final void rule__InQueryCall__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9580:1: ( ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:9581:1: ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:9581:1: ( ( rule__InQueryCall__YieldItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:9582:2: ( rule__InQueryCall__YieldItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:9583:2: ( rule__InQueryCall__YieldItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:9583:3: rule__InQueryCall__YieldItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__InQueryCall__YieldItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getYieldItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__Group_2__1__Impl"


    // $ANTLR start "rule__StandaloneCall__Group__0"
    // InternalOpenCypherParser.g:9592:1: rule__StandaloneCall__Group__0 : rule__StandaloneCall__Group__0__Impl rule__StandaloneCall__Group__1 ;
    public final void rule__StandaloneCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9596:1: ( rule__StandaloneCall__Group__0__Impl rule__StandaloneCall__Group__1 )
            // InternalOpenCypherParser.g:9597:2: rule__StandaloneCall__Group__0__Impl rule__StandaloneCall__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__StandaloneCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__0"


    // $ANTLR start "rule__StandaloneCall__Group__0__Impl"
    // InternalOpenCypherParser.g:9604:1: rule__StandaloneCall__Group__0__Impl : ( CALL ) ;
    public final void rule__StandaloneCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9608:1: ( ( CALL ) )
            // InternalOpenCypherParser.g:9609:1: ( CALL )
            {
            // InternalOpenCypherParser.g:9609:1: ( CALL )
            // InternalOpenCypherParser.g:9610:2: CALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getCALLKeyword_0()); 
            }
            match(input,CALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getCALLKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__0__Impl"


    // $ANTLR start "rule__StandaloneCall__Group__1"
    // InternalOpenCypherParser.g:9619:1: rule__StandaloneCall__Group__1 : rule__StandaloneCall__Group__1__Impl rule__StandaloneCall__Group__2 ;
    public final void rule__StandaloneCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9623:1: ( rule__StandaloneCall__Group__1__Impl rule__StandaloneCall__Group__2 )
            // InternalOpenCypherParser.g:9624:2: rule__StandaloneCall__Group__1__Impl rule__StandaloneCall__Group__2
            {
            pushFollow(FOLLOW_54);
            rule__StandaloneCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__1"


    // $ANTLR start "rule__StandaloneCall__Group__1__Impl"
    // InternalOpenCypherParser.g:9631:1: rule__StandaloneCall__Group__1__Impl : ( ( rule__StandaloneCall__InvocationAssignment_1 ) ) ;
    public final void rule__StandaloneCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9635:1: ( ( ( rule__StandaloneCall__InvocationAssignment_1 ) ) )
            // InternalOpenCypherParser.g:9636:1: ( ( rule__StandaloneCall__InvocationAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:9636:1: ( ( rule__StandaloneCall__InvocationAssignment_1 ) )
            // InternalOpenCypherParser.g:9637:2: ( rule__StandaloneCall__InvocationAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1()); 
            }
            // InternalOpenCypherParser.g:9638:2: ( rule__StandaloneCall__InvocationAssignment_1 )
            // InternalOpenCypherParser.g:9638:3: rule__StandaloneCall__InvocationAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__InvocationAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getInvocationAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__1__Impl"


    // $ANTLR start "rule__StandaloneCall__Group__2"
    // InternalOpenCypherParser.g:9646:1: rule__StandaloneCall__Group__2 : rule__StandaloneCall__Group__2__Impl ;
    public final void rule__StandaloneCall__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9650:1: ( rule__StandaloneCall__Group__2__Impl )
            // InternalOpenCypherParser.g:9651:2: rule__StandaloneCall__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__2"


    // $ANTLR start "rule__StandaloneCall__Group__2__Impl"
    // InternalOpenCypherParser.g:9657:1: rule__StandaloneCall__Group__2__Impl : ( ( rule__StandaloneCall__Group_2__0 )? ) ;
    public final void rule__StandaloneCall__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9661:1: ( ( ( rule__StandaloneCall__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:9662:1: ( ( rule__StandaloneCall__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:9662:1: ( ( rule__StandaloneCall__Group_2__0 )? )
            // InternalOpenCypherParser.g:9663:2: ( rule__StandaloneCall__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:9664:2: ( rule__StandaloneCall__Group_2__0 )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==YIELD) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // InternalOpenCypherParser.g:9664:3: rule__StandaloneCall__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__StandaloneCall__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group__2__Impl"


    // $ANTLR start "rule__StandaloneCall__Group_2__0"
    // InternalOpenCypherParser.g:9673:1: rule__StandaloneCall__Group_2__0 : rule__StandaloneCall__Group_2__0__Impl rule__StandaloneCall__Group_2__1 ;
    public final void rule__StandaloneCall__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9677:1: ( rule__StandaloneCall__Group_2__0__Impl rule__StandaloneCall__Group_2__1 )
            // InternalOpenCypherParser.g:9678:2: rule__StandaloneCall__Group_2__0__Impl rule__StandaloneCall__Group_2__1
            {
            pushFollow(FOLLOW_55);
            rule__StandaloneCall__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__0"


    // $ANTLR start "rule__StandaloneCall__Group_2__0__Impl"
    // InternalOpenCypherParser.g:9685:1: rule__StandaloneCall__Group_2__0__Impl : ( YIELD ) ;
    public final void rule__StandaloneCall__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9689:1: ( ( YIELD ) )
            // InternalOpenCypherParser.g:9690:1: ( YIELD )
            {
            // InternalOpenCypherParser.g:9690:1: ( YIELD )
            // InternalOpenCypherParser.g:9691:2: YIELD
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0()); 
            }
            match(input,YIELD,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getYIELDKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__0__Impl"


    // $ANTLR start "rule__StandaloneCall__Group_2__1"
    // InternalOpenCypherParser.g:9700:1: rule__StandaloneCall__Group_2__1 : rule__StandaloneCall__Group_2__1__Impl ;
    public final void rule__StandaloneCall__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9704:1: ( rule__StandaloneCall__Group_2__1__Impl )
            // InternalOpenCypherParser.g:9705:2: rule__StandaloneCall__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__1"


    // $ANTLR start "rule__StandaloneCall__Group_2__1__Impl"
    // InternalOpenCypherParser.g:9711:1: rule__StandaloneCall__Group_2__1__Impl : ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) ) ;
    public final void rule__StandaloneCall__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9715:1: ( ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:9716:1: ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:9716:1: ( ( rule__StandaloneCall__YieldItemsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:9717:2: ( rule__StandaloneCall__YieldItemsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:9718:2: ( rule__StandaloneCall__YieldItemsAssignment_2_1 )
            // InternalOpenCypherParser.g:9718:3: rule__StandaloneCall__YieldItemsAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__YieldItemsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getYieldItemsAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__Group_2__1__Impl"


    // $ANTLR start "rule__YieldItems__Group__0"
    // InternalOpenCypherParser.g:9727:1: rule__YieldItems__Group__0 : rule__YieldItems__Group__0__Impl rule__YieldItems__Group__1 ;
    public final void rule__YieldItems__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9731:1: ( rule__YieldItems__Group__0__Impl rule__YieldItems__Group__1 )
            // InternalOpenCypherParser.g:9732:2: rule__YieldItems__Group__0__Impl rule__YieldItems__Group__1
            {
            pushFollow(FOLLOW_55);
            rule__YieldItems__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__0"


    // $ANTLR start "rule__YieldItems__Group__0__Impl"
    // InternalOpenCypherParser.g:9739:1: rule__YieldItems__Group__0__Impl : ( () ) ;
    public final void rule__YieldItems__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9743:1: ( ( () ) )
            // InternalOpenCypherParser.g:9744:1: ( () )
            {
            // InternalOpenCypherParser.g:9744:1: ( () )
            // InternalOpenCypherParser.g:9745:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getYieldItemsAction_0()); 
            }
            // InternalOpenCypherParser.g:9746:2: ()
            // InternalOpenCypherParser.g:9746:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getYieldItemsAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__0__Impl"


    // $ANTLR start "rule__YieldItems__Group__1"
    // InternalOpenCypherParser.g:9754:1: rule__YieldItems__Group__1 : rule__YieldItems__Group__1__Impl ;
    public final void rule__YieldItems__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9758:1: ( rule__YieldItems__Group__1__Impl )
            // InternalOpenCypherParser.g:9759:2: rule__YieldItems__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__1"


    // $ANTLR start "rule__YieldItems__Group__1__Impl"
    // InternalOpenCypherParser.g:9765:1: rule__YieldItems__Group__1__Impl : ( ( rule__YieldItems__Alternatives_1 ) ) ;
    public final void rule__YieldItems__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9769:1: ( ( ( rule__YieldItems__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:9770:1: ( ( rule__YieldItems__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:9770:1: ( ( rule__YieldItems__Alternatives_1 ) )
            // InternalOpenCypherParser.g:9771:2: ( rule__YieldItems__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:9772:2: ( rule__YieldItems__Alternatives_1 )
            // InternalOpenCypherParser.g:9772:3: rule__YieldItems__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group__1__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0__0"
    // InternalOpenCypherParser.g:9781:1: rule__YieldItems__Group_1_0__0 : rule__YieldItems__Group_1_0__0__Impl rule__YieldItems__Group_1_0__1 ;
    public final void rule__YieldItems__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9785:1: ( rule__YieldItems__Group_1_0__0__Impl rule__YieldItems__Group_1_0__1 )
            // InternalOpenCypherParser.g:9786:2: rule__YieldItems__Group_1_0__0__Impl rule__YieldItems__Group_1_0__1
            {
            pushFollow(FOLLOW_48);
            rule__YieldItems__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__0"


    // $ANTLR start "rule__YieldItems__Group_1_0__0__Impl"
    // InternalOpenCypherParser.g:9793:1: rule__YieldItems__Group_1_0__0__Impl : ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) ) ;
    public final void rule__YieldItems__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9797:1: ( ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) ) )
            // InternalOpenCypherParser.g:9798:1: ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) )
            {
            // InternalOpenCypherParser.g:9798:1: ( ( rule__YieldItems__ItemsAssignment_1_0_0 ) )
            // InternalOpenCypherParser.g:9799:2: ( rule__YieldItems__ItemsAssignment_1_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0()); 
            }
            // InternalOpenCypherParser.g:9800:2: ( rule__YieldItems__ItemsAssignment_1_0_0 )
            // InternalOpenCypherParser.g:9800:3: rule__YieldItems__ItemsAssignment_1_0_0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__ItemsAssignment_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__0__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0__1"
    // InternalOpenCypherParser.g:9808:1: rule__YieldItems__Group_1_0__1 : rule__YieldItems__Group_1_0__1__Impl ;
    public final void rule__YieldItems__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9812:1: ( rule__YieldItems__Group_1_0__1__Impl )
            // InternalOpenCypherParser.g:9813:2: rule__YieldItems__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__1"


    // $ANTLR start "rule__YieldItems__Group_1_0__1__Impl"
    // InternalOpenCypherParser.g:9819:1: rule__YieldItems__Group_1_0__1__Impl : ( ( rule__YieldItems__Group_1_0_1__0 )* ) ;
    public final void rule__YieldItems__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9823:1: ( ( ( rule__YieldItems__Group_1_0_1__0 )* ) )
            // InternalOpenCypherParser.g:9824:1: ( ( rule__YieldItems__Group_1_0_1__0 )* )
            {
            // InternalOpenCypherParser.g:9824:1: ( ( rule__YieldItems__Group_1_0_1__0 )* )
            // InternalOpenCypherParser.g:9825:2: ( rule__YieldItems__Group_1_0_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getGroup_1_0_1()); 
            }
            // InternalOpenCypherParser.g:9826:2: ( rule__YieldItems__Group_1_0_1__0 )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==Comma) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // InternalOpenCypherParser.g:9826:3: rule__YieldItems__Group_1_0_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__YieldItems__Group_1_0_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getGroup_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0__1__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__0"
    // InternalOpenCypherParser.g:9835:1: rule__YieldItems__Group_1_0_1__0 : rule__YieldItems__Group_1_0_1__0__Impl rule__YieldItems__Group_1_0_1__1 ;
    public final void rule__YieldItems__Group_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9839:1: ( rule__YieldItems__Group_1_0_1__0__Impl rule__YieldItems__Group_1_0_1__1 )
            // InternalOpenCypherParser.g:9840:2: rule__YieldItems__Group_1_0_1__0__Impl rule__YieldItems__Group_1_0_1__1
            {
            pushFollow(FOLLOW_9);
            rule__YieldItems__Group_1_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__0"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__0__Impl"
    // InternalOpenCypherParser.g:9847:1: rule__YieldItems__Group_1_0_1__0__Impl : ( Comma ) ;
    public final void rule__YieldItems__Group_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9851:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:9852:1: ( Comma )
            {
            // InternalOpenCypherParser.g:9852:1: ( Comma )
            // InternalOpenCypherParser.g:9853:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getCommaKeyword_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__0__Impl"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__1"
    // InternalOpenCypherParser.g:9862:1: rule__YieldItems__Group_1_0_1__1 : rule__YieldItems__Group_1_0_1__1__Impl ;
    public final void rule__YieldItems__Group_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9866:1: ( rule__YieldItems__Group_1_0_1__1__Impl )
            // InternalOpenCypherParser.g:9867:2: rule__YieldItems__Group_1_0_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__Group_1_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__1"


    // $ANTLR start "rule__YieldItems__Group_1_0_1__1__Impl"
    // InternalOpenCypherParser.g:9873:1: rule__YieldItems__Group_1_0_1__1__Impl : ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) ) ;
    public final void rule__YieldItems__Group_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9877:1: ( ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) ) )
            // InternalOpenCypherParser.g:9878:1: ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) )
            {
            // InternalOpenCypherParser.g:9878:1: ( ( rule__YieldItems__ItemsAssignment_1_0_1_1 ) )
            // InternalOpenCypherParser.g:9879:2: ( rule__YieldItems__ItemsAssignment_1_0_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1()); 
            }
            // InternalOpenCypherParser.g:9880:2: ( rule__YieldItems__ItemsAssignment_1_0_1_1 )
            // InternalOpenCypherParser.g:9880:3: rule__YieldItems__ItemsAssignment_1_0_1_1
            {
            pushFollow(FOLLOW_2);
            rule__YieldItems__ItemsAssignment_1_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsAssignment_1_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__Group_1_0_1__1__Impl"


    // $ANTLR start "rule__YieldItem__Group__0"
    // InternalOpenCypherParser.g:9889:1: rule__YieldItem__Group__0 : rule__YieldItem__Group__0__Impl rule__YieldItem__Group__1 ;
    public final void rule__YieldItem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9893:1: ( rule__YieldItem__Group__0__Impl rule__YieldItem__Group__1 )
            // InternalOpenCypherParser.g:9894:2: rule__YieldItem__Group__0__Impl rule__YieldItem__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__YieldItem__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__0"


    // $ANTLR start "rule__YieldItem__Group__0__Impl"
    // InternalOpenCypherParser.g:9901:1: rule__YieldItem__Group__0__Impl : ( ( rule__YieldItem__Group_0__0 )? ) ;
    public final void rule__YieldItem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9905:1: ( ( ( rule__YieldItem__Group_0__0 )? ) )
            // InternalOpenCypherParser.g:9906:1: ( ( rule__YieldItem__Group_0__0 )? )
            {
            // InternalOpenCypherParser.g:9906:1: ( ( rule__YieldItem__Group_0__0 )? )
            // InternalOpenCypherParser.g:9907:2: ( rule__YieldItem__Group_0__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getGroup_0()); 
            }
            // InternalOpenCypherParser.g:9908:2: ( rule__YieldItem__Group_0__0 )?
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // InternalOpenCypherParser.g:9908:3: rule__YieldItem__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__YieldItem__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__0__Impl"


    // $ANTLR start "rule__YieldItem__Group__1"
    // InternalOpenCypherParser.g:9916:1: rule__YieldItem__Group__1 : rule__YieldItem__Group__1__Impl ;
    public final void rule__YieldItem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9920:1: ( rule__YieldItem__Group__1__Impl )
            // InternalOpenCypherParser.g:9921:2: rule__YieldItem__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__1"


    // $ANTLR start "rule__YieldItem__Group__1__Impl"
    // InternalOpenCypherParser.g:9927:1: rule__YieldItem__Group__1__Impl : ( ( rule__YieldItem__VariableAssignment_1 ) ) ;
    public final void rule__YieldItem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9931:1: ( ( ( rule__YieldItem__VariableAssignment_1 ) ) )
            // InternalOpenCypherParser.g:9932:1: ( ( rule__YieldItem__VariableAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:9932:1: ( ( rule__YieldItem__VariableAssignment_1 ) )
            // InternalOpenCypherParser.g:9933:2: ( rule__YieldItem__VariableAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getVariableAssignment_1()); 
            }
            // InternalOpenCypherParser.g:9934:2: ( rule__YieldItem__VariableAssignment_1 )
            // InternalOpenCypherParser.g:9934:3: rule__YieldItem__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__VariableAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getVariableAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group__1__Impl"


    // $ANTLR start "rule__YieldItem__Group_0__0"
    // InternalOpenCypherParser.g:9943:1: rule__YieldItem__Group_0__0 : rule__YieldItem__Group_0__0__Impl rule__YieldItem__Group_0__1 ;
    public final void rule__YieldItem__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9947:1: ( rule__YieldItem__Group_0__0__Impl rule__YieldItem__Group_0__1 )
            // InternalOpenCypherParser.g:9948:2: rule__YieldItem__Group_0__0__Impl rule__YieldItem__Group_0__1
            {
            pushFollow(FOLLOW_37);
            rule__YieldItem__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__0"


    // $ANTLR start "rule__YieldItem__Group_0__0__Impl"
    // InternalOpenCypherParser.g:9955:1: rule__YieldItem__Group_0__0__Impl : ( ( rule__YieldItem__FieldAssignment_0_0 ) ) ;
    public final void rule__YieldItem__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9959:1: ( ( ( rule__YieldItem__FieldAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:9960:1: ( ( rule__YieldItem__FieldAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:9960:1: ( ( rule__YieldItem__FieldAssignment_0_0 ) )
            // InternalOpenCypherParser.g:9961:2: ( rule__YieldItem__FieldAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:9962:2: ( rule__YieldItem__FieldAssignment_0_0 )
            // InternalOpenCypherParser.g:9962:3: rule__YieldItem__FieldAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__FieldAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getFieldAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__0__Impl"


    // $ANTLR start "rule__YieldItem__Group_0__1"
    // InternalOpenCypherParser.g:9970:1: rule__YieldItem__Group_0__1 : rule__YieldItem__Group_0__1__Impl ;
    public final void rule__YieldItem__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9974:1: ( rule__YieldItem__Group_0__1__Impl )
            // InternalOpenCypherParser.g:9975:2: rule__YieldItem__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__YieldItem__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__1"


    // $ANTLR start "rule__YieldItem__Group_0__1__Impl"
    // InternalOpenCypherParser.g:9981:1: rule__YieldItem__Group_0__1__Impl : ( AS ) ;
    public final void rule__YieldItem__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:9985:1: ( ( AS ) )
            // InternalOpenCypherParser.g:9986:1: ( AS )
            {
            // InternalOpenCypherParser.g:9986:1: ( AS )
            // InternalOpenCypherParser.g:9987:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getASKeyword_0_1()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getASKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__Group_0__1__Impl"


    // $ANTLR start "rule__With__Group__0"
    // InternalOpenCypherParser.g:9997:1: rule__With__Group__0 : rule__With__Group__0__Impl rule__With__Group__1 ;
    public final void rule__With__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10001:1: ( rule__With__Group__0__Impl rule__With__Group__1 )
            // InternalOpenCypherParser.g:10002:2: rule__With__Group__0__Impl rule__With__Group__1
            {
            pushFollow(FOLLOW_56);
            rule__With__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__With__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__0"


    // $ANTLR start "rule__With__Group__0__Impl"
    // InternalOpenCypherParser.g:10009:1: rule__With__Group__0__Impl : ( WITH ) ;
    public final void rule__With__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10013:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:10014:1: ( WITH )
            {
            // InternalOpenCypherParser.g:10014:1: ( WITH )
            // InternalOpenCypherParser.g:10015:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getWITHKeyword_0()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getWITHKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__0__Impl"


    // $ANTLR start "rule__With__Group__1"
    // InternalOpenCypherParser.g:10024:1: rule__With__Group__1 : rule__With__Group__1__Impl rule__With__Group__2 ;
    public final void rule__With__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10028:1: ( rule__With__Group__1__Impl rule__With__Group__2 )
            // InternalOpenCypherParser.g:10029:2: rule__With__Group__1__Impl rule__With__Group__2
            {
            pushFollow(FOLLOW_56);
            rule__With__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__With__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__1"


    // $ANTLR start "rule__With__Group__1__Impl"
    // InternalOpenCypherParser.g:10036:1: rule__With__Group__1__Impl : ( ( rule__With__DistintAssignment_1 )? ) ;
    public final void rule__With__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10040:1: ( ( ( rule__With__DistintAssignment_1 )? ) )
            // InternalOpenCypherParser.g:10041:1: ( ( rule__With__DistintAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:10041:1: ( ( rule__With__DistintAssignment_1 )? )
            // InternalOpenCypherParser.g:10042:2: ( rule__With__DistintAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getDistintAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10043:2: ( rule__With__DistintAssignment_1 )?
            int alt71=2;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // InternalOpenCypherParser.g:10043:3: rule__With__DistintAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__With__DistintAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getDistintAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__1__Impl"


    // $ANTLR start "rule__With__Group__2"
    // InternalOpenCypherParser.g:10051:1: rule__With__Group__2 : rule__With__Group__2__Impl rule__With__Group__3 ;
    public final void rule__With__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10055:1: ( rule__With__Group__2__Impl rule__With__Group__3 )
            // InternalOpenCypherParser.g:10056:2: rule__With__Group__2__Impl rule__With__Group__3
            {
            pushFollow(FOLLOW_57);
            rule__With__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__With__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__2"


    // $ANTLR start "rule__With__Group__2__Impl"
    // InternalOpenCypherParser.g:10063:1: rule__With__Group__2__Impl : ( ( rule__With__ReturnBodyAssignment_2 ) ) ;
    public final void rule__With__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10067:1: ( ( ( rule__With__ReturnBodyAssignment_2 ) ) )
            // InternalOpenCypherParser.g:10068:1: ( ( rule__With__ReturnBodyAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:10068:1: ( ( rule__With__ReturnBodyAssignment_2 ) )
            // InternalOpenCypherParser.g:10069:2: ( rule__With__ReturnBodyAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getReturnBodyAssignment_2()); 
            }
            // InternalOpenCypherParser.g:10070:2: ( rule__With__ReturnBodyAssignment_2 )
            // InternalOpenCypherParser.g:10070:3: rule__With__ReturnBodyAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__With__ReturnBodyAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getReturnBodyAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__2__Impl"


    // $ANTLR start "rule__With__Group__3"
    // InternalOpenCypherParser.g:10078:1: rule__With__Group__3 : rule__With__Group__3__Impl ;
    public final void rule__With__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10082:1: ( rule__With__Group__3__Impl )
            // InternalOpenCypherParser.g:10083:2: rule__With__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__With__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__3"


    // $ANTLR start "rule__With__Group__3__Impl"
    // InternalOpenCypherParser.g:10089:1: rule__With__Group__3__Impl : ( ( rule__With__WhereAssignment_3 )? ) ;
    public final void rule__With__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10093:1: ( ( ( rule__With__WhereAssignment_3 )? ) )
            // InternalOpenCypherParser.g:10094:1: ( ( rule__With__WhereAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:10094:1: ( ( rule__With__WhereAssignment_3 )? )
            // InternalOpenCypherParser.g:10095:2: ( rule__With__WhereAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getWhereAssignment_3()); 
            }
            // InternalOpenCypherParser.g:10096:2: ( rule__With__WhereAssignment_3 )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==WHERE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalOpenCypherParser.g:10096:3: rule__With__WhereAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__With__WhereAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getWhereAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__Group__3__Impl"


    // $ANTLR start "rule__Return__Group__0"
    // InternalOpenCypherParser.g:10105:1: rule__Return__Group__0 : rule__Return__Group__0__Impl rule__Return__Group__1 ;
    public final void rule__Return__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10109:1: ( rule__Return__Group__0__Impl rule__Return__Group__1 )
            // InternalOpenCypherParser.g:10110:2: rule__Return__Group__0__Impl rule__Return__Group__1
            {
            pushFollow(FOLLOW_56);
            rule__Return__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Return__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__0"


    // $ANTLR start "rule__Return__Group__0__Impl"
    // InternalOpenCypherParser.g:10117:1: rule__Return__Group__0__Impl : ( ( rule__Return__ReturnAssignment_0 ) ) ;
    public final void rule__Return__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10121:1: ( ( ( rule__Return__ReturnAssignment_0 ) ) )
            // InternalOpenCypherParser.g:10122:1: ( ( rule__Return__ReturnAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:10122:1: ( ( rule__Return__ReturnAssignment_0 ) )
            // InternalOpenCypherParser.g:10123:2: ( rule__Return__ReturnAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getReturnAssignment_0()); 
            }
            // InternalOpenCypherParser.g:10124:2: ( rule__Return__ReturnAssignment_0 )
            // InternalOpenCypherParser.g:10124:3: rule__Return__ReturnAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Return__ReturnAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getReturnAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__0__Impl"


    // $ANTLR start "rule__Return__Group__1"
    // InternalOpenCypherParser.g:10132:1: rule__Return__Group__1 : rule__Return__Group__1__Impl rule__Return__Group__2 ;
    public final void rule__Return__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10136:1: ( rule__Return__Group__1__Impl rule__Return__Group__2 )
            // InternalOpenCypherParser.g:10137:2: rule__Return__Group__1__Impl rule__Return__Group__2
            {
            pushFollow(FOLLOW_56);
            rule__Return__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Return__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__1"


    // $ANTLR start "rule__Return__Group__1__Impl"
    // InternalOpenCypherParser.g:10144:1: rule__Return__Group__1__Impl : ( ( rule__Return__DistinctAssignment_1 )? ) ;
    public final void rule__Return__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10148:1: ( ( ( rule__Return__DistinctAssignment_1 )? ) )
            // InternalOpenCypherParser.g:10149:1: ( ( rule__Return__DistinctAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:10149:1: ( ( rule__Return__DistinctAssignment_1 )? )
            // InternalOpenCypherParser.g:10150:2: ( rule__Return__DistinctAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getDistinctAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10151:2: ( rule__Return__DistinctAssignment_1 )?
            int alt73=2;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // InternalOpenCypherParser.g:10151:3: rule__Return__DistinctAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Return__DistinctAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getDistinctAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__1__Impl"


    // $ANTLR start "rule__Return__Group__2"
    // InternalOpenCypherParser.g:10159:1: rule__Return__Group__2 : rule__Return__Group__2__Impl ;
    public final void rule__Return__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10163:1: ( rule__Return__Group__2__Impl )
            // InternalOpenCypherParser.g:10164:2: rule__Return__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Return__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__2"


    // $ANTLR start "rule__Return__Group__2__Impl"
    // InternalOpenCypherParser.g:10170:1: rule__Return__Group__2__Impl : ( ( rule__Return__BodyAssignment_2 ) ) ;
    public final void rule__Return__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10174:1: ( ( ( rule__Return__BodyAssignment_2 ) ) )
            // InternalOpenCypherParser.g:10175:1: ( ( rule__Return__BodyAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:10175:1: ( ( rule__Return__BodyAssignment_2 ) )
            // InternalOpenCypherParser.g:10176:2: ( rule__Return__BodyAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getBodyAssignment_2()); 
            }
            // InternalOpenCypherParser.g:10177:2: ( rule__Return__BodyAssignment_2 )
            // InternalOpenCypherParser.g:10177:3: rule__Return__BodyAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Return__BodyAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getBodyAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__Group__2__Impl"


    // $ANTLR start "rule__ReturnBody__Group__0"
    // InternalOpenCypherParser.g:10186:1: rule__ReturnBody__Group__0 : rule__ReturnBody__Group__0__Impl rule__ReturnBody__Group__1 ;
    public final void rule__ReturnBody__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10190:1: ( rule__ReturnBody__Group__0__Impl rule__ReturnBody__Group__1 )
            // InternalOpenCypherParser.g:10191:2: rule__ReturnBody__Group__0__Impl rule__ReturnBody__Group__1
            {
            pushFollow(FOLLOW_58);
            rule__ReturnBody__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__0"


    // $ANTLR start "rule__ReturnBody__Group__0__Impl"
    // InternalOpenCypherParser.g:10198:1: rule__ReturnBody__Group__0__Impl : ( ( rule__ReturnBody__ReturnItemsAssignment_0 ) ) ;
    public final void rule__ReturnBody__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10202:1: ( ( ( rule__ReturnBody__ReturnItemsAssignment_0 ) ) )
            // InternalOpenCypherParser.g:10203:1: ( ( rule__ReturnBody__ReturnItemsAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:10203:1: ( ( rule__ReturnBody__ReturnItemsAssignment_0 ) )
            // InternalOpenCypherParser.g:10204:2: ( rule__ReturnBody__ReturnItemsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_0()); 
            }
            // InternalOpenCypherParser.g:10205:2: ( rule__ReturnBody__ReturnItemsAssignment_0 )
            // InternalOpenCypherParser.g:10205:3: rule__ReturnBody__ReturnItemsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnBody__ReturnItemsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getReturnItemsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__0__Impl"


    // $ANTLR start "rule__ReturnBody__Group__1"
    // InternalOpenCypherParser.g:10213:1: rule__ReturnBody__Group__1 : rule__ReturnBody__Group__1__Impl rule__ReturnBody__Group__2 ;
    public final void rule__ReturnBody__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10217:1: ( rule__ReturnBody__Group__1__Impl rule__ReturnBody__Group__2 )
            // InternalOpenCypherParser.g:10218:2: rule__ReturnBody__Group__1__Impl rule__ReturnBody__Group__2
            {
            pushFollow(FOLLOW_58);
            rule__ReturnBody__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__1"


    // $ANTLR start "rule__ReturnBody__Group__1__Impl"
    // InternalOpenCypherParser.g:10225:1: rule__ReturnBody__Group__1__Impl : ( ( rule__ReturnBody__OrderAssignment_1 )? ) ;
    public final void rule__ReturnBody__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10229:1: ( ( ( rule__ReturnBody__OrderAssignment_1 )? ) )
            // InternalOpenCypherParser.g:10230:1: ( ( rule__ReturnBody__OrderAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:10230:1: ( ( rule__ReturnBody__OrderAssignment_1 )? )
            // InternalOpenCypherParser.g:10231:2: ( rule__ReturnBody__OrderAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getOrderAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10232:2: ( rule__ReturnBody__OrderAssignment_1 )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ORDER) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // InternalOpenCypherParser.g:10232:3: rule__ReturnBody__OrderAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__OrderAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getOrderAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__1__Impl"


    // $ANTLR start "rule__ReturnBody__Group__2"
    // InternalOpenCypherParser.g:10240:1: rule__ReturnBody__Group__2 : rule__ReturnBody__Group__2__Impl rule__ReturnBody__Group__3 ;
    public final void rule__ReturnBody__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10244:1: ( rule__ReturnBody__Group__2__Impl rule__ReturnBody__Group__3 )
            // InternalOpenCypherParser.g:10245:2: rule__ReturnBody__Group__2__Impl rule__ReturnBody__Group__3
            {
            pushFollow(FOLLOW_58);
            rule__ReturnBody__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__2"


    // $ANTLR start "rule__ReturnBody__Group__2__Impl"
    // InternalOpenCypherParser.g:10252:1: rule__ReturnBody__Group__2__Impl : ( ( rule__ReturnBody__SkipAssignment_2 )? ) ;
    public final void rule__ReturnBody__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10256:1: ( ( ( rule__ReturnBody__SkipAssignment_2 )? ) )
            // InternalOpenCypherParser.g:10257:1: ( ( rule__ReturnBody__SkipAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:10257:1: ( ( rule__ReturnBody__SkipAssignment_2 )? )
            // InternalOpenCypherParser.g:10258:2: ( rule__ReturnBody__SkipAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getSkipAssignment_2()); 
            }
            // InternalOpenCypherParser.g:10259:2: ( rule__ReturnBody__SkipAssignment_2 )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==SKIP) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // InternalOpenCypherParser.g:10259:3: rule__ReturnBody__SkipAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__SkipAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getSkipAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__2__Impl"


    // $ANTLR start "rule__ReturnBody__Group__3"
    // InternalOpenCypherParser.g:10267:1: rule__ReturnBody__Group__3 : rule__ReturnBody__Group__3__Impl ;
    public final void rule__ReturnBody__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10271:1: ( rule__ReturnBody__Group__3__Impl )
            // InternalOpenCypherParser.g:10272:2: rule__ReturnBody__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnBody__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__3"


    // $ANTLR start "rule__ReturnBody__Group__3__Impl"
    // InternalOpenCypherParser.g:10278:1: rule__ReturnBody__Group__3__Impl : ( ( rule__ReturnBody__LimitAssignment_3 )? ) ;
    public final void rule__ReturnBody__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10282:1: ( ( ( rule__ReturnBody__LimitAssignment_3 )? ) )
            // InternalOpenCypherParser.g:10283:1: ( ( rule__ReturnBody__LimitAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:10283:1: ( ( rule__ReturnBody__LimitAssignment_3 )? )
            // InternalOpenCypherParser.g:10284:2: ( rule__ReturnBody__LimitAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getLimitAssignment_3()); 
            }
            // InternalOpenCypherParser.g:10285:2: ( rule__ReturnBody__LimitAssignment_3 )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LIMIT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalOpenCypherParser.g:10285:3: rule__ReturnBody__LimitAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnBody__LimitAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getLimitAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__Group__3__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0__0"
    // InternalOpenCypherParser.g:10294:1: rule__ReturnItems__Group_0__0 : rule__ReturnItems__Group_0__0__Impl rule__ReturnItems__Group_0__1 ;
    public final void rule__ReturnItems__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10298:1: ( rule__ReturnItems__Group_0__0__Impl rule__ReturnItems__Group_0__1 )
            // InternalOpenCypherParser.g:10299:2: rule__ReturnItems__Group_0__0__Impl rule__ReturnItems__Group_0__1
            {
            pushFollow(FOLLOW_59);
            rule__ReturnItems__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__0"


    // $ANTLR start "rule__ReturnItems__Group_0__0__Impl"
    // InternalOpenCypherParser.g:10306:1: rule__ReturnItems__Group_0__0__Impl : ( () ) ;
    public final void rule__ReturnItems__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10310:1: ( ( () ) )
            // InternalOpenCypherParser.g:10311:1: ( () )
            {
            // InternalOpenCypherParser.g:10311:1: ( () )
            // InternalOpenCypherParser.g:10312:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0()); 
            }
            // InternalOpenCypherParser.g:10313:2: ()
            // InternalOpenCypherParser.g:10313:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getReturnItemsAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0__1"
    // InternalOpenCypherParser.g:10321:1: rule__ReturnItems__Group_0__1 : rule__ReturnItems__Group_0__1__Impl ;
    public final void rule__ReturnItems__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10325:1: ( rule__ReturnItems__Group_0__1__Impl )
            // InternalOpenCypherParser.g:10326:2: rule__ReturnItems__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__1"


    // $ANTLR start "rule__ReturnItems__Group_0__1__Impl"
    // InternalOpenCypherParser.g:10332:1: rule__ReturnItems__Group_0__1__Impl : ( ( rule__ReturnItems__Group_0_1__0 ) ) ;
    public final void rule__ReturnItems__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10336:1: ( ( ( rule__ReturnItems__Group_0_1__0 ) ) )
            // InternalOpenCypherParser.g:10337:1: ( ( rule__ReturnItems__Group_0_1__0 ) )
            {
            // InternalOpenCypherParser.g:10337:1: ( ( rule__ReturnItems__Group_0_1__0 ) )
            // InternalOpenCypherParser.g:10338:2: ( rule__ReturnItems__Group_0_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getGroup_0_1()); 
            }
            // InternalOpenCypherParser.g:10339:2: ( rule__ReturnItems__Group_0_1__0 )
            // InternalOpenCypherParser.g:10339:3: rule__ReturnItems__Group_0_1__0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1__0"
    // InternalOpenCypherParser.g:10348:1: rule__ReturnItems__Group_0_1__0 : rule__ReturnItems__Group_0_1__0__Impl rule__ReturnItems__Group_0_1__1 ;
    public final void rule__ReturnItems__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10352:1: ( rule__ReturnItems__Group_0_1__0__Impl rule__ReturnItems__Group_0_1__1 )
            // InternalOpenCypherParser.g:10353:2: rule__ReturnItems__Group_0_1__0__Impl rule__ReturnItems__Group_0_1__1
            {
            pushFollow(FOLLOW_48);
            rule__ReturnItems__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__0"


    // $ANTLR start "rule__ReturnItems__Group_0_1__0__Impl"
    // InternalOpenCypherParser.g:10360:1: rule__ReturnItems__Group_0_1__0__Impl : ( ( rule__ReturnItems__AllAssignment_0_1_0 ) ) ;
    public final void rule__ReturnItems__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10364:1: ( ( ( rule__ReturnItems__AllAssignment_0_1_0 ) ) )
            // InternalOpenCypherParser.g:10365:1: ( ( rule__ReturnItems__AllAssignment_0_1_0 ) )
            {
            // InternalOpenCypherParser.g:10365:1: ( ( rule__ReturnItems__AllAssignment_0_1_0 ) )
            // InternalOpenCypherParser.g:10366:2: ( rule__ReturnItems__AllAssignment_0_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0()); 
            }
            // InternalOpenCypherParser.g:10367:2: ( rule__ReturnItems__AllAssignment_0_1_0 )
            // InternalOpenCypherParser.g:10367:3: rule__ReturnItems__AllAssignment_0_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__AllAssignment_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAllAssignment_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1__1"
    // InternalOpenCypherParser.g:10375:1: rule__ReturnItems__Group_0_1__1 : rule__ReturnItems__Group_0_1__1__Impl ;
    public final void rule__ReturnItems__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10379:1: ( rule__ReturnItems__Group_0_1__1__Impl )
            // InternalOpenCypherParser.g:10380:2: rule__ReturnItems__Group_0_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__1"


    // $ANTLR start "rule__ReturnItems__Group_0_1__1__Impl"
    // InternalOpenCypherParser.g:10386:1: rule__ReturnItems__Group_0_1__1__Impl : ( ( rule__ReturnItems__Group_0_1_1__0 )* ) ;
    public final void rule__ReturnItems__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10390:1: ( ( ( rule__ReturnItems__Group_0_1_1__0 )* ) )
            // InternalOpenCypherParser.g:10391:1: ( ( rule__ReturnItems__Group_0_1_1__0 )* )
            {
            // InternalOpenCypherParser.g:10391:1: ( ( rule__ReturnItems__Group_0_1_1__0 )* )
            // InternalOpenCypherParser.g:10392:2: ( rule__ReturnItems__Group_0_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getGroup_0_1_1()); 
            }
            // InternalOpenCypherParser.g:10393:2: ( rule__ReturnItems__Group_0_1_1__0 )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==Comma) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // InternalOpenCypherParser.g:10393:3: rule__ReturnItems__Group_0_1_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__ReturnItems__Group_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getGroup_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__0"
    // InternalOpenCypherParser.g:10402:1: rule__ReturnItems__Group_0_1_1__0 : rule__ReturnItems__Group_0_1_1__0__Impl rule__ReturnItems__Group_0_1_1__1 ;
    public final void rule__ReturnItems__Group_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10406:1: ( rule__ReturnItems__Group_0_1_1__0__Impl rule__ReturnItems__Group_0_1_1__1 )
            // InternalOpenCypherParser.g:10407:2: rule__ReturnItems__Group_0_1_1__0__Impl rule__ReturnItems__Group_0_1_1__1
            {
            pushFollow(FOLLOW_56);
            rule__ReturnItems__Group_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__0"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__0__Impl"
    // InternalOpenCypherParser.g:10414:1: rule__ReturnItems__Group_0_1_1__0__Impl : ( Comma ) ;
    public final void rule__ReturnItems__Group_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10418:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:10419:1: ( Comma )
            {
            // InternalOpenCypherParser.g:10419:1: ( Comma )
            // InternalOpenCypherParser.g:10420:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getCommaKeyword_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__1"
    // InternalOpenCypherParser.g:10429:1: rule__ReturnItems__Group_0_1_1__1 : rule__ReturnItems__Group_0_1_1__1__Impl ;
    public final void rule__ReturnItems__Group_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10433:1: ( rule__ReturnItems__Group_0_1_1__1__Impl )
            // InternalOpenCypherParser.g:10434:2: rule__ReturnItems__Group_0_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__1"


    // $ANTLR start "rule__ReturnItems__Group_0_1_1__1__Impl"
    // InternalOpenCypherParser.g:10440:1: rule__ReturnItems__Group_0_1_1__1__Impl : ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) ) ;
    public final void rule__ReturnItems__Group_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10444:1: ( ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) ) )
            // InternalOpenCypherParser.g:10445:1: ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:10445:1: ( ( rule__ReturnItems__ItemsAssignment_0_1_1_1 ) )
            // InternalOpenCypherParser.g:10446:2: ( rule__ReturnItems__ItemsAssignment_0_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1()); 
            }
            // InternalOpenCypherParser.g:10447:2: ( rule__ReturnItems__ItemsAssignment_0_1_1_1 )
            // InternalOpenCypherParser.g:10447:3: rule__ReturnItems__ItemsAssignment_0_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__ItemsAssignment_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsAssignment_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_0_1_1__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1__0"
    // InternalOpenCypherParser.g:10456:1: rule__ReturnItems__Group_1__0 : rule__ReturnItems__Group_1__0__Impl rule__ReturnItems__Group_1__1 ;
    public final void rule__ReturnItems__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10460:1: ( rule__ReturnItems__Group_1__0__Impl rule__ReturnItems__Group_1__1 )
            // InternalOpenCypherParser.g:10461:2: rule__ReturnItems__Group_1__0__Impl rule__ReturnItems__Group_1__1
            {
            pushFollow(FOLLOW_48);
            rule__ReturnItems__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__0"


    // $ANTLR start "rule__ReturnItems__Group_1__0__Impl"
    // InternalOpenCypherParser.g:10468:1: rule__ReturnItems__Group_1__0__Impl : ( ( rule__ReturnItems__ItemsAssignment_1_0 ) ) ;
    public final void rule__ReturnItems__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10472:1: ( ( ( rule__ReturnItems__ItemsAssignment_1_0 ) ) )
            // InternalOpenCypherParser.g:10473:1: ( ( rule__ReturnItems__ItemsAssignment_1_0 ) )
            {
            // InternalOpenCypherParser.g:10473:1: ( ( rule__ReturnItems__ItemsAssignment_1_0 ) )
            // InternalOpenCypherParser.g:10474:2: ( rule__ReturnItems__ItemsAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:10475:2: ( rule__ReturnItems__ItemsAssignment_1_0 )
            // InternalOpenCypherParser.g:10475:3: rule__ReturnItems__ItemsAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__ItemsAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1__1"
    // InternalOpenCypherParser.g:10483:1: rule__ReturnItems__Group_1__1 : rule__ReturnItems__Group_1__1__Impl ;
    public final void rule__ReturnItems__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10487:1: ( rule__ReturnItems__Group_1__1__Impl )
            // InternalOpenCypherParser.g:10488:2: rule__ReturnItems__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__1"


    // $ANTLR start "rule__ReturnItems__Group_1__1__Impl"
    // InternalOpenCypherParser.g:10494:1: rule__ReturnItems__Group_1__1__Impl : ( ( rule__ReturnItems__Group_1_1__0 )* ) ;
    public final void rule__ReturnItems__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10498:1: ( ( ( rule__ReturnItems__Group_1_1__0 )* ) )
            // InternalOpenCypherParser.g:10499:1: ( ( rule__ReturnItems__Group_1_1__0 )* )
            {
            // InternalOpenCypherParser.g:10499:1: ( ( rule__ReturnItems__Group_1_1__0 )* )
            // InternalOpenCypherParser.g:10500:2: ( rule__ReturnItems__Group_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getGroup_1_1()); 
            }
            // InternalOpenCypherParser.g:10501:2: ( rule__ReturnItems__Group_1_1__0 )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==Comma) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // InternalOpenCypherParser.g:10501:3: rule__ReturnItems__Group_1_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__ReturnItems__Group_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1__1__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1_1__0"
    // InternalOpenCypherParser.g:10510:1: rule__ReturnItems__Group_1_1__0 : rule__ReturnItems__Group_1_1__0__Impl rule__ReturnItems__Group_1_1__1 ;
    public final void rule__ReturnItems__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10514:1: ( rule__ReturnItems__Group_1_1__0__Impl rule__ReturnItems__Group_1_1__1 )
            // InternalOpenCypherParser.g:10515:2: rule__ReturnItems__Group_1_1__0__Impl rule__ReturnItems__Group_1_1__1
            {
            pushFollow(FOLLOW_56);
            rule__ReturnItems__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__0"


    // $ANTLR start "rule__ReturnItems__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:10522:1: rule__ReturnItems__Group_1_1__0__Impl : ( Comma ) ;
    public final void rule__ReturnItems__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10526:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:10527:1: ( Comma )
            {
            // InternalOpenCypherParser.g:10527:1: ( Comma )
            // InternalOpenCypherParser.g:10528:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getCommaKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__0__Impl"


    // $ANTLR start "rule__ReturnItems__Group_1_1__1"
    // InternalOpenCypherParser.g:10537:1: rule__ReturnItems__Group_1_1__1 : rule__ReturnItems__Group_1_1__1__Impl ;
    public final void rule__ReturnItems__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10541:1: ( rule__ReturnItems__Group_1_1__1__Impl )
            // InternalOpenCypherParser.g:10542:2: rule__ReturnItems__Group_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__1"


    // $ANTLR start "rule__ReturnItems__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:10548:1: rule__ReturnItems__Group_1_1__1__Impl : ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) ) ;
    public final void rule__ReturnItems__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10552:1: ( ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) ) )
            // InternalOpenCypherParser.g:10553:1: ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:10553:1: ( ( rule__ReturnItems__ItemsAssignment_1_1_1 ) )
            // InternalOpenCypherParser.g:10554:2: ( rule__ReturnItems__ItemsAssignment_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1()); 
            }
            // InternalOpenCypherParser.g:10555:2: ( rule__ReturnItems__ItemsAssignment_1_1_1 )
            // InternalOpenCypherParser.g:10555:3: rule__ReturnItems__ItemsAssignment_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItems__ItemsAssignment_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__Group_1_1__1__Impl"


    // $ANTLR start "rule__ReturnItem__Group__0"
    // InternalOpenCypherParser.g:10564:1: rule__ReturnItem__Group__0 : rule__ReturnItem__Group__0__Impl rule__ReturnItem__Group__1 ;
    public final void rule__ReturnItem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10568:1: ( rule__ReturnItem__Group__0__Impl rule__ReturnItem__Group__1 )
            // InternalOpenCypherParser.g:10569:2: rule__ReturnItem__Group__0__Impl rule__ReturnItem__Group__1
            {
            pushFollow(FOLLOW_37);
            rule__ReturnItem__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__0"


    // $ANTLR start "rule__ReturnItem__Group__0__Impl"
    // InternalOpenCypherParser.g:10576:1: rule__ReturnItem__Group__0__Impl : ( ( rule__ReturnItem__ExpressionAssignment_0 ) ) ;
    public final void rule__ReturnItem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10580:1: ( ( ( rule__ReturnItem__ExpressionAssignment_0 ) ) )
            // InternalOpenCypherParser.g:10581:1: ( ( rule__ReturnItem__ExpressionAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:10581:1: ( ( rule__ReturnItem__ExpressionAssignment_0 ) )
            // InternalOpenCypherParser.g:10582:2: ( rule__ReturnItem__ExpressionAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getExpressionAssignment_0()); 
            }
            // InternalOpenCypherParser.g:10583:2: ( rule__ReturnItem__ExpressionAssignment_0 )
            // InternalOpenCypherParser.g:10583:3: rule__ReturnItem__ExpressionAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__ExpressionAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getExpressionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__0__Impl"


    // $ANTLR start "rule__ReturnItem__Group__1"
    // InternalOpenCypherParser.g:10591:1: rule__ReturnItem__Group__1 : rule__ReturnItem__Group__1__Impl ;
    public final void rule__ReturnItem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10595:1: ( rule__ReturnItem__Group__1__Impl )
            // InternalOpenCypherParser.g:10596:2: rule__ReturnItem__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__1"


    // $ANTLR start "rule__ReturnItem__Group__1__Impl"
    // InternalOpenCypherParser.g:10602:1: rule__ReturnItem__Group__1__Impl : ( ( rule__ReturnItem__Group_1__0 )? ) ;
    public final void rule__ReturnItem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10606:1: ( ( ( rule__ReturnItem__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:10607:1: ( ( rule__ReturnItem__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:10607:1: ( ( rule__ReturnItem__Group_1__0 )? )
            // InternalOpenCypherParser.g:10608:2: ( rule__ReturnItem__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:10609:2: ( rule__ReturnItem__Group_1__0 )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalOpenCypherParser.g:10609:3: rule__ReturnItem__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ReturnItem__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group__1__Impl"


    // $ANTLR start "rule__ReturnItem__Group_1__0"
    // InternalOpenCypherParser.g:10618:1: rule__ReturnItem__Group_1__0 : rule__ReturnItem__Group_1__0__Impl rule__ReturnItem__Group_1__1 ;
    public final void rule__ReturnItem__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10622:1: ( rule__ReturnItem__Group_1__0__Impl rule__ReturnItem__Group_1__1 )
            // InternalOpenCypherParser.g:10623:2: rule__ReturnItem__Group_1__0__Impl rule__ReturnItem__Group_1__1
            {
            pushFollow(FOLLOW_9);
            rule__ReturnItem__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__0"


    // $ANTLR start "rule__ReturnItem__Group_1__0__Impl"
    // InternalOpenCypherParser.g:10630:1: rule__ReturnItem__Group_1__0__Impl : ( AS ) ;
    public final void rule__ReturnItem__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10634:1: ( ( AS ) )
            // InternalOpenCypherParser.g:10635:1: ( AS )
            {
            // InternalOpenCypherParser.g:10635:1: ( AS )
            // InternalOpenCypherParser.g:10636:2: AS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getASKeyword_1_0()); 
            }
            match(input,AS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getASKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__0__Impl"


    // $ANTLR start "rule__ReturnItem__Group_1__1"
    // InternalOpenCypherParser.g:10645:1: rule__ReturnItem__Group_1__1 : rule__ReturnItem__Group_1__1__Impl ;
    public final void rule__ReturnItem__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10649:1: ( rule__ReturnItem__Group_1__1__Impl )
            // InternalOpenCypherParser.g:10650:2: rule__ReturnItem__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__1"


    // $ANTLR start "rule__ReturnItem__Group_1__1__Impl"
    // InternalOpenCypherParser.g:10656:1: rule__ReturnItem__Group_1__1__Impl : ( ( rule__ReturnItem__AliasAssignment_1_1 ) ) ;
    public final void rule__ReturnItem__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10660:1: ( ( ( rule__ReturnItem__AliasAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:10661:1: ( ( rule__ReturnItem__AliasAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:10661:1: ( ( rule__ReturnItem__AliasAssignment_1_1 ) )
            // InternalOpenCypherParser.g:10662:2: ( rule__ReturnItem__AliasAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:10663:2: ( rule__ReturnItem__AliasAssignment_1_1 )
            // InternalOpenCypherParser.g:10663:3: rule__ReturnItem__AliasAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ReturnItem__AliasAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getAliasAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__Group_1__1__Impl"


    // $ANTLR start "rule__Order__Group__0"
    // InternalOpenCypherParser.g:10672:1: rule__Order__Group__0 : rule__Order__Group__0__Impl rule__Order__Group__1 ;
    public final void rule__Order__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10676:1: ( rule__Order__Group__0__Impl rule__Order__Group__1 )
            // InternalOpenCypherParser.g:10677:2: rule__Order__Group__0__Impl rule__Order__Group__1
            {
            pushFollow(FOLLOW_60);
            rule__Order__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__0"


    // $ANTLR start "rule__Order__Group__0__Impl"
    // InternalOpenCypherParser.g:10684:1: rule__Order__Group__0__Impl : ( ORDER ) ;
    public final void rule__Order__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10688:1: ( ( ORDER ) )
            // InternalOpenCypherParser.g:10689:1: ( ORDER )
            {
            // InternalOpenCypherParser.g:10689:1: ( ORDER )
            // InternalOpenCypherParser.g:10690:2: ORDER
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getORDERKeyword_0()); 
            }
            match(input,ORDER,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getORDERKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__0__Impl"


    // $ANTLR start "rule__Order__Group__1"
    // InternalOpenCypherParser.g:10699:1: rule__Order__Group__1 : rule__Order__Group__1__Impl rule__Order__Group__2 ;
    public final void rule__Order__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10703:1: ( rule__Order__Group__1__Impl rule__Order__Group__2 )
            // InternalOpenCypherParser.g:10704:2: rule__Order__Group__1__Impl rule__Order__Group__2
            {
            pushFollow(FOLLOW_36);
            rule__Order__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__1"


    // $ANTLR start "rule__Order__Group__1__Impl"
    // InternalOpenCypherParser.g:10711:1: rule__Order__Group__1__Impl : ( BY ) ;
    public final void rule__Order__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10715:1: ( ( BY ) )
            // InternalOpenCypherParser.g:10716:1: ( BY )
            {
            // InternalOpenCypherParser.g:10716:1: ( BY )
            // InternalOpenCypherParser.g:10717:2: BY
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getBYKeyword_1()); 
            }
            match(input,BY,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getBYKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__1__Impl"


    // $ANTLR start "rule__Order__Group__2"
    // InternalOpenCypherParser.g:10726:1: rule__Order__Group__2 : rule__Order__Group__2__Impl rule__Order__Group__3 ;
    public final void rule__Order__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10730:1: ( rule__Order__Group__2__Impl rule__Order__Group__3 )
            // InternalOpenCypherParser.g:10731:2: rule__Order__Group__2__Impl rule__Order__Group__3
            {
            pushFollow(FOLLOW_48);
            rule__Order__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__2"


    // $ANTLR start "rule__Order__Group__2__Impl"
    // InternalOpenCypherParser.g:10738:1: rule__Order__Group__2__Impl : ( ( rule__Order__OrderByAssignment_2 ) ) ;
    public final void rule__Order__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10742:1: ( ( ( rule__Order__OrderByAssignment_2 ) ) )
            // InternalOpenCypherParser.g:10743:1: ( ( rule__Order__OrderByAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:10743:1: ( ( rule__Order__OrderByAssignment_2 ) )
            // InternalOpenCypherParser.g:10744:2: ( rule__Order__OrderByAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderByAssignment_2()); 
            }
            // InternalOpenCypherParser.g:10745:2: ( rule__Order__OrderByAssignment_2 )
            // InternalOpenCypherParser.g:10745:3: rule__Order__OrderByAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Order__OrderByAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderByAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__2__Impl"


    // $ANTLR start "rule__Order__Group__3"
    // InternalOpenCypherParser.g:10753:1: rule__Order__Group__3 : rule__Order__Group__3__Impl ;
    public final void rule__Order__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10757:1: ( rule__Order__Group__3__Impl )
            // InternalOpenCypherParser.g:10758:2: rule__Order__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Order__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__3"


    // $ANTLR start "rule__Order__Group__3__Impl"
    // InternalOpenCypherParser.g:10764:1: rule__Order__Group__3__Impl : ( ( rule__Order__Group_3__0 )* ) ;
    public final void rule__Order__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10768:1: ( ( ( rule__Order__Group_3__0 )* ) )
            // InternalOpenCypherParser.g:10769:1: ( ( rule__Order__Group_3__0 )* )
            {
            // InternalOpenCypherParser.g:10769:1: ( ( rule__Order__Group_3__0 )* )
            // InternalOpenCypherParser.g:10770:2: ( rule__Order__Group_3__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getGroup_3()); 
            }
            // InternalOpenCypherParser.g:10771:2: ( rule__Order__Group_3__0 )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==Comma) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // InternalOpenCypherParser.g:10771:3: rule__Order__Group_3__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Order__Group_3__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group__3__Impl"


    // $ANTLR start "rule__Order__Group_3__0"
    // InternalOpenCypherParser.g:10780:1: rule__Order__Group_3__0 : rule__Order__Group_3__0__Impl rule__Order__Group_3__1 ;
    public final void rule__Order__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10784:1: ( rule__Order__Group_3__0__Impl rule__Order__Group_3__1 )
            // InternalOpenCypherParser.g:10785:2: rule__Order__Group_3__0__Impl rule__Order__Group_3__1
            {
            pushFollow(FOLLOW_36);
            rule__Order__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Order__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__0"


    // $ANTLR start "rule__Order__Group_3__0__Impl"
    // InternalOpenCypherParser.g:10792:1: rule__Order__Group_3__0__Impl : ( Comma ) ;
    public final void rule__Order__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10796:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:10797:1: ( Comma )
            {
            // InternalOpenCypherParser.g:10797:1: ( Comma )
            // InternalOpenCypherParser.g:10798:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getCommaKeyword_3_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getCommaKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__0__Impl"


    // $ANTLR start "rule__Order__Group_3__1"
    // InternalOpenCypherParser.g:10807:1: rule__Order__Group_3__1 : rule__Order__Group_3__1__Impl ;
    public final void rule__Order__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10811:1: ( rule__Order__Group_3__1__Impl )
            // InternalOpenCypherParser.g:10812:2: rule__Order__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Order__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__1"


    // $ANTLR start "rule__Order__Group_3__1__Impl"
    // InternalOpenCypherParser.g:10818:1: rule__Order__Group_3__1__Impl : ( ( rule__Order__OrderByAssignment_3_1 ) ) ;
    public final void rule__Order__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10822:1: ( ( ( rule__Order__OrderByAssignment_3_1 ) ) )
            // InternalOpenCypherParser.g:10823:1: ( ( rule__Order__OrderByAssignment_3_1 ) )
            {
            // InternalOpenCypherParser.g:10823:1: ( ( rule__Order__OrderByAssignment_3_1 ) )
            // InternalOpenCypherParser.g:10824:2: ( rule__Order__OrderByAssignment_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderByAssignment_3_1()); 
            }
            // InternalOpenCypherParser.g:10825:2: ( rule__Order__OrderByAssignment_3_1 )
            // InternalOpenCypherParser.g:10825:3: rule__Order__OrderByAssignment_3_1
            {
            pushFollow(FOLLOW_2);
            rule__Order__OrderByAssignment_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderByAssignment_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__Group_3__1__Impl"


    // $ANTLR start "rule__Skip__Group__0"
    // InternalOpenCypherParser.g:10834:1: rule__Skip__Group__0 : rule__Skip__Group__0__Impl rule__Skip__Group__1 ;
    public final void rule__Skip__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10838:1: ( rule__Skip__Group__0__Impl rule__Skip__Group__1 )
            // InternalOpenCypherParser.g:10839:2: rule__Skip__Group__0__Impl rule__Skip__Group__1
            {
            pushFollow(FOLLOW_36);
            rule__Skip__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Skip__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__0"


    // $ANTLR start "rule__Skip__Group__0__Impl"
    // InternalOpenCypherParser.g:10846:1: rule__Skip__Group__0__Impl : ( SKIP ) ;
    public final void rule__Skip__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10850:1: ( ( SKIP ) )
            // InternalOpenCypherParser.g:10851:1: ( SKIP )
            {
            // InternalOpenCypherParser.g:10851:1: ( SKIP )
            // InternalOpenCypherParser.g:10852:2: SKIP
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getSKIPKeyword_0()); 
            }
            match(input,SKIP,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getSKIPKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__0__Impl"


    // $ANTLR start "rule__Skip__Group__1"
    // InternalOpenCypherParser.g:10861:1: rule__Skip__Group__1 : rule__Skip__Group__1__Impl ;
    public final void rule__Skip__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10865:1: ( rule__Skip__Group__1__Impl )
            // InternalOpenCypherParser.g:10866:2: rule__Skip__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Skip__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__1"


    // $ANTLR start "rule__Skip__Group__1__Impl"
    // InternalOpenCypherParser.g:10872:1: rule__Skip__Group__1__Impl : ( ( rule__Skip__SkipAssignment_1 ) ) ;
    public final void rule__Skip__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10876:1: ( ( ( rule__Skip__SkipAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10877:1: ( ( rule__Skip__SkipAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10877:1: ( ( rule__Skip__SkipAssignment_1 ) )
            // InternalOpenCypherParser.g:10878:2: ( rule__Skip__SkipAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getSkipAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10879:2: ( rule__Skip__SkipAssignment_1 )
            // InternalOpenCypherParser.g:10879:3: rule__Skip__SkipAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Skip__SkipAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getSkipAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__Group__1__Impl"


    // $ANTLR start "rule__Limit__Group__0"
    // InternalOpenCypherParser.g:10888:1: rule__Limit__Group__0 : rule__Limit__Group__0__Impl rule__Limit__Group__1 ;
    public final void rule__Limit__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10892:1: ( rule__Limit__Group__0__Impl rule__Limit__Group__1 )
            // InternalOpenCypherParser.g:10893:2: rule__Limit__Group__0__Impl rule__Limit__Group__1
            {
            pushFollow(FOLLOW_36);
            rule__Limit__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Limit__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__0"


    // $ANTLR start "rule__Limit__Group__0__Impl"
    // InternalOpenCypherParser.g:10900:1: rule__Limit__Group__0__Impl : ( LIMIT ) ;
    public final void rule__Limit__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10904:1: ( ( LIMIT ) )
            // InternalOpenCypherParser.g:10905:1: ( LIMIT )
            {
            // InternalOpenCypherParser.g:10905:1: ( LIMIT )
            // InternalOpenCypherParser.g:10906:2: LIMIT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getLIMITKeyword_0()); 
            }
            match(input,LIMIT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getLIMITKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__0__Impl"


    // $ANTLR start "rule__Limit__Group__1"
    // InternalOpenCypherParser.g:10915:1: rule__Limit__Group__1 : rule__Limit__Group__1__Impl ;
    public final void rule__Limit__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10919:1: ( rule__Limit__Group__1__Impl )
            // InternalOpenCypherParser.g:10920:2: rule__Limit__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Limit__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__1"


    // $ANTLR start "rule__Limit__Group__1__Impl"
    // InternalOpenCypherParser.g:10926:1: rule__Limit__Group__1__Impl : ( ( rule__Limit__LimitAssignment_1 ) ) ;
    public final void rule__Limit__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10930:1: ( ( ( rule__Limit__LimitAssignment_1 ) ) )
            // InternalOpenCypherParser.g:10931:1: ( ( rule__Limit__LimitAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:10931:1: ( ( rule__Limit__LimitAssignment_1 ) )
            // InternalOpenCypherParser.g:10932:2: ( rule__Limit__LimitAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getLimitAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10933:2: ( rule__Limit__LimitAssignment_1 )
            // InternalOpenCypherParser.g:10933:3: rule__Limit__LimitAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Limit__LimitAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getLimitAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__Group__1__Impl"


    // $ANTLR start "rule__SortItem__Group__0"
    // InternalOpenCypherParser.g:10942:1: rule__SortItem__Group__0 : rule__SortItem__Group__0__Impl rule__SortItem__Group__1 ;
    public final void rule__SortItem__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10946:1: ( rule__SortItem__Group__0__Impl rule__SortItem__Group__1 )
            // InternalOpenCypherParser.g:10947:2: rule__SortItem__Group__0__Impl rule__SortItem__Group__1
            {
            pushFollow(FOLLOW_61);
            rule__SortItem__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SortItem__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__0"


    // $ANTLR start "rule__SortItem__Group__0__Impl"
    // InternalOpenCypherParser.g:10954:1: rule__SortItem__Group__0__Impl : ( ( rule__SortItem__ExpressionAssignment_0 ) ) ;
    public final void rule__SortItem__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10958:1: ( ( ( rule__SortItem__ExpressionAssignment_0 ) ) )
            // InternalOpenCypherParser.g:10959:1: ( ( rule__SortItem__ExpressionAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:10959:1: ( ( rule__SortItem__ExpressionAssignment_0 ) )
            // InternalOpenCypherParser.g:10960:2: ( rule__SortItem__ExpressionAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getExpressionAssignment_0()); 
            }
            // InternalOpenCypherParser.g:10961:2: ( rule__SortItem__ExpressionAssignment_0 )
            // InternalOpenCypherParser.g:10961:3: rule__SortItem__ExpressionAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__ExpressionAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getExpressionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__0__Impl"


    // $ANTLR start "rule__SortItem__Group__1"
    // InternalOpenCypherParser.g:10969:1: rule__SortItem__Group__1 : rule__SortItem__Group__1__Impl ;
    public final void rule__SortItem__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10973:1: ( rule__SortItem__Group__1__Impl )
            // InternalOpenCypherParser.g:10974:2: rule__SortItem__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__1"


    // $ANTLR start "rule__SortItem__Group__1__Impl"
    // InternalOpenCypherParser.g:10980:1: rule__SortItem__Group__1__Impl : ( ( rule__SortItem__SortAssignment_1 )? ) ;
    public final void rule__SortItem__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:10984:1: ( ( ( rule__SortItem__SortAssignment_1 )? ) )
            // InternalOpenCypherParser.g:10985:1: ( ( rule__SortItem__SortAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:10985:1: ( ( rule__SortItem__SortAssignment_1 )? )
            // InternalOpenCypherParser.g:10986:2: ( rule__SortItem__SortAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getSortAssignment_1()); 
            }
            // InternalOpenCypherParser.g:10987:2: ( rule__SortItem__SortAssignment_1 )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=DESCENDING && LA81_0<=ASCENDING)||LA81_0==DESC||LA81_0==ASC) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // InternalOpenCypherParser.g:10987:3: rule__SortItem__SortAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__SortItem__SortAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getSortAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__Group__1__Impl"


    // $ANTLR start "rule__Hint__Group_0__0"
    // InternalOpenCypherParser.g:10996:1: rule__Hint__Group_0__0 : rule__Hint__Group_0__0__Impl rule__Hint__Group_0__1 ;
    public final void rule__Hint__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11000:1: ( rule__Hint__Group_0__0__Impl rule__Hint__Group_0__1 )
            // InternalOpenCypherParser.g:11001:2: rule__Hint__Group_0__0__Impl rule__Hint__Group_0__1
            {
            pushFollow(FOLLOW_62);
            rule__Hint__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__0"


    // $ANTLR start "rule__Hint__Group_0__0__Impl"
    // InternalOpenCypherParser.g:11008:1: rule__Hint__Group_0__0__Impl : ( () ) ;
    public final void rule__Hint__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11012:1: ( ( () ) )
            // InternalOpenCypherParser.g:11013:1: ( () )
            {
            // InternalOpenCypherParser.g:11013:1: ( () )
            // InternalOpenCypherParser.g:11014:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getIndexHintAction_0_0()); 
            }
            // InternalOpenCypherParser.g:11015:2: ()
            // InternalOpenCypherParser.g:11015:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getIndexHintAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__0__Impl"


    // $ANTLR start "rule__Hint__Group_0__1"
    // InternalOpenCypherParser.g:11023:1: rule__Hint__Group_0__1 : rule__Hint__Group_0__1__Impl rule__Hint__Group_0__2 ;
    public final void rule__Hint__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11027:1: ( rule__Hint__Group_0__1__Impl rule__Hint__Group_0__2 )
            // InternalOpenCypherParser.g:11028:2: rule__Hint__Group_0__1__Impl rule__Hint__Group_0__2
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__1"


    // $ANTLR start "rule__Hint__Group_0__1__Impl"
    // InternalOpenCypherParser.g:11035:1: rule__Hint__Group_0__1__Impl : ( USING ) ;
    public final void rule__Hint__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11039:1: ( ( USING ) )
            // InternalOpenCypherParser.g:11040:1: ( USING )
            {
            // InternalOpenCypherParser.g:11040:1: ( USING )
            // InternalOpenCypherParser.g:11041:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getUSINGKeyword_0_1()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getUSINGKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__1__Impl"


    // $ANTLR start "rule__Hint__Group_0__2"
    // InternalOpenCypherParser.g:11050:1: rule__Hint__Group_0__2 : rule__Hint__Group_0__2__Impl rule__Hint__Group_0__3 ;
    public final void rule__Hint__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11054:1: ( rule__Hint__Group_0__2__Impl rule__Hint__Group_0__3 )
            // InternalOpenCypherParser.g:11055:2: rule__Hint__Group_0__2__Impl rule__Hint__Group_0__3
            {
            pushFollow(FOLLOW_20);
            rule__Hint__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__2"


    // $ANTLR start "rule__Hint__Group_0__2__Impl"
    // InternalOpenCypherParser.g:11062:1: rule__Hint__Group_0__2__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11066:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11067:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11067:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11068:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__2__Impl"


    // $ANTLR start "rule__Hint__Group_0__3"
    // InternalOpenCypherParser.g:11077:1: rule__Hint__Group_0__3 : rule__Hint__Group_0__3__Impl rule__Hint__Group_0__4 ;
    public final void rule__Hint__Group_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11081:1: ( rule__Hint__Group_0__3__Impl rule__Hint__Group_0__4 )
            // InternalOpenCypherParser.g:11082:2: rule__Hint__Group_0__3__Impl rule__Hint__Group_0__4
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__3"


    // $ANTLR start "rule__Hint__Group_0__3__Impl"
    // InternalOpenCypherParser.g:11089:1: rule__Hint__Group_0__3__Impl : ( INDEX ) ;
    public final void rule__Hint__Group_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11093:1: ( ( INDEX ) )
            // InternalOpenCypherParser.g:11094:1: ( INDEX )
            {
            // InternalOpenCypherParser.g:11094:1: ( INDEX )
            // InternalOpenCypherParser.g:11095:2: INDEX
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getINDEXKeyword_0_3()); 
            }
            match(input,INDEX,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getINDEXKeyword_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__3__Impl"


    // $ANTLR start "rule__Hint__Group_0__4"
    // InternalOpenCypherParser.g:11104:1: rule__Hint__Group_0__4 : rule__Hint__Group_0__4__Impl rule__Hint__Group_0__5 ;
    public final void rule__Hint__Group_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11108:1: ( rule__Hint__Group_0__4__Impl rule__Hint__Group_0__5 )
            // InternalOpenCypherParser.g:11109:2: rule__Hint__Group_0__4__Impl rule__Hint__Group_0__5
            {
            pushFollow(FOLLOW_9);
            rule__Hint__Group_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__4"


    // $ANTLR start "rule__Hint__Group_0__4__Impl"
    // InternalOpenCypherParser.g:11116:1: rule__Hint__Group_0__4__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11120:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11121:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11121:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11122:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__4__Impl"


    // $ANTLR start "rule__Hint__Group_0__5"
    // InternalOpenCypherParser.g:11131:1: rule__Hint__Group_0__5 : rule__Hint__Group_0__5__Impl rule__Hint__Group_0__6 ;
    public final void rule__Hint__Group_0__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11135:1: ( rule__Hint__Group_0__5__Impl rule__Hint__Group_0__6 )
            // InternalOpenCypherParser.g:11136:2: rule__Hint__Group_0__5__Impl rule__Hint__Group_0__6
            {
            pushFollow(FOLLOW_22);
            rule__Hint__Group_0__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__5"


    // $ANTLR start "rule__Hint__Group_0__5__Impl"
    // InternalOpenCypherParser.g:11143:1: rule__Hint__Group_0__5__Impl : ( ( rule__Hint__VariableAssignment_0_5 ) ) ;
    public final void rule__Hint__Group_0__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11147:1: ( ( ( rule__Hint__VariableAssignment_0_5 ) ) )
            // InternalOpenCypherParser.g:11148:1: ( ( rule__Hint__VariableAssignment_0_5 ) )
            {
            // InternalOpenCypherParser.g:11148:1: ( ( rule__Hint__VariableAssignment_0_5 ) )
            // InternalOpenCypherParser.g:11149:2: ( rule__Hint__VariableAssignment_0_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableAssignment_0_5()); 
            }
            // InternalOpenCypherParser.g:11150:2: ( rule__Hint__VariableAssignment_0_5 )
            // InternalOpenCypherParser.g:11150:3: rule__Hint__VariableAssignment_0_5
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariableAssignment_0_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableAssignment_0_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__5__Impl"


    // $ANTLR start "rule__Hint__Group_0__6"
    // InternalOpenCypherParser.g:11158:1: rule__Hint__Group_0__6 : rule__Hint__Group_0__6__Impl rule__Hint__Group_0__7 ;
    public final void rule__Hint__Group_0__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11162:1: ( rule__Hint__Group_0__6__Impl rule__Hint__Group_0__7 )
            // InternalOpenCypherParser.g:11163:2: rule__Hint__Group_0__6__Impl rule__Hint__Group_0__7
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_0__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__6"


    // $ANTLR start "rule__Hint__Group_0__6__Impl"
    // InternalOpenCypherParser.g:11170:1: rule__Hint__Group_0__6__Impl : ( ( rule__Hint__NodeLabelAssignment_0_6 ) ) ;
    public final void rule__Hint__Group_0__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11174:1: ( ( ( rule__Hint__NodeLabelAssignment_0_6 ) ) )
            // InternalOpenCypherParser.g:11175:1: ( ( rule__Hint__NodeLabelAssignment_0_6 ) )
            {
            // InternalOpenCypherParser.g:11175:1: ( ( rule__Hint__NodeLabelAssignment_0_6 ) )
            // InternalOpenCypherParser.g:11176:2: ( rule__Hint__NodeLabelAssignment_0_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6()); 
            }
            // InternalOpenCypherParser.g:11177:2: ( rule__Hint__NodeLabelAssignment_0_6 )
            // InternalOpenCypherParser.g:11177:3: rule__Hint__NodeLabelAssignment_0_6
            {
            pushFollow(FOLLOW_2);
            rule__Hint__NodeLabelAssignment_0_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelAssignment_0_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__6__Impl"


    // $ANTLR start "rule__Hint__Group_0__7"
    // InternalOpenCypherParser.g:11185:1: rule__Hint__Group_0__7 : rule__Hint__Group_0__7__Impl rule__Hint__Group_0__8 ;
    public final void rule__Hint__Group_0__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11189:1: ( rule__Hint__Group_0__7__Impl rule__Hint__Group_0__8 )
            // InternalOpenCypherParser.g:11190:2: rule__Hint__Group_0__7__Impl rule__Hint__Group_0__8
            {
            pushFollow(FOLLOW_23);
            rule__Hint__Group_0__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__7"


    // $ANTLR start "rule__Hint__Group_0__7__Impl"
    // InternalOpenCypherParser.g:11197:1: rule__Hint__Group_0__7__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_0__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11201:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11202:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11202:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11203:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_0_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__7__Impl"


    // $ANTLR start "rule__Hint__Group_0__8"
    // InternalOpenCypherParser.g:11212:1: rule__Hint__Group_0__8 : rule__Hint__Group_0__8__Impl rule__Hint__Group_0__9 ;
    public final void rule__Hint__Group_0__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11216:1: ( rule__Hint__Group_0__8__Impl rule__Hint__Group_0__9 )
            // InternalOpenCypherParser.g:11217:2: rule__Hint__Group_0__8__Impl rule__Hint__Group_0__9
            {
            pushFollow(FOLLOW_9);
            rule__Hint__Group_0__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__8"


    // $ANTLR start "rule__Hint__Group_0__8__Impl"
    // InternalOpenCypherParser.g:11224:1: rule__Hint__Group_0__8__Impl : ( LeftParenthesis ) ;
    public final void rule__Hint__Group_0__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11228:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:11229:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:11229:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:11230:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getLeftParenthesisKeyword_0_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__8__Impl"


    // $ANTLR start "rule__Hint__Group_0__9"
    // InternalOpenCypherParser.g:11239:1: rule__Hint__Group_0__9 : rule__Hint__Group_0__9__Impl rule__Hint__Group_0__10 ;
    public final void rule__Hint__Group_0__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11243:1: ( rule__Hint__Group_0__9__Impl rule__Hint__Group_0__10 )
            // InternalOpenCypherParser.g:11244:2: rule__Hint__Group_0__9__Impl rule__Hint__Group_0__10
            {
            pushFollow(FOLLOW_24);
            rule__Hint__Group_0__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__9"


    // $ANTLR start "rule__Hint__Group_0__9__Impl"
    // InternalOpenCypherParser.g:11251:1: rule__Hint__Group_0__9__Impl : ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) ) ;
    public final void rule__Hint__Group_0__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11255:1: ( ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) ) )
            // InternalOpenCypherParser.g:11256:1: ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) )
            {
            // InternalOpenCypherParser.g:11256:1: ( ( rule__Hint__PropertyKeyNameAssignment_0_9 ) )
            // InternalOpenCypherParser.g:11257:2: ( rule__Hint__PropertyKeyNameAssignment_0_9 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9()); 
            }
            // InternalOpenCypherParser.g:11258:2: ( rule__Hint__PropertyKeyNameAssignment_0_9 )
            // InternalOpenCypherParser.g:11258:3: rule__Hint__PropertyKeyNameAssignment_0_9
            {
            pushFollow(FOLLOW_2);
            rule__Hint__PropertyKeyNameAssignment_0_9();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getPropertyKeyNameAssignment_0_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__9__Impl"


    // $ANTLR start "rule__Hint__Group_0__10"
    // InternalOpenCypherParser.g:11266:1: rule__Hint__Group_0__10 : rule__Hint__Group_0__10__Impl ;
    public final void rule__Hint__Group_0__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11270:1: ( rule__Hint__Group_0__10__Impl )
            // InternalOpenCypherParser.g:11271:2: rule__Hint__Group_0__10__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_0__10__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__10"


    // $ANTLR start "rule__Hint__Group_0__10__Impl"
    // InternalOpenCypherParser.g:11277:1: rule__Hint__Group_0__10__Impl : ( RightParenthesis ) ;
    public final void rule__Hint__Group_0__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11281:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:11282:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:11282:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:11283:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getRightParenthesisKeyword_0_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_0__10__Impl"


    // $ANTLR start "rule__Hint__Group_1__0"
    // InternalOpenCypherParser.g:11293:1: rule__Hint__Group_1__0 : rule__Hint__Group_1__0__Impl rule__Hint__Group_1__1 ;
    public final void rule__Hint__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11297:1: ( rule__Hint__Group_1__0__Impl rule__Hint__Group_1__1 )
            // InternalOpenCypherParser.g:11298:2: rule__Hint__Group_1__0__Impl rule__Hint__Group_1__1
            {
            pushFollow(FOLLOW_62);
            rule__Hint__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__0"


    // $ANTLR start "rule__Hint__Group_1__0__Impl"
    // InternalOpenCypherParser.g:11305:1: rule__Hint__Group_1__0__Impl : ( () ) ;
    public final void rule__Hint__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11309:1: ( ( () ) )
            // InternalOpenCypherParser.g:11310:1: ( () )
            {
            // InternalOpenCypherParser.g:11310:1: ( () )
            // InternalOpenCypherParser.g:11311:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getJoinHintAction_1_0()); 
            }
            // InternalOpenCypherParser.g:11312:2: ()
            // InternalOpenCypherParser.g:11312:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getJoinHintAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__0__Impl"


    // $ANTLR start "rule__Hint__Group_1__1"
    // InternalOpenCypherParser.g:11320:1: rule__Hint__Group_1__1 : rule__Hint__Group_1__1__Impl ;
    public final void rule__Hint__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11324:1: ( rule__Hint__Group_1__1__Impl )
            // InternalOpenCypherParser.g:11325:2: rule__Hint__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__1"


    // $ANTLR start "rule__Hint__Group_1__1__Impl"
    // InternalOpenCypherParser.g:11331:1: rule__Hint__Group_1__1__Impl : ( ( rule__Hint__Group_1_1__0 ) ) ;
    public final void rule__Hint__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11335:1: ( ( ( rule__Hint__Group_1_1__0 ) ) )
            // InternalOpenCypherParser.g:11336:1: ( ( rule__Hint__Group_1_1__0 ) )
            {
            // InternalOpenCypherParser.g:11336:1: ( ( rule__Hint__Group_1_1__0 ) )
            // InternalOpenCypherParser.g:11337:2: ( rule__Hint__Group_1_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getGroup_1_1()); 
            }
            // InternalOpenCypherParser.g:11338:2: ( rule__Hint__Group_1_1__0 )
            // InternalOpenCypherParser.g:11338:3: rule__Hint__Group_1_1__0
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1__1__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__0"
    // InternalOpenCypherParser.g:11347:1: rule__Hint__Group_1_1__0 : rule__Hint__Group_1_1__0__Impl rule__Hint__Group_1_1__1 ;
    public final void rule__Hint__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11351:1: ( rule__Hint__Group_1_1__0__Impl rule__Hint__Group_1_1__1 )
            // InternalOpenCypherParser.g:11352:2: rule__Hint__Group_1_1__0__Impl rule__Hint__Group_1_1__1
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__0"


    // $ANTLR start "rule__Hint__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:11359:1: rule__Hint__Group_1_1__0__Impl : ( USING ) ;
    public final void rule__Hint__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11363:1: ( ( USING ) )
            // InternalOpenCypherParser.g:11364:1: ( USING )
            {
            // InternalOpenCypherParser.g:11364:1: ( USING )
            // InternalOpenCypherParser.g:11365:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getUSINGKeyword_1_1_0()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getUSINGKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__0__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__1"
    // InternalOpenCypherParser.g:11374:1: rule__Hint__Group_1_1__1 : rule__Hint__Group_1_1__1__Impl rule__Hint__Group_1_1__2 ;
    public final void rule__Hint__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11378:1: ( rule__Hint__Group_1_1__1__Impl rule__Hint__Group_1_1__2 )
            // InternalOpenCypherParser.g:11379:2: rule__Hint__Group_1_1__1__Impl rule__Hint__Group_1_1__2
            {
            pushFollow(FOLLOW_64);
            rule__Hint__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__1"


    // $ANTLR start "rule__Hint__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:11386:1: rule__Hint__Group_1_1__1__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11390:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11391:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11391:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11392:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__1__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__2"
    // InternalOpenCypherParser.g:11401:1: rule__Hint__Group_1_1__2 : rule__Hint__Group_1_1__2__Impl rule__Hint__Group_1_1__3 ;
    public final void rule__Hint__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11405:1: ( rule__Hint__Group_1_1__2__Impl rule__Hint__Group_1_1__3 )
            // InternalOpenCypherParser.g:11406:2: rule__Hint__Group_1_1__2__Impl rule__Hint__Group_1_1__3
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__2"


    // $ANTLR start "rule__Hint__Group_1_1__2__Impl"
    // InternalOpenCypherParser.g:11413:1: rule__Hint__Group_1_1__2__Impl : ( JOIN ) ;
    public final void rule__Hint__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11417:1: ( ( JOIN ) )
            // InternalOpenCypherParser.g:11418:1: ( JOIN )
            {
            // InternalOpenCypherParser.g:11418:1: ( JOIN )
            // InternalOpenCypherParser.g:11419:2: JOIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getJOINKeyword_1_1_2()); 
            }
            match(input,JOIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getJOINKeyword_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__2__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__3"
    // InternalOpenCypherParser.g:11428:1: rule__Hint__Group_1_1__3 : rule__Hint__Group_1_1__3__Impl rule__Hint__Group_1_1__4 ;
    public final void rule__Hint__Group_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11432:1: ( rule__Hint__Group_1_1__3__Impl rule__Hint__Group_1_1__4 )
            // InternalOpenCypherParser.g:11433:2: rule__Hint__Group_1_1__3__Impl rule__Hint__Group_1_1__4
            {
            pushFollow(FOLLOW_21);
            rule__Hint__Group_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__3"


    // $ANTLR start "rule__Hint__Group_1_1__3__Impl"
    // InternalOpenCypherParser.g:11440:1: rule__Hint__Group_1_1__3__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11444:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11445:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11445:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11446:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__3__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__4"
    // InternalOpenCypherParser.g:11455:1: rule__Hint__Group_1_1__4 : rule__Hint__Group_1_1__4__Impl rule__Hint__Group_1_1__5 ;
    public final void rule__Hint__Group_1_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11459:1: ( rule__Hint__Group_1_1__4__Impl rule__Hint__Group_1_1__5 )
            // InternalOpenCypherParser.g:11460:2: rule__Hint__Group_1_1__4__Impl rule__Hint__Group_1_1__5
            {
            pushFollow(FOLLOW_9);
            rule__Hint__Group_1_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__4"


    // $ANTLR start "rule__Hint__Group_1_1__4__Impl"
    // InternalOpenCypherParser.g:11467:1: rule__Hint__Group_1_1__4__Impl : ( ON ) ;
    public final void rule__Hint__Group_1_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11471:1: ( ( ON ) )
            // InternalOpenCypherParser.g:11472:1: ( ON )
            {
            // InternalOpenCypherParser.g:11472:1: ( ON )
            // InternalOpenCypherParser.g:11473:2: ON
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getONKeyword_1_1_4()); 
            }
            match(input,ON,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getONKeyword_1_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__4__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__5"
    // InternalOpenCypherParser.g:11482:1: rule__Hint__Group_1_1__5 : rule__Hint__Group_1_1__5__Impl rule__Hint__Group_1_1__6 ;
    public final void rule__Hint__Group_1_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11486:1: ( rule__Hint__Group_1_1__5__Impl rule__Hint__Group_1_1__6 )
            // InternalOpenCypherParser.g:11487:2: rule__Hint__Group_1_1__5__Impl rule__Hint__Group_1_1__6
            {
            pushFollow(FOLLOW_48);
            rule__Hint__Group_1_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__5"


    // $ANTLR start "rule__Hint__Group_1_1__5__Impl"
    // InternalOpenCypherParser.g:11494:1: rule__Hint__Group_1_1__5__Impl : ( ( rule__Hint__VariablesAssignment_1_1_5 ) ) ;
    public final void rule__Hint__Group_1_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11498:1: ( ( ( rule__Hint__VariablesAssignment_1_1_5 ) ) )
            // InternalOpenCypherParser.g:11499:1: ( ( rule__Hint__VariablesAssignment_1_1_5 ) )
            {
            // InternalOpenCypherParser.g:11499:1: ( ( rule__Hint__VariablesAssignment_1_1_5 ) )
            // InternalOpenCypherParser.g:11500:2: ( rule__Hint__VariablesAssignment_1_1_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5()); 
            }
            // InternalOpenCypherParser.g:11501:2: ( rule__Hint__VariablesAssignment_1_1_5 )
            // InternalOpenCypherParser.g:11501:3: rule__Hint__VariablesAssignment_1_1_5
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariablesAssignment_1_1_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesAssignment_1_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__5__Impl"


    // $ANTLR start "rule__Hint__Group_1_1__6"
    // InternalOpenCypherParser.g:11509:1: rule__Hint__Group_1_1__6 : rule__Hint__Group_1_1__6__Impl ;
    public final void rule__Hint__Group_1_1__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11513:1: ( rule__Hint__Group_1_1__6__Impl )
            // InternalOpenCypherParser.g:11514:2: rule__Hint__Group_1_1__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__6"


    // $ANTLR start "rule__Hint__Group_1_1__6__Impl"
    // InternalOpenCypherParser.g:11520:1: rule__Hint__Group_1_1__6__Impl : ( ( rule__Hint__Group_1_1_6__0 )* ) ;
    public final void rule__Hint__Group_1_1__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11524:1: ( ( ( rule__Hint__Group_1_1_6__0 )* ) )
            // InternalOpenCypherParser.g:11525:1: ( ( rule__Hint__Group_1_1_6__0 )* )
            {
            // InternalOpenCypherParser.g:11525:1: ( ( rule__Hint__Group_1_1_6__0 )* )
            // InternalOpenCypherParser.g:11526:2: ( rule__Hint__Group_1_1_6__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getGroup_1_1_6()); 
            }
            // InternalOpenCypherParser.g:11527:2: ( rule__Hint__Group_1_1_6__0 )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==Comma) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // InternalOpenCypherParser.g:11527:3: rule__Hint__Group_1_1_6__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Hint__Group_1_1_6__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getGroup_1_1_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1__6__Impl"


    // $ANTLR start "rule__Hint__Group_1_1_6__0"
    // InternalOpenCypherParser.g:11536:1: rule__Hint__Group_1_1_6__0 : rule__Hint__Group_1_1_6__0__Impl rule__Hint__Group_1_1_6__1 ;
    public final void rule__Hint__Group_1_1_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11540:1: ( rule__Hint__Group_1_1_6__0__Impl rule__Hint__Group_1_1_6__1 )
            // InternalOpenCypherParser.g:11541:2: rule__Hint__Group_1_1_6__0__Impl rule__Hint__Group_1_1_6__1
            {
            pushFollow(FOLLOW_9);
            rule__Hint__Group_1_1_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__0"


    // $ANTLR start "rule__Hint__Group_1_1_6__0__Impl"
    // InternalOpenCypherParser.g:11548:1: rule__Hint__Group_1_1_6__0__Impl : ( Comma ) ;
    public final void rule__Hint__Group_1_1_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11552:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:11553:1: ( Comma )
            {
            // InternalOpenCypherParser.g:11553:1: ( Comma )
            // InternalOpenCypherParser.g:11554:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getCommaKeyword_1_1_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__0__Impl"


    // $ANTLR start "rule__Hint__Group_1_1_6__1"
    // InternalOpenCypherParser.g:11563:1: rule__Hint__Group_1_1_6__1 : rule__Hint__Group_1_1_6__1__Impl ;
    public final void rule__Hint__Group_1_1_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11567:1: ( rule__Hint__Group_1_1_6__1__Impl )
            // InternalOpenCypherParser.g:11568:2: rule__Hint__Group_1_1_6__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_1_1_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__1"


    // $ANTLR start "rule__Hint__Group_1_1_6__1__Impl"
    // InternalOpenCypherParser.g:11574:1: rule__Hint__Group_1_1_6__1__Impl : ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) ) ;
    public final void rule__Hint__Group_1_1_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11578:1: ( ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) ) )
            // InternalOpenCypherParser.g:11579:1: ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) )
            {
            // InternalOpenCypherParser.g:11579:1: ( ( rule__Hint__VariablesAssignment_1_1_6_1 ) )
            // InternalOpenCypherParser.g:11580:2: ( rule__Hint__VariablesAssignment_1_1_6_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1()); 
            }
            // InternalOpenCypherParser.g:11581:2: ( rule__Hint__VariablesAssignment_1_1_6_1 )
            // InternalOpenCypherParser.g:11581:3: rule__Hint__VariablesAssignment_1_1_6_1
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariablesAssignment_1_1_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesAssignment_1_1_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_1_1_6__1__Impl"


    // $ANTLR start "rule__Hint__Group_2__0"
    // InternalOpenCypherParser.g:11590:1: rule__Hint__Group_2__0 : rule__Hint__Group_2__0__Impl rule__Hint__Group_2__1 ;
    public final void rule__Hint__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11594:1: ( rule__Hint__Group_2__0__Impl rule__Hint__Group_2__1 )
            // InternalOpenCypherParser.g:11595:2: rule__Hint__Group_2__0__Impl rule__Hint__Group_2__1
            {
            pushFollow(FOLLOW_62);
            rule__Hint__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__0"


    // $ANTLR start "rule__Hint__Group_2__0__Impl"
    // InternalOpenCypherParser.g:11602:1: rule__Hint__Group_2__0__Impl : ( () ) ;
    public final void rule__Hint__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11606:1: ( ( () ) )
            // InternalOpenCypherParser.g:11607:1: ( () )
            {
            // InternalOpenCypherParser.g:11607:1: ( () )
            // InternalOpenCypherParser.g:11608:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getScanHintAction_2_0()); 
            }
            // InternalOpenCypherParser.g:11609:2: ()
            // InternalOpenCypherParser.g:11609:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getScanHintAction_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__0__Impl"


    // $ANTLR start "rule__Hint__Group_2__1"
    // InternalOpenCypherParser.g:11617:1: rule__Hint__Group_2__1 : rule__Hint__Group_2__1__Impl ;
    public final void rule__Hint__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11621:1: ( rule__Hint__Group_2__1__Impl )
            // InternalOpenCypherParser.g:11622:2: rule__Hint__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__1"


    // $ANTLR start "rule__Hint__Group_2__1__Impl"
    // InternalOpenCypherParser.g:11628:1: rule__Hint__Group_2__1__Impl : ( ( rule__Hint__Group_2_1__0 ) ) ;
    public final void rule__Hint__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11632:1: ( ( ( rule__Hint__Group_2_1__0 ) ) )
            // InternalOpenCypherParser.g:11633:1: ( ( rule__Hint__Group_2_1__0 ) )
            {
            // InternalOpenCypherParser.g:11633:1: ( ( rule__Hint__Group_2_1__0 ) )
            // InternalOpenCypherParser.g:11634:2: ( rule__Hint__Group_2_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:11635:2: ( rule__Hint__Group_2_1__0 )
            // InternalOpenCypherParser.g:11635:3: rule__Hint__Group_2_1__0
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2__1__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__0"
    // InternalOpenCypherParser.g:11644:1: rule__Hint__Group_2_1__0 : rule__Hint__Group_2_1__0__Impl rule__Hint__Group_2_1__1 ;
    public final void rule__Hint__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11648:1: ( rule__Hint__Group_2_1__0__Impl rule__Hint__Group_2_1__1 )
            // InternalOpenCypherParser.g:11649:2: rule__Hint__Group_2_1__0__Impl rule__Hint__Group_2_1__1
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__0"


    // $ANTLR start "rule__Hint__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:11656:1: rule__Hint__Group_2_1__0__Impl : ( USING ) ;
    public final void rule__Hint__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11660:1: ( ( USING ) )
            // InternalOpenCypherParser.g:11661:1: ( USING )
            {
            // InternalOpenCypherParser.g:11661:1: ( USING )
            // InternalOpenCypherParser.g:11662:2: USING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getUSINGKeyword_2_1_0()); 
            }
            match(input,USING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getUSINGKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__0__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__1"
    // InternalOpenCypherParser.g:11671:1: rule__Hint__Group_2_1__1 : rule__Hint__Group_2_1__1__Impl rule__Hint__Group_2_1__2 ;
    public final void rule__Hint__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11675:1: ( rule__Hint__Group_2_1__1__Impl rule__Hint__Group_2_1__2 )
            // InternalOpenCypherParser.g:11676:2: rule__Hint__Group_2_1__1__Impl rule__Hint__Group_2_1__2
            {
            pushFollow(FOLLOW_65);
            rule__Hint__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__1"


    // $ANTLR start "rule__Hint__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:11683:1: rule__Hint__Group_2_1__1__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11687:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11688:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11688:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11689:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__1__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__2"
    // InternalOpenCypherParser.g:11698:1: rule__Hint__Group_2_1__2 : rule__Hint__Group_2_1__2__Impl rule__Hint__Group_2_1__3 ;
    public final void rule__Hint__Group_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11702:1: ( rule__Hint__Group_2_1__2__Impl rule__Hint__Group_2_1__3 )
            // InternalOpenCypherParser.g:11703:2: rule__Hint__Group_2_1__2__Impl rule__Hint__Group_2_1__3
            {
            pushFollow(FOLLOW_63);
            rule__Hint__Group_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__2"


    // $ANTLR start "rule__Hint__Group_2_1__2__Impl"
    // InternalOpenCypherParser.g:11710:1: rule__Hint__Group_2_1__2__Impl : ( SCAN ) ;
    public final void rule__Hint__Group_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11714:1: ( ( SCAN ) )
            // InternalOpenCypherParser.g:11715:1: ( SCAN )
            {
            // InternalOpenCypherParser.g:11715:1: ( SCAN )
            // InternalOpenCypherParser.g:11716:2: SCAN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getSCANKeyword_2_1_2()); 
            }
            match(input,SCAN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getSCANKeyword_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__2__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__3"
    // InternalOpenCypherParser.g:11725:1: rule__Hint__Group_2_1__3 : rule__Hint__Group_2_1__3__Impl rule__Hint__Group_2_1__4 ;
    public final void rule__Hint__Group_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11729:1: ( rule__Hint__Group_2_1__3__Impl rule__Hint__Group_2_1__4 )
            // InternalOpenCypherParser.g:11730:2: rule__Hint__Group_2_1__3__Impl rule__Hint__Group_2_1__4
            {
            pushFollow(FOLLOW_9);
            rule__Hint__Group_2_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__3"


    // $ANTLR start "rule__Hint__Group_2_1__3__Impl"
    // InternalOpenCypherParser.g:11737:1: rule__Hint__Group_2_1__3__Impl : ( RULE_WS ) ;
    public final void rule__Hint__Group_2_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11741:1: ( ( RULE_WS ) )
            // InternalOpenCypherParser.g:11742:1: ( RULE_WS )
            {
            // InternalOpenCypherParser.g:11742:1: ( RULE_WS )
            // InternalOpenCypherParser.g:11743:2: RULE_WS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3()); 
            }
            match(input,RULE_WS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getWSTerminalRuleCall_2_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__3__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__4"
    // InternalOpenCypherParser.g:11752:1: rule__Hint__Group_2_1__4 : rule__Hint__Group_2_1__4__Impl rule__Hint__Group_2_1__5 ;
    public final void rule__Hint__Group_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11756:1: ( rule__Hint__Group_2_1__4__Impl rule__Hint__Group_2_1__5 )
            // InternalOpenCypherParser.g:11757:2: rule__Hint__Group_2_1__4__Impl rule__Hint__Group_2_1__5
            {
            pushFollow(FOLLOW_22);
            rule__Hint__Group_2_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__4"


    // $ANTLR start "rule__Hint__Group_2_1__4__Impl"
    // InternalOpenCypherParser.g:11764:1: rule__Hint__Group_2_1__4__Impl : ( ( rule__Hint__VariableAssignment_2_1_4 ) ) ;
    public final void rule__Hint__Group_2_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11768:1: ( ( ( rule__Hint__VariableAssignment_2_1_4 ) ) )
            // InternalOpenCypherParser.g:11769:1: ( ( rule__Hint__VariableAssignment_2_1_4 ) )
            {
            // InternalOpenCypherParser.g:11769:1: ( ( rule__Hint__VariableAssignment_2_1_4 ) )
            // InternalOpenCypherParser.g:11770:2: ( rule__Hint__VariableAssignment_2_1_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableAssignment_2_1_4()); 
            }
            // InternalOpenCypherParser.g:11771:2: ( rule__Hint__VariableAssignment_2_1_4 )
            // InternalOpenCypherParser.g:11771:3: rule__Hint__VariableAssignment_2_1_4
            {
            pushFollow(FOLLOW_2);
            rule__Hint__VariableAssignment_2_1_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableAssignment_2_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__4__Impl"


    // $ANTLR start "rule__Hint__Group_2_1__5"
    // InternalOpenCypherParser.g:11779:1: rule__Hint__Group_2_1__5 : rule__Hint__Group_2_1__5__Impl ;
    public final void rule__Hint__Group_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11783:1: ( rule__Hint__Group_2_1__5__Impl )
            // InternalOpenCypherParser.g:11784:2: rule__Hint__Group_2_1__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Hint__Group_2_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__5"


    // $ANTLR start "rule__Hint__Group_2_1__5__Impl"
    // InternalOpenCypherParser.g:11790:1: rule__Hint__Group_2_1__5__Impl : ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) ) ;
    public final void rule__Hint__Group_2_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11794:1: ( ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) ) )
            // InternalOpenCypherParser.g:11795:1: ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) )
            {
            // InternalOpenCypherParser.g:11795:1: ( ( rule__Hint__NodeLabelAssignment_2_1_5 ) )
            // InternalOpenCypherParser.g:11796:2: ( rule__Hint__NodeLabelAssignment_2_1_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5()); 
            }
            // InternalOpenCypherParser.g:11797:2: ( rule__Hint__NodeLabelAssignment_2_1_5 )
            // InternalOpenCypherParser.g:11797:3: rule__Hint__NodeLabelAssignment_2_1_5
            {
            pushFollow(FOLLOW_2);
            rule__Hint__NodeLabelAssignment_2_1_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelAssignment_2_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__Group_2_1__5__Impl"


    // $ANTLR start "rule__Start__Group__0"
    // InternalOpenCypherParser.g:11806:1: rule__Start__Group__0 : rule__Start__Group__0__Impl rule__Start__Group__1 ;
    public final void rule__Start__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11810:1: ( rule__Start__Group__0__Impl rule__Start__Group__1 )
            // InternalOpenCypherParser.g:11811:2: rule__Start__Group__0__Impl rule__Start__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__Start__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__0"


    // $ANTLR start "rule__Start__Group__0__Impl"
    // InternalOpenCypherParser.g:11818:1: rule__Start__Group__0__Impl : ( START ) ;
    public final void rule__Start__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11822:1: ( ( START ) )
            // InternalOpenCypherParser.g:11823:1: ( START )
            {
            // InternalOpenCypherParser.g:11823:1: ( START )
            // InternalOpenCypherParser.g:11824:2: START
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getSTARTKeyword_0()); 
            }
            match(input,START,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getSTARTKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__0__Impl"


    // $ANTLR start "rule__Start__Group__1"
    // InternalOpenCypherParser.g:11833:1: rule__Start__Group__1 : rule__Start__Group__1__Impl rule__Start__Group__2 ;
    public final void rule__Start__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11837:1: ( rule__Start__Group__1__Impl rule__Start__Group__2 )
            // InternalOpenCypherParser.g:11838:2: rule__Start__Group__1__Impl rule__Start__Group__2
            {
            pushFollow(FOLLOW_66);
            rule__Start__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__1"


    // $ANTLR start "rule__Start__Group__1__Impl"
    // InternalOpenCypherParser.g:11845:1: rule__Start__Group__1__Impl : ( ( rule__Start__StartPointAssignment_1 ) ) ;
    public final void rule__Start__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11849:1: ( ( ( rule__Start__StartPointAssignment_1 ) ) )
            // InternalOpenCypherParser.g:11850:1: ( ( rule__Start__StartPointAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:11850:1: ( ( rule__Start__StartPointAssignment_1 ) )
            // InternalOpenCypherParser.g:11851:2: ( rule__Start__StartPointAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointAssignment_1()); 
            }
            // InternalOpenCypherParser.g:11852:2: ( rule__Start__StartPointAssignment_1 )
            // InternalOpenCypherParser.g:11852:3: rule__Start__StartPointAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Start__StartPointAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__1__Impl"


    // $ANTLR start "rule__Start__Group__2"
    // InternalOpenCypherParser.g:11860:1: rule__Start__Group__2 : rule__Start__Group__2__Impl rule__Start__Group__3 ;
    public final void rule__Start__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11864:1: ( rule__Start__Group__2__Impl rule__Start__Group__3 )
            // InternalOpenCypherParser.g:11865:2: rule__Start__Group__2__Impl rule__Start__Group__3
            {
            pushFollow(FOLLOW_66);
            rule__Start__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__2"


    // $ANTLR start "rule__Start__Group__2__Impl"
    // InternalOpenCypherParser.g:11872:1: rule__Start__Group__2__Impl : ( ( rule__Start__Group_2__0 )* ) ;
    public final void rule__Start__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11876:1: ( ( ( rule__Start__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:11877:1: ( ( rule__Start__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:11877:1: ( ( rule__Start__Group_2__0 )* )
            // InternalOpenCypherParser.g:11878:2: ( rule__Start__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:11879:2: ( rule__Start__Group_2__0 )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==Comma) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // InternalOpenCypherParser.g:11879:3: rule__Start__Group_2__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Start__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__2__Impl"


    // $ANTLR start "rule__Start__Group__3"
    // InternalOpenCypherParser.g:11887:1: rule__Start__Group__3 : rule__Start__Group__3__Impl ;
    public final void rule__Start__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11891:1: ( rule__Start__Group__3__Impl )
            // InternalOpenCypherParser.g:11892:2: rule__Start__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Start__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__3"


    // $ANTLR start "rule__Start__Group__3__Impl"
    // InternalOpenCypherParser.g:11898:1: rule__Start__Group__3__Impl : ( ( rule__Start__WhereAssignment_3 )? ) ;
    public final void rule__Start__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11902:1: ( ( ( rule__Start__WhereAssignment_3 )? ) )
            // InternalOpenCypherParser.g:11903:1: ( ( rule__Start__WhereAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:11903:1: ( ( rule__Start__WhereAssignment_3 )? )
            // InternalOpenCypherParser.g:11904:2: ( rule__Start__WhereAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getWhereAssignment_3()); 
            }
            // InternalOpenCypherParser.g:11905:2: ( rule__Start__WhereAssignment_3 )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==WHERE) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // InternalOpenCypherParser.g:11905:3: rule__Start__WhereAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Start__WhereAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getWhereAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group__3__Impl"


    // $ANTLR start "rule__Start__Group_2__0"
    // InternalOpenCypherParser.g:11914:1: rule__Start__Group_2__0 : rule__Start__Group_2__0__Impl rule__Start__Group_2__1 ;
    public final void rule__Start__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11918:1: ( rule__Start__Group_2__0__Impl rule__Start__Group_2__1 )
            // InternalOpenCypherParser.g:11919:2: rule__Start__Group_2__0__Impl rule__Start__Group_2__1
            {
            pushFollow(FOLLOW_9);
            rule__Start__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Start__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__0"


    // $ANTLR start "rule__Start__Group_2__0__Impl"
    // InternalOpenCypherParser.g:11926:1: rule__Start__Group_2__0__Impl : ( Comma ) ;
    public final void rule__Start__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11930:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:11931:1: ( Comma )
            {
            // InternalOpenCypherParser.g:11931:1: ( Comma )
            // InternalOpenCypherParser.g:11932:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__0__Impl"


    // $ANTLR start "rule__Start__Group_2__1"
    // InternalOpenCypherParser.g:11941:1: rule__Start__Group_2__1 : rule__Start__Group_2__1__Impl ;
    public final void rule__Start__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11945:1: ( rule__Start__Group_2__1__Impl )
            // InternalOpenCypherParser.g:11946:2: rule__Start__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Start__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__1"


    // $ANTLR start "rule__Start__Group_2__1__Impl"
    // InternalOpenCypherParser.g:11952:1: rule__Start__Group_2__1__Impl : ( ( rule__Start__StartPointAssignment_2_1 ) ) ;
    public final void rule__Start__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11956:1: ( ( ( rule__Start__StartPointAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:11957:1: ( ( rule__Start__StartPointAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:11957:1: ( ( rule__Start__StartPointAssignment_2_1 ) )
            // InternalOpenCypherParser.g:11958:2: ( rule__Start__StartPointAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:11959:2: ( rule__Start__StartPointAssignment_2_1 )
            // InternalOpenCypherParser.g:11959:3: rule__Start__StartPointAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Start__StartPointAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__Group_2__1__Impl"


    // $ANTLR start "rule__StartPoint__Group__0"
    // InternalOpenCypherParser.g:11968:1: rule__StartPoint__Group__0 : rule__StartPoint__Group__0__Impl rule__StartPoint__Group__1 ;
    public final void rule__StartPoint__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11972:1: ( rule__StartPoint__Group__0__Impl rule__StartPoint__Group__1 )
            // InternalOpenCypherParser.g:11973:2: rule__StartPoint__Group__0__Impl rule__StartPoint__Group__1
            {
            pushFollow(FOLLOW_8);
            rule__StartPoint__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__0"


    // $ANTLR start "rule__StartPoint__Group__0__Impl"
    // InternalOpenCypherParser.g:11980:1: rule__StartPoint__Group__0__Impl : ( ( rule__StartPoint__VariableAssignment_0 ) ) ;
    public final void rule__StartPoint__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11984:1: ( ( ( rule__StartPoint__VariableAssignment_0 ) ) )
            // InternalOpenCypherParser.g:11985:1: ( ( rule__StartPoint__VariableAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:11985:1: ( ( rule__StartPoint__VariableAssignment_0 ) )
            // InternalOpenCypherParser.g:11986:2: ( rule__StartPoint__VariableAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getVariableAssignment_0()); 
            }
            // InternalOpenCypherParser.g:11987:2: ( rule__StartPoint__VariableAssignment_0 )
            // InternalOpenCypherParser.g:11987:3: rule__StartPoint__VariableAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__VariableAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getVariableAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__0__Impl"


    // $ANTLR start "rule__StartPoint__Group__1"
    // InternalOpenCypherParser.g:11995:1: rule__StartPoint__Group__1 : rule__StartPoint__Group__1__Impl rule__StartPoint__Group__2 ;
    public final void rule__StartPoint__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:11999:1: ( rule__StartPoint__Group__1__Impl rule__StartPoint__Group__2 )
            // InternalOpenCypherParser.g:12000:2: rule__StartPoint__Group__1__Impl rule__StartPoint__Group__2
            {
            pushFollow(FOLLOW_67);
            rule__StartPoint__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__1"


    // $ANTLR start "rule__StartPoint__Group__1__Impl"
    // InternalOpenCypherParser.g:12007:1: rule__StartPoint__Group__1__Impl : ( EqualsSign ) ;
    public final void rule__StartPoint__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12011:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:12012:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:12012:1: ( EqualsSign )
            // InternalOpenCypherParser.g:12013:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getEqualsSignKeyword_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__1__Impl"


    // $ANTLR start "rule__StartPoint__Group__2"
    // InternalOpenCypherParser.g:12022:1: rule__StartPoint__Group__2 : rule__StartPoint__Group__2__Impl ;
    public final void rule__StartPoint__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12026:1: ( rule__StartPoint__Group__2__Impl )
            // InternalOpenCypherParser.g:12027:2: rule__StartPoint__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__2"


    // $ANTLR start "rule__StartPoint__Group__2__Impl"
    // InternalOpenCypherParser.g:12033:1: rule__StartPoint__Group__2__Impl : ( ( rule__StartPoint__LookupAssignment_2 ) ) ;
    public final void rule__StartPoint__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12037:1: ( ( ( rule__StartPoint__LookupAssignment_2 ) ) )
            // InternalOpenCypherParser.g:12038:1: ( ( rule__StartPoint__LookupAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:12038:1: ( ( rule__StartPoint__LookupAssignment_2 ) )
            // InternalOpenCypherParser.g:12039:2: ( rule__StartPoint__LookupAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getLookupAssignment_2()); 
            }
            // InternalOpenCypherParser.g:12040:2: ( rule__StartPoint__LookupAssignment_2 )
            // InternalOpenCypherParser.g:12040:3: rule__StartPoint__LookupAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__StartPoint__LookupAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getLookupAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__Group__2__Impl"


    // $ANTLR start "rule__NodeLookup__Group__0"
    // InternalOpenCypherParser.g:12049:1: rule__NodeLookup__Group__0 : rule__NodeLookup__Group__0__Impl rule__NodeLookup__Group__1 ;
    public final void rule__NodeLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12053:1: ( rule__NodeLookup__Group__0__Impl rule__NodeLookup__Group__1 )
            // InternalOpenCypherParser.g:12054:2: rule__NodeLookup__Group__0__Impl rule__NodeLookup__Group__1
            {
            pushFollow(FOLLOW_68);
            rule__NodeLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__0"


    // $ANTLR start "rule__NodeLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12061:1: rule__NodeLookup__Group__0__Impl : ( NODE ) ;
    public final void rule__NodeLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12065:1: ( ( NODE ) )
            // InternalOpenCypherParser.g:12066:1: ( NODE )
            {
            // InternalOpenCypherParser.g:12066:1: ( NODE )
            // InternalOpenCypherParser.g:12067:2: NODE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupAccess().getNODEKeyword_0()); 
            }
            match(input,NODE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupAccess().getNODEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__0__Impl"


    // $ANTLR start "rule__NodeLookup__Group__1"
    // InternalOpenCypherParser.g:12076:1: rule__NodeLookup__Group__1 : rule__NodeLookup__Group__1__Impl ;
    public final void rule__NodeLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12080:1: ( rule__NodeLookup__Group__1__Impl )
            // InternalOpenCypherParser.g:12081:2: rule__NodeLookup__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__1"


    // $ANTLR start "rule__NodeLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12087:1: rule__NodeLookup__Group__1__Impl : ( ( rule__NodeLookup__Alternatives_1 ) ) ;
    public final void rule__NodeLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12091:1: ( ( ( rule__NodeLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:12092:1: ( ( rule__NodeLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:12092:1: ( ( rule__NodeLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:12093:2: ( rule__NodeLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:12094:2: ( rule__NodeLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:12094:3: rule__NodeLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__NodeLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLookup__Group__1__Impl"


    // $ANTLR start "rule__RelationshipLookup__Group__0"
    // InternalOpenCypherParser.g:12103:1: rule__RelationshipLookup__Group__0 : rule__RelationshipLookup__Group__0__Impl rule__RelationshipLookup__Group__1 ;
    public final void rule__RelationshipLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12107:1: ( rule__RelationshipLookup__Group__0__Impl rule__RelationshipLookup__Group__1 )
            // InternalOpenCypherParser.g:12108:2: rule__RelationshipLookup__Group__0__Impl rule__RelationshipLookup__Group__1
            {
            pushFollow(FOLLOW_68);
            rule__RelationshipLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__0"


    // $ANTLR start "rule__RelationshipLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12115:1: rule__RelationshipLookup__Group__0__Impl : ( ( rule__RelationshipLookup__Alternatives_0 ) ) ;
    public final void rule__RelationshipLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12119:1: ( ( ( rule__RelationshipLookup__Alternatives_0 ) ) )
            // InternalOpenCypherParser.g:12120:1: ( ( rule__RelationshipLookup__Alternatives_0 ) )
            {
            // InternalOpenCypherParser.g:12120:1: ( ( rule__RelationshipLookup__Alternatives_0 ) )
            // InternalOpenCypherParser.g:12121:2: ( rule__RelationshipLookup__Alternatives_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupAccess().getAlternatives_0()); 
            }
            // InternalOpenCypherParser.g:12122:2: ( rule__RelationshipLookup__Alternatives_0 )
            // InternalOpenCypherParser.g:12122:3: rule__RelationshipLookup__Alternatives_0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Alternatives_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__0__Impl"


    // $ANTLR start "rule__RelationshipLookup__Group__1"
    // InternalOpenCypherParser.g:12130:1: rule__RelationshipLookup__Group__1 : rule__RelationshipLookup__Group__1__Impl ;
    public final void rule__RelationshipLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12134:1: ( rule__RelationshipLookup__Group__1__Impl )
            // InternalOpenCypherParser.g:12135:2: rule__RelationshipLookup__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__1"


    // $ANTLR start "rule__RelationshipLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12141:1: rule__RelationshipLookup__Group__1__Impl : ( ( rule__RelationshipLookup__Alternatives_1 ) ) ;
    public final void rule__RelationshipLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12145:1: ( ( ( rule__RelationshipLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:12146:1: ( ( rule__RelationshipLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:12146:1: ( ( rule__RelationshipLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:12147:2: ( rule__RelationshipLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:12148:2: ( rule__RelationshipLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:12148:3: rule__RelationshipLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipLookup__Group__1__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__0"
    // InternalOpenCypherParser.g:12157:1: rule__IdentifiedIndexLookup__Group__0 : rule__IdentifiedIndexLookup__Group__0__Impl rule__IdentifiedIndexLookup__Group__1 ;
    public final void rule__IdentifiedIndexLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12161:1: ( rule__IdentifiedIndexLookup__Group__0__Impl rule__IdentifiedIndexLookup__Group__1 )
            // InternalOpenCypherParser.g:12162:2: rule__IdentifiedIndexLookup__Group__0__Impl rule__IdentifiedIndexLookup__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IdentifiedIndexLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__0"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12169:1: rule__IdentifiedIndexLookup__Group__0__Impl : ( Colon ) ;
    public final void rule__IdentifiedIndexLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12173:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:12174:1: ( Colon )
            {
            // InternalOpenCypherParser.g:12174:1: ( Colon )
            // InternalOpenCypherParser.g:12175:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__0__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__1"
    // InternalOpenCypherParser.g:12184:1: rule__IdentifiedIndexLookup__Group__1 : rule__IdentifiedIndexLookup__Group__1__Impl rule__IdentifiedIndexLookup__Group__2 ;
    public final void rule__IdentifiedIndexLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12188:1: ( rule__IdentifiedIndexLookup__Group__1__Impl rule__IdentifiedIndexLookup__Group__2 )
            // InternalOpenCypherParser.g:12189:2: rule__IdentifiedIndexLookup__Group__1__Impl rule__IdentifiedIndexLookup__Group__2
            {
            pushFollow(FOLLOW_23);
            rule__IdentifiedIndexLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__1"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12196:1: rule__IdentifiedIndexLookup__Group__1__Impl : ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) ) ;
    public final void rule__IdentifiedIndexLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12200:1: ( ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:12201:1: ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:12201:1: ( ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 ) )
            // InternalOpenCypherParser.g:12202:2: ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:12203:2: ( rule__IdentifiedIndexLookup__IndexNameAssignment_1 )
            // InternalOpenCypherParser.g:12203:3: rule__IdentifiedIndexLookup__IndexNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__IndexNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__1__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__2"
    // InternalOpenCypherParser.g:12211:1: rule__IdentifiedIndexLookup__Group__2 : rule__IdentifiedIndexLookup__Group__2__Impl rule__IdentifiedIndexLookup__Group__3 ;
    public final void rule__IdentifiedIndexLookup__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12215:1: ( rule__IdentifiedIndexLookup__Group__2__Impl rule__IdentifiedIndexLookup__Group__3 )
            // InternalOpenCypherParser.g:12216:2: rule__IdentifiedIndexLookup__Group__2__Impl rule__IdentifiedIndexLookup__Group__3
            {
            pushFollow(FOLLOW_9);
            rule__IdentifiedIndexLookup__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__2"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__2__Impl"
    // InternalOpenCypherParser.g:12223:1: rule__IdentifiedIndexLookup__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__IdentifiedIndexLookup__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12227:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:12228:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:12228:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:12229:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__2__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__3"
    // InternalOpenCypherParser.g:12238:1: rule__IdentifiedIndexLookup__Group__3 : rule__IdentifiedIndexLookup__Group__3__Impl rule__IdentifiedIndexLookup__Group__4 ;
    public final void rule__IdentifiedIndexLookup__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12242:1: ( rule__IdentifiedIndexLookup__Group__3__Impl rule__IdentifiedIndexLookup__Group__4 )
            // InternalOpenCypherParser.g:12243:2: rule__IdentifiedIndexLookup__Group__3__Impl rule__IdentifiedIndexLookup__Group__4
            {
            pushFollow(FOLLOW_8);
            rule__IdentifiedIndexLookup__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__3"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__3__Impl"
    // InternalOpenCypherParser.g:12250:1: rule__IdentifiedIndexLookup__Group__3__Impl : ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) ) ;
    public final void rule__IdentifiedIndexLookup__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12254:1: ( ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) ) )
            // InternalOpenCypherParser.g:12255:1: ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:12255:1: ( ( rule__IdentifiedIndexLookup__KeyAssignment_3 ) )
            // InternalOpenCypherParser.g:12256:2: ( rule__IdentifiedIndexLookup__KeyAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3()); 
            }
            // InternalOpenCypherParser.g:12257:2: ( rule__IdentifiedIndexLookup__KeyAssignment_3 )
            // InternalOpenCypherParser.g:12257:3: rule__IdentifiedIndexLookup__KeyAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__KeyAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getKeyAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__3__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__4"
    // InternalOpenCypherParser.g:12265:1: rule__IdentifiedIndexLookup__Group__4 : rule__IdentifiedIndexLookup__Group__4__Impl rule__IdentifiedIndexLookup__Group__5 ;
    public final void rule__IdentifiedIndexLookup__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12269:1: ( rule__IdentifiedIndexLookup__Group__4__Impl rule__IdentifiedIndexLookup__Group__5 )
            // InternalOpenCypherParser.g:12270:2: rule__IdentifiedIndexLookup__Group__4__Impl rule__IdentifiedIndexLookup__Group__5
            {
            pushFollow(FOLLOW_69);
            rule__IdentifiedIndexLookup__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__4"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__4__Impl"
    // InternalOpenCypherParser.g:12277:1: rule__IdentifiedIndexLookup__Group__4__Impl : ( EqualsSign ) ;
    public final void rule__IdentifiedIndexLookup__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12281:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:12282:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:12282:1: ( EqualsSign )
            // InternalOpenCypherParser.g:12283:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getEqualsSignKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__4__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__5"
    // InternalOpenCypherParser.g:12292:1: rule__IdentifiedIndexLookup__Group__5 : rule__IdentifiedIndexLookup__Group__5__Impl rule__IdentifiedIndexLookup__Group__6 ;
    public final void rule__IdentifiedIndexLookup__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12296:1: ( rule__IdentifiedIndexLookup__Group__5__Impl rule__IdentifiedIndexLookup__Group__6 )
            // InternalOpenCypherParser.g:12297:2: rule__IdentifiedIndexLookup__Group__5__Impl rule__IdentifiedIndexLookup__Group__6
            {
            pushFollow(FOLLOW_24);
            rule__IdentifiedIndexLookup__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__5"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__5__Impl"
    // InternalOpenCypherParser.g:12304:1: rule__IdentifiedIndexLookup__Group__5__Impl : ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) ) ;
    public final void rule__IdentifiedIndexLookup__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12308:1: ( ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) ) )
            // InternalOpenCypherParser.g:12309:1: ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) )
            {
            // InternalOpenCypherParser.g:12309:1: ( ( rule__IdentifiedIndexLookup__Alternatives_5 ) )
            // InternalOpenCypherParser.g:12310:2: ( rule__IdentifiedIndexLookup__Alternatives_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5()); 
            }
            // InternalOpenCypherParser.g:12311:2: ( rule__IdentifiedIndexLookup__Alternatives_5 )
            // InternalOpenCypherParser.g:12311:3: rule__IdentifiedIndexLookup__Alternatives_5
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Alternatives_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getAlternatives_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__5__Impl"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__6"
    // InternalOpenCypherParser.g:12319:1: rule__IdentifiedIndexLookup__Group__6 : rule__IdentifiedIndexLookup__Group__6__Impl ;
    public final void rule__IdentifiedIndexLookup__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12323:1: ( rule__IdentifiedIndexLookup__Group__6__Impl )
            // InternalOpenCypherParser.g:12324:2: rule__IdentifiedIndexLookup__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IdentifiedIndexLookup__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__6"


    // $ANTLR start "rule__IdentifiedIndexLookup__Group__6__Impl"
    // InternalOpenCypherParser.g:12330:1: rule__IdentifiedIndexLookup__Group__6__Impl : ( RightParenthesis ) ;
    public final void rule__IdentifiedIndexLookup__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12334:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:12335:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:12335:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:12336:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getRightParenthesisKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__Group__6__Impl"


    // $ANTLR start "rule__IndexQuery__Group__0"
    // InternalOpenCypherParser.g:12346:1: rule__IndexQuery__Group__0 : rule__IndexQuery__Group__0__Impl rule__IndexQuery__Group__1 ;
    public final void rule__IndexQuery__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12350:1: ( rule__IndexQuery__Group__0__Impl rule__IndexQuery__Group__1 )
            // InternalOpenCypherParser.g:12351:2: rule__IndexQuery__Group__0__Impl rule__IndexQuery__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__IndexQuery__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__0"


    // $ANTLR start "rule__IndexQuery__Group__0__Impl"
    // InternalOpenCypherParser.g:12358:1: rule__IndexQuery__Group__0__Impl : ( Colon ) ;
    public final void rule__IndexQuery__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12362:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:12363:1: ( Colon )
            {
            // InternalOpenCypherParser.g:12363:1: ( Colon )
            // InternalOpenCypherParser.g:12364:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__0__Impl"


    // $ANTLR start "rule__IndexQuery__Group__1"
    // InternalOpenCypherParser.g:12373:1: rule__IndexQuery__Group__1 : rule__IndexQuery__Group__1__Impl rule__IndexQuery__Group__2 ;
    public final void rule__IndexQuery__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12377:1: ( rule__IndexQuery__Group__1__Impl rule__IndexQuery__Group__2 )
            // InternalOpenCypherParser.g:12378:2: rule__IndexQuery__Group__1__Impl rule__IndexQuery__Group__2
            {
            pushFollow(FOLLOW_23);
            rule__IndexQuery__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__1"


    // $ANTLR start "rule__IndexQuery__Group__1__Impl"
    // InternalOpenCypherParser.g:12385:1: rule__IndexQuery__Group__1__Impl : ( ( rule__IndexQuery__IndexNameAssignment_1 ) ) ;
    public final void rule__IndexQuery__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12389:1: ( ( ( rule__IndexQuery__IndexNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:12390:1: ( ( rule__IndexQuery__IndexNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:12390:1: ( ( rule__IndexQuery__IndexNameAssignment_1 ) )
            // InternalOpenCypherParser.g:12391:2: ( rule__IndexQuery__IndexNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:12392:2: ( rule__IndexQuery__IndexNameAssignment_1 )
            // InternalOpenCypherParser.g:12392:3: rule__IndexQuery__IndexNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__IndexNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getIndexNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__1__Impl"


    // $ANTLR start "rule__IndexQuery__Group__2"
    // InternalOpenCypherParser.g:12400:1: rule__IndexQuery__Group__2 : rule__IndexQuery__Group__2__Impl rule__IndexQuery__Group__3 ;
    public final void rule__IndexQuery__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12404:1: ( rule__IndexQuery__Group__2__Impl rule__IndexQuery__Group__3 )
            // InternalOpenCypherParser.g:12405:2: rule__IndexQuery__Group__2__Impl rule__IndexQuery__Group__3
            {
            pushFollow(FOLLOW_70);
            rule__IndexQuery__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__2"


    // $ANTLR start "rule__IndexQuery__Group__2__Impl"
    // InternalOpenCypherParser.g:12412:1: rule__IndexQuery__Group__2__Impl : ( LeftParenthesis ) ;
    public final void rule__IndexQuery__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12416:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:12417:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:12417:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:12418:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__2__Impl"


    // $ANTLR start "rule__IndexQuery__Group__3"
    // InternalOpenCypherParser.g:12427:1: rule__IndexQuery__Group__3 : rule__IndexQuery__Group__3__Impl rule__IndexQuery__Group__4 ;
    public final void rule__IndexQuery__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12431:1: ( rule__IndexQuery__Group__3__Impl rule__IndexQuery__Group__4 )
            // InternalOpenCypherParser.g:12432:2: rule__IndexQuery__Group__3__Impl rule__IndexQuery__Group__4
            {
            pushFollow(FOLLOW_24);
            rule__IndexQuery__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__3"


    // $ANTLR start "rule__IndexQuery__Group__3__Impl"
    // InternalOpenCypherParser.g:12439:1: rule__IndexQuery__Group__3__Impl : ( ( rule__IndexQuery__Alternatives_3 ) ) ;
    public final void rule__IndexQuery__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12443:1: ( ( ( rule__IndexQuery__Alternatives_3 ) ) )
            // InternalOpenCypherParser.g:12444:1: ( ( rule__IndexQuery__Alternatives_3 ) )
            {
            // InternalOpenCypherParser.g:12444:1: ( ( rule__IndexQuery__Alternatives_3 ) )
            // InternalOpenCypherParser.g:12445:2: ( rule__IndexQuery__Alternatives_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getAlternatives_3()); 
            }
            // InternalOpenCypherParser.g:12446:2: ( rule__IndexQuery__Alternatives_3 )
            // InternalOpenCypherParser.g:12446:3: rule__IndexQuery__Alternatives_3
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Alternatives_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getAlternatives_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__3__Impl"


    // $ANTLR start "rule__IndexQuery__Group__4"
    // InternalOpenCypherParser.g:12454:1: rule__IndexQuery__Group__4 : rule__IndexQuery__Group__4__Impl ;
    public final void rule__IndexQuery__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12458:1: ( rule__IndexQuery__Group__4__Impl )
            // InternalOpenCypherParser.g:12459:2: rule__IndexQuery__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IndexQuery__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__4"


    // $ANTLR start "rule__IndexQuery__Group__4__Impl"
    // InternalOpenCypherParser.g:12465:1: rule__IndexQuery__Group__4__Impl : ( RightParenthesis ) ;
    public final void rule__IndexQuery__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12469:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:12470:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:12470:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:12471:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getRightParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__Group__4__Impl"


    // $ANTLR start "rule__IdLookup__Group__0"
    // InternalOpenCypherParser.g:12481:1: rule__IdLookup__Group__0 : rule__IdLookup__Group__0__Impl rule__IdLookup__Group__1 ;
    public final void rule__IdLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12485:1: ( rule__IdLookup__Group__0__Impl rule__IdLookup__Group__1 )
            // InternalOpenCypherParser.g:12486:2: rule__IdLookup__Group__0__Impl rule__IdLookup__Group__1
            {
            pushFollow(FOLLOW_71);
            rule__IdLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__0"


    // $ANTLR start "rule__IdLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:12493:1: rule__IdLookup__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__IdLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12497:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:12498:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:12498:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:12499:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__0__Impl"


    // $ANTLR start "rule__IdLookup__Group__1"
    // InternalOpenCypherParser.g:12508:1: rule__IdLookup__Group__1 : rule__IdLookup__Group__1__Impl rule__IdLookup__Group__2 ;
    public final void rule__IdLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12512:1: ( rule__IdLookup__Group__1__Impl rule__IdLookup__Group__2 )
            // InternalOpenCypherParser.g:12513:2: rule__IdLookup__Group__1__Impl rule__IdLookup__Group__2
            {
            pushFollow(FOLLOW_24);
            rule__IdLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__1"


    // $ANTLR start "rule__IdLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:12520:1: rule__IdLookup__Group__1__Impl : ( ( rule__IdLookup__Alternatives_1 ) ) ;
    public final void rule__IdLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12524:1: ( ( ( rule__IdLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:12525:1: ( ( rule__IdLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:12525:1: ( ( rule__IdLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:12526:2: ( rule__IdLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:12527:2: ( rule__IdLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:12527:3: rule__IdLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__IdLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__1__Impl"


    // $ANTLR start "rule__IdLookup__Group__2"
    // InternalOpenCypherParser.g:12535:1: rule__IdLookup__Group__2 : rule__IdLookup__Group__2__Impl ;
    public final void rule__IdLookup__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12539:1: ( rule__IdLookup__Group__2__Impl )
            // InternalOpenCypherParser.g:12540:2: rule__IdLookup__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IdLookup__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__2"


    // $ANTLR start "rule__IdLookup__Group__2__Impl"
    // InternalOpenCypherParser.g:12546:1: rule__IdLookup__Group__2__Impl : ( RightParenthesis ) ;
    public final void rule__IdLookup__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12550:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:12551:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:12551:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:12552:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__Group__2__Impl"


    // $ANTLR start "rule__LiteralIds__Group__0"
    // InternalOpenCypherParser.g:12562:1: rule__LiteralIds__Group__0 : rule__LiteralIds__Group__0__Impl rule__LiteralIds__Group__1 ;
    public final void rule__LiteralIds__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12566:1: ( rule__LiteralIds__Group__0__Impl rule__LiteralIds__Group__1 )
            // InternalOpenCypherParser.g:12567:2: rule__LiteralIds__Group__0__Impl rule__LiteralIds__Group__1
            {
            pushFollow(FOLLOW_48);
            rule__LiteralIds__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__0"


    // $ANTLR start "rule__LiteralIds__Group__0__Impl"
    // InternalOpenCypherParser.g:12574:1: rule__LiteralIds__Group__0__Impl : ( ( rule__LiteralIds__IdsAssignment_0 ) ) ;
    public final void rule__LiteralIds__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12578:1: ( ( ( rule__LiteralIds__IdsAssignment_0 ) ) )
            // InternalOpenCypherParser.g:12579:1: ( ( rule__LiteralIds__IdsAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:12579:1: ( ( rule__LiteralIds__IdsAssignment_0 ) )
            // InternalOpenCypherParser.g:12580:2: ( rule__LiteralIds__IdsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0()); 
            }
            // InternalOpenCypherParser.g:12581:2: ( rule__LiteralIds__IdsAssignment_0 )
            // InternalOpenCypherParser.g:12581:3: rule__LiteralIds__IdsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__IdsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__0__Impl"


    // $ANTLR start "rule__LiteralIds__Group__1"
    // InternalOpenCypherParser.g:12589:1: rule__LiteralIds__Group__1 : rule__LiteralIds__Group__1__Impl ;
    public final void rule__LiteralIds__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12593:1: ( rule__LiteralIds__Group__1__Impl )
            // InternalOpenCypherParser.g:12594:2: rule__LiteralIds__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__1"


    // $ANTLR start "rule__LiteralIds__Group__1__Impl"
    // InternalOpenCypherParser.g:12600:1: rule__LiteralIds__Group__1__Impl : ( ( rule__LiteralIds__Group_1__0 )* ) ;
    public final void rule__LiteralIds__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12604:1: ( ( ( rule__LiteralIds__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:12605:1: ( ( rule__LiteralIds__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:12605:1: ( ( rule__LiteralIds__Group_1__0 )* )
            // InternalOpenCypherParser.g:12606:2: ( rule__LiteralIds__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:12607:2: ( rule__LiteralIds__Group_1__0 )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==Comma) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // InternalOpenCypherParser.g:12607:3: rule__LiteralIds__Group_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__LiteralIds__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group__1__Impl"


    // $ANTLR start "rule__LiteralIds__Group_1__0"
    // InternalOpenCypherParser.g:12616:1: rule__LiteralIds__Group_1__0 : rule__LiteralIds__Group_1__0__Impl rule__LiteralIds__Group_1__1 ;
    public final void rule__LiteralIds__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12620:1: ( rule__LiteralIds__Group_1__0__Impl rule__LiteralIds__Group_1__1 )
            // InternalOpenCypherParser.g:12621:2: rule__LiteralIds__Group_1__0__Impl rule__LiteralIds__Group_1__1
            {
            pushFollow(FOLLOW_17);
            rule__LiteralIds__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__0"


    // $ANTLR start "rule__LiteralIds__Group_1__0__Impl"
    // InternalOpenCypherParser.g:12628:1: rule__LiteralIds__Group_1__0__Impl : ( Comma ) ;
    public final void rule__LiteralIds__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12632:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:12633:1: ( Comma )
            {
            // InternalOpenCypherParser.g:12633:1: ( Comma )
            // InternalOpenCypherParser.g:12634:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getCommaKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__0__Impl"


    // $ANTLR start "rule__LiteralIds__Group_1__1"
    // InternalOpenCypherParser.g:12643:1: rule__LiteralIds__Group_1__1 : rule__LiteralIds__Group_1__1__Impl ;
    public final void rule__LiteralIds__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12647:1: ( rule__LiteralIds__Group_1__1__Impl )
            // InternalOpenCypherParser.g:12648:2: rule__LiteralIds__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__1"


    // $ANTLR start "rule__LiteralIds__Group_1__1__Impl"
    // InternalOpenCypherParser.g:12654:1: rule__LiteralIds__Group_1__1__Impl : ( ( rule__LiteralIds__IdsAssignment_1_1 ) ) ;
    public final void rule__LiteralIds__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12658:1: ( ( ( rule__LiteralIds__IdsAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:12659:1: ( ( rule__LiteralIds__IdsAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:12659:1: ( ( rule__LiteralIds__IdsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:12660:2: ( rule__LiteralIds__IdsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:12661:2: ( rule__LiteralIds__IdsAssignment_1_1 )
            // InternalOpenCypherParser.g:12661:3: rule__LiteralIds__IdsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__LiteralIds__IdsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__Group_1__1__Impl"


    // $ANTLR start "rule__Where__Group__0"
    // InternalOpenCypherParser.g:12670:1: rule__Where__Group__0 : rule__Where__Group__0__Impl rule__Where__Group__1 ;
    public final void rule__Where__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12674:1: ( rule__Where__Group__0__Impl rule__Where__Group__1 )
            // InternalOpenCypherParser.g:12675:2: rule__Where__Group__0__Impl rule__Where__Group__1
            {
            pushFollow(FOLLOW_36);
            rule__Where__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Where__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__0"


    // $ANTLR start "rule__Where__Group__0__Impl"
    // InternalOpenCypherParser.g:12682:1: rule__Where__Group__0__Impl : ( WHERE ) ;
    public final void rule__Where__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12686:1: ( ( WHERE ) )
            // InternalOpenCypherParser.g:12687:1: ( WHERE )
            {
            // InternalOpenCypherParser.g:12687:1: ( WHERE )
            // InternalOpenCypherParser.g:12688:2: WHERE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getWHEREKeyword_0()); 
            }
            match(input,WHERE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getWHEREKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__0__Impl"


    // $ANTLR start "rule__Where__Group__1"
    // InternalOpenCypherParser.g:12697:1: rule__Where__Group__1 : rule__Where__Group__1__Impl ;
    public final void rule__Where__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12701:1: ( rule__Where__Group__1__Impl )
            // InternalOpenCypherParser.g:12702:2: rule__Where__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Where__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__1"


    // $ANTLR start "rule__Where__Group__1__Impl"
    // InternalOpenCypherParser.g:12708:1: rule__Where__Group__1__Impl : ( ( rule__Where__ExpressionAssignment_1 ) ) ;
    public final void rule__Where__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12712:1: ( ( ( rule__Where__ExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:12713:1: ( ( rule__Where__ExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:12713:1: ( ( rule__Where__ExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:12714:2: ( rule__Where__ExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:12715:2: ( rule__Where__ExpressionAssignment_1 )
            // InternalOpenCypherParser.g:12715:3: rule__Where__ExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Where__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__Group__1__Impl"


    // $ANTLR start "rule__Pattern__Group__0"
    // InternalOpenCypherParser.g:12724:1: rule__Pattern__Group__0 : rule__Pattern__Group__0__Impl rule__Pattern__Group__1 ;
    public final void rule__Pattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12728:1: ( rule__Pattern__Group__0__Impl rule__Pattern__Group__1 )
            // InternalOpenCypherParser.g:12729:2: rule__Pattern__Group__0__Impl rule__Pattern__Group__1
            {
            pushFollow(FOLLOW_48);
            rule__Pattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Pattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__0"


    // $ANTLR start "rule__Pattern__Group__0__Impl"
    // InternalOpenCypherParser.g:12736:1: rule__Pattern__Group__0__Impl : ( ( rule__Pattern__PatternsAssignment_0 ) ) ;
    public final void rule__Pattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12740:1: ( ( ( rule__Pattern__PatternsAssignment_0 ) ) )
            // InternalOpenCypherParser.g:12741:1: ( ( rule__Pattern__PatternsAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:12741:1: ( ( rule__Pattern__PatternsAssignment_0 ) )
            // InternalOpenCypherParser.g:12742:2: ( rule__Pattern__PatternsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsAssignment_0()); 
            }
            // InternalOpenCypherParser.g:12743:2: ( rule__Pattern__PatternsAssignment_0 )
            // InternalOpenCypherParser.g:12743:3: rule__Pattern__PatternsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__PatternsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__0__Impl"


    // $ANTLR start "rule__Pattern__Group__1"
    // InternalOpenCypherParser.g:12751:1: rule__Pattern__Group__1 : rule__Pattern__Group__1__Impl ;
    public final void rule__Pattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12755:1: ( rule__Pattern__Group__1__Impl )
            // InternalOpenCypherParser.g:12756:2: rule__Pattern__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__1"


    // $ANTLR start "rule__Pattern__Group__1__Impl"
    // InternalOpenCypherParser.g:12762:1: rule__Pattern__Group__1__Impl : ( ( rule__Pattern__Group_1__0 )* ) ;
    public final void rule__Pattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12766:1: ( ( ( rule__Pattern__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:12767:1: ( ( rule__Pattern__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:12767:1: ( ( rule__Pattern__Group_1__0 )* )
            // InternalOpenCypherParser.g:12768:2: ( rule__Pattern__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:12769:2: ( rule__Pattern__Group_1__0 )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==Comma) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // InternalOpenCypherParser.g:12769:3: rule__Pattern__Group_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Pattern__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group__1__Impl"


    // $ANTLR start "rule__Pattern__Group_1__0"
    // InternalOpenCypherParser.g:12778:1: rule__Pattern__Group_1__0 : rule__Pattern__Group_1__0__Impl rule__Pattern__Group_1__1 ;
    public final void rule__Pattern__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12782:1: ( rule__Pattern__Group_1__0__Impl rule__Pattern__Group_1__1 )
            // InternalOpenCypherParser.g:12783:2: rule__Pattern__Group_1__0__Impl rule__Pattern__Group_1__1
            {
            pushFollow(FOLLOW_42);
            rule__Pattern__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Pattern__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__0"


    // $ANTLR start "rule__Pattern__Group_1__0__Impl"
    // InternalOpenCypherParser.g:12790:1: rule__Pattern__Group_1__0__Impl : ( Comma ) ;
    public final void rule__Pattern__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12794:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:12795:1: ( Comma )
            {
            // InternalOpenCypherParser.g:12795:1: ( Comma )
            // InternalOpenCypherParser.g:12796:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getCommaKeyword_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getCommaKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__0__Impl"


    // $ANTLR start "rule__Pattern__Group_1__1"
    // InternalOpenCypherParser.g:12805:1: rule__Pattern__Group_1__1 : rule__Pattern__Group_1__1__Impl ;
    public final void rule__Pattern__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12809:1: ( rule__Pattern__Group_1__1__Impl )
            // InternalOpenCypherParser.g:12810:2: rule__Pattern__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__1"


    // $ANTLR start "rule__Pattern__Group_1__1__Impl"
    // InternalOpenCypherParser.g:12816:1: rule__Pattern__Group_1__1__Impl : ( ( rule__Pattern__PatternsAssignment_1_1 ) ) ;
    public final void rule__Pattern__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12820:1: ( ( ( rule__Pattern__PatternsAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:12821:1: ( ( rule__Pattern__PatternsAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:12821:1: ( ( rule__Pattern__PatternsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:12822:2: ( rule__Pattern__PatternsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:12823:2: ( rule__Pattern__PatternsAssignment_1_1 )
            // InternalOpenCypherParser.g:12823:3: rule__Pattern__PatternsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__PatternsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Group_1__1__Impl"


    // $ANTLR start "rule__PatternPart__Group_0__0"
    // InternalOpenCypherParser.g:12832:1: rule__PatternPart__Group_0__0 : rule__PatternPart__Group_0__0__Impl rule__PatternPart__Group_0__1 ;
    public final void rule__PatternPart__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12836:1: ( rule__PatternPart__Group_0__0__Impl rule__PatternPart__Group_0__1 )
            // InternalOpenCypherParser.g:12837:2: rule__PatternPart__Group_0__0__Impl rule__PatternPart__Group_0__1
            {
            pushFollow(FOLLOW_8);
            rule__PatternPart__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternPart__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__0"


    // $ANTLR start "rule__PatternPart__Group_0__0__Impl"
    // InternalOpenCypherParser.g:12844:1: rule__PatternPart__Group_0__0__Impl : ( ( rule__PatternPart__VarAssignment_0_0 ) ) ;
    public final void rule__PatternPart__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12848:1: ( ( ( rule__PatternPart__VarAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:12849:1: ( ( rule__PatternPart__VarAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:12849:1: ( ( rule__PatternPart__VarAssignment_0_0 ) )
            // InternalOpenCypherParser.g:12850:2: ( rule__PatternPart__VarAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getVarAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:12851:2: ( rule__PatternPart__VarAssignment_0_0 )
            // InternalOpenCypherParser.g:12851:3: rule__PatternPart__VarAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__VarAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getVarAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__0__Impl"


    // $ANTLR start "rule__PatternPart__Group_0__1"
    // InternalOpenCypherParser.g:12859:1: rule__PatternPart__Group_0__1 : rule__PatternPart__Group_0__1__Impl rule__PatternPart__Group_0__2 ;
    public final void rule__PatternPart__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12863:1: ( rule__PatternPart__Group_0__1__Impl rule__PatternPart__Group_0__2 )
            // InternalOpenCypherParser.g:12864:2: rule__PatternPart__Group_0__1__Impl rule__PatternPart__Group_0__2
            {
            pushFollow(FOLLOW_42);
            rule__PatternPart__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternPart__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__1"


    // $ANTLR start "rule__PatternPart__Group_0__1__Impl"
    // InternalOpenCypherParser.g:12871:1: rule__PatternPart__Group_0__1__Impl : ( EqualsSign ) ;
    public final void rule__PatternPart__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12875:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:12876:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:12876:1: ( EqualsSign )
            // InternalOpenCypherParser.g:12877:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getEqualsSignKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__1__Impl"


    // $ANTLR start "rule__PatternPart__Group_0__2"
    // InternalOpenCypherParser.g:12886:1: rule__PatternPart__Group_0__2 : rule__PatternPart__Group_0__2__Impl ;
    public final void rule__PatternPart__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12890:1: ( rule__PatternPart__Group_0__2__Impl )
            // InternalOpenCypherParser.g:12891:2: rule__PatternPart__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__2"


    // $ANTLR start "rule__PatternPart__Group_0__2__Impl"
    // InternalOpenCypherParser.g:12897:1: rule__PatternPart__Group_0__2__Impl : ( ( rule__PatternPart__PartAssignment_0_2 ) ) ;
    public final void rule__PatternPart__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12901:1: ( ( ( rule__PatternPart__PartAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:12902:1: ( ( rule__PatternPart__PartAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:12902:1: ( ( rule__PatternPart__PartAssignment_0_2 ) )
            // InternalOpenCypherParser.g:12903:2: ( rule__PatternPart__PartAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getPartAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:12904:2: ( rule__PatternPart__PartAssignment_0_2 )
            // InternalOpenCypherParser.g:12904:3: rule__PatternPart__PartAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__PatternPart__PartAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getPartAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__Group_0__2__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__0"
    // InternalOpenCypherParser.g:12913:1: rule__ShortestPathPattern__Group_0__0 : rule__ShortestPathPattern__Group_0__0__Impl rule__ShortestPathPattern__Group_0__1 ;
    public final void rule__ShortestPathPattern__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12917:1: ( rule__ShortestPathPattern__Group_0__0__Impl rule__ShortestPathPattern__Group_0__1 )
            // InternalOpenCypherParser.g:12918:2: rule__ShortestPathPattern__Group_0__0__Impl rule__ShortestPathPattern__Group_0__1
            {
            pushFollow(FOLLOW_72);
            rule__ShortestPathPattern__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__0"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__0__Impl"
    // InternalOpenCypherParser.g:12925:1: rule__ShortestPathPattern__Group_0__0__Impl : ( () ) ;
    public final void rule__ShortestPathPattern__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12929:1: ( ( () ) )
            // InternalOpenCypherParser.g:12930:1: ( () )
            {
            // InternalOpenCypherParser.g:12930:1: ( () )
            // InternalOpenCypherParser.g:12931:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0()); 
            }
            // InternalOpenCypherParser.g:12932:2: ()
            // InternalOpenCypherParser.g:12932:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getShortestPathAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__0__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__1"
    // InternalOpenCypherParser.g:12940:1: rule__ShortestPathPattern__Group_0__1 : rule__ShortestPathPattern__Group_0__1__Impl rule__ShortestPathPattern__Group_0__2 ;
    public final void rule__ShortestPathPattern__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12944:1: ( rule__ShortestPathPattern__Group_0__1__Impl rule__ShortestPathPattern__Group_0__2 )
            // InternalOpenCypherParser.g:12945:2: rule__ShortestPathPattern__Group_0__1__Impl rule__ShortestPathPattern__Group_0__2
            {
            pushFollow(FOLLOW_23);
            rule__ShortestPathPattern__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__1"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__1__Impl"
    // InternalOpenCypherParser.g:12952:1: rule__ShortestPathPattern__Group_0__1__Impl : ( SHORTESTPATH ) ;
    public final void rule__ShortestPathPattern__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12956:1: ( ( SHORTESTPATH ) )
            // InternalOpenCypherParser.g:12957:1: ( SHORTESTPATH )
            {
            // InternalOpenCypherParser.g:12957:1: ( SHORTESTPATH )
            // InternalOpenCypherParser.g:12958:2: SHORTESTPATH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1()); 
            }
            match(input,SHORTESTPATH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getSHORTESTPATHKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__1__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__2"
    // InternalOpenCypherParser.g:12967:1: rule__ShortestPathPattern__Group_0__2 : rule__ShortestPathPattern__Group_0__2__Impl rule__ShortestPathPattern__Group_0__3 ;
    public final void rule__ShortestPathPattern__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12971:1: ( rule__ShortestPathPattern__Group_0__2__Impl rule__ShortestPathPattern__Group_0__3 )
            // InternalOpenCypherParser.g:12972:2: rule__ShortestPathPattern__Group_0__2__Impl rule__ShortestPathPattern__Group_0__3
            {
            pushFollow(FOLLOW_42);
            rule__ShortestPathPattern__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__2"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__2__Impl"
    // InternalOpenCypherParser.g:12979:1: rule__ShortestPathPattern__Group_0__2__Impl : ( LeftParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12983:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:12984:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:12984:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:12985:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__2__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__3"
    // InternalOpenCypherParser.g:12994:1: rule__ShortestPathPattern__Group_0__3 : rule__ShortestPathPattern__Group_0__3__Impl rule__ShortestPathPattern__Group_0__4 ;
    public final void rule__ShortestPathPattern__Group_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:12998:1: ( rule__ShortestPathPattern__Group_0__3__Impl rule__ShortestPathPattern__Group_0__4 )
            // InternalOpenCypherParser.g:12999:2: rule__ShortestPathPattern__Group_0__3__Impl rule__ShortestPathPattern__Group_0__4
            {
            pushFollow(FOLLOW_24);
            rule__ShortestPathPattern__Group_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__3"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__3__Impl"
    // InternalOpenCypherParser.g:13006:1: rule__ShortestPathPattern__Group_0__3__Impl : ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) ) ;
    public final void rule__ShortestPathPattern__Group_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13010:1: ( ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) ) )
            // InternalOpenCypherParser.g:13011:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) )
            {
            // InternalOpenCypherParser.g:13011:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_0_3 ) )
            // InternalOpenCypherParser.g:13012:2: ( rule__ShortestPathPattern__PatternElementAssignment_0_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3()); 
            }
            // InternalOpenCypherParser.g:13013:2: ( rule__ShortestPathPattern__PatternElementAssignment_0_3 )
            // InternalOpenCypherParser.g:13013:3: rule__ShortestPathPattern__PatternElementAssignment_0_3
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__PatternElementAssignment_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__3__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__4"
    // InternalOpenCypherParser.g:13021:1: rule__ShortestPathPattern__Group_0__4 : rule__ShortestPathPattern__Group_0__4__Impl ;
    public final void rule__ShortestPathPattern__Group_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13025:1: ( rule__ShortestPathPattern__Group_0__4__Impl )
            // InternalOpenCypherParser.g:13026:2: rule__ShortestPathPattern__Group_0__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__4"


    // $ANTLR start "rule__ShortestPathPattern__Group_0__4__Impl"
    // InternalOpenCypherParser.g:13032:1: rule__ShortestPathPattern__Group_0__4__Impl : ( RightParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13036:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13037:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13037:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13038:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_0__4__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__0"
    // InternalOpenCypherParser.g:13048:1: rule__ShortestPathPattern__Group_1__0 : rule__ShortestPathPattern__Group_1__0__Impl rule__ShortestPathPattern__Group_1__1 ;
    public final void rule__ShortestPathPattern__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13052:1: ( rule__ShortestPathPattern__Group_1__0__Impl rule__ShortestPathPattern__Group_1__1 )
            // InternalOpenCypherParser.g:13053:2: rule__ShortestPathPattern__Group_1__0__Impl rule__ShortestPathPattern__Group_1__1
            {
            pushFollow(FOLLOW_73);
            rule__ShortestPathPattern__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__0"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13060:1: rule__ShortestPathPattern__Group_1__0__Impl : ( () ) ;
    public final void rule__ShortestPathPattern__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13064:1: ( ( () ) )
            // InternalOpenCypherParser.g:13065:1: ( () )
            {
            // InternalOpenCypherParser.g:13065:1: ( () )
            // InternalOpenCypherParser.g:13066:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0()); 
            }
            // InternalOpenCypherParser.g:13067:2: ()
            // InternalOpenCypherParser.g:13067:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getAllShortestPathsAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__0__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__1"
    // InternalOpenCypherParser.g:13075:1: rule__ShortestPathPattern__Group_1__1 : rule__ShortestPathPattern__Group_1__1__Impl rule__ShortestPathPattern__Group_1__2 ;
    public final void rule__ShortestPathPattern__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13079:1: ( rule__ShortestPathPattern__Group_1__1__Impl rule__ShortestPathPattern__Group_1__2 )
            // InternalOpenCypherParser.g:13080:2: rule__ShortestPathPattern__Group_1__1__Impl rule__ShortestPathPattern__Group_1__2
            {
            pushFollow(FOLLOW_23);
            rule__ShortestPathPattern__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__1"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13087:1: rule__ShortestPathPattern__Group_1__1__Impl : ( ALLSHORTESTPATHS ) ;
    public final void rule__ShortestPathPattern__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13091:1: ( ( ALLSHORTESTPATHS ) )
            // InternalOpenCypherParser.g:13092:1: ( ALLSHORTESTPATHS )
            {
            // InternalOpenCypherParser.g:13092:1: ( ALLSHORTESTPATHS )
            // InternalOpenCypherParser.g:13093:2: ALLSHORTESTPATHS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1()); 
            }
            match(input,ALLSHORTESTPATHS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getALLSHORTESTPATHSKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__1__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__2"
    // InternalOpenCypherParser.g:13102:1: rule__ShortestPathPattern__Group_1__2 : rule__ShortestPathPattern__Group_1__2__Impl rule__ShortestPathPattern__Group_1__3 ;
    public final void rule__ShortestPathPattern__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13106:1: ( rule__ShortestPathPattern__Group_1__2__Impl rule__ShortestPathPattern__Group_1__3 )
            // InternalOpenCypherParser.g:13107:2: rule__ShortestPathPattern__Group_1__2__Impl rule__ShortestPathPattern__Group_1__3
            {
            pushFollow(FOLLOW_42);
            rule__ShortestPathPattern__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__2"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__2__Impl"
    // InternalOpenCypherParser.g:13114:1: rule__ShortestPathPattern__Group_1__2__Impl : ( LeftParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13118:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13119:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13119:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13120:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getLeftParenthesisKeyword_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__2__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__3"
    // InternalOpenCypherParser.g:13129:1: rule__ShortestPathPattern__Group_1__3 : rule__ShortestPathPattern__Group_1__3__Impl rule__ShortestPathPattern__Group_1__4 ;
    public final void rule__ShortestPathPattern__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13133:1: ( rule__ShortestPathPattern__Group_1__3__Impl rule__ShortestPathPattern__Group_1__4 )
            // InternalOpenCypherParser.g:13134:2: rule__ShortestPathPattern__Group_1__3__Impl rule__ShortestPathPattern__Group_1__4
            {
            pushFollow(FOLLOW_24);
            rule__ShortestPathPattern__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__3"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__3__Impl"
    // InternalOpenCypherParser.g:13141:1: rule__ShortestPathPattern__Group_1__3__Impl : ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) ) ;
    public final void rule__ShortestPathPattern__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13145:1: ( ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) ) )
            // InternalOpenCypherParser.g:13146:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) )
            {
            // InternalOpenCypherParser.g:13146:1: ( ( rule__ShortestPathPattern__PatternElementAssignment_1_3 ) )
            // InternalOpenCypherParser.g:13147:2: ( rule__ShortestPathPattern__PatternElementAssignment_1_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3()); 
            }
            // InternalOpenCypherParser.g:13148:2: ( rule__ShortestPathPattern__PatternElementAssignment_1_3 )
            // InternalOpenCypherParser.g:13148:3: rule__ShortestPathPattern__PatternElementAssignment_1_3
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__PatternElementAssignment_1_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementAssignment_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__3__Impl"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__4"
    // InternalOpenCypherParser.g:13156:1: rule__ShortestPathPattern__Group_1__4 : rule__ShortestPathPattern__Group_1__4__Impl ;
    public final void rule__ShortestPathPattern__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13160:1: ( rule__ShortestPathPattern__Group_1__4__Impl )
            // InternalOpenCypherParser.g:13161:2: rule__ShortestPathPattern__Group_1__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ShortestPathPattern__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__4"


    // $ANTLR start "rule__ShortestPathPattern__Group_1__4__Impl"
    // InternalOpenCypherParser.g:13167:1: rule__ShortestPathPattern__Group_1__4__Impl : ( RightParenthesis ) ;
    public final void rule__ShortestPathPattern__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13171:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13172:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13172:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13173:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getRightParenthesisKeyword_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__Group_1__4__Impl"


    // $ANTLR start "rule__PatternElement__Group_0__0"
    // InternalOpenCypherParser.g:13183:1: rule__PatternElement__Group_0__0 : rule__PatternElement__Group_0__0__Impl rule__PatternElement__Group_0__1 ;
    public final void rule__PatternElement__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13187:1: ( rule__PatternElement__Group_0__0__Impl rule__PatternElement__Group_0__1 )
            // InternalOpenCypherParser.g:13188:2: rule__PatternElement__Group_0__0__Impl rule__PatternElement__Group_0__1
            {
            pushFollow(FOLLOW_30);
            rule__PatternElement__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__0"


    // $ANTLR start "rule__PatternElement__Group_0__0__Impl"
    // InternalOpenCypherParser.g:13195:1: rule__PatternElement__Group_0__0__Impl : ( ( rule__PatternElement__NodepatternAssignment_0_0 ) ) ;
    public final void rule__PatternElement__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13199:1: ( ( ( rule__PatternElement__NodepatternAssignment_0_0 ) ) )
            // InternalOpenCypherParser.g:13200:1: ( ( rule__PatternElement__NodepatternAssignment_0_0 ) )
            {
            // InternalOpenCypherParser.g:13200:1: ( ( rule__PatternElement__NodepatternAssignment_0_0 ) )
            // InternalOpenCypherParser.g:13201:2: ( rule__PatternElement__NodepatternAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0()); 
            }
            // InternalOpenCypherParser.g:13202:2: ( rule__PatternElement__NodepatternAssignment_0_0 )
            // InternalOpenCypherParser.g:13202:3: rule__PatternElement__NodepatternAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__NodepatternAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getNodepatternAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__0__Impl"


    // $ANTLR start "rule__PatternElement__Group_0__1"
    // InternalOpenCypherParser.g:13210:1: rule__PatternElement__Group_0__1 : rule__PatternElement__Group_0__1__Impl ;
    public final void rule__PatternElement__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13214:1: ( rule__PatternElement__Group_0__1__Impl )
            // InternalOpenCypherParser.g:13215:2: rule__PatternElement__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__1"


    // $ANTLR start "rule__PatternElement__Group_0__1__Impl"
    // InternalOpenCypherParser.g:13221:1: rule__PatternElement__Group_0__1__Impl : ( ( rule__PatternElement__ChainAssignment_0_1 )* ) ;
    public final void rule__PatternElement__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13225:1: ( ( ( rule__PatternElement__ChainAssignment_0_1 )* ) )
            // InternalOpenCypherParser.g:13226:1: ( ( rule__PatternElement__ChainAssignment_0_1 )* )
            {
            // InternalOpenCypherParser.g:13226:1: ( ( rule__PatternElement__ChainAssignment_0_1 )* )
            // InternalOpenCypherParser.g:13227:2: ( rule__PatternElement__ChainAssignment_0_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getChainAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:13228:2: ( rule__PatternElement__ChainAssignment_0_1 )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==HyphenMinus||LA87_0==LessThanSign) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // InternalOpenCypherParser.g:13228:3: rule__PatternElement__ChainAssignment_0_1
            	    {
            	    pushFollow(FOLLOW_74);
            	    rule__PatternElement__ChainAssignment_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getChainAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_0__1__Impl"


    // $ANTLR start "rule__PatternElement__Group_1__0"
    // InternalOpenCypherParser.g:13237:1: rule__PatternElement__Group_1__0 : rule__PatternElement__Group_1__0__Impl rule__PatternElement__Group_1__1 ;
    public final void rule__PatternElement__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13241:1: ( rule__PatternElement__Group_1__0__Impl rule__PatternElement__Group_1__1 )
            // InternalOpenCypherParser.g:13242:2: rule__PatternElement__Group_1__0__Impl rule__PatternElement__Group_1__1
            {
            pushFollow(FOLLOW_42);
            rule__PatternElement__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__0"


    // $ANTLR start "rule__PatternElement__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13249:1: rule__PatternElement__Group_1__0__Impl : ( LeftParenthesis ) ;
    public final void rule__PatternElement__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13253:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13254:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13254:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13255:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getLeftParenthesisKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__0__Impl"


    // $ANTLR start "rule__PatternElement__Group_1__1"
    // InternalOpenCypherParser.g:13264:1: rule__PatternElement__Group_1__1 : rule__PatternElement__Group_1__1__Impl rule__PatternElement__Group_1__2 ;
    public final void rule__PatternElement__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13268:1: ( rule__PatternElement__Group_1__1__Impl rule__PatternElement__Group_1__2 )
            // InternalOpenCypherParser.g:13269:2: rule__PatternElement__Group_1__1__Impl rule__PatternElement__Group_1__2
            {
            pushFollow(FOLLOW_24);
            rule__PatternElement__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__1"


    // $ANTLR start "rule__PatternElement__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13276:1: rule__PatternElement__Group_1__1__Impl : ( rulePatternElement ) ;
    public final void rule__PatternElement__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13280:1: ( ( rulePatternElement ) )
            // InternalOpenCypherParser.g:13281:1: ( rulePatternElement )
            {
            // InternalOpenCypherParser.g:13281:1: ( rulePatternElement )
            // InternalOpenCypherParser.g:13282:2: rulePatternElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getPatternElementParserRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__1__Impl"


    // $ANTLR start "rule__PatternElement__Group_1__2"
    // InternalOpenCypherParser.g:13291:1: rule__PatternElement__Group_1__2 : rule__PatternElement__Group_1__2__Impl ;
    public final void rule__PatternElement__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13295:1: ( rule__PatternElement__Group_1__2__Impl )
            // InternalOpenCypherParser.g:13296:2: rule__PatternElement__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternElement__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__2"


    // $ANTLR start "rule__PatternElement__Group_1__2__Impl"
    // InternalOpenCypherParser.g:13302:1: rule__PatternElement__Group_1__2__Impl : ( RightParenthesis ) ;
    public final void rule__PatternElement__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13306:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13307:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13307:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13308:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getRightParenthesisKeyword_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__Group_1__2__Impl"


    // $ANTLR start "rule__NodePattern__Group__0"
    // InternalOpenCypherParser.g:13318:1: rule__NodePattern__Group__0 : rule__NodePattern__Group__0__Impl rule__NodePattern__Group__1 ;
    public final void rule__NodePattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13322:1: ( rule__NodePattern__Group__0__Impl rule__NodePattern__Group__1 )
            // InternalOpenCypherParser.g:13323:2: rule__NodePattern__Group__0__Impl rule__NodePattern__Group__1
            {
            pushFollow(FOLLOW_23);
            rule__NodePattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__0"


    // $ANTLR start "rule__NodePattern__Group__0__Impl"
    // InternalOpenCypherParser.g:13330:1: rule__NodePattern__Group__0__Impl : ( () ) ;
    public final void rule__NodePattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13334:1: ( ( () ) )
            // InternalOpenCypherParser.g:13335:1: ( () )
            {
            // InternalOpenCypherParser.g:13335:1: ( () )
            // InternalOpenCypherParser.g:13336:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getNodePatternAction_0()); 
            }
            // InternalOpenCypherParser.g:13337:2: ()
            // InternalOpenCypherParser.g:13337:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getNodePatternAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__0__Impl"


    // $ANTLR start "rule__NodePattern__Group__1"
    // InternalOpenCypherParser.g:13345:1: rule__NodePattern__Group__1 : rule__NodePattern__Group__1__Impl rule__NodePattern__Group__2 ;
    public final void rule__NodePattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13349:1: ( rule__NodePattern__Group__1__Impl rule__NodePattern__Group__2 )
            // InternalOpenCypherParser.g:13350:2: rule__NodePattern__Group__1__Impl rule__NodePattern__Group__2
            {
            pushFollow(FOLLOW_75);
            rule__NodePattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__1"


    // $ANTLR start "rule__NodePattern__Group__1__Impl"
    // InternalOpenCypherParser.g:13357:1: rule__NodePattern__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__NodePattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13361:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:13362:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:13362:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:13363:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__1__Impl"


    // $ANTLR start "rule__NodePattern__Group__2"
    // InternalOpenCypherParser.g:13372:1: rule__NodePattern__Group__2 : rule__NodePattern__Group__2__Impl rule__NodePattern__Group__3 ;
    public final void rule__NodePattern__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13376:1: ( rule__NodePattern__Group__2__Impl rule__NodePattern__Group__3 )
            // InternalOpenCypherParser.g:13377:2: rule__NodePattern__Group__2__Impl rule__NodePattern__Group__3
            {
            pushFollow(FOLLOW_75);
            rule__NodePattern__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__2"


    // $ANTLR start "rule__NodePattern__Group__2__Impl"
    // InternalOpenCypherParser.g:13384:1: rule__NodePattern__Group__2__Impl : ( ( rule__NodePattern__VariableAssignment_2 )? ) ;
    public final void rule__NodePattern__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13388:1: ( ( ( rule__NodePattern__VariableAssignment_2 )? ) )
            // InternalOpenCypherParser.g:13389:1: ( ( rule__NodePattern__VariableAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:13389:1: ( ( rule__NodePattern__VariableAssignment_2 )? )
            // InternalOpenCypherParser.g:13390:2: ( rule__NodePattern__VariableAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getVariableAssignment_2()); 
            }
            // InternalOpenCypherParser.g:13391:2: ( rule__NodePattern__VariableAssignment_2 )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( ((LA88_0>=ALLSHORTESTPATHS && LA88_0<=WHERE)||(LA88_0>=CASE && LA88_0<=XOR)||(LA88_0>=AS && LA88_0<=OR)||LA88_0==RULE_ID) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // InternalOpenCypherParser.g:13391:3: rule__NodePattern__VariableAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__NodePattern__VariableAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getVariableAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__2__Impl"


    // $ANTLR start "rule__NodePattern__Group__3"
    // InternalOpenCypherParser.g:13399:1: rule__NodePattern__Group__3 : rule__NodePattern__Group__3__Impl rule__NodePattern__Group__4 ;
    public final void rule__NodePattern__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13403:1: ( rule__NodePattern__Group__3__Impl rule__NodePattern__Group__4 )
            // InternalOpenCypherParser.g:13404:2: rule__NodePattern__Group__3__Impl rule__NodePattern__Group__4
            {
            pushFollow(FOLLOW_75);
            rule__NodePattern__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__3"


    // $ANTLR start "rule__NodePattern__Group__3__Impl"
    // InternalOpenCypherParser.g:13411:1: rule__NodePattern__Group__3__Impl : ( ( rule__NodePattern__NodeLabelsAssignment_3 )? ) ;
    public final void rule__NodePattern__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13415:1: ( ( ( rule__NodePattern__NodeLabelsAssignment_3 )? ) )
            // InternalOpenCypherParser.g:13416:1: ( ( rule__NodePattern__NodeLabelsAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:13416:1: ( ( rule__NodePattern__NodeLabelsAssignment_3 )? )
            // InternalOpenCypherParser.g:13417:2: ( rule__NodePattern__NodeLabelsAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getNodeLabelsAssignment_3()); 
            }
            // InternalOpenCypherParser.g:13418:2: ( rule__NodePattern__NodeLabelsAssignment_3 )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==Colon) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // InternalOpenCypherParser.g:13418:3: rule__NodePattern__NodeLabelsAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__NodePattern__NodeLabelsAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getNodeLabelsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__3__Impl"


    // $ANTLR start "rule__NodePattern__Group__4"
    // InternalOpenCypherParser.g:13426:1: rule__NodePattern__Group__4 : rule__NodePattern__Group__4__Impl rule__NodePattern__Group__5 ;
    public final void rule__NodePattern__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13430:1: ( rule__NodePattern__Group__4__Impl rule__NodePattern__Group__5 )
            // InternalOpenCypherParser.g:13431:2: rule__NodePattern__Group__4__Impl rule__NodePattern__Group__5
            {
            pushFollow(FOLLOW_75);
            rule__NodePattern__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__4"


    // $ANTLR start "rule__NodePattern__Group__4__Impl"
    // InternalOpenCypherParser.g:13438:1: rule__NodePattern__Group__4__Impl : ( ( rule__NodePattern__PropertiesAssignment_4 )? ) ;
    public final void rule__NodePattern__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13442:1: ( ( ( rule__NodePattern__PropertiesAssignment_4 )? ) )
            // InternalOpenCypherParser.g:13443:1: ( ( rule__NodePattern__PropertiesAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:13443:1: ( ( rule__NodePattern__PropertiesAssignment_4 )? )
            // InternalOpenCypherParser.g:13444:2: ( rule__NodePattern__PropertiesAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4()); 
            }
            // InternalOpenCypherParser.g:13445:2: ( rule__NodePattern__PropertiesAssignment_4 )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DollarSign||LA90_0==LeftCurlyBracket) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // InternalOpenCypherParser.g:13445:3: rule__NodePattern__PropertiesAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__NodePattern__PropertiesAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getPropertiesAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__4__Impl"


    // $ANTLR start "rule__NodePattern__Group__5"
    // InternalOpenCypherParser.g:13453:1: rule__NodePattern__Group__5 : rule__NodePattern__Group__5__Impl ;
    public final void rule__NodePattern__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13457:1: ( rule__NodePattern__Group__5__Impl )
            // InternalOpenCypherParser.g:13458:2: rule__NodePattern__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodePattern__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__5"


    // $ANTLR start "rule__NodePattern__Group__5__Impl"
    // InternalOpenCypherParser.g:13464:1: rule__NodePattern__Group__5__Impl : ( RightParenthesis ) ;
    public final void rule__NodePattern__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13468:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:13469:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:13469:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:13470:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__Group__5__Impl"


    // $ANTLR start "rule__PatternElementChain__Group__0"
    // InternalOpenCypherParser.g:13480:1: rule__PatternElementChain__Group__0 : rule__PatternElementChain__Group__0__Impl rule__PatternElementChain__Group__1 ;
    public final void rule__PatternElementChain__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13484:1: ( rule__PatternElementChain__Group__0__Impl rule__PatternElementChain__Group__1 )
            // InternalOpenCypherParser.g:13485:2: rule__PatternElementChain__Group__0__Impl rule__PatternElementChain__Group__1
            {
            pushFollow(FOLLOW_23);
            rule__PatternElementChain__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__0"


    // $ANTLR start "rule__PatternElementChain__Group__0__Impl"
    // InternalOpenCypherParser.g:13492:1: rule__PatternElementChain__Group__0__Impl : ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) ) ;
    public final void rule__PatternElementChain__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13496:1: ( ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) ) )
            // InternalOpenCypherParser.g:13497:1: ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:13497:1: ( ( rule__PatternElementChain__RelationshipPatternAssignment_0 ) )
            // InternalOpenCypherParser.g:13498:2: ( rule__PatternElementChain__RelationshipPatternAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0()); 
            }
            // InternalOpenCypherParser.g:13499:2: ( rule__PatternElementChain__RelationshipPatternAssignment_0 )
            // InternalOpenCypherParser.g:13499:3: rule__PatternElementChain__RelationshipPatternAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__RelationshipPatternAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getRelationshipPatternAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__0__Impl"


    // $ANTLR start "rule__PatternElementChain__Group__1"
    // InternalOpenCypherParser.g:13507:1: rule__PatternElementChain__Group__1 : rule__PatternElementChain__Group__1__Impl ;
    public final void rule__PatternElementChain__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13511:1: ( rule__PatternElementChain__Group__1__Impl )
            // InternalOpenCypherParser.g:13512:2: rule__PatternElementChain__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__1"


    // $ANTLR start "rule__PatternElementChain__Group__1__Impl"
    // InternalOpenCypherParser.g:13518:1: rule__PatternElementChain__Group__1__Impl : ( ( rule__PatternElementChain__NodePatternAssignment_1 ) ) ;
    public final void rule__PatternElementChain__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13522:1: ( ( ( rule__PatternElementChain__NodePatternAssignment_1 ) ) )
            // InternalOpenCypherParser.g:13523:1: ( ( rule__PatternElementChain__NodePatternAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:13523:1: ( ( rule__PatternElementChain__NodePatternAssignment_1 ) )
            // InternalOpenCypherParser.g:13524:2: ( rule__PatternElementChain__NodePatternAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1()); 
            }
            // InternalOpenCypherParser.g:13525:2: ( rule__PatternElementChain__NodePatternAssignment_1 )
            // InternalOpenCypherParser.g:13525:3: rule__PatternElementChain__NodePatternAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__PatternElementChain__NodePatternAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getNodePatternAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group__0"
    // InternalOpenCypherParser.g:13534:1: rule__RelationshipPattern__Group__0 : rule__RelationshipPattern__Group__0__Impl rule__RelationshipPattern__Group__1 ;
    public final void rule__RelationshipPattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13538:1: ( rule__RelationshipPattern__Group__0__Impl rule__RelationshipPattern__Group__1 )
            // InternalOpenCypherParser.g:13539:2: rule__RelationshipPattern__Group__0__Impl rule__RelationshipPattern__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__0"


    // $ANTLR start "rule__RelationshipPattern__Group__0__Impl"
    // InternalOpenCypherParser.g:13546:1: rule__RelationshipPattern__Group__0__Impl : ( () ) ;
    public final void rule__RelationshipPattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13550:1: ( ( () ) )
            // InternalOpenCypherParser.g:13551:1: ( () )
            {
            // InternalOpenCypherParser.g:13551:1: ( () )
            // InternalOpenCypherParser.g:13552:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0()); 
            }
            // InternalOpenCypherParser.g:13553:2: ()
            // InternalOpenCypherParser.g:13553:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getRelationshipPatternAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__0__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group__1"
    // InternalOpenCypherParser.g:13561:1: rule__RelationshipPattern__Group__1 : rule__RelationshipPattern__Group__1__Impl ;
    public final void rule__RelationshipPattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13565:1: ( rule__RelationshipPattern__Group__1__Impl )
            // InternalOpenCypherParser.g:13566:2: rule__RelationshipPattern__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__1"


    // $ANTLR start "rule__RelationshipPattern__Group__1__Impl"
    // InternalOpenCypherParser.g:13572:1: rule__RelationshipPattern__Group__1__Impl : ( ( rule__RelationshipPattern__Group_1__0 ) ) ;
    public final void rule__RelationshipPattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13576:1: ( ( ( rule__RelationshipPattern__Group_1__0 ) ) )
            // InternalOpenCypherParser.g:13577:1: ( ( rule__RelationshipPattern__Group_1__0 ) )
            {
            // InternalOpenCypherParser.g:13577:1: ( ( rule__RelationshipPattern__Group_1__0 ) )
            // InternalOpenCypherParser.g:13578:2: ( rule__RelationshipPattern__Group_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:13579:2: ( rule__RelationshipPattern__Group_1__0 )
            // InternalOpenCypherParser.g:13579:3: rule__RelationshipPattern__Group_1__0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group__1__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__0"
    // InternalOpenCypherParser.g:13588:1: rule__RelationshipPattern__Group_1__0 : rule__RelationshipPattern__Group_1__0__Impl rule__RelationshipPattern__Group_1__1 ;
    public final void rule__RelationshipPattern__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13592:1: ( rule__RelationshipPattern__Group_1__0__Impl rule__RelationshipPattern__Group_1__1 )
            // InternalOpenCypherParser.g:13593:2: rule__RelationshipPattern__Group_1__0__Impl rule__RelationshipPattern__Group_1__1
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipPattern__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__0"


    // $ANTLR start "rule__RelationshipPattern__Group_1__0__Impl"
    // InternalOpenCypherParser.g:13600:1: rule__RelationshipPattern__Group_1__0__Impl : ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? ) ;
    public final void rule__RelationshipPattern__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13604:1: ( ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? ) )
            // InternalOpenCypherParser.g:13605:1: ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? )
            {
            // InternalOpenCypherParser.g:13605:1: ( ( rule__RelationshipPattern__IncomingAssignment_1_0 )? )
            // InternalOpenCypherParser.g:13606:2: ( rule__RelationshipPattern__IncomingAssignment_1_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:13607:2: ( rule__RelationshipPattern__IncomingAssignment_1_0 )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==LessThanSign) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // InternalOpenCypherParser.g:13607:3: rule__RelationshipPattern__IncomingAssignment_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPattern__IncomingAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getIncomingAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__0__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__1"
    // InternalOpenCypherParser.g:13615:1: rule__RelationshipPattern__Group_1__1 : rule__RelationshipPattern__Group_1__1__Impl rule__RelationshipPattern__Group_1__2 ;
    public final void rule__RelationshipPattern__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13619:1: ( rule__RelationshipPattern__Group_1__1__Impl rule__RelationshipPattern__Group_1__2 )
            // InternalOpenCypherParser.g:13620:2: rule__RelationshipPattern__Group_1__1__Impl rule__RelationshipPattern__Group_1__2
            {
            pushFollow(FOLLOW_76);
            rule__RelationshipPattern__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__1"


    // $ANTLR start "rule__RelationshipPattern__Group_1__1__Impl"
    // InternalOpenCypherParser.g:13627:1: rule__RelationshipPattern__Group_1__1__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPattern__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13631:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:13632:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:13632:1: ( ruleDash )
            // InternalOpenCypherParser.g:13633:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__1__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__2"
    // InternalOpenCypherParser.g:13642:1: rule__RelationshipPattern__Group_1__2 : rule__RelationshipPattern__Group_1__2__Impl rule__RelationshipPattern__Group_1__3 ;
    public final void rule__RelationshipPattern__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13646:1: ( rule__RelationshipPattern__Group_1__2__Impl rule__RelationshipPattern__Group_1__3 )
            // InternalOpenCypherParser.g:13647:2: rule__RelationshipPattern__Group_1__2__Impl rule__RelationshipPattern__Group_1__3
            {
            pushFollow(FOLLOW_76);
            rule__RelationshipPattern__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__2"


    // $ANTLR start "rule__RelationshipPattern__Group_1__2__Impl"
    // InternalOpenCypherParser.g:13654:1: rule__RelationshipPattern__Group_1__2__Impl : ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? ) ;
    public final void rule__RelationshipPattern__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13658:1: ( ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? ) )
            // InternalOpenCypherParser.g:13659:1: ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? )
            {
            // InternalOpenCypherParser.g:13659:1: ( ( rule__RelationshipPattern__DetailAssignment_1_2 )? )
            // InternalOpenCypherParser.g:13660:2: ( rule__RelationshipPattern__DetailAssignment_1_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:13661:2: ( rule__RelationshipPattern__DetailAssignment_1_2 )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==LeftSquareBracket) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // InternalOpenCypherParser.g:13661:3: rule__RelationshipPattern__DetailAssignment_1_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPattern__DetailAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDetailAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__2__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__3"
    // InternalOpenCypherParser.g:13669:1: rule__RelationshipPattern__Group_1__3 : rule__RelationshipPattern__Group_1__3__Impl rule__RelationshipPattern__Group_1__4 ;
    public final void rule__RelationshipPattern__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13673:1: ( rule__RelationshipPattern__Group_1__3__Impl rule__RelationshipPattern__Group_1__4 )
            // InternalOpenCypherParser.g:13674:2: rule__RelationshipPattern__Group_1__3__Impl rule__RelationshipPattern__Group_1__4
            {
            pushFollow(FOLLOW_77);
            rule__RelationshipPattern__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__3"


    // $ANTLR start "rule__RelationshipPattern__Group_1__3__Impl"
    // InternalOpenCypherParser.g:13681:1: rule__RelationshipPattern__Group_1__3__Impl : ( ruleDash ) ;
    public final void rule__RelationshipPattern__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13685:1: ( ( ruleDash ) )
            // InternalOpenCypherParser.g:13686:1: ( ruleDash )
            {
            // InternalOpenCypherParser.g:13686:1: ( ruleDash )
            // InternalOpenCypherParser.g:13687:2: ruleDash
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleDash();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDashParserRuleCall_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__3__Impl"


    // $ANTLR start "rule__RelationshipPattern__Group_1__4"
    // InternalOpenCypherParser.g:13696:1: rule__RelationshipPattern__Group_1__4 : rule__RelationshipPattern__Group_1__4__Impl ;
    public final void rule__RelationshipPattern__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13700:1: ( rule__RelationshipPattern__Group_1__4__Impl )
            // InternalOpenCypherParser.g:13701:2: rule__RelationshipPattern__Group_1__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipPattern__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__4"


    // $ANTLR start "rule__RelationshipPattern__Group_1__4__Impl"
    // InternalOpenCypherParser.g:13707:1: rule__RelationshipPattern__Group_1__4__Impl : ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? ) ;
    public final void rule__RelationshipPattern__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13711:1: ( ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? ) )
            // InternalOpenCypherParser.g:13712:1: ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? )
            {
            // InternalOpenCypherParser.g:13712:1: ( ( rule__RelationshipPattern__OutgoingAssignment_1_4 )? )
            // InternalOpenCypherParser.g:13713:2: ( rule__RelationshipPattern__OutgoingAssignment_1_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4()); 
            }
            // InternalOpenCypherParser.g:13714:2: ( rule__RelationshipPattern__OutgoingAssignment_1_4 )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==GreaterThanSign) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // InternalOpenCypherParser.g:13714:3: rule__RelationshipPattern__OutgoingAssignment_1_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipPattern__OutgoingAssignment_1_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getOutgoingAssignment_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__Group_1__4__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__0"
    // InternalOpenCypherParser.g:13723:1: rule__RelationshipDetail__Group__0 : rule__RelationshipDetail__Group__0__Impl rule__RelationshipDetail__Group__1 ;
    public final void rule__RelationshipDetail__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13727:1: ( rule__RelationshipDetail__Group__0__Impl rule__RelationshipDetail__Group__1 )
            // InternalOpenCypherParser.g:13728:2: rule__RelationshipDetail__Group__0__Impl rule__RelationshipDetail__Group__1
            {
            pushFollow(FOLLOW_31);
            rule__RelationshipDetail__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__0"


    // $ANTLR start "rule__RelationshipDetail__Group__0__Impl"
    // InternalOpenCypherParser.g:13735:1: rule__RelationshipDetail__Group__0__Impl : ( () ) ;
    public final void rule__RelationshipDetail__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13739:1: ( ( () ) )
            // InternalOpenCypherParser.g:13740:1: ( () )
            {
            // InternalOpenCypherParser.g:13740:1: ( () )
            // InternalOpenCypherParser.g:13741:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0()); 
            }
            // InternalOpenCypherParser.g:13742:2: ()
            // InternalOpenCypherParser.g:13742:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRelationshipDetailAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__0__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__1"
    // InternalOpenCypherParser.g:13750:1: rule__RelationshipDetail__Group__1 : rule__RelationshipDetail__Group__1__Impl rule__RelationshipDetail__Group__2 ;
    public final void rule__RelationshipDetail__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13754:1: ( rule__RelationshipDetail__Group__1__Impl rule__RelationshipDetail__Group__2 )
            // InternalOpenCypherParser.g:13755:2: rule__RelationshipDetail__Group__1__Impl rule__RelationshipDetail__Group__2
            {
            pushFollow(FOLLOW_78);
            rule__RelationshipDetail__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__1"


    // $ANTLR start "rule__RelationshipDetail__Group__1__Impl"
    // InternalOpenCypherParser.g:13762:1: rule__RelationshipDetail__Group__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__RelationshipDetail__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13766:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:13767:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:13767:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:13768:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getLeftSquareBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__1__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__2"
    // InternalOpenCypherParser.g:13777:1: rule__RelationshipDetail__Group__2 : rule__RelationshipDetail__Group__2__Impl rule__RelationshipDetail__Group__3 ;
    public final void rule__RelationshipDetail__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13781:1: ( rule__RelationshipDetail__Group__2__Impl rule__RelationshipDetail__Group__3 )
            // InternalOpenCypherParser.g:13782:2: rule__RelationshipDetail__Group__2__Impl rule__RelationshipDetail__Group__3
            {
            pushFollow(FOLLOW_78);
            rule__RelationshipDetail__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__2"


    // $ANTLR start "rule__RelationshipDetail__Group__2__Impl"
    // InternalOpenCypherParser.g:13789:1: rule__RelationshipDetail__Group__2__Impl : ( ( rule__RelationshipDetail__VariableAssignment_2 )? ) ;
    public final void rule__RelationshipDetail__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13793:1: ( ( ( rule__RelationshipDetail__VariableAssignment_2 )? ) )
            // InternalOpenCypherParser.g:13794:1: ( ( rule__RelationshipDetail__VariableAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:13794:1: ( ( rule__RelationshipDetail__VariableAssignment_2 )? )
            // InternalOpenCypherParser.g:13795:2: ( rule__RelationshipDetail__VariableAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2()); 
            }
            // InternalOpenCypherParser.g:13796:2: ( rule__RelationshipDetail__VariableAssignment_2 )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( ((LA94_0>=ALLSHORTESTPATHS && LA94_0<=WHERE)||(LA94_0>=CASE && LA94_0<=XOR)||(LA94_0>=AS && LA94_0<=OR)||LA94_0==RULE_ID) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalOpenCypherParser.g:13796:3: rule__RelationshipDetail__VariableAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__VariableAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getVariableAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__2__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__3"
    // InternalOpenCypherParser.g:13804:1: rule__RelationshipDetail__Group__3 : rule__RelationshipDetail__Group__3__Impl rule__RelationshipDetail__Group__4 ;
    public final void rule__RelationshipDetail__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13808:1: ( rule__RelationshipDetail__Group__3__Impl rule__RelationshipDetail__Group__4 )
            // InternalOpenCypherParser.g:13809:2: rule__RelationshipDetail__Group__3__Impl rule__RelationshipDetail__Group__4
            {
            pushFollow(FOLLOW_78);
            rule__RelationshipDetail__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__3"


    // $ANTLR start "rule__RelationshipDetail__Group__3__Impl"
    // InternalOpenCypherParser.g:13816:1: rule__RelationshipDetail__Group__3__Impl : ( ( rule__RelationshipDetail__OptionalAssignment_3 )? ) ;
    public final void rule__RelationshipDetail__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13820:1: ( ( ( rule__RelationshipDetail__OptionalAssignment_3 )? ) )
            // InternalOpenCypherParser.g:13821:1: ( ( rule__RelationshipDetail__OptionalAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:13821:1: ( ( rule__RelationshipDetail__OptionalAssignment_3 )? )
            // InternalOpenCypherParser.g:13822:2: ( rule__RelationshipDetail__OptionalAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3()); 
            }
            // InternalOpenCypherParser.g:13823:2: ( rule__RelationshipDetail__OptionalAssignment_3 )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==QuestionMark) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // InternalOpenCypherParser.g:13823:3: rule__RelationshipDetail__OptionalAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__OptionalAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getOptionalAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__3__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__4"
    // InternalOpenCypherParser.g:13831:1: rule__RelationshipDetail__Group__4 : rule__RelationshipDetail__Group__4__Impl rule__RelationshipDetail__Group__5 ;
    public final void rule__RelationshipDetail__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13835:1: ( rule__RelationshipDetail__Group__4__Impl rule__RelationshipDetail__Group__5 )
            // InternalOpenCypherParser.g:13836:2: rule__RelationshipDetail__Group__4__Impl rule__RelationshipDetail__Group__5
            {
            pushFollow(FOLLOW_78);
            rule__RelationshipDetail__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__4"


    // $ANTLR start "rule__RelationshipDetail__Group__4__Impl"
    // InternalOpenCypherParser.g:13843:1: rule__RelationshipDetail__Group__4__Impl : ( ( rule__RelationshipDetail__TypesAssignment_4 )? ) ;
    public final void rule__RelationshipDetail__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13847:1: ( ( ( rule__RelationshipDetail__TypesAssignment_4 )? ) )
            // InternalOpenCypherParser.g:13848:1: ( ( rule__RelationshipDetail__TypesAssignment_4 )? )
            {
            // InternalOpenCypherParser.g:13848:1: ( ( rule__RelationshipDetail__TypesAssignment_4 )? )
            // InternalOpenCypherParser.g:13849:2: ( rule__RelationshipDetail__TypesAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getTypesAssignment_4()); 
            }
            // InternalOpenCypherParser.g:13850:2: ( rule__RelationshipDetail__TypesAssignment_4 )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==Colon) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // InternalOpenCypherParser.g:13850:3: rule__RelationshipDetail__TypesAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__TypesAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getTypesAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__4__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__5"
    // InternalOpenCypherParser.g:13858:1: rule__RelationshipDetail__Group__5 : rule__RelationshipDetail__Group__5__Impl rule__RelationshipDetail__Group__6 ;
    public final void rule__RelationshipDetail__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13862:1: ( rule__RelationshipDetail__Group__5__Impl rule__RelationshipDetail__Group__6 )
            // InternalOpenCypherParser.g:13863:2: rule__RelationshipDetail__Group__5__Impl rule__RelationshipDetail__Group__6
            {
            pushFollow(FOLLOW_78);
            rule__RelationshipDetail__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__5"


    // $ANTLR start "rule__RelationshipDetail__Group__5__Impl"
    // InternalOpenCypherParser.g:13870:1: rule__RelationshipDetail__Group__5__Impl : ( ( rule__RelationshipDetail__RangeAssignment_5 )? ) ;
    public final void rule__RelationshipDetail__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13874:1: ( ( ( rule__RelationshipDetail__RangeAssignment_5 )? ) )
            // InternalOpenCypherParser.g:13875:1: ( ( rule__RelationshipDetail__RangeAssignment_5 )? )
            {
            // InternalOpenCypherParser.g:13875:1: ( ( rule__RelationshipDetail__RangeAssignment_5 )? )
            // InternalOpenCypherParser.g:13876:2: ( rule__RelationshipDetail__RangeAssignment_5 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5()); 
            }
            // InternalOpenCypherParser.g:13877:2: ( rule__RelationshipDetail__RangeAssignment_5 )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==Asterisk) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // InternalOpenCypherParser.g:13877:3: rule__RelationshipDetail__RangeAssignment_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__RangeAssignment_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRangeAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__5__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__6"
    // InternalOpenCypherParser.g:13885:1: rule__RelationshipDetail__Group__6 : rule__RelationshipDetail__Group__6__Impl rule__RelationshipDetail__Group__7 ;
    public final void rule__RelationshipDetail__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13889:1: ( rule__RelationshipDetail__Group__6__Impl rule__RelationshipDetail__Group__7 )
            // InternalOpenCypherParser.g:13890:2: rule__RelationshipDetail__Group__6__Impl rule__RelationshipDetail__Group__7
            {
            pushFollow(FOLLOW_78);
            rule__RelationshipDetail__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__6"


    // $ANTLR start "rule__RelationshipDetail__Group__6__Impl"
    // InternalOpenCypherParser.g:13897:1: rule__RelationshipDetail__Group__6__Impl : ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? ) ;
    public final void rule__RelationshipDetail__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13901:1: ( ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? ) )
            // InternalOpenCypherParser.g:13902:1: ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? )
            {
            // InternalOpenCypherParser.g:13902:1: ( ( rule__RelationshipDetail__PropertiesAssignment_6 )? )
            // InternalOpenCypherParser.g:13903:2: ( rule__RelationshipDetail__PropertiesAssignment_6 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6()); 
            }
            // InternalOpenCypherParser.g:13904:2: ( rule__RelationshipDetail__PropertiesAssignment_6 )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==DollarSign||LA98_0==LeftCurlyBracket) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // InternalOpenCypherParser.g:13904:3: rule__RelationshipDetail__PropertiesAssignment_6
                    {
                    pushFollow(FOLLOW_2);
                    rule__RelationshipDetail__PropertiesAssignment_6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getPropertiesAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__6__Impl"


    // $ANTLR start "rule__RelationshipDetail__Group__7"
    // InternalOpenCypherParser.g:13912:1: rule__RelationshipDetail__Group__7 : rule__RelationshipDetail__Group__7__Impl ;
    public final void rule__RelationshipDetail__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13916:1: ( rule__RelationshipDetail__Group__7__Impl )
            // InternalOpenCypherParser.g:13917:2: rule__RelationshipDetail__Group__7__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipDetail__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__7"


    // $ANTLR start "rule__RelationshipDetail__Group__7__Impl"
    // InternalOpenCypherParser.g:13923:1: rule__RelationshipDetail__Group__7__Impl : ( RightSquareBracket ) ;
    public final void rule__RelationshipDetail__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13927:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:13928:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:13928:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:13929:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRightSquareBracketKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__Group__7__Impl"


    // $ANTLR start "rule__RelType__Group__0"
    // InternalOpenCypherParser.g:13939:1: rule__RelType__Group__0 : rule__RelType__Group__0__Impl rule__RelType__Group__1 ;
    public final void rule__RelType__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13943:1: ( rule__RelType__Group__0__Impl rule__RelType__Group__1 )
            // InternalOpenCypherParser.g:13944:2: rule__RelType__Group__0__Impl rule__RelType__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__RelType__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelType__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__0"


    // $ANTLR start "rule__RelType__Group__0__Impl"
    // InternalOpenCypherParser.g:13951:1: rule__RelType__Group__0__Impl : ( Colon ) ;
    public final void rule__RelType__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13955:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:13956:1: ( Colon )
            {
            // InternalOpenCypherParser.g:13956:1: ( Colon )
            // InternalOpenCypherParser.g:13957:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__0__Impl"


    // $ANTLR start "rule__RelType__Group__1"
    // InternalOpenCypherParser.g:13966:1: rule__RelType__Group__1 : rule__RelType__Group__1__Impl ;
    public final void rule__RelType__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13970:1: ( rule__RelType__Group__1__Impl )
            // InternalOpenCypherParser.g:13971:2: rule__RelType__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelType__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__1"


    // $ANTLR start "rule__RelType__Group__1__Impl"
    // InternalOpenCypherParser.g:13977:1: rule__RelType__Group__1__Impl : ( ruleRelTypeName ) ;
    public final void rule__RelType__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13981:1: ( ( ruleRelTypeName ) )
            // InternalOpenCypherParser.g:13982:1: ( ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:13982:1: ( ruleRelTypeName )
            // InternalOpenCypherParser.g:13983:2: ruleRelTypeName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelTypeAccess().getRelTypeNameParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelType__Group__1__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group__0"
    // InternalOpenCypherParser.g:13993:1: rule__RelationshipTypes__Group__0 : rule__RelationshipTypes__Group__0__Impl rule__RelationshipTypes__Group__1 ;
    public final void rule__RelationshipTypes__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:13997:1: ( rule__RelationshipTypes__Group__0__Impl rule__RelationshipTypes__Group__1 )
            // InternalOpenCypherParser.g:13998:2: rule__RelationshipTypes__Group__0__Impl rule__RelationshipTypes__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__RelationshipTypes__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__0"


    // $ANTLR start "rule__RelationshipTypes__Group__0__Impl"
    // InternalOpenCypherParser.g:14005:1: rule__RelationshipTypes__Group__0__Impl : ( Colon ) ;
    public final void rule__RelationshipTypes__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14009:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:14010:1: ( Colon )
            {
            // InternalOpenCypherParser.g:14010:1: ( Colon )
            // InternalOpenCypherParser.g:14011:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__0__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group__1"
    // InternalOpenCypherParser.g:14020:1: rule__RelationshipTypes__Group__1 : rule__RelationshipTypes__Group__1__Impl rule__RelationshipTypes__Group__2 ;
    public final void rule__RelationshipTypes__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14024:1: ( rule__RelationshipTypes__Group__1__Impl rule__RelationshipTypes__Group__2 )
            // InternalOpenCypherParser.g:14025:2: rule__RelationshipTypes__Group__1__Impl rule__RelationshipTypes__Group__2
            {
            pushFollow(FOLLOW_53);
            rule__RelationshipTypes__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__1"


    // $ANTLR start "rule__RelationshipTypes__Group__1__Impl"
    // InternalOpenCypherParser.g:14032:1: rule__RelationshipTypes__Group__1__Impl : ( ( rule__RelationshipTypes__RelTypeNameAssignment_1 ) ) ;
    public final void rule__RelationshipTypes__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14036:1: ( ( ( rule__RelationshipTypes__RelTypeNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:14037:1: ( ( rule__RelationshipTypes__RelTypeNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:14037:1: ( ( rule__RelationshipTypes__RelTypeNameAssignment_1 ) )
            // InternalOpenCypherParser.g:14038:2: ( rule__RelationshipTypes__RelTypeNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:14039:2: ( rule__RelationshipTypes__RelTypeNameAssignment_1 )
            // InternalOpenCypherParser.g:14039:3: rule__RelationshipTypes__RelTypeNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__RelTypeNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__1__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group__2"
    // InternalOpenCypherParser.g:14047:1: rule__RelationshipTypes__Group__2 : rule__RelationshipTypes__Group__2__Impl ;
    public final void rule__RelationshipTypes__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14051:1: ( rule__RelationshipTypes__Group__2__Impl )
            // InternalOpenCypherParser.g:14052:2: rule__RelationshipTypes__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__2"


    // $ANTLR start "rule__RelationshipTypes__Group__2__Impl"
    // InternalOpenCypherParser.g:14058:1: rule__RelationshipTypes__Group__2__Impl : ( ( rule__RelationshipTypes__Group_2__0 )* ) ;
    public final void rule__RelationshipTypes__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14062:1: ( ( ( rule__RelationshipTypes__Group_2__0 )* ) )
            // InternalOpenCypherParser.g:14063:1: ( ( rule__RelationshipTypes__Group_2__0 )* )
            {
            // InternalOpenCypherParser.g:14063:1: ( ( rule__RelationshipTypes__Group_2__0 )* )
            // InternalOpenCypherParser.g:14064:2: ( rule__RelationshipTypes__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:14065:2: ( rule__RelationshipTypes__Group_2__0 )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==VerticalLine) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14065:3: rule__RelationshipTypes__Group_2__0
            	    {
            	    pushFollow(FOLLOW_79);
            	    rule__RelationshipTypes__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group__2__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group_2__0"
    // InternalOpenCypherParser.g:14074:1: rule__RelationshipTypes__Group_2__0 : rule__RelationshipTypes__Group_2__0__Impl rule__RelationshipTypes__Group_2__1 ;
    public final void rule__RelationshipTypes__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14078:1: ( rule__RelationshipTypes__Group_2__0__Impl rule__RelationshipTypes__Group_2__1 )
            // InternalOpenCypherParser.g:14079:2: rule__RelationshipTypes__Group_2__0__Impl rule__RelationshipTypes__Group_2__1
            {
            pushFollow(FOLLOW_80);
            rule__RelationshipTypes__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__0"


    // $ANTLR start "rule__RelationshipTypes__Group_2__0__Impl"
    // InternalOpenCypherParser.g:14086:1: rule__RelationshipTypes__Group_2__0__Impl : ( VerticalLine ) ;
    public final void rule__RelationshipTypes__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14090:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:14091:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:14091:1: ( VerticalLine )
            // InternalOpenCypherParser.g:14092:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getVerticalLineKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__0__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group_2__1"
    // InternalOpenCypherParser.g:14101:1: rule__RelationshipTypes__Group_2__1 : rule__RelationshipTypes__Group_2__1__Impl rule__RelationshipTypes__Group_2__2 ;
    public final void rule__RelationshipTypes__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14105:1: ( rule__RelationshipTypes__Group_2__1__Impl rule__RelationshipTypes__Group_2__2 )
            // InternalOpenCypherParser.g:14106:2: rule__RelationshipTypes__Group_2__1__Impl rule__RelationshipTypes__Group_2__2
            {
            pushFollow(FOLLOW_80);
            rule__RelationshipTypes__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__1"


    // $ANTLR start "rule__RelationshipTypes__Group_2__1__Impl"
    // InternalOpenCypherParser.g:14113:1: rule__RelationshipTypes__Group_2__1__Impl : ( ( Colon )? ) ;
    public final void rule__RelationshipTypes__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14117:1: ( ( ( Colon )? ) )
            // InternalOpenCypherParser.g:14118:1: ( ( Colon )? )
            {
            // InternalOpenCypherParser.g:14118:1: ( ( Colon )? )
            // InternalOpenCypherParser.g:14119:2: ( Colon )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1()); 
            }
            // InternalOpenCypherParser.g:14120:2: ( Colon )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==Colon) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // InternalOpenCypherParser.g:14120:3: Colon
                    {
                    match(input,Colon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getColonKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__1__Impl"


    // $ANTLR start "rule__RelationshipTypes__Group_2__2"
    // InternalOpenCypherParser.g:14128:1: rule__RelationshipTypes__Group_2__2 : rule__RelationshipTypes__Group_2__2__Impl ;
    public final void rule__RelationshipTypes__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14132:1: ( rule__RelationshipTypes__Group_2__2__Impl )
            // InternalOpenCypherParser.g:14133:2: rule__RelationshipTypes__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__2"


    // $ANTLR start "rule__RelationshipTypes__Group_2__2__Impl"
    // InternalOpenCypherParser.g:14139:1: rule__RelationshipTypes__Group_2__2__Impl : ( ( rule__RelationshipTypes__RelTypeNameAssignment_2_2 ) ) ;
    public final void rule__RelationshipTypes__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14143:1: ( ( ( rule__RelationshipTypes__RelTypeNameAssignment_2_2 ) ) )
            // InternalOpenCypherParser.g:14144:1: ( ( rule__RelationshipTypes__RelTypeNameAssignment_2_2 ) )
            {
            // InternalOpenCypherParser.g:14144:1: ( ( rule__RelationshipTypes__RelTypeNameAssignment_2_2 ) )
            // InternalOpenCypherParser.g:14145:2: ( rule__RelationshipTypes__RelTypeNameAssignment_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNameAssignment_2_2()); 
            }
            // InternalOpenCypherParser.g:14146:2: ( rule__RelationshipTypes__RelTypeNameAssignment_2_2 )
            // InternalOpenCypherParser.g:14146:3: rule__RelationshipTypes__RelTypeNameAssignment_2_2
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipTypes__RelTypeNameAssignment_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNameAssignment_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__Group_2__2__Impl"


    // $ANTLR start "rule__NodeLabels__Group__0"
    // InternalOpenCypherParser.g:14155:1: rule__NodeLabels__Group__0 : rule__NodeLabels__Group__0__Impl rule__NodeLabels__Group__1 ;
    public final void rule__NodeLabels__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14159:1: ( rule__NodeLabels__Group__0__Impl rule__NodeLabels__Group__1 )
            // InternalOpenCypherParser.g:14160:2: rule__NodeLabels__Group__0__Impl rule__NodeLabels__Group__1
            {
            pushFollow(FOLLOW_22);
            rule__NodeLabels__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodeLabels__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__Group__0"


    // $ANTLR start "rule__NodeLabels__Group__0__Impl"
    // InternalOpenCypherParser.g:14167:1: rule__NodeLabels__Group__0__Impl : ( ( rule__NodeLabels__NodeLabelsAssignment_0 ) ) ;
    public final void rule__NodeLabels__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14171:1: ( ( ( rule__NodeLabels__NodeLabelsAssignment_0 ) ) )
            // InternalOpenCypherParser.g:14172:1: ( ( rule__NodeLabels__NodeLabelsAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:14172:1: ( ( rule__NodeLabels__NodeLabelsAssignment_0 ) )
            // InternalOpenCypherParser.g:14173:2: ( rule__NodeLabels__NodeLabelsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment_0()); 
            }
            // InternalOpenCypherParser.g:14174:2: ( rule__NodeLabels__NodeLabelsAssignment_0 )
            // InternalOpenCypherParser.g:14174:3: rule__NodeLabels__NodeLabelsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabels__NodeLabelsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__Group__0__Impl"


    // $ANTLR start "rule__NodeLabels__Group__1"
    // InternalOpenCypherParser.g:14182:1: rule__NodeLabels__Group__1 : rule__NodeLabels__Group__1__Impl ;
    public final void rule__NodeLabels__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14186:1: ( rule__NodeLabels__Group__1__Impl )
            // InternalOpenCypherParser.g:14187:2: rule__NodeLabels__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabels__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__Group__1"


    // $ANTLR start "rule__NodeLabels__Group__1__Impl"
    // InternalOpenCypherParser.g:14193:1: rule__NodeLabels__Group__1__Impl : ( ( rule__NodeLabels__NodeLabelsAssignment_1 )* ) ;
    public final void rule__NodeLabels__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14197:1: ( ( ( rule__NodeLabels__NodeLabelsAssignment_1 )* ) )
            // InternalOpenCypherParser.g:14198:1: ( ( rule__NodeLabels__NodeLabelsAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:14198:1: ( ( rule__NodeLabels__NodeLabelsAssignment_1 )* )
            // InternalOpenCypherParser.g:14199:2: ( rule__NodeLabels__NodeLabelsAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:14200:2: ( rule__NodeLabels__NodeLabelsAssignment_1 )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==Colon) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14200:3: rule__NodeLabels__NodeLabelsAssignment_1
            	    {
            	    pushFollow(FOLLOW_81);
            	    rule__NodeLabels__NodeLabelsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__Group__1__Impl"


    // $ANTLR start "rule__NodeLabel__Group__0"
    // InternalOpenCypherParser.g:14209:1: rule__NodeLabel__Group__0 : rule__NodeLabel__Group__0__Impl rule__NodeLabel__Group__1 ;
    public final void rule__NodeLabel__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14213:1: ( rule__NodeLabel__Group__0__Impl rule__NodeLabel__Group__1 )
            // InternalOpenCypherParser.g:14214:2: rule__NodeLabel__Group__0__Impl rule__NodeLabel__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__NodeLabel__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__NodeLabel__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__0"


    // $ANTLR start "rule__NodeLabel__Group__0__Impl"
    // InternalOpenCypherParser.g:14221:1: rule__NodeLabel__Group__0__Impl : ( Colon ) ;
    public final void rule__NodeLabel__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14225:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:14226:1: ( Colon )
            {
            // InternalOpenCypherParser.g:14226:1: ( Colon )
            // InternalOpenCypherParser.g:14227:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getColonKeyword_0()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getColonKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__0__Impl"


    // $ANTLR start "rule__NodeLabel__Group__1"
    // InternalOpenCypherParser.g:14236:1: rule__NodeLabel__Group__1 : rule__NodeLabel__Group__1__Impl ;
    public final void rule__NodeLabel__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14240:1: ( rule__NodeLabel__Group__1__Impl )
            // InternalOpenCypherParser.g:14241:2: rule__NodeLabel__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabel__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__1"


    // $ANTLR start "rule__NodeLabel__Group__1__Impl"
    // InternalOpenCypherParser.g:14247:1: rule__NodeLabel__Group__1__Impl : ( ( rule__NodeLabel__LabelNameAssignment_1 ) ) ;
    public final void rule__NodeLabel__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14251:1: ( ( ( rule__NodeLabel__LabelNameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:14252:1: ( ( rule__NodeLabel__LabelNameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:14252:1: ( ( rule__NodeLabel__LabelNameAssignment_1 ) )
            // InternalOpenCypherParser.g:14253:2: ( rule__NodeLabel__LabelNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:14254:2: ( rule__NodeLabel__LabelNameAssignment_1 )
            // InternalOpenCypherParser.g:14254:3: rule__NodeLabel__LabelNameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__NodeLabel__LabelNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getLabelNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__Group__1__Impl"


    // $ANTLR start "rule__RangeLiteral__Group__0"
    // InternalOpenCypherParser.g:14263:1: rule__RangeLiteral__Group__0 : rule__RangeLiteral__Group__0__Impl rule__RangeLiteral__Group__1 ;
    public final void rule__RangeLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14267:1: ( rule__RangeLiteral__Group__0__Impl rule__RangeLiteral__Group__1 )
            // InternalOpenCypherParser.g:14268:2: rule__RangeLiteral__Group__0__Impl rule__RangeLiteral__Group__1
            {
            pushFollow(FOLLOW_59);
            rule__RangeLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__0"


    // $ANTLR start "rule__RangeLiteral__Group__0__Impl"
    // InternalOpenCypherParser.g:14275:1: rule__RangeLiteral__Group__0__Impl : ( () ) ;
    public final void rule__RangeLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14279:1: ( ( () ) )
            // InternalOpenCypherParser.g:14280:1: ( () )
            {
            // InternalOpenCypherParser.g:14280:1: ( () )
            // InternalOpenCypherParser.g:14281:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); 
            }
            // InternalOpenCypherParser.g:14282:2: ()
            // InternalOpenCypherParser.g:14282:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__0__Impl"


    // $ANTLR start "rule__RangeLiteral__Group__1"
    // InternalOpenCypherParser.g:14290:1: rule__RangeLiteral__Group__1 : rule__RangeLiteral__Group__1__Impl rule__RangeLiteral__Group__2 ;
    public final void rule__RangeLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14294:1: ( rule__RangeLiteral__Group__1__Impl rule__RangeLiteral__Group__2 )
            // InternalOpenCypherParser.g:14295:2: rule__RangeLiteral__Group__1__Impl rule__RangeLiteral__Group__2
            {
            pushFollow(FOLLOW_82);
            rule__RangeLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__1"


    // $ANTLR start "rule__RangeLiteral__Group__1__Impl"
    // InternalOpenCypherParser.g:14302:1: rule__RangeLiteral__Group__1__Impl : ( Asterisk ) ;
    public final void rule__RangeLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14306:1: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:14307:1: ( Asterisk )
            {
            // InternalOpenCypherParser.g:14307:1: ( Asterisk )
            // InternalOpenCypherParser.g:14308:2: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getAsteriskKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__1__Impl"


    // $ANTLR start "rule__RangeLiteral__Group__2"
    // InternalOpenCypherParser.g:14317:1: rule__RangeLiteral__Group__2 : rule__RangeLiteral__Group__2__Impl ;
    public final void rule__RangeLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14321:1: ( rule__RangeLiteral__Group__2__Impl )
            // InternalOpenCypherParser.g:14322:2: rule__RangeLiteral__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__2"


    // $ANTLR start "rule__RangeLiteral__Group__2__Impl"
    // InternalOpenCypherParser.g:14328:1: rule__RangeLiteral__Group__2__Impl : ( ( rule__RangeLiteral__Group_2__0 )? ) ;
    public final void rule__RangeLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14332:1: ( ( ( rule__RangeLiteral__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:14333:1: ( ( rule__RangeLiteral__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:14333:1: ( ( rule__RangeLiteral__Group_2__0 )? )
            // InternalOpenCypherParser.g:14334:2: ( rule__RangeLiteral__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:14335:2: ( rule__RangeLiteral__Group_2__0 )?
            int alt102=2;
            switch ( input.LA(1) ) {
                case FullStopFullStop:
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                    {
                    alt102=1;
                    }
                    break;
                case EOF:
                    {
                    int LA102_2 = input.LA(2);

                    if ( (synpred236_InternalOpenCypherParser()) ) {
                        alt102=1;
                    }
                    }
                    break;
                case LeftCurlyBracket:
                    {
                    int LA102_3 = input.LA(2);

                    if ( (synpred236_InternalOpenCypherParser()) ) {
                        alt102=1;
                    }
                    }
                    break;
                case DollarSign:
                    {
                    int LA102_4 = input.LA(2);

                    if ( (synpred236_InternalOpenCypherParser()) ) {
                        alt102=1;
                    }
                    }
                    break;
                case RightSquareBracket:
                    {
                    int LA102_5 = input.LA(2);

                    if ( (synpred236_InternalOpenCypherParser()) ) {
                        alt102=1;
                    }
                    }
                    break;
            }

            switch (alt102) {
                case 1 :
                    // InternalOpenCypherParser.g:14335:3: rule__RangeLiteral__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group__2__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2__0"
    // InternalOpenCypherParser.g:14344:1: rule__RangeLiteral__Group_2__0 : rule__RangeLiteral__Group_2__0__Impl rule__RangeLiteral__Group_2__1 ;
    public final void rule__RangeLiteral__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14348:1: ( rule__RangeLiteral__Group_2__0__Impl rule__RangeLiteral__Group_2__1 )
            // InternalOpenCypherParser.g:14349:2: rule__RangeLiteral__Group_2__0__Impl rule__RangeLiteral__Group_2__1
            {
            pushFollow(FOLLOW_82);
            rule__RangeLiteral__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__0"


    // $ANTLR start "rule__RangeLiteral__Group_2__0__Impl"
    // InternalOpenCypherParser.g:14356:1: rule__RangeLiteral__Group_2__0__Impl : ( ( rule__RangeLiteral__LowerAssignment_2_0 )? ) ;
    public final void rule__RangeLiteral__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14360:1: ( ( ( rule__RangeLiteral__LowerAssignment_2_0 )? ) )
            // InternalOpenCypherParser.g:14361:1: ( ( rule__RangeLiteral__LowerAssignment_2_0 )? )
            {
            // InternalOpenCypherParser.g:14361:1: ( ( rule__RangeLiteral__LowerAssignment_2_0 )? )
            // InternalOpenCypherParser.g:14362:2: ( rule__RangeLiteral__LowerAssignment_2_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:14363:2: ( rule__RangeLiteral__LowerAssignment_2_0 )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( ((LA103_0>=RULE_HEX && LA103_0<=RULE_DECIMAL)) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // InternalOpenCypherParser.g:14363:3: rule__RangeLiteral__LowerAssignment_2_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__LowerAssignment_2_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getLowerAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__0__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2__1"
    // InternalOpenCypherParser.g:14371:1: rule__RangeLiteral__Group_2__1 : rule__RangeLiteral__Group_2__1__Impl ;
    public final void rule__RangeLiteral__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14375:1: ( rule__RangeLiteral__Group_2__1__Impl )
            // InternalOpenCypherParser.g:14376:2: rule__RangeLiteral__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__1"


    // $ANTLR start "rule__RangeLiteral__Group_2__1__Impl"
    // InternalOpenCypherParser.g:14382:1: rule__RangeLiteral__Group_2__1__Impl : ( ( rule__RangeLiteral__Group_2_1__0 )? ) ;
    public final void rule__RangeLiteral__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14386:1: ( ( ( rule__RangeLiteral__Group_2_1__0 )? ) )
            // InternalOpenCypherParser.g:14387:1: ( ( rule__RangeLiteral__Group_2_1__0 )? )
            {
            // InternalOpenCypherParser.g:14387:1: ( ( rule__RangeLiteral__Group_2_1__0 )? )
            // InternalOpenCypherParser.g:14388:2: ( rule__RangeLiteral__Group_2_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:14389:2: ( rule__RangeLiteral__Group_2_1__0 )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==FullStopFullStop) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // InternalOpenCypherParser.g:14389:3: rule__RangeLiteral__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2__1__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__0"
    // InternalOpenCypherParser.g:14398:1: rule__RangeLiteral__Group_2_1__0 : rule__RangeLiteral__Group_2_1__0__Impl rule__RangeLiteral__Group_2_1__1 ;
    public final void rule__RangeLiteral__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14402:1: ( rule__RangeLiteral__Group_2_1__0__Impl rule__RangeLiteral__Group_2_1__1 )
            // InternalOpenCypherParser.g:14403:2: rule__RangeLiteral__Group_2_1__0__Impl rule__RangeLiteral__Group_2_1__1
            {
            pushFollow(FOLLOW_17);
            rule__RangeLiteral__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__0"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:14410:1: rule__RangeLiteral__Group_2_1__0__Impl : ( FullStopFullStop ) ;
    public final void rule__RangeLiteral__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14414:1: ( ( FullStopFullStop ) )
            // InternalOpenCypherParser.g:14415:1: ( FullStopFullStop )
            {
            // InternalOpenCypherParser.g:14415:1: ( FullStopFullStop )
            // InternalOpenCypherParser.g:14416:2: FullStopFullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getFullStopFullStopKeyword_2_1_0()); 
            }
            match(input,FullStopFullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getFullStopFullStopKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__0__Impl"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__1"
    // InternalOpenCypherParser.g:14425:1: rule__RangeLiteral__Group_2_1__1 : rule__RangeLiteral__Group_2_1__1__Impl ;
    public final void rule__RangeLiteral__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14429:1: ( rule__RangeLiteral__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:14430:2: rule__RangeLiteral__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RangeLiteral__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__1"


    // $ANTLR start "rule__RangeLiteral__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:14436:1: rule__RangeLiteral__Group_2_1__1__Impl : ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? ) ;
    public final void rule__RangeLiteral__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14440:1: ( ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? ) )
            // InternalOpenCypherParser.g:14441:1: ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? )
            {
            // InternalOpenCypherParser.g:14441:1: ( ( rule__RangeLiteral__UpperAssignment_2_1_1 )? )
            // InternalOpenCypherParser.g:14442:2: ( rule__RangeLiteral__UpperAssignment_2_1_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:14443:2: ( rule__RangeLiteral__UpperAssignment_2_1_1 )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( ((LA105_0>=RULE_HEX && LA105_0<=RULE_DECIMAL)) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalOpenCypherParser.g:14443:3: rule__RangeLiteral__UpperAssignment_2_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__RangeLiteral__UpperAssignment_2_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getUpperAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__Group_2_1__1__Impl"


    // $ANTLR start "rule__ExpressionOr__Group__0"
    // InternalOpenCypherParser.g:14452:1: rule__ExpressionOr__Group__0 : rule__ExpressionOr__Group__0__Impl rule__ExpressionOr__Group__1 ;
    public final void rule__ExpressionOr__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14456:1: ( rule__ExpressionOr__Group__0__Impl rule__ExpressionOr__Group__1 )
            // InternalOpenCypherParser.g:14457:2: rule__ExpressionOr__Group__0__Impl rule__ExpressionOr__Group__1
            {
            pushFollow(FOLLOW_83);
            rule__ExpressionOr__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group__0"


    // $ANTLR start "rule__ExpressionOr__Group__0__Impl"
    // InternalOpenCypherParser.g:14464:1: rule__ExpressionOr__Group__0__Impl : ( ruleExpressionXor ) ;
    public final void rule__ExpressionOr__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14468:1: ( ( ruleExpressionXor ) )
            // InternalOpenCypherParser.g:14469:1: ( ruleExpressionXor )
            {
            // InternalOpenCypherParser.g:14469:1: ( ruleExpressionXor )
            // InternalOpenCypherParser.g:14470:2: ruleExpressionXor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getExpressionXorParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionXor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getExpressionXorParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group__0__Impl"


    // $ANTLR start "rule__ExpressionOr__Group__1"
    // InternalOpenCypherParser.g:14479:1: rule__ExpressionOr__Group__1 : rule__ExpressionOr__Group__1__Impl ;
    public final void rule__ExpressionOr__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14483:1: ( rule__ExpressionOr__Group__1__Impl )
            // InternalOpenCypherParser.g:14484:2: rule__ExpressionOr__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group__1"


    // $ANTLR start "rule__ExpressionOr__Group__1__Impl"
    // InternalOpenCypherParser.g:14490:1: rule__ExpressionOr__Group__1__Impl : ( ( rule__ExpressionOr__Group_1__0 )* ) ;
    public final void rule__ExpressionOr__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14494:1: ( ( ( rule__ExpressionOr__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:14495:1: ( ( rule__ExpressionOr__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:14495:1: ( ( rule__ExpressionOr__Group_1__0 )* )
            // InternalOpenCypherParser.g:14496:2: ( rule__ExpressionOr__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:14497:2: ( rule__ExpressionOr__Group_1__0 )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==OR) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14497:3: rule__ExpressionOr__Group_1__0
            	    {
            	    pushFollow(FOLLOW_84);
            	    rule__ExpressionOr__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group__1__Impl"


    // $ANTLR start "rule__ExpressionOr__Group_1__0"
    // InternalOpenCypherParser.g:14506:1: rule__ExpressionOr__Group_1__0 : rule__ExpressionOr__Group_1__0__Impl rule__ExpressionOr__Group_1__1 ;
    public final void rule__ExpressionOr__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14510:1: ( rule__ExpressionOr__Group_1__0__Impl rule__ExpressionOr__Group_1__1 )
            // InternalOpenCypherParser.g:14511:2: rule__ExpressionOr__Group_1__0__Impl rule__ExpressionOr__Group_1__1
            {
            pushFollow(FOLLOW_83);
            rule__ExpressionOr__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group_1__0"


    // $ANTLR start "rule__ExpressionOr__Group_1__0__Impl"
    // InternalOpenCypherParser.g:14518:1: rule__ExpressionOr__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionOr__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14522:1: ( ( () ) )
            // InternalOpenCypherParser.g:14523:1: ( () )
            {
            // InternalOpenCypherParser.g:14523:1: ( () )
            // InternalOpenCypherParser.g:14524:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getExpressionOrLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:14525:2: ()
            // InternalOpenCypherParser.g:14525:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getExpressionOrLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionOr__Group_1__1"
    // InternalOpenCypherParser.g:14533:1: rule__ExpressionOr__Group_1__1 : rule__ExpressionOr__Group_1__1__Impl rule__ExpressionOr__Group_1__2 ;
    public final void rule__ExpressionOr__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14537:1: ( rule__ExpressionOr__Group_1__1__Impl rule__ExpressionOr__Group_1__2 )
            // InternalOpenCypherParser.g:14538:2: rule__ExpressionOr__Group_1__1__Impl rule__ExpressionOr__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionOr__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group_1__1"


    // $ANTLR start "rule__ExpressionOr__Group_1__1__Impl"
    // InternalOpenCypherParser.g:14545:1: rule__ExpressionOr__Group_1__1__Impl : ( ( rule__ExpressionOr__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionOr__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14549:1: ( ( ( rule__ExpressionOr__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:14550:1: ( ( rule__ExpressionOr__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:14550:1: ( ( rule__ExpressionOr__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:14551:2: ( rule__ExpressionOr__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:14552:2: ( rule__ExpressionOr__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:14552:3: rule__ExpressionOr__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionOr__Group_1__2"
    // InternalOpenCypherParser.g:14560:1: rule__ExpressionOr__Group_1__2 : rule__ExpressionOr__Group_1__2__Impl ;
    public final void rule__ExpressionOr__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14564:1: ( rule__ExpressionOr__Group_1__2__Impl )
            // InternalOpenCypherParser.g:14565:2: rule__ExpressionOr__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group_1__2"


    // $ANTLR start "rule__ExpressionOr__Group_1__2__Impl"
    // InternalOpenCypherParser.g:14571:1: rule__ExpressionOr__Group_1__2__Impl : ( ( rule__ExpressionOr__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionOr__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14575:1: ( ( ( rule__ExpressionOr__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:14576:1: ( ( rule__ExpressionOr__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:14576:1: ( ( rule__ExpressionOr__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:14577:2: ( rule__ExpressionOr__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:14578:2: ( rule__ExpressionOr__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:14578:3: rule__ExpressionOr__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionOr__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionXor__Group__0"
    // InternalOpenCypherParser.g:14587:1: rule__ExpressionXor__Group__0 : rule__ExpressionXor__Group__0__Impl rule__ExpressionXor__Group__1 ;
    public final void rule__ExpressionXor__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14591:1: ( rule__ExpressionXor__Group__0__Impl rule__ExpressionXor__Group__1 )
            // InternalOpenCypherParser.g:14592:2: rule__ExpressionXor__Group__0__Impl rule__ExpressionXor__Group__1
            {
            pushFollow(FOLLOW_85);
            rule__ExpressionXor__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group__0"


    // $ANTLR start "rule__ExpressionXor__Group__0__Impl"
    // InternalOpenCypherParser.g:14599:1: rule__ExpressionXor__Group__0__Impl : ( ruleExpressionAnd ) ;
    public final void rule__ExpressionXor__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14603:1: ( ( ruleExpressionAnd ) )
            // InternalOpenCypherParser.g:14604:1: ( ruleExpressionAnd )
            {
            // InternalOpenCypherParser.g:14604:1: ( ruleExpressionAnd )
            // InternalOpenCypherParser.g:14605:2: ruleExpressionAnd
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getExpressionAndParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getExpressionAndParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group__0__Impl"


    // $ANTLR start "rule__ExpressionXor__Group__1"
    // InternalOpenCypherParser.g:14614:1: rule__ExpressionXor__Group__1 : rule__ExpressionXor__Group__1__Impl ;
    public final void rule__ExpressionXor__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14618:1: ( rule__ExpressionXor__Group__1__Impl )
            // InternalOpenCypherParser.g:14619:2: rule__ExpressionXor__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group__1"


    // $ANTLR start "rule__ExpressionXor__Group__1__Impl"
    // InternalOpenCypherParser.g:14625:1: rule__ExpressionXor__Group__1__Impl : ( ( rule__ExpressionXor__Group_1__0 )* ) ;
    public final void rule__ExpressionXor__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14629:1: ( ( ( rule__ExpressionXor__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:14630:1: ( ( rule__ExpressionXor__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:14630:1: ( ( rule__ExpressionXor__Group_1__0 )* )
            // InternalOpenCypherParser.g:14631:2: ( rule__ExpressionXor__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:14632:2: ( rule__ExpressionXor__Group_1__0 )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==XOR) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14632:3: rule__ExpressionXor__Group_1__0
            	    {
            	    pushFollow(FOLLOW_86);
            	    rule__ExpressionXor__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group__1__Impl"


    // $ANTLR start "rule__ExpressionXor__Group_1__0"
    // InternalOpenCypherParser.g:14641:1: rule__ExpressionXor__Group_1__0 : rule__ExpressionXor__Group_1__0__Impl rule__ExpressionXor__Group_1__1 ;
    public final void rule__ExpressionXor__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14645:1: ( rule__ExpressionXor__Group_1__0__Impl rule__ExpressionXor__Group_1__1 )
            // InternalOpenCypherParser.g:14646:2: rule__ExpressionXor__Group_1__0__Impl rule__ExpressionXor__Group_1__1
            {
            pushFollow(FOLLOW_85);
            rule__ExpressionXor__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group_1__0"


    // $ANTLR start "rule__ExpressionXor__Group_1__0__Impl"
    // InternalOpenCypherParser.g:14653:1: rule__ExpressionXor__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionXor__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14657:1: ( ( () ) )
            // InternalOpenCypherParser.g:14658:1: ( () )
            {
            // InternalOpenCypherParser.g:14658:1: ( () )
            // InternalOpenCypherParser.g:14659:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getExpressionXorLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:14660:2: ()
            // InternalOpenCypherParser.g:14660:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getExpressionXorLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionXor__Group_1__1"
    // InternalOpenCypherParser.g:14668:1: rule__ExpressionXor__Group_1__1 : rule__ExpressionXor__Group_1__1__Impl rule__ExpressionXor__Group_1__2 ;
    public final void rule__ExpressionXor__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14672:1: ( rule__ExpressionXor__Group_1__1__Impl rule__ExpressionXor__Group_1__2 )
            // InternalOpenCypherParser.g:14673:2: rule__ExpressionXor__Group_1__1__Impl rule__ExpressionXor__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionXor__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group_1__1"


    // $ANTLR start "rule__ExpressionXor__Group_1__1__Impl"
    // InternalOpenCypherParser.g:14680:1: rule__ExpressionXor__Group_1__1__Impl : ( ( rule__ExpressionXor__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionXor__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14684:1: ( ( ( rule__ExpressionXor__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:14685:1: ( ( rule__ExpressionXor__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:14685:1: ( ( rule__ExpressionXor__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:14686:2: ( rule__ExpressionXor__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:14687:2: ( rule__ExpressionXor__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:14687:3: rule__ExpressionXor__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionXor__Group_1__2"
    // InternalOpenCypherParser.g:14695:1: rule__ExpressionXor__Group_1__2 : rule__ExpressionXor__Group_1__2__Impl ;
    public final void rule__ExpressionXor__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14699:1: ( rule__ExpressionXor__Group_1__2__Impl )
            // InternalOpenCypherParser.g:14700:2: rule__ExpressionXor__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group_1__2"


    // $ANTLR start "rule__ExpressionXor__Group_1__2__Impl"
    // InternalOpenCypherParser.g:14706:1: rule__ExpressionXor__Group_1__2__Impl : ( ( rule__ExpressionXor__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionXor__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14710:1: ( ( ( rule__ExpressionXor__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:14711:1: ( ( rule__ExpressionXor__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:14711:1: ( ( rule__ExpressionXor__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:14712:2: ( rule__ExpressionXor__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:14713:2: ( rule__ExpressionXor__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:14713:3: rule__ExpressionXor__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionXor__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionAnd__Group__0"
    // InternalOpenCypherParser.g:14722:1: rule__ExpressionAnd__Group__0 : rule__ExpressionAnd__Group__0__Impl rule__ExpressionAnd__Group__1 ;
    public final void rule__ExpressionAnd__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14726:1: ( rule__ExpressionAnd__Group__0__Impl rule__ExpressionAnd__Group__1 )
            // InternalOpenCypherParser.g:14727:2: rule__ExpressionAnd__Group__0__Impl rule__ExpressionAnd__Group__1
            {
            pushFollow(FOLLOW_87);
            rule__ExpressionAnd__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group__0"


    // $ANTLR start "rule__ExpressionAnd__Group__0__Impl"
    // InternalOpenCypherParser.g:14734:1: rule__ExpressionAnd__Group__0__Impl : ( ruleExpressionNot ) ;
    public final void rule__ExpressionAnd__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14738:1: ( ( ruleExpressionNot ) )
            // InternalOpenCypherParser.g:14739:1: ( ruleExpressionNot )
            {
            // InternalOpenCypherParser.g:14739:1: ( ruleExpressionNot )
            // InternalOpenCypherParser.g:14740:2: ruleExpressionNot
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getExpressionNotParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNot();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getExpressionNotParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group__0__Impl"


    // $ANTLR start "rule__ExpressionAnd__Group__1"
    // InternalOpenCypherParser.g:14749:1: rule__ExpressionAnd__Group__1 : rule__ExpressionAnd__Group__1__Impl ;
    public final void rule__ExpressionAnd__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14753:1: ( rule__ExpressionAnd__Group__1__Impl )
            // InternalOpenCypherParser.g:14754:2: rule__ExpressionAnd__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group__1"


    // $ANTLR start "rule__ExpressionAnd__Group__1__Impl"
    // InternalOpenCypherParser.g:14760:1: rule__ExpressionAnd__Group__1__Impl : ( ( rule__ExpressionAnd__Group_1__0 )* ) ;
    public final void rule__ExpressionAnd__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14764:1: ( ( ( rule__ExpressionAnd__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:14765:1: ( ( rule__ExpressionAnd__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:14765:1: ( ( rule__ExpressionAnd__Group_1__0 )* )
            // InternalOpenCypherParser.g:14766:2: ( rule__ExpressionAnd__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:14767:2: ( rule__ExpressionAnd__Group_1__0 )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==AND) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14767:3: rule__ExpressionAnd__Group_1__0
            	    {
            	    pushFollow(FOLLOW_88);
            	    rule__ExpressionAnd__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group__1__Impl"


    // $ANTLR start "rule__ExpressionAnd__Group_1__0"
    // InternalOpenCypherParser.g:14776:1: rule__ExpressionAnd__Group_1__0 : rule__ExpressionAnd__Group_1__0__Impl rule__ExpressionAnd__Group_1__1 ;
    public final void rule__ExpressionAnd__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14780:1: ( rule__ExpressionAnd__Group_1__0__Impl rule__ExpressionAnd__Group_1__1 )
            // InternalOpenCypherParser.g:14781:2: rule__ExpressionAnd__Group_1__0__Impl rule__ExpressionAnd__Group_1__1
            {
            pushFollow(FOLLOW_87);
            rule__ExpressionAnd__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group_1__0"


    // $ANTLR start "rule__ExpressionAnd__Group_1__0__Impl"
    // InternalOpenCypherParser.g:14788:1: rule__ExpressionAnd__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionAnd__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14792:1: ( ( () ) )
            // InternalOpenCypherParser.g:14793:1: ( () )
            {
            // InternalOpenCypherParser.g:14793:1: ( () )
            // InternalOpenCypherParser.g:14794:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getExpressionAndLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:14795:2: ()
            // InternalOpenCypherParser.g:14795:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getExpressionAndLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionAnd__Group_1__1"
    // InternalOpenCypherParser.g:14803:1: rule__ExpressionAnd__Group_1__1 : rule__ExpressionAnd__Group_1__1__Impl rule__ExpressionAnd__Group_1__2 ;
    public final void rule__ExpressionAnd__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14807:1: ( rule__ExpressionAnd__Group_1__1__Impl rule__ExpressionAnd__Group_1__2 )
            // InternalOpenCypherParser.g:14808:2: rule__ExpressionAnd__Group_1__1__Impl rule__ExpressionAnd__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionAnd__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group_1__1"


    // $ANTLR start "rule__ExpressionAnd__Group_1__1__Impl"
    // InternalOpenCypherParser.g:14815:1: rule__ExpressionAnd__Group_1__1__Impl : ( ( rule__ExpressionAnd__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionAnd__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14819:1: ( ( ( rule__ExpressionAnd__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:14820:1: ( ( rule__ExpressionAnd__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:14820:1: ( ( rule__ExpressionAnd__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:14821:2: ( rule__ExpressionAnd__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:14822:2: ( rule__ExpressionAnd__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:14822:3: rule__ExpressionAnd__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionAnd__Group_1__2"
    // InternalOpenCypherParser.g:14830:1: rule__ExpressionAnd__Group_1__2 : rule__ExpressionAnd__Group_1__2__Impl ;
    public final void rule__ExpressionAnd__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14834:1: ( rule__ExpressionAnd__Group_1__2__Impl )
            // InternalOpenCypherParser.g:14835:2: rule__ExpressionAnd__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group_1__2"


    // $ANTLR start "rule__ExpressionAnd__Group_1__2__Impl"
    // InternalOpenCypherParser.g:14841:1: rule__ExpressionAnd__Group_1__2__Impl : ( ( rule__ExpressionAnd__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionAnd__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14845:1: ( ( ( rule__ExpressionAnd__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:14846:1: ( ( rule__ExpressionAnd__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:14846:1: ( ( rule__ExpressionAnd__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:14847:2: ( rule__ExpressionAnd__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:14848:2: ( rule__ExpressionAnd__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:14848:3: rule__ExpressionAnd__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionAnd__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionNot__Group_0__0"
    // InternalOpenCypherParser.g:14857:1: rule__ExpressionNot__Group_0__0 : rule__ExpressionNot__Group_0__0__Impl rule__ExpressionNot__Group_0__1 ;
    public final void rule__ExpressionNot__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14861:1: ( rule__ExpressionNot__Group_0__0__Impl rule__ExpressionNot__Group_0__1 )
            // InternalOpenCypherParser.g:14862:2: rule__ExpressionNot__Group_0__0__Impl rule__ExpressionNot__Group_0__1
            {
            pushFollow(FOLLOW_89);
            rule__ExpressionNot__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionNot__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Group_0__0"


    // $ANTLR start "rule__ExpressionNot__Group_0__0__Impl"
    // InternalOpenCypherParser.g:14869:1: rule__ExpressionNot__Group_0__0__Impl : ( () ) ;
    public final void rule__ExpressionNot__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14873:1: ( ( () ) )
            // InternalOpenCypherParser.g:14874:1: ( () )
            {
            // InternalOpenCypherParser.g:14874:1: ( () )
            // InternalOpenCypherParser.g:14875:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getExpressionNotAction_0_0()); 
            }
            // InternalOpenCypherParser.g:14876:2: ()
            // InternalOpenCypherParser.g:14876:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getExpressionNotAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Group_0__0__Impl"


    // $ANTLR start "rule__ExpressionNot__Group_0__1"
    // InternalOpenCypherParser.g:14884:1: rule__ExpressionNot__Group_0__1 : rule__ExpressionNot__Group_0__1__Impl rule__ExpressionNot__Group_0__2 ;
    public final void rule__ExpressionNot__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14888:1: ( rule__ExpressionNot__Group_0__1__Impl rule__ExpressionNot__Group_0__2 )
            // InternalOpenCypherParser.g:14889:2: rule__ExpressionNot__Group_0__1__Impl rule__ExpressionNot__Group_0__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionNot__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionNot__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Group_0__1"


    // $ANTLR start "rule__ExpressionNot__Group_0__1__Impl"
    // InternalOpenCypherParser.g:14896:1: rule__ExpressionNot__Group_0__1__Impl : ( ( rule__ExpressionNot__OperatorAssignment_0_1 ) ) ;
    public final void rule__ExpressionNot__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14900:1: ( ( ( rule__ExpressionNot__OperatorAssignment_0_1 ) ) )
            // InternalOpenCypherParser.g:14901:1: ( ( rule__ExpressionNot__OperatorAssignment_0_1 ) )
            {
            // InternalOpenCypherParser.g:14901:1: ( ( rule__ExpressionNot__OperatorAssignment_0_1 ) )
            // InternalOpenCypherParser.g:14902:2: ( rule__ExpressionNot__OperatorAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getOperatorAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:14903:2: ( rule__ExpressionNot__OperatorAssignment_0_1 )
            // InternalOpenCypherParser.g:14903:3: rule__ExpressionNot__OperatorAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNot__OperatorAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getOperatorAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Group_0__1__Impl"


    // $ANTLR start "rule__ExpressionNot__Group_0__2"
    // InternalOpenCypherParser.g:14911:1: rule__ExpressionNot__Group_0__2 : rule__ExpressionNot__Group_0__2__Impl ;
    public final void rule__ExpressionNot__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14915:1: ( rule__ExpressionNot__Group_0__2__Impl )
            // InternalOpenCypherParser.g:14916:2: rule__ExpressionNot__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNot__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Group_0__2"


    // $ANTLR start "rule__ExpressionNot__Group_0__2__Impl"
    // InternalOpenCypherParser.g:14922:1: rule__ExpressionNot__Group_0__2__Impl : ( ( rule__ExpressionNot__LeftAssignment_0_2 ) ) ;
    public final void rule__ExpressionNot__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14926:1: ( ( ( rule__ExpressionNot__LeftAssignment_0_2 ) ) )
            // InternalOpenCypherParser.g:14927:1: ( ( rule__ExpressionNot__LeftAssignment_0_2 ) )
            {
            // InternalOpenCypherParser.g:14927:1: ( ( rule__ExpressionNot__LeftAssignment_0_2 ) )
            // InternalOpenCypherParser.g:14928:2: ( rule__ExpressionNot__LeftAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getLeftAssignment_0_2()); 
            }
            // InternalOpenCypherParser.g:14929:2: ( rule__ExpressionNot__LeftAssignment_0_2 )
            // InternalOpenCypherParser.g:14929:3: rule__ExpressionNot__LeftAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNot__LeftAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getLeftAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__Group_0__2__Impl"


    // $ANTLR start "rule__ExpressionComparison__Group__0"
    // InternalOpenCypherParser.g:14938:1: rule__ExpressionComparison__Group__0 : rule__ExpressionComparison__Group__0__Impl rule__ExpressionComparison__Group__1 ;
    public final void rule__ExpressionComparison__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14942:1: ( rule__ExpressionComparison__Group__0__Impl rule__ExpressionComparison__Group__1 )
            // InternalOpenCypherParser.g:14943:2: rule__ExpressionComparison__Group__0__Impl rule__ExpressionComparison__Group__1
            {
            pushFollow(FOLLOW_90);
            rule__ExpressionComparison__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group__0"


    // $ANTLR start "rule__ExpressionComparison__Group__0__Impl"
    // InternalOpenCypherParser.g:14950:1: rule__ExpressionComparison__Group__0__Impl : ( ruleExpressionPlusMinus ) ;
    public final void rule__ExpressionComparison__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14954:1: ( ( ruleExpressionPlusMinus ) )
            // InternalOpenCypherParser.g:14955:1: ( ruleExpressionPlusMinus )
            {
            // InternalOpenCypherParser.g:14955:1: ( ruleExpressionPlusMinus )
            // InternalOpenCypherParser.g:14956:2: ruleExpressionPlusMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getExpressionPlusMinusParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getExpressionPlusMinusParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group__0__Impl"


    // $ANTLR start "rule__ExpressionComparison__Group__1"
    // InternalOpenCypherParser.g:14965:1: rule__ExpressionComparison__Group__1 : rule__ExpressionComparison__Group__1__Impl ;
    public final void rule__ExpressionComparison__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14969:1: ( rule__ExpressionComparison__Group__1__Impl )
            // InternalOpenCypherParser.g:14970:2: rule__ExpressionComparison__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group__1"


    // $ANTLR start "rule__ExpressionComparison__Group__1__Impl"
    // InternalOpenCypherParser.g:14976:1: rule__ExpressionComparison__Group__1__Impl : ( ( rule__ExpressionComparison__Group_1__0 )* ) ;
    public final void rule__ExpressionComparison__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14980:1: ( ( ( rule__ExpressionComparison__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:14981:1: ( ( rule__ExpressionComparison__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:14981:1: ( ( rule__ExpressionComparison__Group_1__0 )* )
            // InternalOpenCypherParser.g:14982:2: ( rule__ExpressionComparison__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:14983:2: ( rule__ExpressionComparison__Group_1__0 )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( ((LA109_0>=LessThanSignEqualsSign && LA109_0<=LessThanSignGreaterThanSign)||LA109_0==GreaterThanSignEqualsSign||(LA109_0>=LessThanSign && LA109_0<=GreaterThanSign)) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // InternalOpenCypherParser.g:14983:3: rule__ExpressionComparison__Group_1__0
            	    {
            	    pushFollow(FOLLOW_91);
            	    rule__ExpressionComparison__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group__1__Impl"


    // $ANTLR start "rule__ExpressionComparison__Group_1__0"
    // InternalOpenCypherParser.g:14992:1: rule__ExpressionComparison__Group_1__0 : rule__ExpressionComparison__Group_1__0__Impl rule__ExpressionComparison__Group_1__1 ;
    public final void rule__ExpressionComparison__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:14996:1: ( rule__ExpressionComparison__Group_1__0__Impl rule__ExpressionComparison__Group_1__1 )
            // InternalOpenCypherParser.g:14997:2: rule__ExpressionComparison__Group_1__0__Impl rule__ExpressionComparison__Group_1__1
            {
            pushFollow(FOLLOW_90);
            rule__ExpressionComparison__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group_1__0"


    // $ANTLR start "rule__ExpressionComparison__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15004:1: rule__ExpressionComparison__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionComparison__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15008:1: ( ( () ) )
            // InternalOpenCypherParser.g:15009:1: ( () )
            {
            // InternalOpenCypherParser.g:15009:1: ( () )
            // InternalOpenCypherParser.g:15010:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getExpressionComparisonLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15011:2: ()
            // InternalOpenCypherParser.g:15011:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getExpressionComparisonLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionComparison__Group_1__1"
    // InternalOpenCypherParser.g:15019:1: rule__ExpressionComparison__Group_1__1 : rule__ExpressionComparison__Group_1__1__Impl rule__ExpressionComparison__Group_1__2 ;
    public final void rule__ExpressionComparison__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15023:1: ( rule__ExpressionComparison__Group_1__1__Impl rule__ExpressionComparison__Group_1__2 )
            // InternalOpenCypherParser.g:15024:2: rule__ExpressionComparison__Group_1__1__Impl rule__ExpressionComparison__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionComparison__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group_1__1"


    // $ANTLR start "rule__ExpressionComparison__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15031:1: rule__ExpressionComparison__Group_1__1__Impl : ( ( rule__ExpressionComparison__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionComparison__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15035:1: ( ( ( rule__ExpressionComparison__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15036:1: ( ( rule__ExpressionComparison__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15036:1: ( ( rule__ExpressionComparison__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15037:2: ( rule__ExpressionComparison__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15038:2: ( rule__ExpressionComparison__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15038:3: rule__ExpressionComparison__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionComparison__Group_1__2"
    // InternalOpenCypherParser.g:15046:1: rule__ExpressionComparison__Group_1__2 : rule__ExpressionComparison__Group_1__2__Impl ;
    public final void rule__ExpressionComparison__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15050:1: ( rule__ExpressionComparison__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15051:2: rule__ExpressionComparison__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group_1__2"


    // $ANTLR start "rule__ExpressionComparison__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15057:1: rule__ExpressionComparison__Group_1__2__Impl : ( ( rule__ExpressionComparison__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionComparison__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15061:1: ( ( ( rule__ExpressionComparison__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15062:1: ( ( rule__ExpressionComparison__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15062:1: ( ( rule__ExpressionComparison__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15063:2: ( rule__ExpressionComparison__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15064:2: ( rule__ExpressionComparison__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15064:3: rule__ExpressionComparison__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionPlusMinus__Group__0"
    // InternalOpenCypherParser.g:15073:1: rule__ExpressionPlusMinus__Group__0 : rule__ExpressionPlusMinus__Group__0__Impl rule__ExpressionPlusMinus__Group__1 ;
    public final void rule__ExpressionPlusMinus__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15077:1: ( rule__ExpressionPlusMinus__Group__0__Impl rule__ExpressionPlusMinus__Group__1 )
            // InternalOpenCypherParser.g:15078:2: rule__ExpressionPlusMinus__Group__0__Impl rule__ExpressionPlusMinus__Group__1
            {
            pushFollow(FOLLOW_92);
            rule__ExpressionPlusMinus__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group__0"


    // $ANTLR start "rule__ExpressionPlusMinus__Group__0__Impl"
    // InternalOpenCypherParser.g:15085:1: rule__ExpressionPlusMinus__Group__0__Impl : ( ruleExpressionMulDiv ) ;
    public final void rule__ExpressionPlusMinus__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15089:1: ( ( ruleExpressionMulDiv ) )
            // InternalOpenCypherParser.g:15090:1: ( ruleExpressionMulDiv )
            {
            // InternalOpenCypherParser.g:15090:1: ( ruleExpressionMulDiv )
            // InternalOpenCypherParser.g:15091:2: ruleExpressionMulDiv
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getExpressionMulDivParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getExpressionMulDivParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group__0__Impl"


    // $ANTLR start "rule__ExpressionPlusMinus__Group__1"
    // InternalOpenCypherParser.g:15100:1: rule__ExpressionPlusMinus__Group__1 : rule__ExpressionPlusMinus__Group__1__Impl ;
    public final void rule__ExpressionPlusMinus__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15104:1: ( rule__ExpressionPlusMinus__Group__1__Impl )
            // InternalOpenCypherParser.g:15105:2: rule__ExpressionPlusMinus__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group__1"


    // $ANTLR start "rule__ExpressionPlusMinus__Group__1__Impl"
    // InternalOpenCypherParser.g:15111:1: rule__ExpressionPlusMinus__Group__1__Impl : ( ( rule__ExpressionPlusMinus__Group_1__0 )* ) ;
    public final void rule__ExpressionPlusMinus__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15115:1: ( ( ( rule__ExpressionPlusMinus__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15116:1: ( ( rule__ExpressionPlusMinus__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15116:1: ( ( rule__ExpressionPlusMinus__Group_1__0 )* )
            // InternalOpenCypherParser.g:15117:2: ( rule__ExpressionPlusMinus__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15118:2: ( rule__ExpressionPlusMinus__Group_1__0 )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==PlusSign||LA110_0==HyphenMinus) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15118:3: rule__ExpressionPlusMinus__Group_1__0
            	    {
            	    pushFollow(FOLLOW_93);
            	    rule__ExpressionPlusMinus__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group__1__Impl"


    // $ANTLR start "rule__ExpressionPlusMinus__Group_1__0"
    // InternalOpenCypherParser.g:15127:1: rule__ExpressionPlusMinus__Group_1__0 : rule__ExpressionPlusMinus__Group_1__0__Impl rule__ExpressionPlusMinus__Group_1__1 ;
    public final void rule__ExpressionPlusMinus__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15131:1: ( rule__ExpressionPlusMinus__Group_1__0__Impl rule__ExpressionPlusMinus__Group_1__1 )
            // InternalOpenCypherParser.g:15132:2: rule__ExpressionPlusMinus__Group_1__0__Impl rule__ExpressionPlusMinus__Group_1__1
            {
            pushFollow(FOLLOW_92);
            rule__ExpressionPlusMinus__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group_1__0"


    // $ANTLR start "rule__ExpressionPlusMinus__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15139:1: rule__ExpressionPlusMinus__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionPlusMinus__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15143:1: ( ( () ) )
            // InternalOpenCypherParser.g:15144:1: ( () )
            {
            // InternalOpenCypherParser.g:15144:1: ( () )
            // InternalOpenCypherParser.g:15145:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getExpressionPlusMinusLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15146:2: ()
            // InternalOpenCypherParser.g:15146:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getExpressionPlusMinusLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionPlusMinus__Group_1__1"
    // InternalOpenCypherParser.g:15154:1: rule__ExpressionPlusMinus__Group_1__1 : rule__ExpressionPlusMinus__Group_1__1__Impl rule__ExpressionPlusMinus__Group_1__2 ;
    public final void rule__ExpressionPlusMinus__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15158:1: ( rule__ExpressionPlusMinus__Group_1__1__Impl rule__ExpressionPlusMinus__Group_1__2 )
            // InternalOpenCypherParser.g:15159:2: rule__ExpressionPlusMinus__Group_1__1__Impl rule__ExpressionPlusMinus__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionPlusMinus__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group_1__1"


    // $ANTLR start "rule__ExpressionPlusMinus__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15166:1: rule__ExpressionPlusMinus__Group_1__1__Impl : ( ( rule__ExpressionPlusMinus__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionPlusMinus__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15170:1: ( ( ( rule__ExpressionPlusMinus__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15171:1: ( ( rule__ExpressionPlusMinus__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15171:1: ( ( rule__ExpressionPlusMinus__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15172:2: ( rule__ExpressionPlusMinus__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15173:2: ( rule__ExpressionPlusMinus__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15173:3: rule__ExpressionPlusMinus__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionPlusMinus__Group_1__2"
    // InternalOpenCypherParser.g:15181:1: rule__ExpressionPlusMinus__Group_1__2 : rule__ExpressionPlusMinus__Group_1__2__Impl ;
    public final void rule__ExpressionPlusMinus__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15185:1: ( rule__ExpressionPlusMinus__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15186:2: rule__ExpressionPlusMinus__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group_1__2"


    // $ANTLR start "rule__ExpressionPlusMinus__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15192:1: rule__ExpressionPlusMinus__Group_1__2__Impl : ( ( rule__ExpressionPlusMinus__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionPlusMinus__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15196:1: ( ( ( rule__ExpressionPlusMinus__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15197:1: ( ( rule__ExpressionPlusMinus__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15197:1: ( ( rule__ExpressionPlusMinus__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15198:2: ( rule__ExpressionPlusMinus__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15199:2: ( rule__ExpressionPlusMinus__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15199:3: rule__ExpressionPlusMinus__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionMulDiv__Group__0"
    // InternalOpenCypherParser.g:15208:1: rule__ExpressionMulDiv__Group__0 : rule__ExpressionMulDiv__Group__0__Impl rule__ExpressionMulDiv__Group__1 ;
    public final void rule__ExpressionMulDiv__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15212:1: ( rule__ExpressionMulDiv__Group__0__Impl rule__ExpressionMulDiv__Group__1 )
            // InternalOpenCypherParser.g:15213:2: rule__ExpressionMulDiv__Group__0__Impl rule__ExpressionMulDiv__Group__1
            {
            pushFollow(FOLLOW_94);
            rule__ExpressionMulDiv__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group__0"


    // $ANTLR start "rule__ExpressionMulDiv__Group__0__Impl"
    // InternalOpenCypherParser.g:15220:1: rule__ExpressionMulDiv__Group__0__Impl : ( ruleExpressionPower ) ;
    public final void rule__ExpressionMulDiv__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15224:1: ( ( ruleExpressionPower ) )
            // InternalOpenCypherParser.g:15225:1: ( ruleExpressionPower )
            {
            // InternalOpenCypherParser.g:15225:1: ( ruleExpressionPower )
            // InternalOpenCypherParser.g:15226:2: ruleExpressionPower
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getExpressionPowerParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionPower();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getExpressionPowerParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group__0__Impl"


    // $ANTLR start "rule__ExpressionMulDiv__Group__1"
    // InternalOpenCypherParser.g:15235:1: rule__ExpressionMulDiv__Group__1 : rule__ExpressionMulDiv__Group__1__Impl ;
    public final void rule__ExpressionMulDiv__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15239:1: ( rule__ExpressionMulDiv__Group__1__Impl )
            // InternalOpenCypherParser.g:15240:2: rule__ExpressionMulDiv__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group__1"


    // $ANTLR start "rule__ExpressionMulDiv__Group__1__Impl"
    // InternalOpenCypherParser.g:15246:1: rule__ExpressionMulDiv__Group__1__Impl : ( ( rule__ExpressionMulDiv__Group_1__0 )* ) ;
    public final void rule__ExpressionMulDiv__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15250:1: ( ( ( rule__ExpressionMulDiv__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15251:1: ( ( rule__ExpressionMulDiv__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15251:1: ( ( rule__ExpressionMulDiv__Group_1__0 )* )
            // InternalOpenCypherParser.g:15252:2: ( rule__ExpressionMulDiv__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15253:2: ( rule__ExpressionMulDiv__Group_1__0 )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==PercentSign||LA111_0==Asterisk||LA111_0==Solidus) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15253:3: rule__ExpressionMulDiv__Group_1__0
            	    {
            	    pushFollow(FOLLOW_95);
            	    rule__ExpressionMulDiv__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group__1__Impl"


    // $ANTLR start "rule__ExpressionMulDiv__Group_1__0"
    // InternalOpenCypherParser.g:15262:1: rule__ExpressionMulDiv__Group_1__0 : rule__ExpressionMulDiv__Group_1__0__Impl rule__ExpressionMulDiv__Group_1__1 ;
    public final void rule__ExpressionMulDiv__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15266:1: ( rule__ExpressionMulDiv__Group_1__0__Impl rule__ExpressionMulDiv__Group_1__1 )
            // InternalOpenCypherParser.g:15267:2: rule__ExpressionMulDiv__Group_1__0__Impl rule__ExpressionMulDiv__Group_1__1
            {
            pushFollow(FOLLOW_94);
            rule__ExpressionMulDiv__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group_1__0"


    // $ANTLR start "rule__ExpressionMulDiv__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15274:1: rule__ExpressionMulDiv__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionMulDiv__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15278:1: ( ( () ) )
            // InternalOpenCypherParser.g:15279:1: ( () )
            {
            // InternalOpenCypherParser.g:15279:1: ( () )
            // InternalOpenCypherParser.g:15280:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getExpressionMulDivLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15281:2: ()
            // InternalOpenCypherParser.g:15281:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getExpressionMulDivLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionMulDiv__Group_1__1"
    // InternalOpenCypherParser.g:15289:1: rule__ExpressionMulDiv__Group_1__1 : rule__ExpressionMulDiv__Group_1__1__Impl rule__ExpressionMulDiv__Group_1__2 ;
    public final void rule__ExpressionMulDiv__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15293:1: ( rule__ExpressionMulDiv__Group_1__1__Impl rule__ExpressionMulDiv__Group_1__2 )
            // InternalOpenCypherParser.g:15294:2: rule__ExpressionMulDiv__Group_1__1__Impl rule__ExpressionMulDiv__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionMulDiv__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group_1__1"


    // $ANTLR start "rule__ExpressionMulDiv__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15301:1: rule__ExpressionMulDiv__Group_1__1__Impl : ( ( rule__ExpressionMulDiv__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionMulDiv__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15305:1: ( ( ( rule__ExpressionMulDiv__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15306:1: ( ( rule__ExpressionMulDiv__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15306:1: ( ( rule__ExpressionMulDiv__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15307:2: ( rule__ExpressionMulDiv__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15308:2: ( rule__ExpressionMulDiv__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15308:3: rule__ExpressionMulDiv__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionMulDiv__Group_1__2"
    // InternalOpenCypherParser.g:15316:1: rule__ExpressionMulDiv__Group_1__2 : rule__ExpressionMulDiv__Group_1__2__Impl ;
    public final void rule__ExpressionMulDiv__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15320:1: ( rule__ExpressionMulDiv__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15321:2: rule__ExpressionMulDiv__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group_1__2"


    // $ANTLR start "rule__ExpressionMulDiv__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15327:1: rule__ExpressionMulDiv__Group_1__2__Impl : ( ( rule__ExpressionMulDiv__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionMulDiv__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15331:1: ( ( ( rule__ExpressionMulDiv__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15332:1: ( ( rule__ExpressionMulDiv__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15332:1: ( ( rule__ExpressionMulDiv__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15333:2: ( rule__ExpressionMulDiv__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15334:2: ( rule__ExpressionMulDiv__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15334:3: rule__ExpressionMulDiv__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionPower__Group__0"
    // InternalOpenCypherParser.g:15343:1: rule__ExpressionPower__Group__0 : rule__ExpressionPower__Group__0__Impl rule__ExpressionPower__Group__1 ;
    public final void rule__ExpressionPower__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15347:1: ( rule__ExpressionPower__Group__0__Impl rule__ExpressionPower__Group__1 )
            // InternalOpenCypherParser.g:15348:2: rule__ExpressionPower__Group__0__Impl rule__ExpressionPower__Group__1
            {
            pushFollow(FOLLOW_96);
            rule__ExpressionPower__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group__0"


    // $ANTLR start "rule__ExpressionPower__Group__0__Impl"
    // InternalOpenCypherParser.g:15355:1: rule__ExpressionPower__Group__0__Impl : ( ruleExpressionUnaryPlusMinus ) ;
    public final void rule__ExpressionPower__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15359:1: ( ( ruleExpressionUnaryPlusMinus ) )
            // InternalOpenCypherParser.g:15360:1: ( ruleExpressionUnaryPlusMinus )
            {
            // InternalOpenCypherParser.g:15360:1: ( ruleExpressionUnaryPlusMinus )
            // InternalOpenCypherParser.g:15361:2: ruleExpressionUnaryPlusMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getExpressionUnaryPlusMinusParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getExpressionUnaryPlusMinusParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group__0__Impl"


    // $ANTLR start "rule__ExpressionPower__Group__1"
    // InternalOpenCypherParser.g:15370:1: rule__ExpressionPower__Group__1 : rule__ExpressionPower__Group__1__Impl ;
    public final void rule__ExpressionPower__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15374:1: ( rule__ExpressionPower__Group__1__Impl )
            // InternalOpenCypherParser.g:15375:2: rule__ExpressionPower__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group__1"


    // $ANTLR start "rule__ExpressionPower__Group__1__Impl"
    // InternalOpenCypherParser.g:15381:1: rule__ExpressionPower__Group__1__Impl : ( ( rule__ExpressionPower__Group_1__0 )* ) ;
    public final void rule__ExpressionPower__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15385:1: ( ( ( rule__ExpressionPower__Group_1__0 )* ) )
            // InternalOpenCypherParser.g:15386:1: ( ( rule__ExpressionPower__Group_1__0 )* )
            {
            // InternalOpenCypherParser.g:15386:1: ( ( rule__ExpressionPower__Group_1__0 )* )
            // InternalOpenCypherParser.g:15387:2: ( rule__ExpressionPower__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:15388:2: ( rule__ExpressionPower__Group_1__0 )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==CircumflexAccent) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15388:3: rule__ExpressionPower__Group_1__0
            	    {
            	    pushFollow(FOLLOW_97);
            	    rule__ExpressionPower__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group__1__Impl"


    // $ANTLR start "rule__ExpressionPower__Group_1__0"
    // InternalOpenCypherParser.g:15397:1: rule__ExpressionPower__Group_1__0 : rule__ExpressionPower__Group_1__0__Impl rule__ExpressionPower__Group_1__1 ;
    public final void rule__ExpressionPower__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15401:1: ( rule__ExpressionPower__Group_1__0__Impl rule__ExpressionPower__Group_1__1 )
            // InternalOpenCypherParser.g:15402:2: rule__ExpressionPower__Group_1__0__Impl rule__ExpressionPower__Group_1__1
            {
            pushFollow(FOLLOW_96);
            rule__ExpressionPower__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group_1__0"


    // $ANTLR start "rule__ExpressionPower__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15409:1: rule__ExpressionPower__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionPower__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15413:1: ( ( () ) )
            // InternalOpenCypherParser.g:15414:1: ( () )
            {
            // InternalOpenCypherParser.g:15414:1: ( () )
            // InternalOpenCypherParser.g:15415:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getExpressionPowerLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15416:2: ()
            // InternalOpenCypherParser.g:15416:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getExpressionPowerLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionPower__Group_1__1"
    // InternalOpenCypherParser.g:15424:1: rule__ExpressionPower__Group_1__1 : rule__ExpressionPower__Group_1__1__Impl rule__ExpressionPower__Group_1__2 ;
    public final void rule__ExpressionPower__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15428:1: ( rule__ExpressionPower__Group_1__1__Impl rule__ExpressionPower__Group_1__2 )
            // InternalOpenCypherParser.g:15429:2: rule__ExpressionPower__Group_1__1__Impl rule__ExpressionPower__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionPower__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group_1__1"


    // $ANTLR start "rule__ExpressionPower__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15436:1: rule__ExpressionPower__Group_1__1__Impl : ( ( rule__ExpressionPower__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionPower__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15440:1: ( ( ( rule__ExpressionPower__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15441:1: ( ( rule__ExpressionPower__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15441:1: ( ( rule__ExpressionPower__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15442:2: ( rule__ExpressionPower__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15443:2: ( rule__ExpressionPower__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15443:3: rule__ExpressionPower__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionPower__Group_1__2"
    // InternalOpenCypherParser.g:15451:1: rule__ExpressionPower__Group_1__2 : rule__ExpressionPower__Group_1__2__Impl ;
    public final void rule__ExpressionPower__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15455:1: ( rule__ExpressionPower__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15456:2: rule__ExpressionPower__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group_1__2"


    // $ANTLR start "rule__ExpressionPower__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15462:1: rule__ExpressionPower__Group_1__2__Impl : ( ( rule__ExpressionPower__RightAssignment_1_2 ) ) ;
    public final void rule__ExpressionPower__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15466:1: ( ( ( rule__ExpressionPower__RightAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15467:1: ( ( rule__ExpressionPower__RightAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15467:1: ( ( rule__ExpressionPower__RightAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15468:2: ( rule__ExpressionPower__RightAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getRightAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15469:2: ( rule__ExpressionPower__RightAssignment_1_2 )
            // InternalOpenCypherParser.g:15469:3: rule__ExpressionPower__RightAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPower__RightAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getRightAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__Group_1__2__Impl"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Group_1__0"
    // InternalOpenCypherParser.g:15478:1: rule__ExpressionUnaryPlusMinus__Group_1__0 : rule__ExpressionUnaryPlusMinus__Group_1__0__Impl rule__ExpressionUnaryPlusMinus__Group_1__1 ;
    public final void rule__ExpressionUnaryPlusMinus__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15482:1: ( rule__ExpressionUnaryPlusMinus__Group_1__0__Impl rule__ExpressionUnaryPlusMinus__Group_1__1 )
            // InternalOpenCypherParser.g:15483:2: rule__ExpressionUnaryPlusMinus__Group_1__0__Impl rule__ExpressionUnaryPlusMinus__Group_1__1
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionUnaryPlusMinus__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Group_1__0"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Group_1__0__Impl"
    // InternalOpenCypherParser.g:15490:1: rule__ExpressionUnaryPlusMinus__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionUnaryPlusMinus__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15494:1: ( ( () ) )
            // InternalOpenCypherParser.g:15495:1: ( () )
            {
            // InternalOpenCypherParser.g:15495:1: ( () )
            // InternalOpenCypherParser.g:15496:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusAccess().getExpressionUnaryPlusMinusAction_1_0()); 
            }
            // InternalOpenCypherParser.g:15497:2: ()
            // InternalOpenCypherParser.g:15497:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusAccess().getExpressionUnaryPlusMinusAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Group_1__1"
    // InternalOpenCypherParser.g:15505:1: rule__ExpressionUnaryPlusMinus__Group_1__1 : rule__ExpressionUnaryPlusMinus__Group_1__1__Impl rule__ExpressionUnaryPlusMinus__Group_1__2 ;
    public final void rule__ExpressionUnaryPlusMinus__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15509:1: ( rule__ExpressionUnaryPlusMinus__Group_1__1__Impl rule__ExpressionUnaryPlusMinus__Group_1__2 )
            // InternalOpenCypherParser.g:15510:2: rule__ExpressionUnaryPlusMinus__Group_1__1__Impl rule__ExpressionUnaryPlusMinus__Group_1__2
            {
            pushFollow(FOLLOW_36);
            rule__ExpressionUnaryPlusMinus__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Group_1__1"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Group_1__1__Impl"
    // InternalOpenCypherParser.g:15517:1: rule__ExpressionUnaryPlusMinus__Group_1__1__Impl : ( ( rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 ) ) ;
    public final void rule__ExpressionUnaryPlusMinus__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15521:1: ( ( ( rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:15522:1: ( ( rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:15522:1: ( ( rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 ) )
            // InternalOpenCypherParser.g:15523:2: ( rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:15524:2: ( rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 )
            // InternalOpenCypherParser.g:15524:3: rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Group_1__2"
    // InternalOpenCypherParser.g:15532:1: rule__ExpressionUnaryPlusMinus__Group_1__2 : rule__ExpressionUnaryPlusMinus__Group_1__2__Impl ;
    public final void rule__ExpressionUnaryPlusMinus__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15536:1: ( rule__ExpressionUnaryPlusMinus__Group_1__2__Impl )
            // InternalOpenCypherParser.g:15537:2: rule__ExpressionUnaryPlusMinus__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Group_1__2"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__Group_1__2__Impl"
    // InternalOpenCypherParser.g:15543:1: rule__ExpressionUnaryPlusMinus__Group_1__2__Impl : ( ( rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 ) ) ;
    public final void rule__ExpressionUnaryPlusMinus__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15547:1: ( ( ( rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 ) ) )
            // InternalOpenCypherParser.g:15548:1: ( ( rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 ) )
            {
            // InternalOpenCypherParser.g:15548:1: ( ( rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 ) )
            // InternalOpenCypherParser.g:15549:2: ( rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftAssignment_1_2()); 
            }
            // InternalOpenCypherParser.g:15550:2: ( rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 )
            // InternalOpenCypherParser.g:15550:3: rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__Group_1__2__Impl"


    // $ANTLR start "rule__Expression3__Group__0"
    // InternalOpenCypherParser.g:15559:1: rule__Expression3__Group__0 : rule__Expression3__Group__0__Impl rule__Expression3__Group__1 ;
    public final void rule__Expression3__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15563:1: ( rule__Expression3__Group__0__Impl rule__Expression3__Group__1 )
            // InternalOpenCypherParser.g:15564:2: rule__Expression3__Group__0__Impl rule__Expression3__Group__1
            {
            pushFollow(FOLLOW_98);
            rule__Expression3__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group__0"


    // $ANTLR start "rule__Expression3__Group__0__Impl"
    // InternalOpenCypherParser.g:15571:1: rule__Expression3__Group__0__Impl : ( ruleExpressionNodeLabelsAndPropertyLookup ) ;
    public final void rule__Expression3__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15575:1: ( ( ruleExpressionNodeLabelsAndPropertyLookup ) )
            // InternalOpenCypherParser.g:15576:1: ( ruleExpressionNodeLabelsAndPropertyLookup )
            {
            // InternalOpenCypherParser.g:15576:1: ( ruleExpressionNodeLabelsAndPropertyLookup )
            // InternalOpenCypherParser.g:15577:2: ruleExpressionNodeLabelsAndPropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getExpressionNodeLabelsAndPropertyLookupParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getExpressionNodeLabelsAndPropertyLookupParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group__0__Impl"


    // $ANTLR start "rule__Expression3__Group__1"
    // InternalOpenCypherParser.g:15586:1: rule__Expression3__Group__1 : rule__Expression3__Group__1__Impl ;
    public final void rule__Expression3__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15590:1: ( rule__Expression3__Group__1__Impl )
            // InternalOpenCypherParser.g:15591:2: rule__Expression3__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group__1"


    // $ANTLR start "rule__Expression3__Group__1__Impl"
    // InternalOpenCypherParser.g:15597:1: rule__Expression3__Group__1__Impl : ( ( rule__Expression3__Alternatives_1 )* ) ;
    public final void rule__Expression3__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15601:1: ( ( ( rule__Expression3__Alternatives_1 )* ) )
            // InternalOpenCypherParser.g:15602:1: ( ( rule__Expression3__Alternatives_1 )* )
            {
            // InternalOpenCypherParser.g:15602:1: ( ( rule__Expression3__Alternatives_1 )* )
            // InternalOpenCypherParser.g:15603:2: ( rule__Expression3__Alternatives_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:15604:2: ( rule__Expression3__Alternatives_1 )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==CONTAINS||LA113_0==STARTS||LA113_0==ENDS||LA113_0==EqualsSignTilde||(LA113_0>=IN && LA113_0<=IS)||LA113_0==LeftSquareBracket) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // InternalOpenCypherParser.g:15604:3: rule__Expression3__Alternatives_1
            	    {
            	    pushFollow(FOLLOW_99);
            	    rule__Expression3__Alternatives_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0__0"
    // InternalOpenCypherParser.g:15613:1: rule__Expression3__Group_1_0__0 : rule__Expression3__Group_1_0__0__Impl rule__Expression3__Group_1_0__1 ;
    public final void rule__Expression3__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15617:1: ( rule__Expression3__Group_1_0__0__Impl rule__Expression3__Group_1_0__1 )
            // InternalOpenCypherParser.g:15618:2: rule__Expression3__Group_1_0__0__Impl rule__Expression3__Group_1_0__1
            {
            pushFollow(FOLLOW_31);
            rule__Expression3__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__0"


    // $ANTLR start "rule__Expression3__Group_1_0__0__Impl"
    // InternalOpenCypherParser.g:15625:1: rule__Expression3__Group_1_0__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15629:1: ( ( () ) )
            // InternalOpenCypherParser.g:15630:1: ( () )
            {
            // InternalOpenCypherParser.g:15630:1: ( () )
            // InternalOpenCypherParser.g:15631:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getIndexExpressionLeftAction_1_0_0()); 
            }
            // InternalOpenCypherParser.g:15632:2: ()
            // InternalOpenCypherParser.g:15632:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getIndexExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0__1"
    // InternalOpenCypherParser.g:15640:1: rule__Expression3__Group_1_0__1 : rule__Expression3__Group_1_0__1__Impl rule__Expression3__Group_1_0__2 ;
    public final void rule__Expression3__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15644:1: ( rule__Expression3__Group_1_0__1__Impl rule__Expression3__Group_1_0__2 )
            // InternalOpenCypherParser.g:15645:2: rule__Expression3__Group_1_0__1__Impl rule__Expression3__Group_1_0__2
            {
            pushFollow(FOLLOW_36);
            rule__Expression3__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__1"


    // $ANTLR start "rule__Expression3__Group_1_0__1__Impl"
    // InternalOpenCypherParser.g:15652:1: rule__Expression3__Group_1_0__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__Expression3__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15656:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:15657:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:15657:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:15658:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getLeftSquareBracketKeyword_1_0_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getLeftSquareBracketKeyword_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0__2"
    // InternalOpenCypherParser.g:15667:1: rule__Expression3__Group_1_0__2 : rule__Expression3__Group_1_0__2__Impl rule__Expression3__Group_1_0__3 ;
    public final void rule__Expression3__Group_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15671:1: ( rule__Expression3__Group_1_0__2__Impl rule__Expression3__Group_1_0__3 )
            // InternalOpenCypherParser.g:15672:2: rule__Expression3__Group_1_0__2__Impl rule__Expression3__Group_1_0__3
            {
            pushFollow(FOLLOW_100);
            rule__Expression3__Group_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__2"


    // $ANTLR start "rule__Expression3__Group_1_0__2__Impl"
    // InternalOpenCypherParser.g:15679:1: rule__Expression3__Group_1_0__2__Impl : ( ( rule__Expression3__ExpressionAssignment_1_0_2 ) ) ;
    public final void rule__Expression3__Group_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15683:1: ( ( ( rule__Expression3__ExpressionAssignment_1_0_2 ) ) )
            // InternalOpenCypherParser.g:15684:1: ( ( rule__Expression3__ExpressionAssignment_1_0_2 ) )
            {
            // InternalOpenCypherParser.g:15684:1: ( ( rule__Expression3__ExpressionAssignment_1_0_2 ) )
            // InternalOpenCypherParser.g:15685:2: ( rule__Expression3__ExpressionAssignment_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getExpressionAssignment_1_0_2()); 
            }
            // InternalOpenCypherParser.g:15686:2: ( rule__Expression3__ExpressionAssignment_1_0_2 )
            // InternalOpenCypherParser.g:15686:3: rule__Expression3__ExpressionAssignment_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__ExpressionAssignment_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getExpressionAssignment_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0__3"
    // InternalOpenCypherParser.g:15694:1: rule__Expression3__Group_1_0__3 : rule__Expression3__Group_1_0__3__Impl rule__Expression3__Group_1_0__4 ;
    public final void rule__Expression3__Group_1_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15698:1: ( rule__Expression3__Group_1_0__3__Impl rule__Expression3__Group_1_0__4 )
            // InternalOpenCypherParser.g:15699:2: rule__Expression3__Group_1_0__3__Impl rule__Expression3__Group_1_0__4
            {
            pushFollow(FOLLOW_100);
            rule__Expression3__Group_1_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__3"


    // $ANTLR start "rule__Expression3__Group_1_0__3__Impl"
    // InternalOpenCypherParser.g:15706:1: rule__Expression3__Group_1_0__3__Impl : ( ( rule__Expression3__Group_1_0_3__0 )? ) ;
    public final void rule__Expression3__Group_1_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15710:1: ( ( ( rule__Expression3__Group_1_0_3__0 )? ) )
            // InternalOpenCypherParser.g:15711:1: ( ( rule__Expression3__Group_1_0_3__0 )? )
            {
            // InternalOpenCypherParser.g:15711:1: ( ( rule__Expression3__Group_1_0_3__0 )? )
            // InternalOpenCypherParser.g:15712:2: ( rule__Expression3__Group_1_0_3__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getGroup_1_0_3()); 
            }
            // InternalOpenCypherParser.g:15713:2: ( rule__Expression3__Group_1_0_3__0 )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==FullStopFullStop) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // InternalOpenCypherParser.g:15713:3: rule__Expression3__Group_1_0_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Expression3__Group_1_0_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getGroup_1_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__3__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0__4"
    // InternalOpenCypherParser.g:15721:1: rule__Expression3__Group_1_0__4 : rule__Expression3__Group_1_0__4__Impl ;
    public final void rule__Expression3__Group_1_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15725:1: ( rule__Expression3__Group_1_0__4__Impl )
            // InternalOpenCypherParser.g:15726:2: rule__Expression3__Group_1_0__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__4"


    // $ANTLR start "rule__Expression3__Group_1_0__4__Impl"
    // InternalOpenCypherParser.g:15732:1: rule__Expression3__Group_1_0__4__Impl : ( RightSquareBracket ) ;
    public final void rule__Expression3__Group_1_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15736:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:15737:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:15737:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:15738:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightSquareBracketKeyword_1_0_4()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightSquareBracketKeyword_1_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0__4__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0_3__0"
    // InternalOpenCypherParser.g:15748:1: rule__Expression3__Group_1_0_3__0 : rule__Expression3__Group_1_0_3__0__Impl rule__Expression3__Group_1_0_3__1 ;
    public final void rule__Expression3__Group_1_0_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15752:1: ( rule__Expression3__Group_1_0_3__0__Impl rule__Expression3__Group_1_0_3__1 )
            // InternalOpenCypherParser.g:15753:2: rule__Expression3__Group_1_0_3__0__Impl rule__Expression3__Group_1_0_3__1
            {
            pushFollow(FOLLOW_36);
            rule__Expression3__Group_1_0_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0_3__0"


    // $ANTLR start "rule__Expression3__Group_1_0_3__0__Impl"
    // InternalOpenCypherParser.g:15760:1: rule__Expression3__Group_1_0_3__0__Impl : ( FullStopFullStop ) ;
    public final void rule__Expression3__Group_1_0_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15764:1: ( ( FullStopFullStop ) )
            // InternalOpenCypherParser.g:15765:1: ( FullStopFullStop )
            {
            // InternalOpenCypherParser.g:15765:1: ( FullStopFullStop )
            // InternalOpenCypherParser.g:15766:2: FullStopFullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getFullStopFullStopKeyword_1_0_3_0()); 
            }
            match(input,FullStopFullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getFullStopFullStopKeyword_1_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0_3__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_0_3__1"
    // InternalOpenCypherParser.g:15775:1: rule__Expression3__Group_1_0_3__1 : rule__Expression3__Group_1_0_3__1__Impl ;
    public final void rule__Expression3__Group_1_0_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15779:1: ( rule__Expression3__Group_1_0_3__1__Impl )
            // InternalOpenCypherParser.g:15780:2: rule__Expression3__Group_1_0_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_0_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0_3__1"


    // $ANTLR start "rule__Expression3__Group_1_0_3__1__Impl"
    // InternalOpenCypherParser.g:15786:1: rule__Expression3__Group_1_0_3__1__Impl : ( ( rule__Expression3__UpperAssignment_1_0_3_1 ) ) ;
    public final void rule__Expression3__Group_1_0_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15790:1: ( ( ( rule__Expression3__UpperAssignment_1_0_3_1 ) ) )
            // InternalOpenCypherParser.g:15791:1: ( ( rule__Expression3__UpperAssignment_1_0_3_1 ) )
            {
            // InternalOpenCypherParser.g:15791:1: ( ( rule__Expression3__UpperAssignment_1_0_3_1 ) )
            // InternalOpenCypherParser.g:15792:2: ( rule__Expression3__UpperAssignment_1_0_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getUpperAssignment_1_0_3_1()); 
            }
            // InternalOpenCypherParser.g:15793:2: ( rule__Expression3__UpperAssignment_1_0_3_1 )
            // InternalOpenCypherParser.g:15793:3: rule__Expression3__UpperAssignment_1_0_3_1
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__UpperAssignment_1_0_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getUpperAssignment_1_0_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_0_3__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_1__0"
    // InternalOpenCypherParser.g:15802:1: rule__Expression3__Group_1_1__0 : rule__Expression3__Group_1_1__0__Impl rule__Expression3__Group_1_1__1 ;
    public final void rule__Expression3__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15806:1: ( rule__Expression3__Group_1_1__0__Impl rule__Expression3__Group_1_1__1 )
            // InternalOpenCypherParser.g:15807:2: rule__Expression3__Group_1_1__0__Impl rule__Expression3__Group_1_1__1
            {
            pushFollow(FOLLOW_101);
            rule__Expression3__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_1__0"


    // $ANTLR start "rule__Expression3__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:15814:1: rule__Expression3__Group_1_1__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15818:1: ( ( () ) )
            // InternalOpenCypherParser.g:15819:1: ( () )
            {
            // InternalOpenCypherParser.g:15819:1: ( () )
            // InternalOpenCypherParser.g:15820:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRegExpMatchingExpressionLeftAction_1_1_0()); 
            }
            // InternalOpenCypherParser.g:15821:2: ()
            // InternalOpenCypherParser.g:15821:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRegExpMatchingExpressionLeftAction_1_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_1__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_1__1"
    // InternalOpenCypherParser.g:15829:1: rule__Expression3__Group_1_1__1 : rule__Expression3__Group_1_1__1__Impl rule__Expression3__Group_1_1__2 ;
    public final void rule__Expression3__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15833:1: ( rule__Expression3__Group_1_1__1__Impl rule__Expression3__Group_1_1__2 )
            // InternalOpenCypherParser.g:15834:2: rule__Expression3__Group_1_1__1__Impl rule__Expression3__Group_1_1__2
            {
            pushFollow(FOLLOW_26);
            rule__Expression3__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_1__1"


    // $ANTLR start "rule__Expression3__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:15841:1: rule__Expression3__Group_1_1__1__Impl : ( EqualsSignTilde ) ;
    public final void rule__Expression3__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15845:1: ( ( EqualsSignTilde ) )
            // InternalOpenCypherParser.g:15846:1: ( EqualsSignTilde )
            {
            // InternalOpenCypherParser.g:15846:1: ( EqualsSignTilde )
            // InternalOpenCypherParser.g:15847:2: EqualsSignTilde
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getEqualsSignTildeKeyword_1_1_1()); 
            }
            match(input,EqualsSignTilde,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getEqualsSignTildeKeyword_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_1__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_1__2"
    // InternalOpenCypherParser.g:15856:1: rule__Expression3__Group_1_1__2 : rule__Expression3__Group_1_1__2__Impl ;
    public final void rule__Expression3__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15860:1: ( rule__Expression3__Group_1_1__2__Impl )
            // InternalOpenCypherParser.g:15861:2: rule__Expression3__Group_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_1__2"


    // $ANTLR start "rule__Expression3__Group_1_1__2__Impl"
    // InternalOpenCypherParser.g:15867:1: rule__Expression3__Group_1_1__2__Impl : ( ( rule__Expression3__RightAssignment_1_1_2 ) ) ;
    public final void rule__Expression3__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15871:1: ( ( ( rule__Expression3__RightAssignment_1_1_2 ) ) )
            // InternalOpenCypherParser.g:15872:1: ( ( rule__Expression3__RightAssignment_1_1_2 ) )
            {
            // InternalOpenCypherParser.g:15872:1: ( ( rule__Expression3__RightAssignment_1_1_2 ) )
            // InternalOpenCypherParser.g:15873:2: ( rule__Expression3__RightAssignment_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightAssignment_1_1_2()); 
            }
            // InternalOpenCypherParser.g:15874:2: ( rule__Expression3__RightAssignment_1_1_2 )
            // InternalOpenCypherParser.g:15874:3: rule__Expression3__RightAssignment_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__RightAssignment_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightAssignment_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_1__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_2__0"
    // InternalOpenCypherParser.g:15883:1: rule__Expression3__Group_1_2__0 : rule__Expression3__Group_1_2__0__Impl rule__Expression3__Group_1_2__1 ;
    public final void rule__Expression3__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15887:1: ( rule__Expression3__Group_1_2__0__Impl rule__Expression3__Group_1_2__1 )
            // InternalOpenCypherParser.g:15888:2: rule__Expression3__Group_1_2__0__Impl rule__Expression3__Group_1_2__1
            {
            pushFollow(FOLLOW_52);
            rule__Expression3__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_2__0"


    // $ANTLR start "rule__Expression3__Group_1_2__0__Impl"
    // InternalOpenCypherParser.g:15895:1: rule__Expression3__Group_1_2__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15899:1: ( ( () ) )
            // InternalOpenCypherParser.g:15900:1: ( () )
            {
            // InternalOpenCypherParser.g:15900:1: ( () )
            // InternalOpenCypherParser.g:15901:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getInCollectionExpressionLeftAction_1_2_0()); 
            }
            // InternalOpenCypherParser.g:15902:2: ()
            // InternalOpenCypherParser.g:15902:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getInCollectionExpressionLeftAction_1_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_2__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_2__1"
    // InternalOpenCypherParser.g:15910:1: rule__Expression3__Group_1_2__1 : rule__Expression3__Group_1_2__1__Impl rule__Expression3__Group_1_2__2 ;
    public final void rule__Expression3__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15914:1: ( rule__Expression3__Group_1_2__1__Impl rule__Expression3__Group_1_2__2 )
            // InternalOpenCypherParser.g:15915:2: rule__Expression3__Group_1_2__1__Impl rule__Expression3__Group_1_2__2
            {
            pushFollow(FOLLOW_26);
            rule__Expression3__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_2__1"


    // $ANTLR start "rule__Expression3__Group_1_2__1__Impl"
    // InternalOpenCypherParser.g:15922:1: rule__Expression3__Group_1_2__1__Impl : ( IN ) ;
    public final void rule__Expression3__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15926:1: ( ( IN ) )
            // InternalOpenCypherParser.g:15927:1: ( IN )
            {
            // InternalOpenCypherParser.g:15927:1: ( IN )
            // InternalOpenCypherParser.g:15928:2: IN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getINKeyword_1_2_1()); 
            }
            match(input,IN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getINKeyword_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_2__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_2__2"
    // InternalOpenCypherParser.g:15937:1: rule__Expression3__Group_1_2__2 : rule__Expression3__Group_1_2__2__Impl ;
    public final void rule__Expression3__Group_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15941:1: ( rule__Expression3__Group_1_2__2__Impl )
            // InternalOpenCypherParser.g:15942:2: rule__Expression3__Group_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_2__2"


    // $ANTLR start "rule__Expression3__Group_1_2__2__Impl"
    // InternalOpenCypherParser.g:15948:1: rule__Expression3__Group_1_2__2__Impl : ( ( rule__Expression3__RightAssignment_1_2_2 ) ) ;
    public final void rule__Expression3__Group_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15952:1: ( ( ( rule__Expression3__RightAssignment_1_2_2 ) ) )
            // InternalOpenCypherParser.g:15953:1: ( ( rule__Expression3__RightAssignment_1_2_2 ) )
            {
            // InternalOpenCypherParser.g:15953:1: ( ( rule__Expression3__RightAssignment_1_2_2 ) )
            // InternalOpenCypherParser.g:15954:2: ( rule__Expression3__RightAssignment_1_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightAssignment_1_2_2()); 
            }
            // InternalOpenCypherParser.g:15955:2: ( rule__Expression3__RightAssignment_1_2_2 )
            // InternalOpenCypherParser.g:15955:3: rule__Expression3__RightAssignment_1_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__RightAssignment_1_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightAssignment_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_2__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_3__0"
    // InternalOpenCypherParser.g:15964:1: rule__Expression3__Group_1_3__0 : rule__Expression3__Group_1_3__0__Impl rule__Expression3__Group_1_3__1 ;
    public final void rule__Expression3__Group_1_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15968:1: ( rule__Expression3__Group_1_3__0__Impl rule__Expression3__Group_1_3__1 )
            // InternalOpenCypherParser.g:15969:2: rule__Expression3__Group_1_3__0__Impl rule__Expression3__Group_1_3__1
            {
            pushFollow(FOLLOW_102);
            rule__Expression3__Group_1_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__0"


    // $ANTLR start "rule__Expression3__Group_1_3__0__Impl"
    // InternalOpenCypherParser.g:15976:1: rule__Expression3__Group_1_3__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15980:1: ( ( () ) )
            // InternalOpenCypherParser.g:15981:1: ( () )
            {
            // InternalOpenCypherParser.g:15981:1: ( () )
            // InternalOpenCypherParser.g:15982:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getStartsWithExpressionLeftAction_1_3_0()); 
            }
            // InternalOpenCypherParser.g:15983:2: ()
            // InternalOpenCypherParser.g:15983:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getStartsWithExpressionLeftAction_1_3_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_3__1"
    // InternalOpenCypherParser.g:15991:1: rule__Expression3__Group_1_3__1 : rule__Expression3__Group_1_3__1__Impl rule__Expression3__Group_1_3__2 ;
    public final void rule__Expression3__Group_1_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:15995:1: ( rule__Expression3__Group_1_3__1__Impl rule__Expression3__Group_1_3__2 )
            // InternalOpenCypherParser.g:15996:2: rule__Expression3__Group_1_3__1__Impl rule__Expression3__Group_1_3__2
            {
            pushFollow(FOLLOW_103);
            rule__Expression3__Group_1_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__1"


    // $ANTLR start "rule__Expression3__Group_1_3__1__Impl"
    // InternalOpenCypherParser.g:16003:1: rule__Expression3__Group_1_3__1__Impl : ( STARTS ) ;
    public final void rule__Expression3__Group_1_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16007:1: ( ( STARTS ) )
            // InternalOpenCypherParser.g:16008:1: ( STARTS )
            {
            // InternalOpenCypherParser.g:16008:1: ( STARTS )
            // InternalOpenCypherParser.g:16009:2: STARTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getSTARTSKeyword_1_3_1()); 
            }
            match(input,STARTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getSTARTSKeyword_1_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_3__2"
    // InternalOpenCypherParser.g:16018:1: rule__Expression3__Group_1_3__2 : rule__Expression3__Group_1_3__2__Impl rule__Expression3__Group_1_3__3 ;
    public final void rule__Expression3__Group_1_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16022:1: ( rule__Expression3__Group_1_3__2__Impl rule__Expression3__Group_1_3__3 )
            // InternalOpenCypherParser.g:16023:2: rule__Expression3__Group_1_3__2__Impl rule__Expression3__Group_1_3__3
            {
            pushFollow(FOLLOW_26);
            rule__Expression3__Group_1_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_3__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__2"


    // $ANTLR start "rule__Expression3__Group_1_3__2__Impl"
    // InternalOpenCypherParser.g:16030:1: rule__Expression3__Group_1_3__2__Impl : ( WITH ) ;
    public final void rule__Expression3__Group_1_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16034:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:16035:1: ( WITH )
            {
            // InternalOpenCypherParser.g:16035:1: ( WITH )
            // InternalOpenCypherParser.g:16036:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getWITHKeyword_1_3_2()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getWITHKeyword_1_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_3__3"
    // InternalOpenCypherParser.g:16045:1: rule__Expression3__Group_1_3__3 : rule__Expression3__Group_1_3__3__Impl ;
    public final void rule__Expression3__Group_1_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16049:1: ( rule__Expression3__Group_1_3__3__Impl )
            // InternalOpenCypherParser.g:16050:2: rule__Expression3__Group_1_3__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_3__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__3"


    // $ANTLR start "rule__Expression3__Group_1_3__3__Impl"
    // InternalOpenCypherParser.g:16056:1: rule__Expression3__Group_1_3__3__Impl : ( ( rule__Expression3__RightAssignment_1_3_3 ) ) ;
    public final void rule__Expression3__Group_1_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16060:1: ( ( ( rule__Expression3__RightAssignment_1_3_3 ) ) )
            // InternalOpenCypherParser.g:16061:1: ( ( rule__Expression3__RightAssignment_1_3_3 ) )
            {
            // InternalOpenCypherParser.g:16061:1: ( ( rule__Expression3__RightAssignment_1_3_3 ) )
            // InternalOpenCypherParser.g:16062:2: ( rule__Expression3__RightAssignment_1_3_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightAssignment_1_3_3()); 
            }
            // InternalOpenCypherParser.g:16063:2: ( rule__Expression3__RightAssignment_1_3_3 )
            // InternalOpenCypherParser.g:16063:3: rule__Expression3__RightAssignment_1_3_3
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__RightAssignment_1_3_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightAssignment_1_3_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_3__3__Impl"


    // $ANTLR start "rule__Expression3__Group_1_4__0"
    // InternalOpenCypherParser.g:16072:1: rule__Expression3__Group_1_4__0 : rule__Expression3__Group_1_4__0__Impl rule__Expression3__Group_1_4__1 ;
    public final void rule__Expression3__Group_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16076:1: ( rule__Expression3__Group_1_4__0__Impl rule__Expression3__Group_1_4__1 )
            // InternalOpenCypherParser.g:16077:2: rule__Expression3__Group_1_4__0__Impl rule__Expression3__Group_1_4__1
            {
            pushFollow(FOLLOW_104);
            rule__Expression3__Group_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__0"


    // $ANTLR start "rule__Expression3__Group_1_4__0__Impl"
    // InternalOpenCypherParser.g:16084:1: rule__Expression3__Group_1_4__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16088:1: ( ( () ) )
            // InternalOpenCypherParser.g:16089:1: ( () )
            {
            // InternalOpenCypherParser.g:16089:1: ( () )
            // InternalOpenCypherParser.g:16090:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getEndsWithExpressionLeftAction_1_4_0()); 
            }
            // InternalOpenCypherParser.g:16091:2: ()
            // InternalOpenCypherParser.g:16091:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getEndsWithExpressionLeftAction_1_4_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_4__1"
    // InternalOpenCypherParser.g:16099:1: rule__Expression3__Group_1_4__1 : rule__Expression3__Group_1_4__1__Impl rule__Expression3__Group_1_4__2 ;
    public final void rule__Expression3__Group_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16103:1: ( rule__Expression3__Group_1_4__1__Impl rule__Expression3__Group_1_4__2 )
            // InternalOpenCypherParser.g:16104:2: rule__Expression3__Group_1_4__1__Impl rule__Expression3__Group_1_4__2
            {
            pushFollow(FOLLOW_103);
            rule__Expression3__Group_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__1"


    // $ANTLR start "rule__Expression3__Group_1_4__1__Impl"
    // InternalOpenCypherParser.g:16111:1: rule__Expression3__Group_1_4__1__Impl : ( ENDS ) ;
    public final void rule__Expression3__Group_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16115:1: ( ( ENDS ) )
            // InternalOpenCypherParser.g:16116:1: ( ENDS )
            {
            // InternalOpenCypherParser.g:16116:1: ( ENDS )
            // InternalOpenCypherParser.g:16117:2: ENDS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getENDSKeyword_1_4_1()); 
            }
            match(input,ENDS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getENDSKeyword_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_4__2"
    // InternalOpenCypherParser.g:16126:1: rule__Expression3__Group_1_4__2 : rule__Expression3__Group_1_4__2__Impl rule__Expression3__Group_1_4__3 ;
    public final void rule__Expression3__Group_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16130:1: ( rule__Expression3__Group_1_4__2__Impl rule__Expression3__Group_1_4__3 )
            // InternalOpenCypherParser.g:16131:2: rule__Expression3__Group_1_4__2__Impl rule__Expression3__Group_1_4__3
            {
            pushFollow(FOLLOW_26);
            rule__Expression3__Group_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__2"


    // $ANTLR start "rule__Expression3__Group_1_4__2__Impl"
    // InternalOpenCypherParser.g:16138:1: rule__Expression3__Group_1_4__2__Impl : ( WITH ) ;
    public final void rule__Expression3__Group_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16142:1: ( ( WITH ) )
            // InternalOpenCypherParser.g:16143:1: ( WITH )
            {
            // InternalOpenCypherParser.g:16143:1: ( WITH )
            // InternalOpenCypherParser.g:16144:2: WITH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getWITHKeyword_1_4_2()); 
            }
            match(input,WITH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getWITHKeyword_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_4__3"
    // InternalOpenCypherParser.g:16153:1: rule__Expression3__Group_1_4__3 : rule__Expression3__Group_1_4__3__Impl ;
    public final void rule__Expression3__Group_1_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16157:1: ( rule__Expression3__Group_1_4__3__Impl )
            // InternalOpenCypherParser.g:16158:2: rule__Expression3__Group_1_4__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__3"


    // $ANTLR start "rule__Expression3__Group_1_4__3__Impl"
    // InternalOpenCypherParser.g:16164:1: rule__Expression3__Group_1_4__3__Impl : ( ( rule__Expression3__RightAssignment_1_4_3 ) ) ;
    public final void rule__Expression3__Group_1_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16168:1: ( ( ( rule__Expression3__RightAssignment_1_4_3 ) ) )
            // InternalOpenCypherParser.g:16169:1: ( ( rule__Expression3__RightAssignment_1_4_3 ) )
            {
            // InternalOpenCypherParser.g:16169:1: ( ( rule__Expression3__RightAssignment_1_4_3 ) )
            // InternalOpenCypherParser.g:16170:2: ( rule__Expression3__RightAssignment_1_4_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightAssignment_1_4_3()); 
            }
            // InternalOpenCypherParser.g:16171:2: ( rule__Expression3__RightAssignment_1_4_3 )
            // InternalOpenCypherParser.g:16171:3: rule__Expression3__RightAssignment_1_4_3
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__RightAssignment_1_4_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightAssignment_1_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_4__3__Impl"


    // $ANTLR start "rule__Expression3__Group_1_5__0"
    // InternalOpenCypherParser.g:16180:1: rule__Expression3__Group_1_5__0 : rule__Expression3__Group_1_5__0__Impl rule__Expression3__Group_1_5__1 ;
    public final void rule__Expression3__Group_1_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16184:1: ( rule__Expression3__Group_1_5__0__Impl rule__Expression3__Group_1_5__1 )
            // InternalOpenCypherParser.g:16185:2: rule__Expression3__Group_1_5__0__Impl rule__Expression3__Group_1_5__1
            {
            pushFollow(FOLLOW_105);
            rule__Expression3__Group_1_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_5__0"


    // $ANTLR start "rule__Expression3__Group_1_5__0__Impl"
    // InternalOpenCypherParser.g:16192:1: rule__Expression3__Group_1_5__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16196:1: ( ( () ) )
            // InternalOpenCypherParser.g:16197:1: ( () )
            {
            // InternalOpenCypherParser.g:16197:1: ( () )
            // InternalOpenCypherParser.g:16198:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getContainsExpressionLeftAction_1_5_0()); 
            }
            // InternalOpenCypherParser.g:16199:2: ()
            // InternalOpenCypherParser.g:16199:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getContainsExpressionLeftAction_1_5_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_5__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_5__1"
    // InternalOpenCypherParser.g:16207:1: rule__Expression3__Group_1_5__1 : rule__Expression3__Group_1_5__1__Impl rule__Expression3__Group_1_5__2 ;
    public final void rule__Expression3__Group_1_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16211:1: ( rule__Expression3__Group_1_5__1__Impl rule__Expression3__Group_1_5__2 )
            // InternalOpenCypherParser.g:16212:2: rule__Expression3__Group_1_5__1__Impl rule__Expression3__Group_1_5__2
            {
            pushFollow(FOLLOW_26);
            rule__Expression3__Group_1_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_5__1"


    // $ANTLR start "rule__Expression3__Group_1_5__1__Impl"
    // InternalOpenCypherParser.g:16219:1: rule__Expression3__Group_1_5__1__Impl : ( CONTAINS ) ;
    public final void rule__Expression3__Group_1_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16223:1: ( ( CONTAINS ) )
            // InternalOpenCypherParser.g:16224:1: ( CONTAINS )
            {
            // InternalOpenCypherParser.g:16224:1: ( CONTAINS )
            // InternalOpenCypherParser.g:16225:2: CONTAINS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getCONTAINSKeyword_1_5_1()); 
            }
            match(input,CONTAINS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getCONTAINSKeyword_1_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_5__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_5__2"
    // InternalOpenCypherParser.g:16234:1: rule__Expression3__Group_1_5__2 : rule__Expression3__Group_1_5__2__Impl ;
    public final void rule__Expression3__Group_1_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16238:1: ( rule__Expression3__Group_1_5__2__Impl )
            // InternalOpenCypherParser.g:16239:2: rule__Expression3__Group_1_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_5__2"


    // $ANTLR start "rule__Expression3__Group_1_5__2__Impl"
    // InternalOpenCypherParser.g:16245:1: rule__Expression3__Group_1_5__2__Impl : ( ( rule__Expression3__RightAssignment_1_5_2 ) ) ;
    public final void rule__Expression3__Group_1_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16249:1: ( ( ( rule__Expression3__RightAssignment_1_5_2 ) ) )
            // InternalOpenCypherParser.g:16250:1: ( ( rule__Expression3__RightAssignment_1_5_2 ) )
            {
            // InternalOpenCypherParser.g:16250:1: ( ( rule__Expression3__RightAssignment_1_5_2 ) )
            // InternalOpenCypherParser.g:16251:2: ( rule__Expression3__RightAssignment_1_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightAssignment_1_5_2()); 
            }
            // InternalOpenCypherParser.g:16252:2: ( rule__Expression3__RightAssignment_1_5_2 )
            // InternalOpenCypherParser.g:16252:3: rule__Expression3__RightAssignment_1_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__RightAssignment_1_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightAssignment_1_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_5__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_6__0"
    // InternalOpenCypherParser.g:16261:1: rule__Expression3__Group_1_6__0 : rule__Expression3__Group_1_6__0__Impl rule__Expression3__Group_1_6__1 ;
    public final void rule__Expression3__Group_1_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16265:1: ( rule__Expression3__Group_1_6__0__Impl rule__Expression3__Group_1_6__1 )
            // InternalOpenCypherParser.g:16266:2: rule__Expression3__Group_1_6__0__Impl rule__Expression3__Group_1_6__1
            {
            pushFollow(FOLLOW_27);
            rule__Expression3__Group_1_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_6__0"


    // $ANTLR start "rule__Expression3__Group_1_6__0__Impl"
    // InternalOpenCypherParser.g:16273:1: rule__Expression3__Group_1_6__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16277:1: ( ( () ) )
            // InternalOpenCypherParser.g:16278:1: ( () )
            {
            // InternalOpenCypherParser.g:16278:1: ( () )
            // InternalOpenCypherParser.g:16279:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getIsNullExpressionLeftAction_1_6_0()); 
            }
            // InternalOpenCypherParser.g:16280:2: ()
            // InternalOpenCypherParser.g:16280:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getIsNullExpressionLeftAction_1_6_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_6__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_6__1"
    // InternalOpenCypherParser.g:16288:1: rule__Expression3__Group_1_6__1 : rule__Expression3__Group_1_6__1__Impl rule__Expression3__Group_1_6__2 ;
    public final void rule__Expression3__Group_1_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16292:1: ( rule__Expression3__Group_1_6__1__Impl rule__Expression3__Group_1_6__2 )
            // InternalOpenCypherParser.g:16293:2: rule__Expression3__Group_1_6__1__Impl rule__Expression3__Group_1_6__2
            {
            pushFollow(FOLLOW_106);
            rule__Expression3__Group_1_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_6__1"


    // $ANTLR start "rule__Expression3__Group_1_6__1__Impl"
    // InternalOpenCypherParser.g:16300:1: rule__Expression3__Group_1_6__1__Impl : ( IS ) ;
    public final void rule__Expression3__Group_1_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16304:1: ( ( IS ) )
            // InternalOpenCypherParser.g:16305:1: ( IS )
            {
            // InternalOpenCypherParser.g:16305:1: ( IS )
            // InternalOpenCypherParser.g:16306:2: IS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getISKeyword_1_6_1()); 
            }
            match(input,IS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getISKeyword_1_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_6__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_6__2"
    // InternalOpenCypherParser.g:16315:1: rule__Expression3__Group_1_6__2 : rule__Expression3__Group_1_6__2__Impl ;
    public final void rule__Expression3__Group_1_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16319:1: ( rule__Expression3__Group_1_6__2__Impl )
            // InternalOpenCypherParser.g:16320:2: rule__Expression3__Group_1_6__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_6__2"


    // $ANTLR start "rule__Expression3__Group_1_6__2__Impl"
    // InternalOpenCypherParser.g:16326:1: rule__Expression3__Group_1_6__2__Impl : ( NULL ) ;
    public final void rule__Expression3__Group_1_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16330:1: ( ( NULL ) )
            // InternalOpenCypherParser.g:16331:1: ( NULL )
            {
            // InternalOpenCypherParser.g:16331:1: ( NULL )
            // InternalOpenCypherParser.g:16332:2: NULL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getNULLKeyword_1_6_2()); 
            }
            match(input,NULL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getNULLKeyword_1_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_6__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_7__0"
    // InternalOpenCypherParser.g:16342:1: rule__Expression3__Group_1_7__0 : rule__Expression3__Group_1_7__0__Impl rule__Expression3__Group_1_7__1 ;
    public final void rule__Expression3__Group_1_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16346:1: ( rule__Expression3__Group_1_7__0__Impl rule__Expression3__Group_1_7__1 )
            // InternalOpenCypherParser.g:16347:2: rule__Expression3__Group_1_7__0__Impl rule__Expression3__Group_1_7__1
            {
            pushFollow(FOLLOW_98);
            rule__Expression3__Group_1_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__0"


    // $ANTLR start "rule__Expression3__Group_1_7__0__Impl"
    // InternalOpenCypherParser.g:16354:1: rule__Expression3__Group_1_7__0__Impl : ( () ) ;
    public final void rule__Expression3__Group_1_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16358:1: ( ( () ) )
            // InternalOpenCypherParser.g:16359:1: ( () )
            {
            // InternalOpenCypherParser.g:16359:1: ( () )
            // InternalOpenCypherParser.g:16360:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getIsNotNullExpressionLeftAction_1_7_0()); 
            }
            // InternalOpenCypherParser.g:16361:2: ()
            // InternalOpenCypherParser.g:16361:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getIsNotNullExpressionLeftAction_1_7_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__0__Impl"


    // $ANTLR start "rule__Expression3__Group_1_7__1"
    // InternalOpenCypherParser.g:16369:1: rule__Expression3__Group_1_7__1 : rule__Expression3__Group_1_7__1__Impl rule__Expression3__Group_1_7__2 ;
    public final void rule__Expression3__Group_1_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16373:1: ( rule__Expression3__Group_1_7__1__Impl rule__Expression3__Group_1_7__2 )
            // InternalOpenCypherParser.g:16374:2: rule__Expression3__Group_1_7__1__Impl rule__Expression3__Group_1_7__2
            {
            pushFollow(FOLLOW_89);
            rule__Expression3__Group_1_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__1"


    // $ANTLR start "rule__Expression3__Group_1_7__1__Impl"
    // InternalOpenCypherParser.g:16381:1: rule__Expression3__Group_1_7__1__Impl : ( IS ) ;
    public final void rule__Expression3__Group_1_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16385:1: ( ( IS ) )
            // InternalOpenCypherParser.g:16386:1: ( IS )
            {
            // InternalOpenCypherParser.g:16386:1: ( IS )
            // InternalOpenCypherParser.g:16387:2: IS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getISKeyword_1_7_1()); 
            }
            match(input,IS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getISKeyword_1_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__1__Impl"


    // $ANTLR start "rule__Expression3__Group_1_7__2"
    // InternalOpenCypherParser.g:16396:1: rule__Expression3__Group_1_7__2 : rule__Expression3__Group_1_7__2__Impl rule__Expression3__Group_1_7__3 ;
    public final void rule__Expression3__Group_1_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16400:1: ( rule__Expression3__Group_1_7__2__Impl rule__Expression3__Group_1_7__3 )
            // InternalOpenCypherParser.g:16401:2: rule__Expression3__Group_1_7__2__Impl rule__Expression3__Group_1_7__3
            {
            pushFollow(FOLLOW_106);
            rule__Expression3__Group_1_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_7__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__2"


    // $ANTLR start "rule__Expression3__Group_1_7__2__Impl"
    // InternalOpenCypherParser.g:16408:1: rule__Expression3__Group_1_7__2__Impl : ( NOT ) ;
    public final void rule__Expression3__Group_1_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16412:1: ( ( NOT ) )
            // InternalOpenCypherParser.g:16413:1: ( NOT )
            {
            // InternalOpenCypherParser.g:16413:1: ( NOT )
            // InternalOpenCypherParser.g:16414:2: NOT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getNOTKeyword_1_7_2()); 
            }
            match(input,NOT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getNOTKeyword_1_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__2__Impl"


    // $ANTLR start "rule__Expression3__Group_1_7__3"
    // InternalOpenCypherParser.g:16423:1: rule__Expression3__Group_1_7__3 : rule__Expression3__Group_1_7__3__Impl ;
    public final void rule__Expression3__Group_1_7__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16427:1: ( rule__Expression3__Group_1_7__3__Impl )
            // InternalOpenCypherParser.g:16428:2: rule__Expression3__Group_1_7__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Expression3__Group_1_7__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__3"


    // $ANTLR start "rule__Expression3__Group_1_7__3__Impl"
    // InternalOpenCypherParser.g:16434:1: rule__Expression3__Group_1_7__3__Impl : ( NULL ) ;
    public final void rule__Expression3__Group_1_7__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16438:1: ( ( NULL ) )
            // InternalOpenCypherParser.g:16439:1: ( NULL )
            {
            // InternalOpenCypherParser.g:16439:1: ( NULL )
            // InternalOpenCypherParser.g:16440:2: NULL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getNULLKeyword_1_7_3()); 
            }
            match(input,NULL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getNULLKeyword_1_7_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__Group_1_7__3__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group__0"
    // InternalOpenCypherParser.g:16450:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group__0 : rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group__1 ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16454:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group__1 )
            // InternalOpenCypherParser.g:16455:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group__1
            {
            pushFollow(FOLLOW_107);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group__0"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:16462:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl : ( ruleAtom ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16466:1: ( ( ruleAtom ) )
            // InternalOpenCypherParser.g:16467:1: ( ruleAtom )
            {
            // InternalOpenCypherParser.g:16467:1: ( ruleAtom )
            // InternalOpenCypherParser.g:16468:2: ruleAtom
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getAtomParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAtom();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getAtomParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group__0__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group__1"
    // InternalOpenCypherParser.g:16477:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group__1 : rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group__2 ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16481:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group__2 )
            // InternalOpenCypherParser.g:16482:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group__2
            {
            pushFollow(FOLLOW_107);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group__1"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:16489:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl : ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 )? ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16493:1: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:16494:1: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:16494:1: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 )? )
            // InternalOpenCypherParser.g:16495:2: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:16496:2: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==FullStop) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalOpenCypherParser.g:16496:3: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group__1__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group__2"
    // InternalOpenCypherParser.g:16504:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group__2 : rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16508:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl )
            // InternalOpenCypherParser.g:16509:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group__2"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl"
    // InternalOpenCypherParser.g:16515:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl : ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 )? ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16519:1: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:16520:1: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:16520:1: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 )? )
            // InternalOpenCypherParser.g:16521:2: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:16522:2: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==Colon) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // InternalOpenCypherParser.g:16522:3: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group__2__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0"
    // InternalOpenCypherParser.g:16531:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0 : rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1 ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16535:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1 )
            // InternalOpenCypherParser.g:16536:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1
            {
            pushFollow(FOLLOW_108);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl"
    // InternalOpenCypherParser.g:16543:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl : ( () ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16547:1: ( ( () ) )
            // InternalOpenCypherParser.g:16548:1: ( () )
            {
            // InternalOpenCypherParser.g:16548:1: ( () )
            // InternalOpenCypherParser.g:16549:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionPropertyLookupLeftAction_1_0()); 
            }
            // InternalOpenCypherParser.g:16550:2: ()
            // InternalOpenCypherParser.g:16550:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionPropertyLookupLeftAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__0__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1"
    // InternalOpenCypherParser.g:16558:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1 : rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16562:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl )
            // InternalOpenCypherParser.g:16563:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl"
    // InternalOpenCypherParser.g:16569:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl : ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )* ) ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16573:1: ( ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )* ) ) )
            // InternalOpenCypherParser.g:16574:1: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )* ) )
            {
            // InternalOpenCypherParser.g:16574:1: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )* ) )
            // InternalOpenCypherParser.g:16575:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )* )
            {
            // InternalOpenCypherParser.g:16575:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 ) )
            // InternalOpenCypherParser.g:16576:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:16577:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )
            // InternalOpenCypherParser.g:16577:4: rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1
            {
            pushFollow(FOLLOW_109);
            rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsAssignment_1_1()); 
            }

            }

            // InternalOpenCypherParser.g:16580:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )* )
            // InternalOpenCypherParser.g:16581:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:16582:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==FullStop) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // InternalOpenCypherParser.g:16582:4: rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1
            	    {
            	    pushFollow(FOLLOW_109);
            	    rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsAssignment_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_1__1__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0"
    // InternalOpenCypherParser.g:16592:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0 : rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1 ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16596:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1 )
            // InternalOpenCypherParser.g:16597:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1
            {
            pushFollow(FOLLOW_22);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl"
    // InternalOpenCypherParser.g:16604:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl : ( () ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16608:1: ( ( () ) )
            // InternalOpenCypherParser.g:16609:1: ( () )
            {
            // InternalOpenCypherParser.g:16609:1: ( () )
            // InternalOpenCypherParser.g:16610:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionNodeLabelsLeftAction_2_0()); 
            }
            // InternalOpenCypherParser.g:16611:2: ()
            // InternalOpenCypherParser.g:16611:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getExpressionNodeLabelsLeftAction_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__0__Impl"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1"
    // InternalOpenCypherParser.g:16619:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1 : rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16623:1: ( rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl )
            // InternalOpenCypherParser.g:16624:2: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl"
    // InternalOpenCypherParser.g:16630:1: rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl : ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )* ) ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16634:1: ( ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )* ) ) )
            // InternalOpenCypherParser.g:16635:1: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )* ) )
            {
            // InternalOpenCypherParser.g:16635:1: ( ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )* ) )
            // InternalOpenCypherParser.g:16636:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 ) ) ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )* )
            {
            // InternalOpenCypherParser.g:16636:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 ) )
            // InternalOpenCypherParser.g:16637:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:16638:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )
            // InternalOpenCypherParser.g:16638:4: rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1
            {
            pushFollow(FOLLOW_81);
            rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsAssignment_2_1()); 
            }

            }

            // InternalOpenCypherParser.g:16641:2: ( ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )* )
            // InternalOpenCypherParser.g:16642:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:16643:3: ( rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==Colon) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // InternalOpenCypherParser.g:16643:4: rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1
            	    {
            	    pushFollow(FOLLOW_81);
            	    rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsAssignment_2_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__Group_2__1__Impl"


    // $ANTLR start "rule__Atom__Group_0__0"
    // InternalOpenCypherParser.g:16653:1: rule__Atom__Group_0__0 : rule__Atom__Group_0__0__Impl rule__Atom__Group_0__1 ;
    public final void rule__Atom__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16657:1: ( rule__Atom__Group_0__0__Impl rule__Atom__Group_0__1 )
            // InternalOpenCypherParser.g:16658:2: rule__Atom__Group_0__0__Impl rule__Atom__Group_0__1
            {
            pushFollow(FOLLOW_17);
            rule__Atom__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_0__0"


    // $ANTLR start "rule__Atom__Group_0__0__Impl"
    // InternalOpenCypherParser.g:16665:1: rule__Atom__Group_0__0__Impl : ( () ) ;
    public final void rule__Atom__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16669:1: ( ( () ) )
            // InternalOpenCypherParser.g:16670:1: ( () )
            {
            // InternalOpenCypherParser.g:16670:1: ( () )
            // InternalOpenCypherParser.g:16671:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNumberConstantAction_0_0()); 
            }
            // InternalOpenCypherParser.g:16672:2: ()
            // InternalOpenCypherParser.g:16672:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNumberConstantAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_0__0__Impl"


    // $ANTLR start "rule__Atom__Group_0__1"
    // InternalOpenCypherParser.g:16680:1: rule__Atom__Group_0__1 : rule__Atom__Group_0__1__Impl ;
    public final void rule__Atom__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16684:1: ( rule__Atom__Group_0__1__Impl )
            // InternalOpenCypherParser.g:16685:2: rule__Atom__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_0__1"


    // $ANTLR start "rule__Atom__Group_0__1__Impl"
    // InternalOpenCypherParser.g:16691:1: rule__Atom__Group_0__1__Impl : ( ( rule__Atom__ValueAssignment_0_1 ) ) ;
    public final void rule__Atom__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16695:1: ( ( ( rule__Atom__ValueAssignment_0_1 ) ) )
            // InternalOpenCypherParser.g:16696:1: ( ( rule__Atom__ValueAssignment_0_1 ) )
            {
            // InternalOpenCypherParser.g:16696:1: ( ( rule__Atom__ValueAssignment_0_1 ) )
            // InternalOpenCypherParser.g:16697:2: ( rule__Atom__ValueAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getValueAssignment_0_1()); 
            }
            // InternalOpenCypherParser.g:16698:2: ( rule__Atom__ValueAssignment_0_1 )
            // InternalOpenCypherParser.g:16698:3: rule__Atom__ValueAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ValueAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getValueAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_0__1__Impl"


    // $ANTLR start "rule__Atom__Group_1__0"
    // InternalOpenCypherParser.g:16707:1: rule__Atom__Group_1__0 : rule__Atom__Group_1__0__Impl rule__Atom__Group_1__1 ;
    public final void rule__Atom__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16711:1: ( rule__Atom__Group_1__0__Impl rule__Atom__Group_1__1 )
            // InternalOpenCypherParser.g:16712:2: rule__Atom__Group_1__0__Impl rule__Atom__Group_1__1
            {
            pushFollow(FOLLOW_39);
            rule__Atom__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_1__0"


    // $ANTLR start "rule__Atom__Group_1__0__Impl"
    // InternalOpenCypherParser.g:16719:1: rule__Atom__Group_1__0__Impl : ( () ) ;
    public final void rule__Atom__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16723:1: ( ( () ) )
            // InternalOpenCypherParser.g:16724:1: ( () )
            {
            // InternalOpenCypherParser.g:16724:1: ( () )
            // InternalOpenCypherParser.g:16725:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getStringConstantAction_1_0()); 
            }
            // InternalOpenCypherParser.g:16726:2: ()
            // InternalOpenCypherParser.g:16726:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getStringConstantAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_1__0__Impl"


    // $ANTLR start "rule__Atom__Group_1__1"
    // InternalOpenCypherParser.g:16734:1: rule__Atom__Group_1__1 : rule__Atom__Group_1__1__Impl ;
    public final void rule__Atom__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16738:1: ( rule__Atom__Group_1__1__Impl )
            // InternalOpenCypherParser.g:16739:2: rule__Atom__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_1__1"


    // $ANTLR start "rule__Atom__Group_1__1__Impl"
    // InternalOpenCypherParser.g:16745:1: rule__Atom__Group_1__1__Impl : ( ( rule__Atom__ValueAssignment_1_1 ) ) ;
    public final void rule__Atom__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16749:1: ( ( ( rule__Atom__ValueAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:16750:1: ( ( rule__Atom__ValueAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:16750:1: ( ( rule__Atom__ValueAssignment_1_1 ) )
            // InternalOpenCypherParser.g:16751:2: ( rule__Atom__ValueAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getValueAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:16752:2: ( rule__Atom__ValueAssignment_1_1 )
            // InternalOpenCypherParser.g:16752:3: rule__Atom__ValueAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ValueAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getValueAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_1__1__Impl"


    // $ANTLR start "rule__Atom__Group_4__0"
    // InternalOpenCypherParser.g:16761:1: rule__Atom__Group_4__0 : rule__Atom__Group_4__0__Impl rule__Atom__Group_4__1 ;
    public final void rule__Atom__Group_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16765:1: ( rule__Atom__Group_4__0__Impl rule__Atom__Group_4__1 )
            // InternalOpenCypherParser.g:16766:2: rule__Atom__Group_4__0__Impl rule__Atom__Group_4__1
            {
            pushFollow(FOLLOW_110);
            rule__Atom__Group_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__0"


    // $ANTLR start "rule__Atom__Group_4__0__Impl"
    // InternalOpenCypherParser.g:16773:1: rule__Atom__Group_4__0__Impl : ( () ) ;
    public final void rule__Atom__Group_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16777:1: ( ( () ) )
            // InternalOpenCypherParser.g:16778:1: ( () )
            {
            // InternalOpenCypherParser.g:16778:1: ( () )
            // InternalOpenCypherParser.g:16779:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getBoolConstantAction_4_0()); 
            }
            // InternalOpenCypherParser.g:16780:2: ()
            // InternalOpenCypherParser.g:16780:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getBoolConstantAction_4_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__0__Impl"


    // $ANTLR start "rule__Atom__Group_4__1"
    // InternalOpenCypherParser.g:16788:1: rule__Atom__Group_4__1 : rule__Atom__Group_4__1__Impl ;
    public final void rule__Atom__Group_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16792:1: ( rule__Atom__Group_4__1__Impl )
            // InternalOpenCypherParser.g:16793:2: rule__Atom__Group_4__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__1"


    // $ANTLR start "rule__Atom__Group_4__1__Impl"
    // InternalOpenCypherParser.g:16799:1: rule__Atom__Group_4__1__Impl : ( ( rule__Atom__ValueAssignment_4_1 ) ) ;
    public final void rule__Atom__Group_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16803:1: ( ( ( rule__Atom__ValueAssignment_4_1 ) ) )
            // InternalOpenCypherParser.g:16804:1: ( ( rule__Atom__ValueAssignment_4_1 ) )
            {
            // InternalOpenCypherParser.g:16804:1: ( ( rule__Atom__ValueAssignment_4_1 ) )
            // InternalOpenCypherParser.g:16805:2: ( rule__Atom__ValueAssignment_4_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getValueAssignment_4_1()); 
            }
            // InternalOpenCypherParser.g:16806:2: ( rule__Atom__ValueAssignment_4_1 )
            // InternalOpenCypherParser.g:16806:3: rule__Atom__ValueAssignment_4_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ValueAssignment_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getValueAssignment_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_4__1__Impl"


    // $ANTLR start "rule__Atom__Group_5__0"
    // InternalOpenCypherParser.g:16815:1: rule__Atom__Group_5__0 : rule__Atom__Group_5__0__Impl rule__Atom__Group_5__1 ;
    public final void rule__Atom__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16819:1: ( rule__Atom__Group_5__0__Impl rule__Atom__Group_5__1 )
            // InternalOpenCypherParser.g:16820:2: rule__Atom__Group_5__0__Impl rule__Atom__Group_5__1
            {
            pushFollow(FOLLOW_106);
            rule__Atom__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_5__0"


    // $ANTLR start "rule__Atom__Group_5__0__Impl"
    // InternalOpenCypherParser.g:16827:1: rule__Atom__Group_5__0__Impl : ( () ) ;
    public final void rule__Atom__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16831:1: ( ( () ) )
            // InternalOpenCypherParser.g:16832:1: ( () )
            {
            // InternalOpenCypherParser.g:16832:1: ( () )
            // InternalOpenCypherParser.g:16833:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNullConstantAction_5_0()); 
            }
            // InternalOpenCypherParser.g:16834:2: ()
            // InternalOpenCypherParser.g:16834:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNullConstantAction_5_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_5__0__Impl"


    // $ANTLR start "rule__Atom__Group_5__1"
    // InternalOpenCypherParser.g:16842:1: rule__Atom__Group_5__1 : rule__Atom__Group_5__1__Impl ;
    public final void rule__Atom__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16846:1: ( rule__Atom__Group_5__1__Impl )
            // InternalOpenCypherParser.g:16847:2: rule__Atom__Group_5__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_5__1"


    // $ANTLR start "rule__Atom__Group_5__1__Impl"
    // InternalOpenCypherParser.g:16853:1: rule__Atom__Group_5__1__Impl : ( NULL ) ;
    public final void rule__Atom__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16857:1: ( ( NULL ) )
            // InternalOpenCypherParser.g:16858:1: ( NULL )
            {
            // InternalOpenCypherParser.g:16858:1: ( NULL )
            // InternalOpenCypherParser.g:16859:2: NULL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNULLKeyword_5_1()); 
            }
            match(input,NULL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNULLKeyword_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_5__1__Impl"


    // $ANTLR start "rule__Atom__Group_7__0"
    // InternalOpenCypherParser.g:16869:1: rule__Atom__Group_7__0 : rule__Atom__Group_7__0__Impl rule__Atom__Group_7__1 ;
    public final void rule__Atom__Group_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16873:1: ( rule__Atom__Group_7__0__Impl rule__Atom__Group_7__1 )
            // InternalOpenCypherParser.g:16874:2: rule__Atom__Group_7__0__Impl rule__Atom__Group_7__1
            {
            pushFollow(FOLLOW_111);
            rule__Atom__Group_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__0"


    // $ANTLR start "rule__Atom__Group_7__0__Impl"
    // InternalOpenCypherParser.g:16881:1: rule__Atom__Group_7__0__Impl : ( () ) ;
    public final void rule__Atom__Group_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16885:1: ( ( () ) )
            // InternalOpenCypherParser.g:16886:1: ( () )
            {
            // InternalOpenCypherParser.g:16886:1: ( () )
            // InternalOpenCypherParser.g:16887:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getCountAction_7_0()); 
            }
            // InternalOpenCypherParser.g:16888:2: ()
            // InternalOpenCypherParser.g:16888:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getCountAction_7_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__0__Impl"


    // $ANTLR start "rule__Atom__Group_7__1"
    // InternalOpenCypherParser.g:16896:1: rule__Atom__Group_7__1 : rule__Atom__Group_7__1__Impl rule__Atom__Group_7__2 ;
    public final void rule__Atom__Group_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16900:1: ( rule__Atom__Group_7__1__Impl rule__Atom__Group_7__2 )
            // InternalOpenCypherParser.g:16901:2: rule__Atom__Group_7__1__Impl rule__Atom__Group_7__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__1"


    // $ANTLR start "rule__Atom__Group_7__1__Impl"
    // InternalOpenCypherParser.g:16908:1: rule__Atom__Group_7__1__Impl : ( COUNT ) ;
    public final void rule__Atom__Group_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16912:1: ( ( COUNT ) )
            // InternalOpenCypherParser.g:16913:1: ( COUNT )
            {
            // InternalOpenCypherParser.g:16913:1: ( COUNT )
            // InternalOpenCypherParser.g:16914:2: COUNT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getCOUNTKeyword_7_1()); 
            }
            match(input,COUNT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getCOUNTKeyword_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__1__Impl"


    // $ANTLR start "rule__Atom__Group_7__2"
    // InternalOpenCypherParser.g:16923:1: rule__Atom__Group_7__2 : rule__Atom__Group_7__2__Impl rule__Atom__Group_7__3 ;
    public final void rule__Atom__Group_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16927:1: ( rule__Atom__Group_7__2__Impl rule__Atom__Group_7__3 )
            // InternalOpenCypherParser.g:16928:2: rule__Atom__Group_7__2__Impl rule__Atom__Group_7__3
            {
            pushFollow(FOLLOW_59);
            rule__Atom__Group_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__2"


    // $ANTLR start "rule__Atom__Group_7__2__Impl"
    // InternalOpenCypherParser.g:16935:1: rule__Atom__Group_7__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16939:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:16940:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:16940:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:16941:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__2__Impl"


    // $ANTLR start "rule__Atom__Group_7__3"
    // InternalOpenCypherParser.g:16950:1: rule__Atom__Group_7__3 : rule__Atom__Group_7__3__Impl rule__Atom__Group_7__4 ;
    public final void rule__Atom__Group_7__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16954:1: ( rule__Atom__Group_7__3__Impl rule__Atom__Group_7__4 )
            // InternalOpenCypherParser.g:16955:2: rule__Atom__Group_7__3__Impl rule__Atom__Group_7__4
            {
            pushFollow(FOLLOW_24);
            rule__Atom__Group_7__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__3"


    // $ANTLR start "rule__Atom__Group_7__3__Impl"
    // InternalOpenCypherParser.g:16962:1: rule__Atom__Group_7__3__Impl : ( Asterisk ) ;
    public final void rule__Atom__Group_7__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16966:1: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:16967:1: ( Asterisk )
            {
            // InternalOpenCypherParser.g:16967:1: ( Asterisk )
            // InternalOpenCypherParser.g:16968:2: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAsteriskKeyword_7_3()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAsteriskKeyword_7_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__3__Impl"


    // $ANTLR start "rule__Atom__Group_7__4"
    // InternalOpenCypherParser.g:16977:1: rule__Atom__Group_7__4 : rule__Atom__Group_7__4__Impl ;
    public final void rule__Atom__Group_7__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16981:1: ( rule__Atom__Group_7__4__Impl )
            // InternalOpenCypherParser.g:16982:2: rule__Atom__Group_7__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_7__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__4"


    // $ANTLR start "rule__Atom__Group_7__4__Impl"
    // InternalOpenCypherParser.g:16988:1: rule__Atom__Group_7__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_7__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:16992:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:16993:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:16993:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:16994:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_7_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_7__4__Impl"


    // $ANTLR start "rule__Atom__Group_11__0"
    // InternalOpenCypherParser.g:17004:1: rule__Atom__Group_11__0 : rule__Atom__Group_11__0__Impl rule__Atom__Group_11__1 ;
    public final void rule__Atom__Group_11__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17008:1: ( rule__Atom__Group_11__0__Impl rule__Atom__Group_11__1 )
            // InternalOpenCypherParser.g:17009:2: rule__Atom__Group_11__0__Impl rule__Atom__Group_11__1
            {
            pushFollow(FOLLOW_31);
            rule__Atom__Group_11__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__0"


    // $ANTLR start "rule__Atom__Group_11__0__Impl"
    // InternalOpenCypherParser.g:17016:1: rule__Atom__Group_11__0__Impl : ( () ) ;
    public final void rule__Atom__Group_11__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17020:1: ( ( () ) )
            // InternalOpenCypherParser.g:17021:1: ( () )
            {
            // InternalOpenCypherParser.g:17021:1: ( () )
            // InternalOpenCypherParser.g:17022:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionListAction_11_0()); 
            }
            // InternalOpenCypherParser.g:17023:2: ()
            // InternalOpenCypherParser.g:17023:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionListAction_11_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__0__Impl"


    // $ANTLR start "rule__Atom__Group_11__1"
    // InternalOpenCypherParser.g:17031:1: rule__Atom__Group_11__1 : rule__Atom__Group_11__1__Impl ;
    public final void rule__Atom__Group_11__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17035:1: ( rule__Atom__Group_11__1__Impl )
            // InternalOpenCypherParser.g:17036:2: rule__Atom__Group_11__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__1"


    // $ANTLR start "rule__Atom__Group_11__1__Impl"
    // InternalOpenCypherParser.g:17042:1: rule__Atom__Group_11__1__Impl : ( ( rule__Atom__Group_11_1__0 ) ) ;
    public final void rule__Atom__Group_11__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17046:1: ( ( ( rule__Atom__Group_11_1__0 ) ) )
            // InternalOpenCypherParser.g:17047:1: ( ( rule__Atom__Group_11_1__0 ) )
            {
            // InternalOpenCypherParser.g:17047:1: ( ( rule__Atom__Group_11_1__0 ) )
            // InternalOpenCypherParser.g:17048:2: ( rule__Atom__Group_11_1__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getGroup_11_1()); 
            }
            // InternalOpenCypherParser.g:17049:2: ( rule__Atom__Group_11_1__0 )
            // InternalOpenCypherParser.g:17049:3: rule__Atom__Group_11_1__0
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getGroup_11_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11__1__Impl"


    // $ANTLR start "rule__Atom__Group_11_1__0"
    // InternalOpenCypherParser.g:17058:1: rule__Atom__Group_11_1__0 : rule__Atom__Group_11_1__0__Impl rule__Atom__Group_11_1__1 ;
    public final void rule__Atom__Group_11_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17062:1: ( rule__Atom__Group_11_1__0__Impl rule__Atom__Group_11_1__1 )
            // InternalOpenCypherParser.g:17063:2: rule__Atom__Group_11_1__0__Impl rule__Atom__Group_11_1__1
            {
            pushFollow(FOLLOW_112);
            rule__Atom__Group_11_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1__0"


    // $ANTLR start "rule__Atom__Group_11_1__0__Impl"
    // InternalOpenCypherParser.g:17070:1: rule__Atom__Group_11_1__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__Atom__Group_11_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17074:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:17075:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:17075:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:17076:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_11_1_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_11_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1__0__Impl"


    // $ANTLR start "rule__Atom__Group_11_1__1"
    // InternalOpenCypherParser.g:17085:1: rule__Atom__Group_11_1__1 : rule__Atom__Group_11_1__1__Impl rule__Atom__Group_11_1__2 ;
    public final void rule__Atom__Group_11_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17089:1: ( rule__Atom__Group_11_1__1__Impl rule__Atom__Group_11_1__2 )
            // InternalOpenCypherParser.g:17090:2: rule__Atom__Group_11_1__1__Impl rule__Atom__Group_11_1__2
            {
            pushFollow(FOLLOW_112);
            rule__Atom__Group_11_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1__1"


    // $ANTLR start "rule__Atom__Group_11_1__1__Impl"
    // InternalOpenCypherParser.g:17097:1: rule__Atom__Group_11_1__1__Impl : ( ( rule__Atom__Group_11_1_1__0 )? ) ;
    public final void rule__Atom__Group_11_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17101:1: ( ( ( rule__Atom__Group_11_1_1__0 )? ) )
            // InternalOpenCypherParser.g:17102:1: ( ( rule__Atom__Group_11_1_1__0 )? )
            {
            // InternalOpenCypherParser.g:17102:1: ( ( rule__Atom__Group_11_1_1__0 )? )
            // InternalOpenCypherParser.g:17103:2: ( rule__Atom__Group_11_1_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getGroup_11_1_1()); 
            }
            // InternalOpenCypherParser.g:17104:2: ( rule__Atom__Group_11_1_1__0 )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=ALLSHORTESTPATHS && LA119_0<=WHERE)||(LA119_0>=CASE && LA119_0<=XOR)||(LA119_0>=AS && LA119_0<=OR)||LA119_0==DollarSign||LA119_0==LeftParenthesis||LA119_0==PlusSign||LA119_0==HyphenMinus||LA119_0==LeftSquareBracket||LA119_0==LeftCurlyBracket||LA119_0==RULE_ID||(LA119_0>=RULE_STRING_LITERAL && LA119_0<=RULE_DECIMAL)) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalOpenCypherParser.g:17104:3: rule__Atom__Group_11_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_11_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getGroup_11_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1__1__Impl"


    // $ANTLR start "rule__Atom__Group_11_1__2"
    // InternalOpenCypherParser.g:17112:1: rule__Atom__Group_11_1__2 : rule__Atom__Group_11_1__2__Impl ;
    public final void rule__Atom__Group_11_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17116:1: ( rule__Atom__Group_11_1__2__Impl )
            // InternalOpenCypherParser.g:17117:2: rule__Atom__Group_11_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1__2"


    // $ANTLR start "rule__Atom__Group_11_1__2__Impl"
    // InternalOpenCypherParser.g:17123:1: rule__Atom__Group_11_1__2__Impl : ( RightSquareBracket ) ;
    public final void rule__Atom__Group_11_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17127:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:17128:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:17128:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:17129:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_11_1_2()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_11_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1__2__Impl"


    // $ANTLR start "rule__Atom__Group_11_1_1__0"
    // InternalOpenCypherParser.g:17139:1: rule__Atom__Group_11_1_1__0 : rule__Atom__Group_11_1_1__0__Impl rule__Atom__Group_11_1_1__1 ;
    public final void rule__Atom__Group_11_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17143:1: ( rule__Atom__Group_11_1_1__0__Impl rule__Atom__Group_11_1_1__1 )
            // InternalOpenCypherParser.g:17144:2: rule__Atom__Group_11_1_1__0__Impl rule__Atom__Group_11_1_1__1
            {
            pushFollow(FOLLOW_48);
            rule__Atom__Group_11_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1__0"


    // $ANTLR start "rule__Atom__Group_11_1_1__0__Impl"
    // InternalOpenCypherParser.g:17151:1: rule__Atom__Group_11_1_1__0__Impl : ( ( rule__Atom__ExpressionsAssignment_11_1_1_0 ) ) ;
    public final void rule__Atom__Group_11_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17155:1: ( ( ( rule__Atom__ExpressionsAssignment_11_1_1_0 ) ) )
            // InternalOpenCypherParser.g:17156:1: ( ( rule__Atom__ExpressionsAssignment_11_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:17156:1: ( ( rule__Atom__ExpressionsAssignment_11_1_1_0 ) )
            // InternalOpenCypherParser.g:17157:2: ( rule__Atom__ExpressionsAssignment_11_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionsAssignment_11_1_1_0()); 
            }
            // InternalOpenCypherParser.g:17158:2: ( rule__Atom__ExpressionsAssignment_11_1_1_0 )
            // InternalOpenCypherParser.g:17158:3: rule__Atom__ExpressionsAssignment_11_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ExpressionsAssignment_11_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionsAssignment_11_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1__0__Impl"


    // $ANTLR start "rule__Atom__Group_11_1_1__1"
    // InternalOpenCypherParser.g:17166:1: rule__Atom__Group_11_1_1__1 : rule__Atom__Group_11_1_1__1__Impl ;
    public final void rule__Atom__Group_11_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17170:1: ( rule__Atom__Group_11_1_1__1__Impl )
            // InternalOpenCypherParser.g:17171:2: rule__Atom__Group_11_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1__1"


    // $ANTLR start "rule__Atom__Group_11_1_1__1__Impl"
    // InternalOpenCypherParser.g:17177:1: rule__Atom__Group_11_1_1__1__Impl : ( ( rule__Atom__Group_11_1_1_1__0 )* ) ;
    public final void rule__Atom__Group_11_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17181:1: ( ( ( rule__Atom__Group_11_1_1_1__0 )* ) )
            // InternalOpenCypherParser.g:17182:1: ( ( rule__Atom__Group_11_1_1_1__0 )* )
            {
            // InternalOpenCypherParser.g:17182:1: ( ( rule__Atom__Group_11_1_1_1__0 )* )
            // InternalOpenCypherParser.g:17183:2: ( rule__Atom__Group_11_1_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getGroup_11_1_1_1()); 
            }
            // InternalOpenCypherParser.g:17184:2: ( rule__Atom__Group_11_1_1_1__0 )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==Comma) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // InternalOpenCypherParser.g:17184:3: rule__Atom__Group_11_1_1_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__Atom__Group_11_1_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getGroup_11_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1__1__Impl"


    // $ANTLR start "rule__Atom__Group_11_1_1_1__0"
    // InternalOpenCypherParser.g:17193:1: rule__Atom__Group_11_1_1_1__0 : rule__Atom__Group_11_1_1_1__0__Impl rule__Atom__Group_11_1_1_1__1 ;
    public final void rule__Atom__Group_11_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17197:1: ( rule__Atom__Group_11_1_1_1__0__Impl rule__Atom__Group_11_1_1_1__1 )
            // InternalOpenCypherParser.g:17198:2: rule__Atom__Group_11_1_1_1__0__Impl rule__Atom__Group_11_1_1_1__1
            {
            pushFollow(FOLLOW_36);
            rule__Atom__Group_11_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1_1__0"


    // $ANTLR start "rule__Atom__Group_11_1_1_1__0__Impl"
    // InternalOpenCypherParser.g:17205:1: rule__Atom__Group_11_1_1_1__0__Impl : ( Comma ) ;
    public final void rule__Atom__Group_11_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17209:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:17210:1: ( Comma )
            {
            // InternalOpenCypherParser.g:17210:1: ( Comma )
            // InternalOpenCypherParser.g:17211:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getCommaKeyword_11_1_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getCommaKeyword_11_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1_1__0__Impl"


    // $ANTLR start "rule__Atom__Group_11_1_1_1__1"
    // InternalOpenCypherParser.g:17220:1: rule__Atom__Group_11_1_1_1__1 : rule__Atom__Group_11_1_1_1__1__Impl ;
    public final void rule__Atom__Group_11_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17224:1: ( rule__Atom__Group_11_1_1_1__1__Impl )
            // InternalOpenCypherParser.g:17225:2: rule__Atom__Group_11_1_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_11_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1_1__1"


    // $ANTLR start "rule__Atom__Group_11_1_1_1__1__Impl"
    // InternalOpenCypherParser.g:17231:1: rule__Atom__Group_11_1_1_1__1__Impl : ( ( rule__Atom__ExpressionsAssignment_11_1_1_1_1 ) ) ;
    public final void rule__Atom__Group_11_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17235:1: ( ( ( rule__Atom__ExpressionsAssignment_11_1_1_1_1 ) ) )
            // InternalOpenCypherParser.g:17236:1: ( ( rule__Atom__ExpressionsAssignment_11_1_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:17236:1: ( ( rule__Atom__ExpressionsAssignment_11_1_1_1_1 ) )
            // InternalOpenCypherParser.g:17237:2: ( rule__Atom__ExpressionsAssignment_11_1_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionsAssignment_11_1_1_1_1()); 
            }
            // InternalOpenCypherParser.g:17238:2: ( rule__Atom__ExpressionsAssignment_11_1_1_1_1 )
            // InternalOpenCypherParser.g:17238:3: rule__Atom__ExpressionsAssignment_11_1_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ExpressionsAssignment_11_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionsAssignment_11_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_11_1_1_1__1__Impl"


    // $ANTLR start "rule__Atom__Group_12__0"
    // InternalOpenCypherParser.g:17247:1: rule__Atom__Group_12__0 : rule__Atom__Group_12__0__Impl rule__Atom__Group_12__1 ;
    public final void rule__Atom__Group_12__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17251:1: ( rule__Atom__Group_12__0__Impl rule__Atom__Group_12__1 )
            // InternalOpenCypherParser.g:17252:2: rule__Atom__Group_12__0__Impl rule__Atom__Group_12__1
            {
            pushFollow(FOLLOW_113);
            rule__Atom__Group_12__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__0"


    // $ANTLR start "rule__Atom__Group_12__0__Impl"
    // InternalOpenCypherParser.g:17259:1: rule__Atom__Group_12__0__Impl : ( () ) ;
    public final void rule__Atom__Group_12__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17263:1: ( ( () ) )
            // InternalOpenCypherParser.g:17264:1: ( () )
            {
            // InternalOpenCypherParser.g:17264:1: ( () )
            // InternalOpenCypherParser.g:17265:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExtractAction_12_0()); 
            }
            // InternalOpenCypherParser.g:17266:2: ()
            // InternalOpenCypherParser.g:17266:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExtractAction_12_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__0__Impl"


    // $ANTLR start "rule__Atom__Group_12__1"
    // InternalOpenCypherParser.g:17274:1: rule__Atom__Group_12__1 : rule__Atom__Group_12__1__Impl rule__Atom__Group_12__2 ;
    public final void rule__Atom__Group_12__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17278:1: ( rule__Atom__Group_12__1__Impl rule__Atom__Group_12__2 )
            // InternalOpenCypherParser.g:17279:2: rule__Atom__Group_12__1__Impl rule__Atom__Group_12__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_12__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__1"


    // $ANTLR start "rule__Atom__Group_12__1__Impl"
    // InternalOpenCypherParser.g:17286:1: rule__Atom__Group_12__1__Impl : ( EXTRACT ) ;
    public final void rule__Atom__Group_12__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17290:1: ( ( EXTRACT ) )
            // InternalOpenCypherParser.g:17291:1: ( EXTRACT )
            {
            // InternalOpenCypherParser.g:17291:1: ( EXTRACT )
            // InternalOpenCypherParser.g:17292:2: EXTRACT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getEXTRACTKeyword_12_1()); 
            }
            match(input,EXTRACT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getEXTRACTKeyword_12_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__1__Impl"


    // $ANTLR start "rule__Atom__Group_12__2"
    // InternalOpenCypherParser.g:17301:1: rule__Atom__Group_12__2 : rule__Atom__Group_12__2__Impl rule__Atom__Group_12__3 ;
    public final void rule__Atom__Group_12__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17305:1: ( rule__Atom__Group_12__2__Impl rule__Atom__Group_12__3 )
            // InternalOpenCypherParser.g:17306:2: rule__Atom__Group_12__2__Impl rule__Atom__Group_12__3
            {
            pushFollow(FOLLOW_9);
            rule__Atom__Group_12__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__2"


    // $ANTLR start "rule__Atom__Group_12__2__Impl"
    // InternalOpenCypherParser.g:17313:1: rule__Atom__Group_12__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_12__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17317:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17318:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17318:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17319:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_12_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__2__Impl"


    // $ANTLR start "rule__Atom__Group_12__3"
    // InternalOpenCypherParser.g:17328:1: rule__Atom__Group_12__3 : rule__Atom__Group_12__3__Impl rule__Atom__Group_12__4 ;
    public final void rule__Atom__Group_12__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17332:1: ( rule__Atom__Group_12__3__Impl rule__Atom__Group_12__4 )
            // InternalOpenCypherParser.g:17333:2: rule__Atom__Group_12__3__Impl rule__Atom__Group_12__4
            {
            pushFollow(FOLLOW_114);
            rule__Atom__Group_12__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__3"


    // $ANTLR start "rule__Atom__Group_12__3__Impl"
    // InternalOpenCypherParser.g:17340:1: rule__Atom__Group_12__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_12_3 ) ) ;
    public final void rule__Atom__Group_12__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17344:1: ( ( ( rule__Atom__FilterExpressionAssignment_12_3 ) ) )
            // InternalOpenCypherParser.g:17345:1: ( ( rule__Atom__FilterExpressionAssignment_12_3 ) )
            {
            // InternalOpenCypherParser.g:17345:1: ( ( rule__Atom__FilterExpressionAssignment_12_3 ) )
            // InternalOpenCypherParser.g:17346:2: ( rule__Atom__FilterExpressionAssignment_12_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3()); 
            }
            // InternalOpenCypherParser.g:17347:2: ( rule__Atom__FilterExpressionAssignment_12_3 )
            // InternalOpenCypherParser.g:17347:3: rule__Atom__FilterExpressionAssignment_12_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_12_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_12_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__3__Impl"


    // $ANTLR start "rule__Atom__Group_12__4"
    // InternalOpenCypherParser.g:17355:1: rule__Atom__Group_12__4 : rule__Atom__Group_12__4__Impl rule__Atom__Group_12__5 ;
    public final void rule__Atom__Group_12__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17359:1: ( rule__Atom__Group_12__4__Impl rule__Atom__Group_12__5 )
            // InternalOpenCypherParser.g:17360:2: rule__Atom__Group_12__4__Impl rule__Atom__Group_12__5
            {
            pushFollow(FOLLOW_114);
            rule__Atom__Group_12__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__4"


    // $ANTLR start "rule__Atom__Group_12__4__Impl"
    // InternalOpenCypherParser.g:17367:1: rule__Atom__Group_12__4__Impl : ( ( rule__Atom__Group_12_4__0 )? ) ;
    public final void rule__Atom__Group_12__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17371:1: ( ( ( rule__Atom__Group_12_4__0 )? ) )
            // InternalOpenCypherParser.g:17372:1: ( ( rule__Atom__Group_12_4__0 )? )
            {
            // InternalOpenCypherParser.g:17372:1: ( ( rule__Atom__Group_12_4__0 )? )
            // InternalOpenCypherParser.g:17373:2: ( rule__Atom__Group_12_4__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getGroup_12_4()); 
            }
            // InternalOpenCypherParser.g:17374:2: ( rule__Atom__Group_12_4__0 )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==VerticalLine) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // InternalOpenCypherParser.g:17374:3: rule__Atom__Group_12_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Atom__Group_12_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getGroup_12_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__4__Impl"


    // $ANTLR start "rule__Atom__Group_12__5"
    // InternalOpenCypherParser.g:17382:1: rule__Atom__Group_12__5 : rule__Atom__Group_12__5__Impl ;
    public final void rule__Atom__Group_12__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17386:1: ( rule__Atom__Group_12__5__Impl )
            // InternalOpenCypherParser.g:17387:2: rule__Atom__Group_12__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__5"


    // $ANTLR start "rule__Atom__Group_12__5__Impl"
    // InternalOpenCypherParser.g:17393:1: rule__Atom__Group_12__5__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_12__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17397:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17398:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17398:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17399:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_5()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_12_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12__5__Impl"


    // $ANTLR start "rule__Atom__Group_12_4__0"
    // InternalOpenCypherParser.g:17409:1: rule__Atom__Group_12_4__0 : rule__Atom__Group_12_4__0__Impl rule__Atom__Group_12_4__1 ;
    public final void rule__Atom__Group_12_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17413:1: ( rule__Atom__Group_12_4__0__Impl rule__Atom__Group_12_4__1 )
            // InternalOpenCypherParser.g:17414:2: rule__Atom__Group_12_4__0__Impl rule__Atom__Group_12_4__1
            {
            pushFollow(FOLLOW_36);
            rule__Atom__Group_12_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12_4__0"


    // $ANTLR start "rule__Atom__Group_12_4__0__Impl"
    // InternalOpenCypherParser.g:17421:1: rule__Atom__Group_12_4__0__Impl : ( VerticalLine ) ;
    public final void rule__Atom__Group_12_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17425:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:17426:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:17426:1: ( VerticalLine )
            // InternalOpenCypherParser.g:17427:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVerticalLineKeyword_12_4_0()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVerticalLineKeyword_12_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12_4__0__Impl"


    // $ANTLR start "rule__Atom__Group_12_4__1"
    // InternalOpenCypherParser.g:17436:1: rule__Atom__Group_12_4__1 : rule__Atom__Group_12_4__1__Impl ;
    public final void rule__Atom__Group_12_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17440:1: ( rule__Atom__Group_12_4__1__Impl )
            // InternalOpenCypherParser.g:17441:2: rule__Atom__Group_12_4__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_12_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12_4__1"


    // $ANTLR start "rule__Atom__Group_12_4__1__Impl"
    // InternalOpenCypherParser.g:17447:1: rule__Atom__Group_12_4__1__Impl : ( ( rule__Atom__ExpressionAssignment_12_4_1 ) ) ;
    public final void rule__Atom__Group_12_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17451:1: ( ( ( rule__Atom__ExpressionAssignment_12_4_1 ) ) )
            // InternalOpenCypherParser.g:17452:1: ( ( rule__Atom__ExpressionAssignment_12_4_1 ) )
            {
            // InternalOpenCypherParser.g:17452:1: ( ( rule__Atom__ExpressionAssignment_12_4_1 ) )
            // InternalOpenCypherParser.g:17453:2: ( rule__Atom__ExpressionAssignment_12_4_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionAssignment_12_4_1()); 
            }
            // InternalOpenCypherParser.g:17454:2: ( rule__Atom__ExpressionAssignment_12_4_1 )
            // InternalOpenCypherParser.g:17454:3: rule__Atom__ExpressionAssignment_12_4_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ExpressionAssignment_12_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionAssignment_12_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_12_4__1__Impl"


    // $ANTLR start "rule__Atom__Group_14__0"
    // InternalOpenCypherParser.g:17463:1: rule__Atom__Group_14__0 : rule__Atom__Group_14__0__Impl rule__Atom__Group_14__1 ;
    public final void rule__Atom__Group_14__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17467:1: ( rule__Atom__Group_14__0__Impl rule__Atom__Group_14__1 )
            // InternalOpenCypherParser.g:17468:2: rule__Atom__Group_14__0__Impl rule__Atom__Group_14__1
            {
            pushFollow(FOLLOW_115);
            rule__Atom__Group_14__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_14__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__0"


    // $ANTLR start "rule__Atom__Group_14__0__Impl"
    // InternalOpenCypherParser.g:17475:1: rule__Atom__Group_14__0__Impl : ( () ) ;
    public final void rule__Atom__Group_14__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17479:1: ( ( () ) )
            // InternalOpenCypherParser.g:17480:1: ( () )
            {
            // InternalOpenCypherParser.g:17480:1: ( () )
            // InternalOpenCypherParser.g:17481:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterAction_14_0()); 
            }
            // InternalOpenCypherParser.g:17482:2: ()
            // InternalOpenCypherParser.g:17482:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterAction_14_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__0__Impl"


    // $ANTLR start "rule__Atom__Group_14__1"
    // InternalOpenCypherParser.g:17490:1: rule__Atom__Group_14__1 : rule__Atom__Group_14__1__Impl rule__Atom__Group_14__2 ;
    public final void rule__Atom__Group_14__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17494:1: ( rule__Atom__Group_14__1__Impl rule__Atom__Group_14__2 )
            // InternalOpenCypherParser.g:17495:2: rule__Atom__Group_14__1__Impl rule__Atom__Group_14__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_14__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_14__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__1"


    // $ANTLR start "rule__Atom__Group_14__1__Impl"
    // InternalOpenCypherParser.g:17502:1: rule__Atom__Group_14__1__Impl : ( FILTER ) ;
    public final void rule__Atom__Group_14__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17506:1: ( ( FILTER ) )
            // InternalOpenCypherParser.g:17507:1: ( FILTER )
            {
            // InternalOpenCypherParser.g:17507:1: ( FILTER )
            // InternalOpenCypherParser.g:17508:2: FILTER
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFILTERKeyword_14_1()); 
            }
            match(input,FILTER,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFILTERKeyword_14_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__1__Impl"


    // $ANTLR start "rule__Atom__Group_14__2"
    // InternalOpenCypherParser.g:17517:1: rule__Atom__Group_14__2 : rule__Atom__Group_14__2__Impl rule__Atom__Group_14__3 ;
    public final void rule__Atom__Group_14__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17521:1: ( rule__Atom__Group_14__2__Impl rule__Atom__Group_14__3 )
            // InternalOpenCypherParser.g:17522:2: rule__Atom__Group_14__2__Impl rule__Atom__Group_14__3
            {
            pushFollow(FOLLOW_9);
            rule__Atom__Group_14__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_14__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__2"


    // $ANTLR start "rule__Atom__Group_14__2__Impl"
    // InternalOpenCypherParser.g:17529:1: rule__Atom__Group_14__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_14__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17533:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17534:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17534:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17535:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_14_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_14_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__2__Impl"


    // $ANTLR start "rule__Atom__Group_14__3"
    // InternalOpenCypherParser.g:17544:1: rule__Atom__Group_14__3 : rule__Atom__Group_14__3__Impl rule__Atom__Group_14__4 ;
    public final void rule__Atom__Group_14__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17548:1: ( rule__Atom__Group_14__3__Impl rule__Atom__Group_14__4 )
            // InternalOpenCypherParser.g:17549:2: rule__Atom__Group_14__3__Impl rule__Atom__Group_14__4
            {
            pushFollow(FOLLOW_24);
            rule__Atom__Group_14__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_14__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__3"


    // $ANTLR start "rule__Atom__Group_14__3__Impl"
    // InternalOpenCypherParser.g:17556:1: rule__Atom__Group_14__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_14_3 ) ) ;
    public final void rule__Atom__Group_14__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17560:1: ( ( ( rule__Atom__FilterExpressionAssignment_14_3 ) ) )
            // InternalOpenCypherParser.g:17561:1: ( ( rule__Atom__FilterExpressionAssignment_14_3 ) )
            {
            // InternalOpenCypherParser.g:17561:1: ( ( rule__Atom__FilterExpressionAssignment_14_3 ) )
            // InternalOpenCypherParser.g:17562:2: ( rule__Atom__FilterExpressionAssignment_14_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_14_3()); 
            }
            // InternalOpenCypherParser.g:17563:2: ( rule__Atom__FilterExpressionAssignment_14_3 )
            // InternalOpenCypherParser.g:17563:3: rule__Atom__FilterExpressionAssignment_14_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_14_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_14_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__3__Impl"


    // $ANTLR start "rule__Atom__Group_14__4"
    // InternalOpenCypherParser.g:17571:1: rule__Atom__Group_14__4 : rule__Atom__Group_14__4__Impl ;
    public final void rule__Atom__Group_14__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17575:1: ( rule__Atom__Group_14__4__Impl )
            // InternalOpenCypherParser.g:17576:2: rule__Atom__Group_14__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_14__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__4"


    // $ANTLR start "rule__Atom__Group_14__4__Impl"
    // InternalOpenCypherParser.g:17582:1: rule__Atom__Group_14__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_14__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17586:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17587:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17587:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17588:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_14_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_14_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_14__4__Impl"


    // $ANTLR start "rule__Atom__Group_15__0"
    // InternalOpenCypherParser.g:17598:1: rule__Atom__Group_15__0 : rule__Atom__Group_15__0__Impl rule__Atom__Group_15__1 ;
    public final void rule__Atom__Group_15__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17602:1: ( rule__Atom__Group_15__0__Impl rule__Atom__Group_15__1 )
            // InternalOpenCypherParser.g:17603:2: rule__Atom__Group_15__0__Impl rule__Atom__Group_15__1
            {
            pushFollow(FOLLOW_116);
            rule__Atom__Group_15__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_15__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__0"


    // $ANTLR start "rule__Atom__Group_15__0__Impl"
    // InternalOpenCypherParser.g:17610:1: rule__Atom__Group_15__0__Impl : ( () ) ;
    public final void rule__Atom__Group_15__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17614:1: ( ( () ) )
            // InternalOpenCypherParser.g:17615:1: ( () )
            {
            // InternalOpenCypherParser.g:17615:1: ( () )
            // InternalOpenCypherParser.g:17616:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAllAction_15_0()); 
            }
            // InternalOpenCypherParser.g:17617:2: ()
            // InternalOpenCypherParser.g:17617:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAllAction_15_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__0__Impl"


    // $ANTLR start "rule__Atom__Group_15__1"
    // InternalOpenCypherParser.g:17625:1: rule__Atom__Group_15__1 : rule__Atom__Group_15__1__Impl rule__Atom__Group_15__2 ;
    public final void rule__Atom__Group_15__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17629:1: ( rule__Atom__Group_15__1__Impl rule__Atom__Group_15__2 )
            // InternalOpenCypherParser.g:17630:2: rule__Atom__Group_15__1__Impl rule__Atom__Group_15__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_15__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_15__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__1"


    // $ANTLR start "rule__Atom__Group_15__1__Impl"
    // InternalOpenCypherParser.g:17637:1: rule__Atom__Group_15__1__Impl : ( ALL ) ;
    public final void rule__Atom__Group_15__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17641:1: ( ( ALL ) )
            // InternalOpenCypherParser.g:17642:1: ( ALL )
            {
            // InternalOpenCypherParser.g:17642:1: ( ALL )
            // InternalOpenCypherParser.g:17643:2: ALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getALLKeyword_15_1()); 
            }
            match(input,ALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getALLKeyword_15_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__1__Impl"


    // $ANTLR start "rule__Atom__Group_15__2"
    // InternalOpenCypherParser.g:17652:1: rule__Atom__Group_15__2 : rule__Atom__Group_15__2__Impl rule__Atom__Group_15__3 ;
    public final void rule__Atom__Group_15__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17656:1: ( rule__Atom__Group_15__2__Impl rule__Atom__Group_15__3 )
            // InternalOpenCypherParser.g:17657:2: rule__Atom__Group_15__2__Impl rule__Atom__Group_15__3
            {
            pushFollow(FOLLOW_9);
            rule__Atom__Group_15__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_15__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__2"


    // $ANTLR start "rule__Atom__Group_15__2__Impl"
    // InternalOpenCypherParser.g:17664:1: rule__Atom__Group_15__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_15__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17668:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17669:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17669:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17670:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_15_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_15_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__2__Impl"


    // $ANTLR start "rule__Atom__Group_15__3"
    // InternalOpenCypherParser.g:17679:1: rule__Atom__Group_15__3 : rule__Atom__Group_15__3__Impl rule__Atom__Group_15__4 ;
    public final void rule__Atom__Group_15__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17683:1: ( rule__Atom__Group_15__3__Impl rule__Atom__Group_15__4 )
            // InternalOpenCypherParser.g:17684:2: rule__Atom__Group_15__3__Impl rule__Atom__Group_15__4
            {
            pushFollow(FOLLOW_24);
            rule__Atom__Group_15__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_15__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__3"


    // $ANTLR start "rule__Atom__Group_15__3__Impl"
    // InternalOpenCypherParser.g:17691:1: rule__Atom__Group_15__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_15_3 ) ) ;
    public final void rule__Atom__Group_15__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17695:1: ( ( ( rule__Atom__FilterExpressionAssignment_15_3 ) ) )
            // InternalOpenCypherParser.g:17696:1: ( ( rule__Atom__FilterExpressionAssignment_15_3 ) )
            {
            // InternalOpenCypherParser.g:17696:1: ( ( rule__Atom__FilterExpressionAssignment_15_3 ) )
            // InternalOpenCypherParser.g:17697:2: ( rule__Atom__FilterExpressionAssignment_15_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_15_3()); 
            }
            // InternalOpenCypherParser.g:17698:2: ( rule__Atom__FilterExpressionAssignment_15_3 )
            // InternalOpenCypherParser.g:17698:3: rule__Atom__FilterExpressionAssignment_15_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_15_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_15_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__3__Impl"


    // $ANTLR start "rule__Atom__Group_15__4"
    // InternalOpenCypherParser.g:17706:1: rule__Atom__Group_15__4 : rule__Atom__Group_15__4__Impl ;
    public final void rule__Atom__Group_15__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17710:1: ( rule__Atom__Group_15__4__Impl )
            // InternalOpenCypherParser.g:17711:2: rule__Atom__Group_15__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_15__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__4"


    // $ANTLR start "rule__Atom__Group_15__4__Impl"
    // InternalOpenCypherParser.g:17717:1: rule__Atom__Group_15__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_15__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17721:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17722:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17722:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17723:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_15_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_15_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_15__4__Impl"


    // $ANTLR start "rule__Atom__Group_16__0"
    // InternalOpenCypherParser.g:17733:1: rule__Atom__Group_16__0 : rule__Atom__Group_16__0__Impl rule__Atom__Group_16__1 ;
    public final void rule__Atom__Group_16__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17737:1: ( rule__Atom__Group_16__0__Impl rule__Atom__Group_16__1 )
            // InternalOpenCypherParser.g:17738:2: rule__Atom__Group_16__0__Impl rule__Atom__Group_16__1
            {
            pushFollow(FOLLOW_117);
            rule__Atom__Group_16__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_16__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__0"


    // $ANTLR start "rule__Atom__Group_16__0__Impl"
    // InternalOpenCypherParser.g:17745:1: rule__Atom__Group_16__0__Impl : ( () ) ;
    public final void rule__Atom__Group_16__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17749:1: ( ( () ) )
            // InternalOpenCypherParser.g:17750:1: ( () )
            {
            // InternalOpenCypherParser.g:17750:1: ( () )
            // InternalOpenCypherParser.g:17751:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getAnyAction_16_0()); 
            }
            // InternalOpenCypherParser.g:17752:2: ()
            // InternalOpenCypherParser.g:17752:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getAnyAction_16_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__0__Impl"


    // $ANTLR start "rule__Atom__Group_16__1"
    // InternalOpenCypherParser.g:17760:1: rule__Atom__Group_16__1 : rule__Atom__Group_16__1__Impl rule__Atom__Group_16__2 ;
    public final void rule__Atom__Group_16__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17764:1: ( rule__Atom__Group_16__1__Impl rule__Atom__Group_16__2 )
            // InternalOpenCypherParser.g:17765:2: rule__Atom__Group_16__1__Impl rule__Atom__Group_16__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_16__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_16__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__1"


    // $ANTLR start "rule__Atom__Group_16__1__Impl"
    // InternalOpenCypherParser.g:17772:1: rule__Atom__Group_16__1__Impl : ( ANY ) ;
    public final void rule__Atom__Group_16__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17776:1: ( ( ANY ) )
            // InternalOpenCypherParser.g:17777:1: ( ANY )
            {
            // InternalOpenCypherParser.g:17777:1: ( ANY )
            // InternalOpenCypherParser.g:17778:2: ANY
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getANYKeyword_16_1()); 
            }
            match(input,ANY,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getANYKeyword_16_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__1__Impl"


    // $ANTLR start "rule__Atom__Group_16__2"
    // InternalOpenCypherParser.g:17787:1: rule__Atom__Group_16__2 : rule__Atom__Group_16__2__Impl rule__Atom__Group_16__3 ;
    public final void rule__Atom__Group_16__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17791:1: ( rule__Atom__Group_16__2__Impl rule__Atom__Group_16__3 )
            // InternalOpenCypherParser.g:17792:2: rule__Atom__Group_16__2__Impl rule__Atom__Group_16__3
            {
            pushFollow(FOLLOW_9);
            rule__Atom__Group_16__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_16__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__2"


    // $ANTLR start "rule__Atom__Group_16__2__Impl"
    // InternalOpenCypherParser.g:17799:1: rule__Atom__Group_16__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_16__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17803:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17804:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17804:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17805:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_16_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_16_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__2__Impl"


    // $ANTLR start "rule__Atom__Group_16__3"
    // InternalOpenCypherParser.g:17814:1: rule__Atom__Group_16__3 : rule__Atom__Group_16__3__Impl rule__Atom__Group_16__4 ;
    public final void rule__Atom__Group_16__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17818:1: ( rule__Atom__Group_16__3__Impl rule__Atom__Group_16__4 )
            // InternalOpenCypherParser.g:17819:2: rule__Atom__Group_16__3__Impl rule__Atom__Group_16__4
            {
            pushFollow(FOLLOW_24);
            rule__Atom__Group_16__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_16__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__3"


    // $ANTLR start "rule__Atom__Group_16__3__Impl"
    // InternalOpenCypherParser.g:17826:1: rule__Atom__Group_16__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_16_3 ) ) ;
    public final void rule__Atom__Group_16__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17830:1: ( ( ( rule__Atom__FilterExpressionAssignment_16_3 ) ) )
            // InternalOpenCypherParser.g:17831:1: ( ( rule__Atom__FilterExpressionAssignment_16_3 ) )
            {
            // InternalOpenCypherParser.g:17831:1: ( ( rule__Atom__FilterExpressionAssignment_16_3 ) )
            // InternalOpenCypherParser.g:17832:2: ( rule__Atom__FilterExpressionAssignment_16_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_16_3()); 
            }
            // InternalOpenCypherParser.g:17833:2: ( rule__Atom__FilterExpressionAssignment_16_3 )
            // InternalOpenCypherParser.g:17833:3: rule__Atom__FilterExpressionAssignment_16_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_16_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_16_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__3__Impl"


    // $ANTLR start "rule__Atom__Group_16__4"
    // InternalOpenCypherParser.g:17841:1: rule__Atom__Group_16__4 : rule__Atom__Group_16__4__Impl ;
    public final void rule__Atom__Group_16__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17845:1: ( rule__Atom__Group_16__4__Impl )
            // InternalOpenCypherParser.g:17846:2: rule__Atom__Group_16__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_16__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__4"


    // $ANTLR start "rule__Atom__Group_16__4__Impl"
    // InternalOpenCypherParser.g:17852:1: rule__Atom__Group_16__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_16__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17856:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17857:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17857:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17858:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_16_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_16_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_16__4__Impl"


    // $ANTLR start "rule__Atom__Group_17__0"
    // InternalOpenCypherParser.g:17868:1: rule__Atom__Group_17__0 : rule__Atom__Group_17__0__Impl rule__Atom__Group_17__1 ;
    public final void rule__Atom__Group_17__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17872:1: ( rule__Atom__Group_17__0__Impl rule__Atom__Group_17__1 )
            // InternalOpenCypherParser.g:17873:2: rule__Atom__Group_17__0__Impl rule__Atom__Group_17__1
            {
            pushFollow(FOLLOW_118);
            rule__Atom__Group_17__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_17__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__0"


    // $ANTLR start "rule__Atom__Group_17__0__Impl"
    // InternalOpenCypherParser.g:17880:1: rule__Atom__Group_17__0__Impl : ( () ) ;
    public final void rule__Atom__Group_17__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17884:1: ( ( () ) )
            // InternalOpenCypherParser.g:17885:1: ( () )
            {
            // InternalOpenCypherParser.g:17885:1: ( () )
            // InternalOpenCypherParser.g:17886:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNoneAction_17_0()); 
            }
            // InternalOpenCypherParser.g:17887:2: ()
            // InternalOpenCypherParser.g:17887:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNoneAction_17_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__0__Impl"


    // $ANTLR start "rule__Atom__Group_17__1"
    // InternalOpenCypherParser.g:17895:1: rule__Atom__Group_17__1 : rule__Atom__Group_17__1__Impl rule__Atom__Group_17__2 ;
    public final void rule__Atom__Group_17__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17899:1: ( rule__Atom__Group_17__1__Impl rule__Atom__Group_17__2 )
            // InternalOpenCypherParser.g:17900:2: rule__Atom__Group_17__1__Impl rule__Atom__Group_17__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_17__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_17__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__1"


    // $ANTLR start "rule__Atom__Group_17__1__Impl"
    // InternalOpenCypherParser.g:17907:1: rule__Atom__Group_17__1__Impl : ( NONE ) ;
    public final void rule__Atom__Group_17__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17911:1: ( ( NONE ) )
            // InternalOpenCypherParser.g:17912:1: ( NONE )
            {
            // InternalOpenCypherParser.g:17912:1: ( NONE )
            // InternalOpenCypherParser.g:17913:2: NONE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getNONEKeyword_17_1()); 
            }
            match(input,NONE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getNONEKeyword_17_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__1__Impl"


    // $ANTLR start "rule__Atom__Group_17__2"
    // InternalOpenCypherParser.g:17922:1: rule__Atom__Group_17__2 : rule__Atom__Group_17__2__Impl rule__Atom__Group_17__3 ;
    public final void rule__Atom__Group_17__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17926:1: ( rule__Atom__Group_17__2__Impl rule__Atom__Group_17__3 )
            // InternalOpenCypherParser.g:17927:2: rule__Atom__Group_17__2__Impl rule__Atom__Group_17__3
            {
            pushFollow(FOLLOW_9);
            rule__Atom__Group_17__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_17__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__2"


    // $ANTLR start "rule__Atom__Group_17__2__Impl"
    // InternalOpenCypherParser.g:17934:1: rule__Atom__Group_17__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_17__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17938:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:17939:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:17939:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:17940:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_17_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_17_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__2__Impl"


    // $ANTLR start "rule__Atom__Group_17__3"
    // InternalOpenCypherParser.g:17949:1: rule__Atom__Group_17__3 : rule__Atom__Group_17__3__Impl rule__Atom__Group_17__4 ;
    public final void rule__Atom__Group_17__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17953:1: ( rule__Atom__Group_17__3__Impl rule__Atom__Group_17__4 )
            // InternalOpenCypherParser.g:17954:2: rule__Atom__Group_17__3__Impl rule__Atom__Group_17__4
            {
            pushFollow(FOLLOW_24);
            rule__Atom__Group_17__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_17__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__3"


    // $ANTLR start "rule__Atom__Group_17__3__Impl"
    // InternalOpenCypherParser.g:17961:1: rule__Atom__Group_17__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_17_3 ) ) ;
    public final void rule__Atom__Group_17__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17965:1: ( ( ( rule__Atom__FilterExpressionAssignment_17_3 ) ) )
            // InternalOpenCypherParser.g:17966:1: ( ( rule__Atom__FilterExpressionAssignment_17_3 ) )
            {
            // InternalOpenCypherParser.g:17966:1: ( ( rule__Atom__FilterExpressionAssignment_17_3 ) )
            // InternalOpenCypherParser.g:17967:2: ( rule__Atom__FilterExpressionAssignment_17_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_17_3()); 
            }
            // InternalOpenCypherParser.g:17968:2: ( rule__Atom__FilterExpressionAssignment_17_3 )
            // InternalOpenCypherParser.g:17968:3: rule__Atom__FilterExpressionAssignment_17_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_17_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_17_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__3__Impl"


    // $ANTLR start "rule__Atom__Group_17__4"
    // InternalOpenCypherParser.g:17976:1: rule__Atom__Group_17__4 : rule__Atom__Group_17__4__Impl ;
    public final void rule__Atom__Group_17__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17980:1: ( rule__Atom__Group_17__4__Impl )
            // InternalOpenCypherParser.g:17981:2: rule__Atom__Group_17__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_17__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__4"


    // $ANTLR start "rule__Atom__Group_17__4__Impl"
    // InternalOpenCypherParser.g:17987:1: rule__Atom__Group_17__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_17__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:17991:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:17992:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:17992:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:17993:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_17_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_17_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_17__4__Impl"


    // $ANTLR start "rule__Atom__Group_18__0"
    // InternalOpenCypherParser.g:18003:1: rule__Atom__Group_18__0 : rule__Atom__Group_18__0__Impl rule__Atom__Group_18__1 ;
    public final void rule__Atom__Group_18__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18007:1: ( rule__Atom__Group_18__0__Impl rule__Atom__Group_18__1 )
            // InternalOpenCypherParser.g:18008:2: rule__Atom__Group_18__0__Impl rule__Atom__Group_18__1
            {
            pushFollow(FOLLOW_119);
            rule__Atom__Group_18__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__0"


    // $ANTLR start "rule__Atom__Group_18__0__Impl"
    // InternalOpenCypherParser.g:18015:1: rule__Atom__Group_18__0__Impl : ( () ) ;
    public final void rule__Atom__Group_18__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18019:1: ( ( () ) )
            // InternalOpenCypherParser.g:18020:1: ( () )
            {
            // InternalOpenCypherParser.g:18020:1: ( () )
            // InternalOpenCypherParser.g:18021:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getSingleAction_18_0()); 
            }
            // InternalOpenCypherParser.g:18022:2: ()
            // InternalOpenCypherParser.g:18022:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getSingleAction_18_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__0__Impl"


    // $ANTLR start "rule__Atom__Group_18__1"
    // InternalOpenCypherParser.g:18030:1: rule__Atom__Group_18__1 : rule__Atom__Group_18__1__Impl rule__Atom__Group_18__2 ;
    public final void rule__Atom__Group_18__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18034:1: ( rule__Atom__Group_18__1__Impl rule__Atom__Group_18__2 )
            // InternalOpenCypherParser.g:18035:2: rule__Atom__Group_18__1__Impl rule__Atom__Group_18__2
            {
            pushFollow(FOLLOW_23);
            rule__Atom__Group_18__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__1"


    // $ANTLR start "rule__Atom__Group_18__1__Impl"
    // InternalOpenCypherParser.g:18042:1: rule__Atom__Group_18__1__Impl : ( SINGLE ) ;
    public final void rule__Atom__Group_18__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18046:1: ( ( SINGLE ) )
            // InternalOpenCypherParser.g:18047:1: ( SINGLE )
            {
            // InternalOpenCypherParser.g:18047:1: ( SINGLE )
            // InternalOpenCypherParser.g:18048:2: SINGLE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getSINGLEKeyword_18_1()); 
            }
            match(input,SINGLE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getSINGLEKeyword_18_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__1__Impl"


    // $ANTLR start "rule__Atom__Group_18__2"
    // InternalOpenCypherParser.g:18057:1: rule__Atom__Group_18__2 : rule__Atom__Group_18__2__Impl rule__Atom__Group_18__3 ;
    public final void rule__Atom__Group_18__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18061:1: ( rule__Atom__Group_18__2__Impl rule__Atom__Group_18__3 )
            // InternalOpenCypherParser.g:18062:2: rule__Atom__Group_18__2__Impl rule__Atom__Group_18__3
            {
            pushFollow(FOLLOW_9);
            rule__Atom__Group_18__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__2"


    // $ANTLR start "rule__Atom__Group_18__2__Impl"
    // InternalOpenCypherParser.g:18069:1: rule__Atom__Group_18__2__Impl : ( LeftParenthesis ) ;
    public final void rule__Atom__Group_18__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18073:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18074:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18074:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18075:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_18_2()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_18_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__2__Impl"


    // $ANTLR start "rule__Atom__Group_18__3"
    // InternalOpenCypherParser.g:18084:1: rule__Atom__Group_18__3 : rule__Atom__Group_18__3__Impl rule__Atom__Group_18__4 ;
    public final void rule__Atom__Group_18__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18088:1: ( rule__Atom__Group_18__3__Impl rule__Atom__Group_18__4 )
            // InternalOpenCypherParser.g:18089:2: rule__Atom__Group_18__3__Impl rule__Atom__Group_18__4
            {
            pushFollow(FOLLOW_24);
            rule__Atom__Group_18__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__3"


    // $ANTLR start "rule__Atom__Group_18__3__Impl"
    // InternalOpenCypherParser.g:18096:1: rule__Atom__Group_18__3__Impl : ( ( rule__Atom__FilterExpressionAssignment_18_3 ) ) ;
    public final void rule__Atom__Group_18__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18100:1: ( ( ( rule__Atom__FilterExpressionAssignment_18_3 ) ) )
            // InternalOpenCypherParser.g:18101:1: ( ( rule__Atom__FilterExpressionAssignment_18_3 ) )
            {
            // InternalOpenCypherParser.g:18101:1: ( ( rule__Atom__FilterExpressionAssignment_18_3 ) )
            // InternalOpenCypherParser.g:18102:2: ( rule__Atom__FilterExpressionAssignment_18_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionAssignment_18_3()); 
            }
            // InternalOpenCypherParser.g:18103:2: ( rule__Atom__FilterExpressionAssignment_18_3 )
            // InternalOpenCypherParser.g:18103:3: rule__Atom__FilterExpressionAssignment_18_3
            {
            pushFollow(FOLLOW_2);
            rule__Atom__FilterExpressionAssignment_18_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionAssignment_18_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__3__Impl"


    // $ANTLR start "rule__Atom__Group_18__4"
    // InternalOpenCypherParser.g:18111:1: rule__Atom__Group_18__4 : rule__Atom__Group_18__4__Impl ;
    public final void rule__Atom__Group_18__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18115:1: ( rule__Atom__Group_18__4__Impl )
            // InternalOpenCypherParser.g:18116:2: rule__Atom__Group_18__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_18__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__4"


    // $ANTLR start "rule__Atom__Group_18__4__Impl"
    // InternalOpenCypherParser.g:18122:1: rule__Atom__Group_18__4__Impl : ( RightParenthesis ) ;
    public final void rule__Atom__Group_18__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18126:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18127:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18127:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18128:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_18_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_18_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_18__4__Impl"


    // $ANTLR start "rule__Atom__Group_23__0"
    // InternalOpenCypherParser.g:18138:1: rule__Atom__Group_23__0 : rule__Atom__Group_23__0__Impl rule__Atom__Group_23__1 ;
    public final void rule__Atom__Group_23__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18142:1: ( rule__Atom__Group_23__0__Impl rule__Atom__Group_23__1 )
            // InternalOpenCypherParser.g:18143:2: rule__Atom__Group_23__0__Impl rule__Atom__Group_23__1
            {
            pushFollow(FOLLOW_26);
            rule__Atom__Group_23__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Atom__Group_23__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_23__0"


    // $ANTLR start "rule__Atom__Group_23__0__Impl"
    // InternalOpenCypherParser.g:18150:1: rule__Atom__Group_23__0__Impl : ( () ) ;
    public final void rule__Atom__Group_23__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18154:1: ( ( () ) )
            // InternalOpenCypherParser.g:18155:1: ( () )
            {
            // InternalOpenCypherParser.g:18155:1: ( () )
            // InternalOpenCypherParser.g:18156:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefAction_23_0()); 
            }
            // InternalOpenCypherParser.g:18157:2: ()
            // InternalOpenCypherParser.g:18157:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefAction_23_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_23__0__Impl"


    // $ANTLR start "rule__Atom__Group_23__1"
    // InternalOpenCypherParser.g:18165:1: rule__Atom__Group_23__1 : rule__Atom__Group_23__1__Impl ;
    public final void rule__Atom__Group_23__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18169:1: ( rule__Atom__Group_23__1__Impl )
            // InternalOpenCypherParser.g:18170:2: rule__Atom__Group_23__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Atom__Group_23__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_23__1"


    // $ANTLR start "rule__Atom__Group_23__1__Impl"
    // InternalOpenCypherParser.g:18176:1: rule__Atom__Group_23__1__Impl : ( ( rule__Atom__VariableRefAssignment_23_1 ) ) ;
    public final void rule__Atom__Group_23__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18180:1: ( ( ( rule__Atom__VariableRefAssignment_23_1 ) ) )
            // InternalOpenCypherParser.g:18181:1: ( ( rule__Atom__VariableRefAssignment_23_1 ) )
            {
            // InternalOpenCypherParser.g:18181:1: ( ( rule__Atom__VariableRefAssignment_23_1 ) )
            // InternalOpenCypherParser.g:18182:2: ( rule__Atom__VariableRefAssignment_23_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefAssignment_23_1()); 
            }
            // InternalOpenCypherParser.g:18183:2: ( rule__Atom__VariableRefAssignment_23_1 )
            // InternalOpenCypherParser.g:18183:3: rule__Atom__VariableRefAssignment_23_1
            {
            pushFollow(FOLLOW_2);
            rule__Atom__VariableRefAssignment_23_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefAssignment_23_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__Group_23__1__Impl"


    // $ANTLR start "rule__Reduce__Group__0"
    // InternalOpenCypherParser.g:18192:1: rule__Reduce__Group__0 : rule__Reduce__Group__0__Impl rule__Reduce__Group__1 ;
    public final void rule__Reduce__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18196:1: ( rule__Reduce__Group__0__Impl rule__Reduce__Group__1 )
            // InternalOpenCypherParser.g:18197:2: rule__Reduce__Group__0__Impl rule__Reduce__Group__1
            {
            pushFollow(FOLLOW_23);
            rule__Reduce__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__0"


    // $ANTLR start "rule__Reduce__Group__0__Impl"
    // InternalOpenCypherParser.g:18204:1: rule__Reduce__Group__0__Impl : ( REDUCE ) ;
    public final void rule__Reduce__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18208:1: ( ( REDUCE ) )
            // InternalOpenCypherParser.g:18209:1: ( REDUCE )
            {
            // InternalOpenCypherParser.g:18209:1: ( REDUCE )
            // InternalOpenCypherParser.g:18210:2: REDUCE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getREDUCEKeyword_0()); 
            }
            match(input,REDUCE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getREDUCEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__0__Impl"


    // $ANTLR start "rule__Reduce__Group__1"
    // InternalOpenCypherParser.g:18219:1: rule__Reduce__Group__1 : rule__Reduce__Group__1__Impl rule__Reduce__Group__2 ;
    public final void rule__Reduce__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18223:1: ( rule__Reduce__Group__1__Impl rule__Reduce__Group__2 )
            // InternalOpenCypherParser.g:18224:2: rule__Reduce__Group__1__Impl rule__Reduce__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__Reduce__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__1"


    // $ANTLR start "rule__Reduce__Group__1__Impl"
    // InternalOpenCypherParser.g:18231:1: rule__Reduce__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__Reduce__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18235:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18236:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18236:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18237:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__1__Impl"


    // $ANTLR start "rule__Reduce__Group__2"
    // InternalOpenCypherParser.g:18246:1: rule__Reduce__Group__2 : rule__Reduce__Group__2__Impl rule__Reduce__Group__3 ;
    public final void rule__Reduce__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18250:1: ( rule__Reduce__Group__2__Impl rule__Reduce__Group__3 )
            // InternalOpenCypherParser.g:18251:2: rule__Reduce__Group__2__Impl rule__Reduce__Group__3
            {
            pushFollow(FOLLOW_8);
            rule__Reduce__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__2"


    // $ANTLR start "rule__Reduce__Group__2__Impl"
    // InternalOpenCypherParser.g:18258:1: rule__Reduce__Group__2__Impl : ( ( rule__Reduce__AccumulatorAssignment_2 ) ) ;
    public final void rule__Reduce__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18262:1: ( ( ( rule__Reduce__AccumulatorAssignment_2 ) ) )
            // InternalOpenCypherParser.g:18263:1: ( ( rule__Reduce__AccumulatorAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:18263:1: ( ( rule__Reduce__AccumulatorAssignment_2 ) )
            // InternalOpenCypherParser.g:18264:2: ( rule__Reduce__AccumulatorAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorAssignment_2()); 
            }
            // InternalOpenCypherParser.g:18265:2: ( rule__Reduce__AccumulatorAssignment_2 )
            // InternalOpenCypherParser.g:18265:3: rule__Reduce__AccumulatorAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__AccumulatorAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__2__Impl"


    // $ANTLR start "rule__Reduce__Group__3"
    // InternalOpenCypherParser.g:18273:1: rule__Reduce__Group__3 : rule__Reduce__Group__3__Impl rule__Reduce__Group__4 ;
    public final void rule__Reduce__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18277:1: ( rule__Reduce__Group__3__Impl rule__Reduce__Group__4 )
            // InternalOpenCypherParser.g:18278:2: rule__Reduce__Group__3__Impl rule__Reduce__Group__4
            {
            pushFollow(FOLLOW_36);
            rule__Reduce__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__3"


    // $ANTLR start "rule__Reduce__Group__3__Impl"
    // InternalOpenCypherParser.g:18285:1: rule__Reduce__Group__3__Impl : ( EqualsSign ) ;
    public final void rule__Reduce__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18289:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:18290:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:18290:1: ( EqualsSign )
            // InternalOpenCypherParser.g:18291:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getEqualsSignKeyword_3()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getEqualsSignKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__3__Impl"


    // $ANTLR start "rule__Reduce__Group__4"
    // InternalOpenCypherParser.g:18300:1: rule__Reduce__Group__4 : rule__Reduce__Group__4__Impl rule__Reduce__Group__5 ;
    public final void rule__Reduce__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18304:1: ( rule__Reduce__Group__4__Impl rule__Reduce__Group__5 )
            // InternalOpenCypherParser.g:18305:2: rule__Reduce__Group__4__Impl rule__Reduce__Group__5
            {
            pushFollow(FOLLOW_48);
            rule__Reduce__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__4"


    // $ANTLR start "rule__Reduce__Group__4__Impl"
    // InternalOpenCypherParser.g:18312:1: rule__Reduce__Group__4__Impl : ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) ) ;
    public final void rule__Reduce__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18316:1: ( ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) ) )
            // InternalOpenCypherParser.g:18317:1: ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) )
            {
            // InternalOpenCypherParser.g:18317:1: ( ( rule__Reduce__AccumulatorExpressionAssignment_4 ) )
            // InternalOpenCypherParser.g:18318:2: ( rule__Reduce__AccumulatorExpressionAssignment_4 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4()); 
            }
            // InternalOpenCypherParser.g:18319:2: ( rule__Reduce__AccumulatorExpressionAssignment_4 )
            // InternalOpenCypherParser.g:18319:3: rule__Reduce__AccumulatorExpressionAssignment_4
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__AccumulatorExpressionAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorExpressionAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__4__Impl"


    // $ANTLR start "rule__Reduce__Group__5"
    // InternalOpenCypherParser.g:18327:1: rule__Reduce__Group__5 : rule__Reduce__Group__5__Impl rule__Reduce__Group__6 ;
    public final void rule__Reduce__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18331:1: ( rule__Reduce__Group__5__Impl rule__Reduce__Group__6 )
            // InternalOpenCypherParser.g:18332:2: rule__Reduce__Group__5__Impl rule__Reduce__Group__6
            {
            pushFollow(FOLLOW_9);
            rule__Reduce__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__5"


    // $ANTLR start "rule__Reduce__Group__5__Impl"
    // InternalOpenCypherParser.g:18339:1: rule__Reduce__Group__5__Impl : ( Comma ) ;
    public final void rule__Reduce__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18343:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:18344:1: ( Comma )
            {
            // InternalOpenCypherParser.g:18344:1: ( Comma )
            // InternalOpenCypherParser.g:18345:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getCommaKeyword_5()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getCommaKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__5__Impl"


    // $ANTLR start "rule__Reduce__Group__6"
    // InternalOpenCypherParser.g:18354:1: rule__Reduce__Group__6 : rule__Reduce__Group__6__Impl rule__Reduce__Group__7 ;
    public final void rule__Reduce__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18358:1: ( rule__Reduce__Group__6__Impl rule__Reduce__Group__7 )
            // InternalOpenCypherParser.g:18359:2: rule__Reduce__Group__6__Impl rule__Reduce__Group__7
            {
            pushFollow(FOLLOW_53);
            rule__Reduce__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__6"


    // $ANTLR start "rule__Reduce__Group__6__Impl"
    // InternalOpenCypherParser.g:18366:1: rule__Reduce__Group__6__Impl : ( ( rule__Reduce__IdInCollAssignment_6 ) ) ;
    public final void rule__Reduce__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18370:1: ( ( ( rule__Reduce__IdInCollAssignment_6 ) ) )
            // InternalOpenCypherParser.g:18371:1: ( ( rule__Reduce__IdInCollAssignment_6 ) )
            {
            // InternalOpenCypherParser.g:18371:1: ( ( rule__Reduce__IdInCollAssignment_6 ) )
            // InternalOpenCypherParser.g:18372:2: ( rule__Reduce__IdInCollAssignment_6 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getIdInCollAssignment_6()); 
            }
            // InternalOpenCypherParser.g:18373:2: ( rule__Reduce__IdInCollAssignment_6 )
            // InternalOpenCypherParser.g:18373:3: rule__Reduce__IdInCollAssignment_6
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__IdInCollAssignment_6();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getIdInCollAssignment_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__6__Impl"


    // $ANTLR start "rule__Reduce__Group__7"
    // InternalOpenCypherParser.g:18381:1: rule__Reduce__Group__7 : rule__Reduce__Group__7__Impl rule__Reduce__Group__8 ;
    public final void rule__Reduce__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18385:1: ( rule__Reduce__Group__7__Impl rule__Reduce__Group__8 )
            // InternalOpenCypherParser.g:18386:2: rule__Reduce__Group__7__Impl rule__Reduce__Group__8
            {
            pushFollow(FOLLOW_36);
            rule__Reduce__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__7"


    // $ANTLR start "rule__Reduce__Group__7__Impl"
    // InternalOpenCypherParser.g:18393:1: rule__Reduce__Group__7__Impl : ( VerticalLine ) ;
    public final void rule__Reduce__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18397:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:18398:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:18398:1: ( VerticalLine )
            // InternalOpenCypherParser.g:18399:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getVerticalLineKeyword_7()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getVerticalLineKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__7__Impl"


    // $ANTLR start "rule__Reduce__Group__8"
    // InternalOpenCypherParser.g:18408:1: rule__Reduce__Group__8 : rule__Reduce__Group__8__Impl rule__Reduce__Group__9 ;
    public final void rule__Reduce__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18412:1: ( rule__Reduce__Group__8__Impl rule__Reduce__Group__9 )
            // InternalOpenCypherParser.g:18413:2: rule__Reduce__Group__8__Impl rule__Reduce__Group__9
            {
            pushFollow(FOLLOW_24);
            rule__Reduce__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__8"


    // $ANTLR start "rule__Reduce__Group__8__Impl"
    // InternalOpenCypherParser.g:18420:1: rule__Reduce__Group__8__Impl : ( ( rule__Reduce__ExpressionAssignment_8 ) ) ;
    public final void rule__Reduce__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18424:1: ( ( ( rule__Reduce__ExpressionAssignment_8 ) ) )
            // InternalOpenCypherParser.g:18425:1: ( ( rule__Reduce__ExpressionAssignment_8 ) )
            {
            // InternalOpenCypherParser.g:18425:1: ( ( rule__Reduce__ExpressionAssignment_8 ) )
            // InternalOpenCypherParser.g:18426:2: ( rule__Reduce__ExpressionAssignment_8 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getExpressionAssignment_8()); 
            }
            // InternalOpenCypherParser.g:18427:2: ( rule__Reduce__ExpressionAssignment_8 )
            // InternalOpenCypherParser.g:18427:3: rule__Reduce__ExpressionAssignment_8
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__ExpressionAssignment_8();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getExpressionAssignment_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__8__Impl"


    // $ANTLR start "rule__Reduce__Group__9"
    // InternalOpenCypherParser.g:18435:1: rule__Reduce__Group__9 : rule__Reduce__Group__9__Impl ;
    public final void rule__Reduce__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18439:1: ( rule__Reduce__Group__9__Impl )
            // InternalOpenCypherParser.g:18440:2: rule__Reduce__Group__9__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Reduce__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__9"


    // $ANTLR start "rule__Reduce__Group__9__Impl"
    // InternalOpenCypherParser.g:18446:1: rule__Reduce__Group__9__Impl : ( RightParenthesis ) ;
    public final void rule__Reduce__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18450:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18451:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18451:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18452:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getRightParenthesisKeyword_9()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getRightParenthesisKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__Group__9__Impl"


    // $ANTLR start "rule__ParenthesizedExpression__Group__0"
    // InternalOpenCypherParser.g:18462:1: rule__ParenthesizedExpression__Group__0 : rule__ParenthesizedExpression__Group__0__Impl rule__ParenthesizedExpression__Group__1 ;
    public final void rule__ParenthesizedExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18466:1: ( rule__ParenthesizedExpression__Group__0__Impl rule__ParenthesizedExpression__Group__1 )
            // InternalOpenCypherParser.g:18467:2: rule__ParenthesizedExpression__Group__0__Impl rule__ParenthesizedExpression__Group__1
            {
            pushFollow(FOLLOW_36);
            rule__ParenthesizedExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__0"


    // $ANTLR start "rule__ParenthesizedExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:18474:1: rule__ParenthesizedExpression__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__ParenthesizedExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18478:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18479:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18479:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18480:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__0__Impl"


    // $ANTLR start "rule__ParenthesizedExpression__Group__1"
    // InternalOpenCypherParser.g:18489:1: rule__ParenthesizedExpression__Group__1 : rule__ParenthesizedExpression__Group__1__Impl rule__ParenthesizedExpression__Group__2 ;
    public final void rule__ParenthesizedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18493:1: ( rule__ParenthesizedExpression__Group__1__Impl rule__ParenthesizedExpression__Group__2 )
            // InternalOpenCypherParser.g:18494:2: rule__ParenthesizedExpression__Group__1__Impl rule__ParenthesizedExpression__Group__2
            {
            pushFollow(FOLLOW_24);
            rule__ParenthesizedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__1"


    // $ANTLR start "rule__ParenthesizedExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:18501:1: rule__ParenthesizedExpression__Group__1__Impl : ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) ) ;
    public final void rule__ParenthesizedExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18505:1: ( ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:18506:1: ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:18506:1: ( ( rule__ParenthesizedExpression__ExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:18507:2: ( rule__ParenthesizedExpression__ExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:18508:2: ( rule__ParenthesizedExpression__ExpressionAssignment_1 )
            // InternalOpenCypherParser.g:18508:3: rule__ParenthesizedExpression__ExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__1__Impl"


    // $ANTLR start "rule__ParenthesizedExpression__Group__2"
    // InternalOpenCypherParser.g:18516:1: rule__ParenthesizedExpression__Group__2 : rule__ParenthesizedExpression__Group__2__Impl ;
    public final void rule__ParenthesizedExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18520:1: ( rule__ParenthesizedExpression__Group__2__Impl )
            // InternalOpenCypherParser.g:18521:2: rule__ParenthesizedExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ParenthesizedExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__2"


    // $ANTLR start "rule__ParenthesizedExpression__Group__2__Impl"
    // InternalOpenCypherParser.g:18527:1: rule__ParenthesizedExpression__Group__2__Impl : ( RightParenthesis ) ;
    public final void rule__ParenthesizedExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18531:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18532:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18532:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18533:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__Group__2__Impl"


    // $ANTLR start "rule__RelationshipsPattern__Group__0"
    // InternalOpenCypherParser.g:18543:1: rule__RelationshipsPattern__Group__0 : rule__RelationshipsPattern__Group__0__Impl rule__RelationshipsPattern__Group__1 ;
    public final void rule__RelationshipsPattern__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18547:1: ( rule__RelationshipsPattern__Group__0__Impl rule__RelationshipsPattern__Group__1 )
            // InternalOpenCypherParser.g:18548:2: rule__RelationshipsPattern__Group__0__Impl rule__RelationshipsPattern__Group__1
            {
            pushFollow(FOLLOW_30);
            rule__RelationshipsPattern__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__0"


    // $ANTLR start "rule__RelationshipsPattern__Group__0__Impl"
    // InternalOpenCypherParser.g:18555:1: rule__RelationshipsPattern__Group__0__Impl : ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) ) ;
    public final void rule__RelationshipsPattern__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18559:1: ( ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) ) )
            // InternalOpenCypherParser.g:18560:1: ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:18560:1: ( ( rule__RelationshipsPattern__NodePatternAssignment_0 ) )
            // InternalOpenCypherParser.g:18561:2: ( rule__RelationshipsPattern__NodePatternAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0()); 
            }
            // InternalOpenCypherParser.g:18562:2: ( rule__RelationshipsPattern__NodePatternAssignment_0 )
            // InternalOpenCypherParser.g:18562:3: rule__RelationshipsPattern__NodePatternAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__NodePatternAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getNodePatternAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__0__Impl"


    // $ANTLR start "rule__RelationshipsPattern__Group__1"
    // InternalOpenCypherParser.g:18570:1: rule__RelationshipsPattern__Group__1 : rule__RelationshipsPattern__Group__1__Impl ;
    public final void rule__RelationshipsPattern__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18574:1: ( rule__RelationshipsPattern__Group__1__Impl )
            // InternalOpenCypherParser.g:18575:2: rule__RelationshipsPattern__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__RelationshipsPattern__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__1"


    // $ANTLR start "rule__RelationshipsPattern__Group__1__Impl"
    // InternalOpenCypherParser.g:18581:1: rule__RelationshipsPattern__Group__1__Impl : ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) ) ;
    public final void rule__RelationshipsPattern__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18585:1: ( ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) ) )
            // InternalOpenCypherParser.g:18586:1: ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) )
            {
            // InternalOpenCypherParser.g:18586:1: ( ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* ) )
            // InternalOpenCypherParser.g:18587:2: ( ( rule__RelationshipsPattern__ChainAssignment_1 ) ) ( ( rule__RelationshipsPattern__ChainAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:18587:2: ( ( rule__RelationshipsPattern__ChainAssignment_1 ) )
            // InternalOpenCypherParser.g:18588:3: ( rule__RelationshipsPattern__ChainAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }
            // InternalOpenCypherParser.g:18589:3: ( rule__RelationshipsPattern__ChainAssignment_1 )
            // InternalOpenCypherParser.g:18589:4: rule__RelationshipsPattern__ChainAssignment_1
            {
            pushFollow(FOLLOW_74);
            rule__RelationshipsPattern__ChainAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }

            }

            // InternalOpenCypherParser.g:18592:2: ( ( rule__RelationshipsPattern__ChainAssignment_1 )* )
            // InternalOpenCypherParser.g:18593:3: ( rule__RelationshipsPattern__ChainAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }
            // InternalOpenCypherParser.g:18594:3: ( rule__RelationshipsPattern__ChainAssignment_1 )*
            loop122:
            do {
                int alt122=2;
                alt122 = dfa122.predict(input);
                switch (alt122) {
            	case 1 :
            	    // InternalOpenCypherParser.g:18594:4: rule__RelationshipsPattern__ChainAssignment_1
            	    {
            	    pushFollow(FOLLOW_74);
            	    rule__RelationshipsPattern__ChainAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getChainAssignment_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__Group__1__Impl"


    // $ANTLR start "rule__FilterExpression__Group__0"
    // InternalOpenCypherParser.g:18604:1: rule__FilterExpression__Group__0 : rule__FilterExpression__Group__0__Impl rule__FilterExpression__Group__1 ;
    public final void rule__FilterExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18608:1: ( rule__FilterExpression__Group__0__Impl rule__FilterExpression__Group__1 )
            // InternalOpenCypherParser.g:18609:2: rule__FilterExpression__Group__0__Impl rule__FilterExpression__Group__1
            {
            pushFollow(FOLLOW_57);
            rule__FilterExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FilterExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__0"


    // $ANTLR start "rule__FilterExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:18616:1: rule__FilterExpression__Group__0__Impl : ( ( rule__FilterExpression__IdInCollAssignment_0 ) ) ;
    public final void rule__FilterExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18620:1: ( ( ( rule__FilterExpression__IdInCollAssignment_0 ) ) )
            // InternalOpenCypherParser.g:18621:1: ( ( rule__FilterExpression__IdInCollAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:18621:1: ( ( rule__FilterExpression__IdInCollAssignment_0 ) )
            // InternalOpenCypherParser.g:18622:2: ( rule__FilterExpression__IdInCollAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0()); 
            }
            // InternalOpenCypherParser.g:18623:2: ( rule__FilterExpression__IdInCollAssignment_0 )
            // InternalOpenCypherParser.g:18623:3: rule__FilterExpression__IdInCollAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__FilterExpression__IdInCollAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getIdInCollAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__0__Impl"


    // $ANTLR start "rule__FilterExpression__Group__1"
    // InternalOpenCypherParser.g:18631:1: rule__FilterExpression__Group__1 : rule__FilterExpression__Group__1__Impl ;
    public final void rule__FilterExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18635:1: ( rule__FilterExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:18636:2: rule__FilterExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FilterExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__1"


    // $ANTLR start "rule__FilterExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:18642:1: rule__FilterExpression__Group__1__Impl : ( ( rule__FilterExpression__WhereAssignment_1 )? ) ;
    public final void rule__FilterExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18646:1: ( ( ( rule__FilterExpression__WhereAssignment_1 )? ) )
            // InternalOpenCypherParser.g:18647:1: ( ( rule__FilterExpression__WhereAssignment_1 )? )
            {
            // InternalOpenCypherParser.g:18647:1: ( ( rule__FilterExpression__WhereAssignment_1 )? )
            // InternalOpenCypherParser.g:18648:2: ( rule__FilterExpression__WhereAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1()); 
            }
            // InternalOpenCypherParser.g:18649:2: ( rule__FilterExpression__WhereAssignment_1 )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==WHERE) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // InternalOpenCypherParser.g:18649:3: rule__FilterExpression__WhereAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__FilterExpression__WhereAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getWhereAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__Group__1__Impl"


    // $ANTLR start "rule__IdInColl__Group__0"
    // InternalOpenCypherParser.g:18658:1: rule__IdInColl__Group__0 : rule__IdInColl__Group__0__Impl rule__IdInColl__Group__1 ;
    public final void rule__IdInColl__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18662:1: ( rule__IdInColl__Group__0__Impl rule__IdInColl__Group__1 )
            // InternalOpenCypherParser.g:18663:2: rule__IdInColl__Group__0__Impl rule__IdInColl__Group__1
            {
            pushFollow(FOLLOW_52);
            rule__IdInColl__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__0"


    // $ANTLR start "rule__IdInColl__Group__0__Impl"
    // InternalOpenCypherParser.g:18670:1: rule__IdInColl__Group__0__Impl : ( ( rule__IdInColl__VariableAssignment_0 ) ) ;
    public final void rule__IdInColl__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18674:1: ( ( ( rule__IdInColl__VariableAssignment_0 ) ) )
            // InternalOpenCypherParser.g:18675:1: ( ( rule__IdInColl__VariableAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:18675:1: ( ( rule__IdInColl__VariableAssignment_0 ) )
            // InternalOpenCypherParser.g:18676:2: ( rule__IdInColl__VariableAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getVariableAssignment_0()); 
            }
            // InternalOpenCypherParser.g:18677:2: ( rule__IdInColl__VariableAssignment_0 )
            // InternalOpenCypherParser.g:18677:3: rule__IdInColl__VariableAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__VariableAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getVariableAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__0__Impl"


    // $ANTLR start "rule__IdInColl__Group__1"
    // InternalOpenCypherParser.g:18685:1: rule__IdInColl__Group__1 : rule__IdInColl__Group__1__Impl rule__IdInColl__Group__2 ;
    public final void rule__IdInColl__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18689:1: ( rule__IdInColl__Group__1__Impl rule__IdInColl__Group__2 )
            // InternalOpenCypherParser.g:18690:2: rule__IdInColl__Group__1__Impl rule__IdInColl__Group__2
            {
            pushFollow(FOLLOW_36);
            rule__IdInColl__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__1"


    // $ANTLR start "rule__IdInColl__Group__1__Impl"
    // InternalOpenCypherParser.g:18697:1: rule__IdInColl__Group__1__Impl : ( IN ) ;
    public final void rule__IdInColl__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18701:1: ( ( IN ) )
            // InternalOpenCypherParser.g:18702:1: ( IN )
            {
            // InternalOpenCypherParser.g:18702:1: ( IN )
            // InternalOpenCypherParser.g:18703:2: IN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getINKeyword_1()); 
            }
            match(input,IN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getINKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__1__Impl"


    // $ANTLR start "rule__IdInColl__Group__2"
    // InternalOpenCypherParser.g:18712:1: rule__IdInColl__Group__2 : rule__IdInColl__Group__2__Impl ;
    public final void rule__IdInColl__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18716:1: ( rule__IdInColl__Group__2__Impl )
            // InternalOpenCypherParser.g:18717:2: rule__IdInColl__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__2"


    // $ANTLR start "rule__IdInColl__Group__2__Impl"
    // InternalOpenCypherParser.g:18723:1: rule__IdInColl__Group__2__Impl : ( ( rule__IdInColl__ExpressionAssignment_2 ) ) ;
    public final void rule__IdInColl__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18727:1: ( ( ( rule__IdInColl__ExpressionAssignment_2 ) ) )
            // InternalOpenCypherParser.g:18728:1: ( ( rule__IdInColl__ExpressionAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:18728:1: ( ( rule__IdInColl__ExpressionAssignment_2 ) )
            // InternalOpenCypherParser.g:18729:2: ( rule__IdInColl__ExpressionAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getExpressionAssignment_2()); 
            }
            // InternalOpenCypherParser.g:18730:2: ( rule__IdInColl__ExpressionAssignment_2 )
            // InternalOpenCypherParser.g:18730:3: rule__IdInColl__ExpressionAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__IdInColl__ExpressionAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getExpressionAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__Group__2__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__0"
    // InternalOpenCypherParser.g:18739:1: rule__FunctionInvocation__Group__0 : rule__FunctionInvocation__Group__0__Impl rule__FunctionInvocation__Group__1 ;
    public final void rule__FunctionInvocation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18743:1: ( rule__FunctionInvocation__Group__0__Impl rule__FunctionInvocation__Group__1 )
            // InternalOpenCypherParser.g:18744:2: rule__FunctionInvocation__Group__0__Impl rule__FunctionInvocation__Group__1
            {
            pushFollow(FOLLOW_23);
            rule__FunctionInvocation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__0"


    // $ANTLR start "rule__FunctionInvocation__Group__0__Impl"
    // InternalOpenCypherParser.g:18751:1: rule__FunctionInvocation__Group__0__Impl : ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) ) ;
    public final void rule__FunctionInvocation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18755:1: ( ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) ) )
            // InternalOpenCypherParser.g:18756:1: ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:18756:1: ( ( rule__FunctionInvocation__FunctionNameAssignment_0 ) )
            // InternalOpenCypherParser.g:18757:2: ( rule__FunctionInvocation__FunctionNameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); 
            }
            // InternalOpenCypherParser.g:18758:2: ( rule__FunctionInvocation__FunctionNameAssignment_0 )
            // InternalOpenCypherParser.g:18758:3: rule__FunctionInvocation__FunctionNameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__FunctionNameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getFunctionNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__0__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__1"
    // InternalOpenCypherParser.g:18766:1: rule__FunctionInvocation__Group__1 : rule__FunctionInvocation__Group__1__Impl rule__FunctionInvocation__Group__2 ;
    public final void rule__FunctionInvocation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18770:1: ( rule__FunctionInvocation__Group__1__Impl rule__FunctionInvocation__Group__2 )
            // InternalOpenCypherParser.g:18771:2: rule__FunctionInvocation__Group__1__Impl rule__FunctionInvocation__Group__2
            {
            pushFollow(FOLLOW_120);
            rule__FunctionInvocation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__1"


    // $ANTLR start "rule__FunctionInvocation__Group__1__Impl"
    // InternalOpenCypherParser.g:18778:1: rule__FunctionInvocation__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__FunctionInvocation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18782:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:18783:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:18783:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:18784:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__1__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__2"
    // InternalOpenCypherParser.g:18793:1: rule__FunctionInvocation__Group__2 : rule__FunctionInvocation__Group__2__Impl rule__FunctionInvocation__Group__3 ;
    public final void rule__FunctionInvocation__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18797:1: ( rule__FunctionInvocation__Group__2__Impl rule__FunctionInvocation__Group__3 )
            // InternalOpenCypherParser.g:18798:2: rule__FunctionInvocation__Group__2__Impl rule__FunctionInvocation__Group__3
            {
            pushFollow(FOLLOW_120);
            rule__FunctionInvocation__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__2"


    // $ANTLR start "rule__FunctionInvocation__Group__2__Impl"
    // InternalOpenCypherParser.g:18805:1: rule__FunctionInvocation__Group__2__Impl : ( ( rule__FunctionInvocation__DistinctAssignment_2 )? ) ;
    public final void rule__FunctionInvocation__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18809:1: ( ( ( rule__FunctionInvocation__DistinctAssignment_2 )? ) )
            // InternalOpenCypherParser.g:18810:1: ( ( rule__FunctionInvocation__DistinctAssignment_2 )? )
            {
            // InternalOpenCypherParser.g:18810:1: ( ( rule__FunctionInvocation__DistinctAssignment_2 )? )
            // InternalOpenCypherParser.g:18811:2: ( rule__FunctionInvocation__DistinctAssignment_2 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2()); 
            }
            // InternalOpenCypherParser.g:18812:2: ( rule__FunctionInvocation__DistinctAssignment_2 )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==DISTINCT) ) {
                int LA124_1 = input.LA(2);

                if ( (synpred258_InternalOpenCypherParser()) ) {
                    alt124=1;
                }
            }
            switch (alt124) {
                case 1 :
                    // InternalOpenCypherParser.g:18812:3: rule__FunctionInvocation__DistinctAssignment_2
                    {
                    pushFollow(FOLLOW_2);
                    rule__FunctionInvocation__DistinctAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getDistinctAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__2__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__3"
    // InternalOpenCypherParser.g:18820:1: rule__FunctionInvocation__Group__3 : rule__FunctionInvocation__Group__3__Impl rule__FunctionInvocation__Group__4 ;
    public final void rule__FunctionInvocation__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18824:1: ( rule__FunctionInvocation__Group__3__Impl rule__FunctionInvocation__Group__4 )
            // InternalOpenCypherParser.g:18825:2: rule__FunctionInvocation__Group__3__Impl rule__FunctionInvocation__Group__4
            {
            pushFollow(FOLLOW_120);
            rule__FunctionInvocation__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__3"


    // $ANTLR start "rule__FunctionInvocation__Group__3__Impl"
    // InternalOpenCypherParser.g:18832:1: rule__FunctionInvocation__Group__3__Impl : ( ( rule__FunctionInvocation__Group_3__0 )? ) ;
    public final void rule__FunctionInvocation__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18836:1: ( ( ( rule__FunctionInvocation__Group_3__0 )? ) )
            // InternalOpenCypherParser.g:18837:1: ( ( rule__FunctionInvocation__Group_3__0 )? )
            {
            // InternalOpenCypherParser.g:18837:1: ( ( rule__FunctionInvocation__Group_3__0 )? )
            // InternalOpenCypherParser.g:18838:2: ( rule__FunctionInvocation__Group_3__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getGroup_3()); 
            }
            // InternalOpenCypherParser.g:18839:2: ( rule__FunctionInvocation__Group_3__0 )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( ((LA125_0>=ALLSHORTESTPATHS && LA125_0<=WHERE)||(LA125_0>=CASE && LA125_0<=XOR)||(LA125_0>=AS && LA125_0<=OR)||LA125_0==DollarSign||LA125_0==LeftParenthesis||LA125_0==PlusSign||LA125_0==HyphenMinus||LA125_0==LeftSquareBracket||LA125_0==LeftCurlyBracket||LA125_0==RULE_ID||(LA125_0>=RULE_STRING_LITERAL && LA125_0<=RULE_DECIMAL)) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // InternalOpenCypherParser.g:18839:3: rule__FunctionInvocation__Group_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__FunctionInvocation__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__3__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group__4"
    // InternalOpenCypherParser.g:18847:1: rule__FunctionInvocation__Group__4 : rule__FunctionInvocation__Group__4__Impl ;
    public final void rule__FunctionInvocation__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18851:1: ( rule__FunctionInvocation__Group__4__Impl )
            // InternalOpenCypherParser.g:18852:2: rule__FunctionInvocation__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__4"


    // $ANTLR start "rule__FunctionInvocation__Group__4__Impl"
    // InternalOpenCypherParser.g:18858:1: rule__FunctionInvocation__Group__4__Impl : ( RightParenthesis ) ;
    public final void rule__FunctionInvocation__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18862:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:18863:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:18863:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:18864:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getRightParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group__4__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3__0"
    // InternalOpenCypherParser.g:18874:1: rule__FunctionInvocation__Group_3__0 : rule__FunctionInvocation__Group_3__0__Impl rule__FunctionInvocation__Group_3__1 ;
    public final void rule__FunctionInvocation__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18878:1: ( rule__FunctionInvocation__Group_3__0__Impl rule__FunctionInvocation__Group_3__1 )
            // InternalOpenCypherParser.g:18879:2: rule__FunctionInvocation__Group_3__0__Impl rule__FunctionInvocation__Group_3__1
            {
            pushFollow(FOLLOW_48);
            rule__FunctionInvocation__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__0"


    // $ANTLR start "rule__FunctionInvocation__Group_3__0__Impl"
    // InternalOpenCypherParser.g:18886:1: rule__FunctionInvocation__Group_3__0__Impl : ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) ) ;
    public final void rule__FunctionInvocation__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18890:1: ( ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) ) )
            // InternalOpenCypherParser.g:18891:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) )
            {
            // InternalOpenCypherParser.g:18891:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_0 ) )
            // InternalOpenCypherParser.g:18892:2: ( rule__FunctionInvocation__ParameterAssignment_3_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0()); 
            }
            // InternalOpenCypherParser.g:18893:2: ( rule__FunctionInvocation__ParameterAssignment_3_0 )
            // InternalOpenCypherParser.g:18893:3: rule__FunctionInvocation__ParameterAssignment_3_0
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__ParameterAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__0__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3__1"
    // InternalOpenCypherParser.g:18901:1: rule__FunctionInvocation__Group_3__1 : rule__FunctionInvocation__Group_3__1__Impl ;
    public final void rule__FunctionInvocation__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18905:1: ( rule__FunctionInvocation__Group_3__1__Impl )
            // InternalOpenCypherParser.g:18906:2: rule__FunctionInvocation__Group_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__1"


    // $ANTLR start "rule__FunctionInvocation__Group_3__1__Impl"
    // InternalOpenCypherParser.g:18912:1: rule__FunctionInvocation__Group_3__1__Impl : ( ( rule__FunctionInvocation__Group_3_1__0 )* ) ;
    public final void rule__FunctionInvocation__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18916:1: ( ( ( rule__FunctionInvocation__Group_3_1__0 )* ) )
            // InternalOpenCypherParser.g:18917:1: ( ( rule__FunctionInvocation__Group_3_1__0 )* )
            {
            // InternalOpenCypherParser.g:18917:1: ( ( rule__FunctionInvocation__Group_3_1__0 )* )
            // InternalOpenCypherParser.g:18918:2: ( rule__FunctionInvocation__Group_3_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getGroup_3_1()); 
            }
            // InternalOpenCypherParser.g:18919:2: ( rule__FunctionInvocation__Group_3_1__0 )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==Comma) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // InternalOpenCypherParser.g:18919:3: rule__FunctionInvocation__Group_3_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__FunctionInvocation__Group_3_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getGroup_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3__1__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__0"
    // InternalOpenCypherParser.g:18928:1: rule__FunctionInvocation__Group_3_1__0 : rule__FunctionInvocation__Group_3_1__0__Impl rule__FunctionInvocation__Group_3_1__1 ;
    public final void rule__FunctionInvocation__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18932:1: ( rule__FunctionInvocation__Group_3_1__0__Impl rule__FunctionInvocation__Group_3_1__1 )
            // InternalOpenCypherParser.g:18933:2: rule__FunctionInvocation__Group_3_1__0__Impl rule__FunctionInvocation__Group_3_1__1
            {
            pushFollow(FOLLOW_36);
            rule__FunctionInvocation__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__0"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__0__Impl"
    // InternalOpenCypherParser.g:18940:1: rule__FunctionInvocation__Group_3_1__0__Impl : ( Comma ) ;
    public final void rule__FunctionInvocation__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18944:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:18945:1: ( Comma )
            {
            // InternalOpenCypherParser.g:18945:1: ( Comma )
            // InternalOpenCypherParser.g:18946:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getCommaKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__0__Impl"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__1"
    // InternalOpenCypherParser.g:18955:1: rule__FunctionInvocation__Group_3_1__1 : rule__FunctionInvocation__Group_3_1__1__Impl ;
    public final void rule__FunctionInvocation__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18959:1: ( rule__FunctionInvocation__Group_3_1__1__Impl )
            // InternalOpenCypherParser.g:18960:2: rule__FunctionInvocation__Group_3_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__1"


    // $ANTLR start "rule__FunctionInvocation__Group_3_1__1__Impl"
    // InternalOpenCypherParser.g:18966:1: rule__FunctionInvocation__Group_3_1__1__Impl : ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) ) ;
    public final void rule__FunctionInvocation__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18970:1: ( ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) ) )
            // InternalOpenCypherParser.g:18971:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) )
            {
            // InternalOpenCypherParser.g:18971:1: ( ( rule__FunctionInvocation__ParameterAssignment_3_1_1 ) )
            // InternalOpenCypherParser.g:18972:2: ( rule__FunctionInvocation__ParameterAssignment_3_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1()); 
            }
            // InternalOpenCypherParser.g:18973:2: ( rule__FunctionInvocation__ParameterAssignment_3_1_1 )
            // InternalOpenCypherParser.g:18973:3: rule__FunctionInvocation__ParameterAssignment_3_1_1
            {
            pushFollow(FOLLOW_2);
            rule__FunctionInvocation__ParameterAssignment_3_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterAssignment_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__Group_3_1__1__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__0"
    // InternalOpenCypherParser.g:18982:1: rule__ExplicitProcedureInvocation__Group__0 : rule__ExplicitProcedureInvocation__Group__0__Impl rule__ExplicitProcedureInvocation__Group__1 ;
    public final void rule__ExplicitProcedureInvocation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18986:1: ( rule__ExplicitProcedureInvocation__Group__0__Impl rule__ExplicitProcedureInvocation__Group__1 )
            // InternalOpenCypherParser.g:18987:2: rule__ExplicitProcedureInvocation__Group__0__Impl rule__ExplicitProcedureInvocation__Group__1
            {
            pushFollow(FOLLOW_23);
            rule__ExplicitProcedureInvocation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__0__Impl"
    // InternalOpenCypherParser.g:18994:1: rule__ExplicitProcedureInvocation__Group__0__Impl : ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) ) ;
    public final void rule__ExplicitProcedureInvocation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:18998:1: ( ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) ) )
            // InternalOpenCypherParser.g:18999:1: ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:18999:1: ( ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 ) )
            // InternalOpenCypherParser.g:19000:2: ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19001:2: ( rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 )
            // InternalOpenCypherParser.g:19001:3: rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__0__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__1"
    // InternalOpenCypherParser.g:19009:1: rule__ExplicitProcedureInvocation__Group__1 : rule__ExplicitProcedureInvocation__Group__1__Impl rule__ExplicitProcedureInvocation__Group__2 ;
    public final void rule__ExplicitProcedureInvocation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19013:1: ( rule__ExplicitProcedureInvocation__Group__1__Impl rule__ExplicitProcedureInvocation__Group__2 )
            // InternalOpenCypherParser.g:19014:2: rule__ExplicitProcedureInvocation__Group__1__Impl rule__ExplicitProcedureInvocation__Group__2
            {
            pushFollow(FOLLOW_120);
            rule__ExplicitProcedureInvocation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__1__Impl"
    // InternalOpenCypherParser.g:19021:1: rule__ExplicitProcedureInvocation__Group__1__Impl : ( LeftParenthesis ) ;
    public final void rule__ExplicitProcedureInvocation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19025:1: ( ( LeftParenthesis ) )
            // InternalOpenCypherParser.g:19026:1: ( LeftParenthesis )
            {
            // InternalOpenCypherParser.g:19026:1: ( LeftParenthesis )
            // InternalOpenCypherParser.g:19027:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__1__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__2"
    // InternalOpenCypherParser.g:19036:1: rule__ExplicitProcedureInvocation__Group__2 : rule__ExplicitProcedureInvocation__Group__2__Impl rule__ExplicitProcedureInvocation__Group__3 ;
    public final void rule__ExplicitProcedureInvocation__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19040:1: ( rule__ExplicitProcedureInvocation__Group__2__Impl rule__ExplicitProcedureInvocation__Group__3 )
            // InternalOpenCypherParser.g:19041:2: rule__ExplicitProcedureInvocation__Group__2__Impl rule__ExplicitProcedureInvocation__Group__3
            {
            pushFollow(FOLLOW_120);
            rule__ExplicitProcedureInvocation__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__2"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__2__Impl"
    // InternalOpenCypherParser.g:19048:1: rule__ExplicitProcedureInvocation__Group__2__Impl : ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? ) ;
    public final void rule__ExplicitProcedureInvocation__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19052:1: ( ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:19053:1: ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:19053:1: ( ( rule__ExplicitProcedureInvocation__Group_2__0 )? )
            // InternalOpenCypherParser.g:19054:2: ( rule__ExplicitProcedureInvocation__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:19055:2: ( rule__ExplicitProcedureInvocation__Group_2__0 )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=ALLSHORTESTPATHS && LA127_0<=WHERE)||(LA127_0>=CASE && LA127_0<=XOR)||(LA127_0>=AS && LA127_0<=OR)||LA127_0==DollarSign||LA127_0==LeftParenthesis||LA127_0==PlusSign||LA127_0==HyphenMinus||LA127_0==LeftSquareBracket||LA127_0==LeftCurlyBracket||LA127_0==RULE_ID||(LA127_0>=RULE_STRING_LITERAL && LA127_0<=RULE_DECIMAL)) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // InternalOpenCypherParser.g:19055:3: rule__ExplicitProcedureInvocation__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ExplicitProcedureInvocation__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__2__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__3"
    // InternalOpenCypherParser.g:19063:1: rule__ExplicitProcedureInvocation__Group__3 : rule__ExplicitProcedureInvocation__Group__3__Impl ;
    public final void rule__ExplicitProcedureInvocation__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19067:1: ( rule__ExplicitProcedureInvocation__Group__3__Impl )
            // InternalOpenCypherParser.g:19068:2: rule__ExplicitProcedureInvocation__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__3"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group__3__Impl"
    // InternalOpenCypherParser.g:19074:1: rule__ExplicitProcedureInvocation__Group__3__Impl : ( RightParenthesis ) ;
    public final void rule__ExplicitProcedureInvocation__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19078:1: ( ( RightParenthesis ) )
            // InternalOpenCypherParser.g:19079:1: ( RightParenthesis )
            {
            // InternalOpenCypherParser.g:19079:1: ( RightParenthesis )
            // InternalOpenCypherParser.g:19080:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group__3__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__0"
    // InternalOpenCypherParser.g:19090:1: rule__ExplicitProcedureInvocation__Group_2__0 : rule__ExplicitProcedureInvocation__Group_2__0__Impl rule__ExplicitProcedureInvocation__Group_2__1 ;
    public final void rule__ExplicitProcedureInvocation__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19094:1: ( rule__ExplicitProcedureInvocation__Group_2__0__Impl rule__ExplicitProcedureInvocation__Group_2__1 )
            // InternalOpenCypherParser.g:19095:2: rule__ExplicitProcedureInvocation__Group_2__0__Impl rule__ExplicitProcedureInvocation__Group_2__1
            {
            pushFollow(FOLLOW_48);
            rule__ExplicitProcedureInvocation__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__0__Impl"
    // InternalOpenCypherParser.g:19102:1: rule__ExplicitProcedureInvocation__Group_2__0__Impl : ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19106:1: ( ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:19107:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:19107:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 ) )
            // InternalOpenCypherParser.g:19108:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:19109:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 )
            // InternalOpenCypherParser.g:19109:3: rule__ExplicitProcedureInvocation__ParameterAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__ParameterAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__0__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__1"
    // InternalOpenCypherParser.g:19117:1: rule__ExplicitProcedureInvocation__Group_2__1 : rule__ExplicitProcedureInvocation__Group_2__1__Impl ;
    public final void rule__ExplicitProcedureInvocation__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19121:1: ( rule__ExplicitProcedureInvocation__Group_2__1__Impl )
            // InternalOpenCypherParser.g:19122:2: rule__ExplicitProcedureInvocation__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2__1__Impl"
    // InternalOpenCypherParser.g:19128:1: rule__ExplicitProcedureInvocation__Group_2__1__Impl : ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19132:1: ( ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* ) )
            // InternalOpenCypherParser.g:19133:1: ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* )
            {
            // InternalOpenCypherParser.g:19133:1: ( ( rule__ExplicitProcedureInvocation__Group_2_1__0 )* )
            // InternalOpenCypherParser.g:19134:2: ( rule__ExplicitProcedureInvocation__Group_2_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:19135:2: ( rule__ExplicitProcedureInvocation__Group_2_1__0 )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==Comma) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // InternalOpenCypherParser.g:19135:3: rule__ExplicitProcedureInvocation__Group_2_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__ExplicitProcedureInvocation__Group_2_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2__1__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__0"
    // InternalOpenCypherParser.g:19144:1: rule__ExplicitProcedureInvocation__Group_2_1__0 : rule__ExplicitProcedureInvocation__Group_2_1__0__Impl rule__ExplicitProcedureInvocation__Group_2_1__1 ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19148:1: ( rule__ExplicitProcedureInvocation__Group_2_1__0__Impl rule__ExplicitProcedureInvocation__Group_2_1__1 )
            // InternalOpenCypherParser.g:19149:2: rule__ExplicitProcedureInvocation__Group_2_1__0__Impl rule__ExplicitProcedureInvocation__Group_2_1__1
            {
            pushFollow(FOLLOW_36);
            rule__ExplicitProcedureInvocation__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:19156:1: rule__ExplicitProcedureInvocation__Group_2_1__0__Impl : ( Comma ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19160:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:19161:1: ( Comma )
            {
            // InternalOpenCypherParser.g:19161:1: ( Comma )
            // InternalOpenCypherParser.g:19162:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getCommaKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__0__Impl"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__1"
    // InternalOpenCypherParser.g:19171:1: rule__ExplicitProcedureInvocation__Group_2_1__1 : rule__ExplicitProcedureInvocation__Group_2_1__1__Impl ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19175:1: ( rule__ExplicitProcedureInvocation__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:19176:2: rule__ExplicitProcedureInvocation__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:19182:1: rule__ExplicitProcedureInvocation__Group_2_1__1__Impl : ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) ) ;
    public final void rule__ExplicitProcedureInvocation__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19186:1: ( ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) ) )
            // InternalOpenCypherParser.g:19187:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) )
            {
            // InternalOpenCypherParser.g:19187:1: ( ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 ) )
            // InternalOpenCypherParser.g:19188:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:19189:2: ( rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 )
            // InternalOpenCypherParser.g:19189:3: rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1
            {
            pushFollow(FOLLOW_2);
            rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__Group_2_1__1__Impl"


    // $ANTLR start "rule__ProcedureName__Group__0"
    // InternalOpenCypherParser.g:19198:1: rule__ProcedureName__Group__0 : rule__ProcedureName__Group__0__Impl rule__ProcedureName__Group__1 ;
    public final void rule__ProcedureName__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19202:1: ( rule__ProcedureName__Group__0__Impl rule__ProcedureName__Group__1 )
            // InternalOpenCypherParser.g:19203:2: rule__ProcedureName__Group__0__Impl rule__ProcedureName__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ProcedureName__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ProcedureName__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__0"


    // $ANTLR start "rule__ProcedureName__Group__0__Impl"
    // InternalOpenCypherParser.g:19210:1: rule__ProcedureName__Group__0__Impl : ( ( rule__ProcedureName__NamespaceAssignment_0 ) ) ;
    public final void rule__ProcedureName__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19214:1: ( ( ( rule__ProcedureName__NamespaceAssignment_0 ) ) )
            // InternalOpenCypherParser.g:19215:1: ( ( rule__ProcedureName__NamespaceAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:19215:1: ( ( rule__ProcedureName__NamespaceAssignment_0 ) )
            // InternalOpenCypherParser.g:19216:2: ( rule__ProcedureName__NamespaceAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0()); 
            }
            // InternalOpenCypherParser.g:19217:2: ( rule__ProcedureName__NamespaceAssignment_0 )
            // InternalOpenCypherParser.g:19217:3: rule__ProcedureName__NamespaceAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__NamespaceAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNamespaceAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__0__Impl"


    // $ANTLR start "rule__ProcedureName__Group__1"
    // InternalOpenCypherParser.g:19225:1: rule__ProcedureName__Group__1 : rule__ProcedureName__Group__1__Impl ;
    public final void rule__ProcedureName__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19229:1: ( rule__ProcedureName__Group__1__Impl )
            // InternalOpenCypherParser.g:19230:2: rule__ProcedureName__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__1"


    // $ANTLR start "rule__ProcedureName__Group__1__Impl"
    // InternalOpenCypherParser.g:19236:1: rule__ProcedureName__Group__1__Impl : ( ( rule__ProcedureName__NameAssignment_1 ) ) ;
    public final void rule__ProcedureName__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19240:1: ( ( ( rule__ProcedureName__NameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:19241:1: ( ( rule__ProcedureName__NameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:19241:1: ( ( rule__ProcedureName__NameAssignment_1 ) )
            // InternalOpenCypherParser.g:19242:2: ( rule__ProcedureName__NameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19243:2: ( rule__ProcedureName__NameAssignment_1 )
            // InternalOpenCypherParser.g:19243:3: rule__ProcedureName__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ProcedureName__NameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__Group__1__Impl"


    // $ANTLR start "rule__Namespace__Group__0"
    // InternalOpenCypherParser.g:19252:1: rule__Namespace__Group__0 : rule__Namespace__Group__0__Impl rule__Namespace__Group__1 ;
    public final void rule__Namespace__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19256:1: ( rule__Namespace__Group__0__Impl rule__Namespace__Group__1 )
            // InternalOpenCypherParser.g:19257:2: rule__Namespace__Group__0__Impl rule__Namespace__Group__1
            {
            pushFollow(FOLLOW_108);
            rule__Namespace__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Namespace__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__0"


    // $ANTLR start "rule__Namespace__Group__0__Impl"
    // InternalOpenCypherParser.g:19264:1: rule__Namespace__Group__0__Impl : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__Namespace__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19268:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:19269:1: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:19269:1: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:19270:2: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceAccess().getSYMBOLIC_NAME_XParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__0__Impl"


    // $ANTLR start "rule__Namespace__Group__1"
    // InternalOpenCypherParser.g:19279:1: rule__Namespace__Group__1 : rule__Namespace__Group__1__Impl ;
    public final void rule__Namespace__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19283:1: ( rule__Namespace__Group__1__Impl )
            // InternalOpenCypherParser.g:19284:2: rule__Namespace__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Namespace__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__1"


    // $ANTLR start "rule__Namespace__Group__1__Impl"
    // InternalOpenCypherParser.g:19290:1: rule__Namespace__Group__1__Impl : ( FullStop ) ;
    public final void rule__Namespace__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19294:1: ( ( FullStop ) )
            // InternalOpenCypherParser.g:19295:1: ( FullStop )
            {
            // InternalOpenCypherParser.g:19295:1: ( FullStop )
            // InternalOpenCypherParser.g:19296:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNamespaceAccess().getFullStopKeyword_1()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNamespaceAccess().getFullStopKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Namespace__Group__1__Impl"


    // $ANTLR start "rule__ListComprehension__Group__0"
    // InternalOpenCypherParser.g:19306:1: rule__ListComprehension__Group__0 : rule__ListComprehension__Group__0__Impl rule__ListComprehension__Group__1 ;
    public final void rule__ListComprehension__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19310:1: ( rule__ListComprehension__Group__0__Impl rule__ListComprehension__Group__1 )
            // InternalOpenCypherParser.g:19311:2: rule__ListComprehension__Group__0__Impl rule__ListComprehension__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__ListComprehension__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__0"


    // $ANTLR start "rule__ListComprehension__Group__0__Impl"
    // InternalOpenCypherParser.g:19318:1: rule__ListComprehension__Group__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__ListComprehension__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19322:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:19323:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:19323:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:19324:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__0__Impl"


    // $ANTLR start "rule__ListComprehension__Group__1"
    // InternalOpenCypherParser.g:19333:1: rule__ListComprehension__Group__1 : rule__ListComprehension__Group__1__Impl rule__ListComprehension__Group__2 ;
    public final void rule__ListComprehension__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19337:1: ( rule__ListComprehension__Group__1__Impl rule__ListComprehension__Group__2 )
            // InternalOpenCypherParser.g:19338:2: rule__ListComprehension__Group__1__Impl rule__ListComprehension__Group__2
            {
            pushFollow(FOLLOW_121);
            rule__ListComprehension__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__1"


    // $ANTLR start "rule__ListComprehension__Group__1__Impl"
    // InternalOpenCypherParser.g:19345:1: rule__ListComprehension__Group__1__Impl : ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) ) ;
    public final void rule__ListComprehension__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19349:1: ( ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) ) )
            // InternalOpenCypherParser.g:19350:1: ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:19350:1: ( ( rule__ListComprehension__FilterExpressionAssignment_1 ) )
            // InternalOpenCypherParser.g:19351:2: ( rule__ListComprehension__FilterExpressionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1()); 
            }
            // InternalOpenCypherParser.g:19352:2: ( rule__ListComprehension__FilterExpressionAssignment_1 )
            // InternalOpenCypherParser.g:19352:3: rule__ListComprehension__FilterExpressionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__FilterExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getFilterExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__1__Impl"


    // $ANTLR start "rule__ListComprehension__Group__2"
    // InternalOpenCypherParser.g:19360:1: rule__ListComprehension__Group__2 : rule__ListComprehension__Group__2__Impl rule__ListComprehension__Group__3 ;
    public final void rule__ListComprehension__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19364:1: ( rule__ListComprehension__Group__2__Impl rule__ListComprehension__Group__3 )
            // InternalOpenCypherParser.g:19365:2: rule__ListComprehension__Group__2__Impl rule__ListComprehension__Group__3
            {
            pushFollow(FOLLOW_121);
            rule__ListComprehension__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__2"


    // $ANTLR start "rule__ListComprehension__Group__2__Impl"
    // InternalOpenCypherParser.g:19372:1: rule__ListComprehension__Group__2__Impl : ( ( rule__ListComprehension__Group_2__0 )? ) ;
    public final void rule__ListComprehension__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19376:1: ( ( ( rule__ListComprehension__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:19377:1: ( ( rule__ListComprehension__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:19377:1: ( ( rule__ListComprehension__Group_2__0 )? )
            // InternalOpenCypherParser.g:19378:2: ( rule__ListComprehension__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:19379:2: ( rule__ListComprehension__Group_2__0 )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==VerticalLine) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // InternalOpenCypherParser.g:19379:3: rule__ListComprehension__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__ListComprehension__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__2__Impl"


    // $ANTLR start "rule__ListComprehension__Group__3"
    // InternalOpenCypherParser.g:19387:1: rule__ListComprehension__Group__3 : rule__ListComprehension__Group__3__Impl ;
    public final void rule__ListComprehension__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19391:1: ( rule__ListComprehension__Group__3__Impl )
            // InternalOpenCypherParser.g:19392:2: rule__ListComprehension__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__3"


    // $ANTLR start "rule__ListComprehension__Group__3__Impl"
    // InternalOpenCypherParser.g:19398:1: rule__ListComprehension__Group__3__Impl : ( RightSquareBracket ) ;
    public final void rule__ListComprehension__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19402:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:19403:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:19403:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:19404:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getRightSquareBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group__3__Impl"


    // $ANTLR start "rule__ListComprehension__Group_2__0"
    // InternalOpenCypherParser.g:19414:1: rule__ListComprehension__Group_2__0 : rule__ListComprehension__Group_2__0__Impl rule__ListComprehension__Group_2__1 ;
    public final void rule__ListComprehension__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19418:1: ( rule__ListComprehension__Group_2__0__Impl rule__ListComprehension__Group_2__1 )
            // InternalOpenCypherParser.g:19419:2: rule__ListComprehension__Group_2__0__Impl rule__ListComprehension__Group_2__1
            {
            pushFollow(FOLLOW_36);
            rule__ListComprehension__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__0"


    // $ANTLR start "rule__ListComprehension__Group_2__0__Impl"
    // InternalOpenCypherParser.g:19426:1: rule__ListComprehension__Group_2__0__Impl : ( VerticalLine ) ;
    public final void rule__ListComprehension__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19430:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:19431:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:19431:1: ( VerticalLine )
            // InternalOpenCypherParser.g:19432:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getVerticalLineKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__0__Impl"


    // $ANTLR start "rule__ListComprehension__Group_2__1"
    // InternalOpenCypherParser.g:19441:1: rule__ListComprehension__Group_2__1 : rule__ListComprehension__Group_2__1__Impl ;
    public final void rule__ListComprehension__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19445:1: ( rule__ListComprehension__Group_2__1__Impl )
            // InternalOpenCypherParser.g:19446:2: rule__ListComprehension__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__1"


    // $ANTLR start "rule__ListComprehension__Group_2__1__Impl"
    // InternalOpenCypherParser.g:19452:1: rule__ListComprehension__Group_2__1__Impl : ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) ) ;
    public final void rule__ListComprehension__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19456:1: ( ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) ) )
            // InternalOpenCypherParser.g:19457:1: ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) )
            {
            // InternalOpenCypherParser.g:19457:1: ( ( rule__ListComprehension__ExpressionAssignment_2_1 ) )
            // InternalOpenCypherParser.g:19458:2: ( rule__ListComprehension__ExpressionAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1()); 
            }
            // InternalOpenCypherParser.g:19459:2: ( rule__ListComprehension__ExpressionAssignment_2_1 )
            // InternalOpenCypherParser.g:19459:3: rule__ListComprehension__ExpressionAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__ListComprehension__ExpressionAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getExpressionAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__Group_2__1__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__0"
    // InternalOpenCypherParser.g:19468:1: rule__PatternComprehension__Group__0 : rule__PatternComprehension__Group__0__Impl rule__PatternComprehension__Group__1 ;
    public final void rule__PatternComprehension__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19472:1: ( rule__PatternComprehension__Group__0__Impl rule__PatternComprehension__Group__1 )
            // InternalOpenCypherParser.g:19473:2: rule__PatternComprehension__Group__0__Impl rule__PatternComprehension__Group__1
            {
            pushFollow(FOLLOW_42);
            rule__PatternComprehension__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__0"


    // $ANTLR start "rule__PatternComprehension__Group__0__Impl"
    // InternalOpenCypherParser.g:19480:1: rule__PatternComprehension__Group__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__PatternComprehension__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19484:1: ( ( LeftSquareBracket ) )
            // InternalOpenCypherParser.g:19485:1: ( LeftSquareBracket )
            {
            // InternalOpenCypherParser.g:19485:1: ( LeftSquareBracket )
            // InternalOpenCypherParser.g:19486:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getLeftSquareBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__0__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__1"
    // InternalOpenCypherParser.g:19495:1: rule__PatternComprehension__Group__1 : rule__PatternComprehension__Group__1__Impl rule__PatternComprehension__Group__2 ;
    public final void rule__PatternComprehension__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19499:1: ( rule__PatternComprehension__Group__1__Impl rule__PatternComprehension__Group__2 )
            // InternalOpenCypherParser.g:19500:2: rule__PatternComprehension__Group__1__Impl rule__PatternComprehension__Group__2
            {
            pushFollow(FOLLOW_42);
            rule__PatternComprehension__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__1"


    // $ANTLR start "rule__PatternComprehension__Group__1__Impl"
    // InternalOpenCypherParser.g:19507:1: rule__PatternComprehension__Group__1__Impl : ( ( rule__PatternComprehension__Group_1__0 )? ) ;
    public final void rule__PatternComprehension__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19511:1: ( ( ( rule__PatternComprehension__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:19512:1: ( ( rule__PatternComprehension__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:19512:1: ( ( rule__PatternComprehension__Group_1__0 )? )
            // InternalOpenCypherParser.g:19513:2: ( rule__PatternComprehension__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:19514:2: ( rule__PatternComprehension__Group_1__0 )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( ((LA130_0>=ALLSHORTESTPATHS && LA130_0<=WHERE)||(LA130_0>=CASE && LA130_0<=XOR)||(LA130_0>=AS && LA130_0<=OR)||LA130_0==RULE_ID) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // InternalOpenCypherParser.g:19514:3: rule__PatternComprehension__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternComprehension__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__1__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__2"
    // InternalOpenCypherParser.g:19522:1: rule__PatternComprehension__Group__2 : rule__PatternComprehension__Group__2__Impl rule__PatternComprehension__Group__3 ;
    public final void rule__PatternComprehension__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19526:1: ( rule__PatternComprehension__Group__2__Impl rule__PatternComprehension__Group__3 )
            // InternalOpenCypherParser.g:19527:2: rule__PatternComprehension__Group__2__Impl rule__PatternComprehension__Group__3
            {
            pushFollow(FOLLOW_122);
            rule__PatternComprehension__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__2"


    // $ANTLR start "rule__PatternComprehension__Group__2__Impl"
    // InternalOpenCypherParser.g:19534:1: rule__PatternComprehension__Group__2__Impl : ( ( rule__PatternComprehension__PatternAssignment_2 ) ) ;
    public final void rule__PatternComprehension__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19538:1: ( ( ( rule__PatternComprehension__PatternAssignment_2 ) ) )
            // InternalOpenCypherParser.g:19539:1: ( ( rule__PatternComprehension__PatternAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:19539:1: ( ( rule__PatternComprehension__PatternAssignment_2 ) )
            // InternalOpenCypherParser.g:19540:2: ( rule__PatternComprehension__PatternAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2()); 
            }
            // InternalOpenCypherParser.g:19541:2: ( rule__PatternComprehension__PatternAssignment_2 )
            // InternalOpenCypherParser.g:19541:3: rule__PatternComprehension__PatternAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__PatternAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPatternAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__2__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__3"
    // InternalOpenCypherParser.g:19549:1: rule__PatternComprehension__Group__3 : rule__PatternComprehension__Group__3__Impl rule__PatternComprehension__Group__4 ;
    public final void rule__PatternComprehension__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19553:1: ( rule__PatternComprehension__Group__3__Impl rule__PatternComprehension__Group__4 )
            // InternalOpenCypherParser.g:19554:2: rule__PatternComprehension__Group__3__Impl rule__PatternComprehension__Group__4
            {
            pushFollow(FOLLOW_122);
            rule__PatternComprehension__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__3"


    // $ANTLR start "rule__PatternComprehension__Group__3__Impl"
    // InternalOpenCypherParser.g:19561:1: rule__PatternComprehension__Group__3__Impl : ( ( rule__PatternComprehension__WhereAssignment_3 )? ) ;
    public final void rule__PatternComprehension__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19565:1: ( ( ( rule__PatternComprehension__WhereAssignment_3 )? ) )
            // InternalOpenCypherParser.g:19566:1: ( ( rule__PatternComprehension__WhereAssignment_3 )? )
            {
            // InternalOpenCypherParser.g:19566:1: ( ( rule__PatternComprehension__WhereAssignment_3 )? )
            // InternalOpenCypherParser.g:19567:2: ( rule__PatternComprehension__WhereAssignment_3 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3()); 
            }
            // InternalOpenCypherParser.g:19568:2: ( rule__PatternComprehension__WhereAssignment_3 )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==WHERE) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // InternalOpenCypherParser.g:19568:3: rule__PatternComprehension__WhereAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__PatternComprehension__WhereAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getWhereAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__3__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__4"
    // InternalOpenCypherParser.g:19576:1: rule__PatternComprehension__Group__4 : rule__PatternComprehension__Group__4__Impl rule__PatternComprehension__Group__5 ;
    public final void rule__PatternComprehension__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19580:1: ( rule__PatternComprehension__Group__4__Impl rule__PatternComprehension__Group__5 )
            // InternalOpenCypherParser.g:19581:2: rule__PatternComprehension__Group__4__Impl rule__PatternComprehension__Group__5
            {
            pushFollow(FOLLOW_36);
            rule__PatternComprehension__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__4"


    // $ANTLR start "rule__PatternComprehension__Group__4__Impl"
    // InternalOpenCypherParser.g:19588:1: rule__PatternComprehension__Group__4__Impl : ( VerticalLine ) ;
    public final void rule__PatternComprehension__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19592:1: ( ( VerticalLine ) )
            // InternalOpenCypherParser.g:19593:1: ( VerticalLine )
            {
            // InternalOpenCypherParser.g:19593:1: ( VerticalLine )
            // InternalOpenCypherParser.g:19594:2: VerticalLine
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4()); 
            }
            match(input,VerticalLine,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getVerticalLineKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__4__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__5"
    // InternalOpenCypherParser.g:19603:1: rule__PatternComprehension__Group__5 : rule__PatternComprehension__Group__5__Impl rule__PatternComprehension__Group__6 ;
    public final void rule__PatternComprehension__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19607:1: ( rule__PatternComprehension__Group__5__Impl rule__PatternComprehension__Group__6 )
            // InternalOpenCypherParser.g:19608:2: rule__PatternComprehension__Group__5__Impl rule__PatternComprehension__Group__6
            {
            pushFollow(FOLLOW_32);
            rule__PatternComprehension__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__5"


    // $ANTLR start "rule__PatternComprehension__Group__5__Impl"
    // InternalOpenCypherParser.g:19615:1: rule__PatternComprehension__Group__5__Impl : ( ( rule__PatternComprehension__ExpressionAssignment_5 ) ) ;
    public final void rule__PatternComprehension__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19619:1: ( ( ( rule__PatternComprehension__ExpressionAssignment_5 ) ) )
            // InternalOpenCypherParser.g:19620:1: ( ( rule__PatternComprehension__ExpressionAssignment_5 ) )
            {
            // InternalOpenCypherParser.g:19620:1: ( ( rule__PatternComprehension__ExpressionAssignment_5 ) )
            // InternalOpenCypherParser.g:19621:2: ( rule__PatternComprehension__ExpressionAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5()); 
            }
            // InternalOpenCypherParser.g:19622:2: ( rule__PatternComprehension__ExpressionAssignment_5 )
            // InternalOpenCypherParser.g:19622:3: rule__PatternComprehension__ExpressionAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__ExpressionAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getExpressionAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__5__Impl"


    // $ANTLR start "rule__PatternComprehension__Group__6"
    // InternalOpenCypherParser.g:19630:1: rule__PatternComprehension__Group__6 : rule__PatternComprehension__Group__6__Impl ;
    public final void rule__PatternComprehension__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19634:1: ( rule__PatternComprehension__Group__6__Impl )
            // InternalOpenCypherParser.g:19635:2: rule__PatternComprehension__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__6"


    // $ANTLR start "rule__PatternComprehension__Group__6__Impl"
    // InternalOpenCypherParser.g:19641:1: rule__PatternComprehension__Group__6__Impl : ( RightSquareBracket ) ;
    public final void rule__PatternComprehension__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19645:1: ( ( RightSquareBracket ) )
            // InternalOpenCypherParser.g:19646:1: ( RightSquareBracket )
            {
            // InternalOpenCypherParser.g:19646:1: ( RightSquareBracket )
            // InternalOpenCypherParser.g:19647:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getRightSquareBracketKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group__6__Impl"


    // $ANTLR start "rule__PatternComprehension__Group_1__0"
    // InternalOpenCypherParser.g:19657:1: rule__PatternComprehension__Group_1__0 : rule__PatternComprehension__Group_1__0__Impl rule__PatternComprehension__Group_1__1 ;
    public final void rule__PatternComprehension__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19661:1: ( rule__PatternComprehension__Group_1__0__Impl rule__PatternComprehension__Group_1__1 )
            // InternalOpenCypherParser.g:19662:2: rule__PatternComprehension__Group_1__0__Impl rule__PatternComprehension__Group_1__1
            {
            pushFollow(FOLLOW_8);
            rule__PatternComprehension__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__0"


    // $ANTLR start "rule__PatternComprehension__Group_1__0__Impl"
    // InternalOpenCypherParser.g:19669:1: rule__PatternComprehension__Group_1__0__Impl : ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) ) ;
    public final void rule__PatternComprehension__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19673:1: ( ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) ) )
            // InternalOpenCypherParser.g:19674:1: ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) )
            {
            // InternalOpenCypherParser.g:19674:1: ( ( rule__PatternComprehension__PathVariableAssignment_1_0 ) )
            // InternalOpenCypherParser.g:19675:2: ( rule__PatternComprehension__PathVariableAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0()); 
            }
            // InternalOpenCypherParser.g:19676:2: ( rule__PatternComprehension__PathVariableAssignment_1_0 )
            // InternalOpenCypherParser.g:19676:3: rule__PatternComprehension__PathVariableAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__PathVariableAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPathVariableAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__0__Impl"


    // $ANTLR start "rule__PatternComprehension__Group_1__1"
    // InternalOpenCypherParser.g:19684:1: rule__PatternComprehension__Group_1__1 : rule__PatternComprehension__Group_1__1__Impl ;
    public final void rule__PatternComprehension__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19688:1: ( rule__PatternComprehension__Group_1__1__Impl )
            // InternalOpenCypherParser.g:19689:2: rule__PatternComprehension__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PatternComprehension__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__1"


    // $ANTLR start "rule__PatternComprehension__Group_1__1__Impl"
    // InternalOpenCypherParser.g:19695:1: rule__PatternComprehension__Group_1__1__Impl : ( EqualsSign ) ;
    public final void rule__PatternComprehension__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19699:1: ( ( EqualsSign ) )
            // InternalOpenCypherParser.g:19700:1: ( EqualsSign )
            {
            // InternalOpenCypherParser.g:19700:1: ( EqualsSign )
            // InternalOpenCypherParser.g:19701:2: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getEqualsSignKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__Group_1__1__Impl"


    // $ANTLR start "rule__PropertyLookup__Group__0"
    // InternalOpenCypherParser.g:19711:1: rule__PropertyLookup__Group__0 : rule__PropertyLookup__Group__0__Impl rule__PropertyLookup__Group__1 ;
    public final void rule__PropertyLookup__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19715:1: ( rule__PropertyLookup__Group__0__Impl rule__PropertyLookup__Group__1 )
            // InternalOpenCypherParser.g:19716:2: rule__PropertyLookup__Group__0__Impl rule__PropertyLookup__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__PropertyLookup__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__0"


    // $ANTLR start "rule__PropertyLookup__Group__0__Impl"
    // InternalOpenCypherParser.g:19723:1: rule__PropertyLookup__Group__0__Impl : ( FullStop ) ;
    public final void rule__PropertyLookup__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19727:1: ( ( FullStop ) )
            // InternalOpenCypherParser.g:19728:1: ( FullStop )
            {
            // InternalOpenCypherParser.g:19728:1: ( FullStop )
            // InternalOpenCypherParser.g:19729:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getFullStopKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__0__Impl"


    // $ANTLR start "rule__PropertyLookup__Group__1"
    // InternalOpenCypherParser.g:19738:1: rule__PropertyLookup__Group__1 : rule__PropertyLookup__Group__1__Impl ;
    public final void rule__PropertyLookup__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19742:1: ( rule__PropertyLookup__Group__1__Impl )
            // InternalOpenCypherParser.g:19743:2: rule__PropertyLookup__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__1"


    // $ANTLR start "rule__PropertyLookup__Group__1__Impl"
    // InternalOpenCypherParser.g:19749:1: rule__PropertyLookup__Group__1__Impl : ( ( rule__PropertyLookup__Alternatives_1 ) ) ;
    public final void rule__PropertyLookup__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19753:1: ( ( ( rule__PropertyLookup__Alternatives_1 ) ) )
            // InternalOpenCypherParser.g:19754:1: ( ( rule__PropertyLookup__Alternatives_1 ) )
            {
            // InternalOpenCypherParser.g:19754:1: ( ( rule__PropertyLookup__Alternatives_1 ) )
            // InternalOpenCypherParser.g:19755:2: ( rule__PropertyLookup__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getAlternatives_1()); 
            }
            // InternalOpenCypherParser.g:19756:2: ( rule__PropertyLookup__Alternatives_1 )
            // InternalOpenCypherParser.g:19756:3: rule__PropertyLookup__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group__1__Impl"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__0"
    // InternalOpenCypherParser.g:19765:1: rule__PropertyLookup__Group_1_0__0 : rule__PropertyLookup__Group_1_0__0__Impl rule__PropertyLookup__Group_1_0__1 ;
    public final void rule__PropertyLookup__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19769:1: ( rule__PropertyLookup__Group_1_0__0__Impl rule__PropertyLookup__Group_1_0__1 )
            // InternalOpenCypherParser.g:19770:2: rule__PropertyLookup__Group_1_0__0__Impl rule__PropertyLookup__Group_1_0__1
            {
            pushFollow(FOLLOW_123);
            rule__PropertyLookup__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__0"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__0__Impl"
    // InternalOpenCypherParser.g:19777:1: rule__PropertyLookup__Group_1_0__0__Impl : ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) ) ;
    public final void rule__PropertyLookup__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19781:1: ( ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) ) )
            // InternalOpenCypherParser.g:19782:1: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) )
            {
            // InternalOpenCypherParser.g:19782:1: ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 ) )
            // InternalOpenCypherParser.g:19783:2: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0()); 
            }
            // InternalOpenCypherParser.g:19784:2: ( rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 )
            // InternalOpenCypherParser.g:19784:3: rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNameAssignment_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__0__Impl"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__1"
    // InternalOpenCypherParser.g:19792:1: rule__PropertyLookup__Group_1_0__1 : rule__PropertyLookup__Group_1_0__1__Impl ;
    public final void rule__PropertyLookup__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19796:1: ( rule__PropertyLookup__Group_1_0__1__Impl )
            // InternalOpenCypherParser.g:19797:2: rule__PropertyLookup__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__1"


    // $ANTLR start "rule__PropertyLookup__Group_1_0__1__Impl"
    // InternalOpenCypherParser.g:19803:1: rule__PropertyLookup__Group_1_0__1__Impl : ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) ) ;
    public final void rule__PropertyLookup__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19807:1: ( ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) ) )
            // InternalOpenCypherParser.g:19808:1: ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) )
            {
            // InternalOpenCypherParser.g:19808:1: ( ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 ) )
            // InternalOpenCypherParser.g:19809:2: ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1()); 
            }
            // InternalOpenCypherParser.g:19810:2: ( rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 )
            // InternalOpenCypherParser.g:19810:3: rule__PropertyLookup__PropertyOperatorAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__PropertyOperatorAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__Group_1_0__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group__0"
    // InternalOpenCypherParser.g:19819:1: rule__CaseExpression__Group__0 : rule__CaseExpression__Group__0__Impl rule__CaseExpression__Group__1 ;
    public final void rule__CaseExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19823:1: ( rule__CaseExpression__Group__0__Impl rule__CaseExpression__Group__1 )
            // InternalOpenCypherParser.g:19824:2: rule__CaseExpression__Group__0__Impl rule__CaseExpression__Group__1
            {
            pushFollow(FOLLOW_124);
            rule__CaseExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__0"


    // $ANTLR start "rule__CaseExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:19831:1: rule__CaseExpression__Group__0__Impl : ( ( rule__CaseExpression__Alternatives_0 ) ) ;
    public final void rule__CaseExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19835:1: ( ( ( rule__CaseExpression__Alternatives_0 ) ) )
            // InternalOpenCypherParser.g:19836:1: ( ( rule__CaseExpression__Alternatives_0 ) )
            {
            // InternalOpenCypherParser.g:19836:1: ( ( rule__CaseExpression__Alternatives_0 ) )
            // InternalOpenCypherParser.g:19837:2: ( rule__CaseExpression__Alternatives_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getAlternatives_0()); 
            }
            // InternalOpenCypherParser.g:19838:2: ( rule__CaseExpression__Alternatives_0 )
            // InternalOpenCypherParser.g:19838:3: rule__CaseExpression__Alternatives_0
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Alternatives_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group__1"
    // InternalOpenCypherParser.g:19846:1: rule__CaseExpression__Group__1 : rule__CaseExpression__Group__1__Impl rule__CaseExpression__Group__2 ;
    public final void rule__CaseExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19850:1: ( rule__CaseExpression__Group__1__Impl rule__CaseExpression__Group__2 )
            // InternalOpenCypherParser.g:19851:2: rule__CaseExpression__Group__1__Impl rule__CaseExpression__Group__2
            {
            pushFollow(FOLLOW_124);
            rule__CaseExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__1"


    // $ANTLR start "rule__CaseExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:19858:1: rule__CaseExpression__Group__1__Impl : ( ( rule__CaseExpression__Group_1__0 )? ) ;
    public final void rule__CaseExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19862:1: ( ( ( rule__CaseExpression__Group_1__0 )? ) )
            // InternalOpenCypherParser.g:19863:1: ( ( rule__CaseExpression__Group_1__0 )? )
            {
            // InternalOpenCypherParser.g:19863:1: ( ( rule__CaseExpression__Group_1__0 )? )
            // InternalOpenCypherParser.g:19864:2: ( rule__CaseExpression__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getGroup_1()); 
            }
            // InternalOpenCypherParser.g:19865:2: ( rule__CaseExpression__Group_1__0 )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==ELSE) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // InternalOpenCypherParser.g:19865:3: rule__CaseExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__CaseExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group__2"
    // InternalOpenCypherParser.g:19873:1: rule__CaseExpression__Group__2 : rule__CaseExpression__Group__2__Impl ;
    public final void rule__CaseExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19877:1: ( rule__CaseExpression__Group__2__Impl )
            // InternalOpenCypherParser.g:19878:2: rule__CaseExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__2"


    // $ANTLR start "rule__CaseExpression__Group__2__Impl"
    // InternalOpenCypherParser.g:19884:1: rule__CaseExpression__Group__2__Impl : ( END ) ;
    public final void rule__CaseExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19888:1: ( ( END ) )
            // InternalOpenCypherParser.g:19889:1: ( END )
            {
            // InternalOpenCypherParser.g:19889:1: ( END )
            // InternalOpenCypherParser.g:19890:2: END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getENDKeyword_2()); 
            }
            match(input,END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getENDKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group__2__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_0__0"
    // InternalOpenCypherParser.g:19900:1: rule__CaseExpression__Group_0_0__0 : rule__CaseExpression__Group_0_0__0__Impl rule__CaseExpression__Group_0_0__1 ;
    public final void rule__CaseExpression__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19904:1: ( rule__CaseExpression__Group_0_0__0__Impl rule__CaseExpression__Group_0_0__1 )
            // InternalOpenCypherParser.g:19905:2: rule__CaseExpression__Group_0_0__0__Impl rule__CaseExpression__Group_0_0__1
            {
            pushFollow(FOLLOW_125);
            rule__CaseExpression__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__0"


    // $ANTLR start "rule__CaseExpression__Group_0_0__0__Impl"
    // InternalOpenCypherParser.g:19912:1: rule__CaseExpression__Group_0_0__0__Impl : ( CASE ) ;
    public final void rule__CaseExpression__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19916:1: ( ( CASE ) )
            // InternalOpenCypherParser.g:19917:1: ( CASE )
            {
            // InternalOpenCypherParser.g:19917:1: ( CASE )
            // InternalOpenCypherParser.g:19918:2: CASE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0()); 
            }
            match(input,CASE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_0__1"
    // InternalOpenCypherParser.g:19927:1: rule__CaseExpression__Group_0_0__1 : rule__CaseExpression__Group_0_0__1__Impl ;
    public final void rule__CaseExpression__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19931:1: ( rule__CaseExpression__Group_0_0__1__Impl )
            // InternalOpenCypherParser.g:19932:2: rule__CaseExpression__Group_0_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__1"


    // $ANTLR start "rule__CaseExpression__Group_0_0__1__Impl"
    // InternalOpenCypherParser.g:19938:1: rule__CaseExpression__Group_0_0__1__Impl : ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) ) ;
    public final void rule__CaseExpression__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19942:1: ( ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) ) )
            // InternalOpenCypherParser.g:19943:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) )
            {
            // InternalOpenCypherParser.g:19943:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* ) )
            // InternalOpenCypherParser.g:19944:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* )
            {
            // InternalOpenCypherParser.g:19944:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 ) )
            // InternalOpenCypherParser.g:19945:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }
            // InternalOpenCypherParser.g:19946:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )
            // InternalOpenCypherParser.g:19946:4: rule__CaseExpression__CaseAlternativesAssignment_0_0_1
            {
            pushFollow(FOLLOW_126);
            rule__CaseExpression__CaseAlternativesAssignment_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }

            }

            // InternalOpenCypherParser.g:19949:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )* )
            // InternalOpenCypherParser.g:19950:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }
            // InternalOpenCypherParser.g:19951:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_0_1 )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==WHEN) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // InternalOpenCypherParser.g:19951:4: rule__CaseExpression__CaseAlternativesAssignment_0_0_1
            	    {
            	    pushFollow(FOLLOW_126);
            	    rule__CaseExpression__CaseAlternativesAssignment_0_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_0_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_0__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_1__0"
    // InternalOpenCypherParser.g:19961:1: rule__CaseExpression__Group_0_1__0 : rule__CaseExpression__Group_0_1__0__Impl rule__CaseExpression__Group_0_1__1 ;
    public final void rule__CaseExpression__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19965:1: ( rule__CaseExpression__Group_0_1__0__Impl rule__CaseExpression__Group_0_1__1 )
            // InternalOpenCypherParser.g:19966:2: rule__CaseExpression__Group_0_1__0__Impl rule__CaseExpression__Group_0_1__1
            {
            pushFollow(FOLLOW_36);
            rule__CaseExpression__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__0"


    // $ANTLR start "rule__CaseExpression__Group_0_1__0__Impl"
    // InternalOpenCypherParser.g:19973:1: rule__CaseExpression__Group_0_1__0__Impl : ( CASE ) ;
    public final void rule__CaseExpression__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19977:1: ( ( CASE ) )
            // InternalOpenCypherParser.g:19978:1: ( CASE )
            {
            // InternalOpenCypherParser.g:19978:1: ( CASE )
            // InternalOpenCypherParser.g:19979:2: CASE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0()); 
            }
            match(input,CASE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCASEKeyword_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_1__1"
    // InternalOpenCypherParser.g:19988:1: rule__CaseExpression__Group_0_1__1 : rule__CaseExpression__Group_0_1__1__Impl rule__CaseExpression__Group_0_1__2 ;
    public final void rule__CaseExpression__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:19992:1: ( rule__CaseExpression__Group_0_1__1__Impl rule__CaseExpression__Group_0_1__2 )
            // InternalOpenCypherParser.g:19993:2: rule__CaseExpression__Group_0_1__1__Impl rule__CaseExpression__Group_0_1__2
            {
            pushFollow(FOLLOW_125);
            rule__CaseExpression__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__1"


    // $ANTLR start "rule__CaseExpression__Group_0_1__1__Impl"
    // InternalOpenCypherParser.g:20000:1: rule__CaseExpression__Group_0_1__1__Impl : ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) ) ;
    public final void rule__CaseExpression__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20004:1: ( ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) ) )
            // InternalOpenCypherParser.g:20005:1: ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) )
            {
            // InternalOpenCypherParser.g:20005:1: ( ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 ) )
            // InternalOpenCypherParser.g:20006:2: ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1()); 
            }
            // InternalOpenCypherParser.g:20007:2: ( rule__CaseExpression__CaseExpressionAssignment_0_1_1 )
            // InternalOpenCypherParser.g:20007:3: rule__CaseExpression__CaseExpressionAssignment_0_1_1
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__CaseExpressionAssignment_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseExpressionAssignment_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__1__Impl"


    // $ANTLR start "rule__CaseExpression__Group_0_1__2"
    // InternalOpenCypherParser.g:20015:1: rule__CaseExpression__Group_0_1__2 : rule__CaseExpression__Group_0_1__2__Impl ;
    public final void rule__CaseExpression__Group_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20019:1: ( rule__CaseExpression__Group_0_1__2__Impl )
            // InternalOpenCypherParser.g:20020:2: rule__CaseExpression__Group_0_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_0_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__2"


    // $ANTLR start "rule__CaseExpression__Group_0_1__2__Impl"
    // InternalOpenCypherParser.g:20026:1: rule__CaseExpression__Group_0_1__2__Impl : ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) ) ;
    public final void rule__CaseExpression__Group_0_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20030:1: ( ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) ) )
            // InternalOpenCypherParser.g:20031:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) )
            {
            // InternalOpenCypherParser.g:20031:1: ( ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* ) )
            // InternalOpenCypherParser.g:20032:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) ) ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* )
            {
            // InternalOpenCypherParser.g:20032:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 ) )
            // InternalOpenCypherParser.g:20033:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }
            // InternalOpenCypherParser.g:20034:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )
            // InternalOpenCypherParser.g:20034:4: rule__CaseExpression__CaseAlternativesAssignment_0_1_2
            {
            pushFollow(FOLLOW_126);
            rule__CaseExpression__CaseAlternativesAssignment_0_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }

            }

            // InternalOpenCypherParser.g:20037:2: ( ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )* )
            // InternalOpenCypherParser.g:20038:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }
            // InternalOpenCypherParser.g:20039:3: ( rule__CaseExpression__CaseAlternativesAssignment_0_1_2 )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==WHEN) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // InternalOpenCypherParser.g:20039:4: rule__CaseExpression__CaseAlternativesAssignment_0_1_2
            	    {
            	    pushFollow(FOLLOW_126);
            	    rule__CaseExpression__CaseAlternativesAssignment_0_1_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesAssignment_0_1_2()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_0_1__2__Impl"


    // $ANTLR start "rule__CaseExpression__Group_1__0"
    // InternalOpenCypherParser.g:20049:1: rule__CaseExpression__Group_1__0 : rule__CaseExpression__Group_1__0__Impl rule__CaseExpression__Group_1__1 ;
    public final void rule__CaseExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20053:1: ( rule__CaseExpression__Group_1__0__Impl rule__CaseExpression__Group_1__1 )
            // InternalOpenCypherParser.g:20054:2: rule__CaseExpression__Group_1__0__Impl rule__CaseExpression__Group_1__1
            {
            pushFollow(FOLLOW_36);
            rule__CaseExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__0"


    // $ANTLR start "rule__CaseExpression__Group_1__0__Impl"
    // InternalOpenCypherParser.g:20061:1: rule__CaseExpression__Group_1__0__Impl : ( ELSE ) ;
    public final void rule__CaseExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20065:1: ( ( ELSE ) )
            // InternalOpenCypherParser.g:20066:1: ( ELSE )
            {
            // InternalOpenCypherParser.g:20066:1: ( ELSE )
            // InternalOpenCypherParser.g:20067:2: ELSE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0()); 
            }
            match(input,ELSE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getELSEKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__0__Impl"


    // $ANTLR start "rule__CaseExpression__Group_1__1"
    // InternalOpenCypherParser.g:20076:1: rule__CaseExpression__Group_1__1 : rule__CaseExpression__Group_1__1__Impl ;
    public final void rule__CaseExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20080:1: ( rule__CaseExpression__Group_1__1__Impl )
            // InternalOpenCypherParser.g:20081:2: rule__CaseExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__1"


    // $ANTLR start "rule__CaseExpression__Group_1__1__Impl"
    // InternalOpenCypherParser.g:20087:1: rule__CaseExpression__Group_1__1__Impl : ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) ) ;
    public final void rule__CaseExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20091:1: ( ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) ) )
            // InternalOpenCypherParser.g:20092:1: ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) )
            {
            // InternalOpenCypherParser.g:20092:1: ( ( rule__CaseExpression__ElseExpressionAssignment_1_1 ) )
            // InternalOpenCypherParser.g:20093:2: ( rule__CaseExpression__ElseExpressionAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1()); 
            }
            // InternalOpenCypherParser.g:20094:2: ( rule__CaseExpression__ElseExpressionAssignment_1_1 )
            // InternalOpenCypherParser.g:20094:3: rule__CaseExpression__ElseExpressionAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__CaseExpression__ElseExpressionAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getElseExpressionAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__Group_1__1__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__0"
    // InternalOpenCypherParser.g:20103:1: rule__CaseAlternatives__Group__0 : rule__CaseAlternatives__Group__0__Impl rule__CaseAlternatives__Group__1 ;
    public final void rule__CaseAlternatives__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20107:1: ( rule__CaseAlternatives__Group__0__Impl rule__CaseAlternatives__Group__1 )
            // InternalOpenCypherParser.g:20108:2: rule__CaseAlternatives__Group__0__Impl rule__CaseAlternatives__Group__1
            {
            pushFollow(FOLLOW_36);
            rule__CaseAlternatives__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__0"


    // $ANTLR start "rule__CaseAlternatives__Group__0__Impl"
    // InternalOpenCypherParser.g:20115:1: rule__CaseAlternatives__Group__0__Impl : ( WHEN ) ;
    public final void rule__CaseAlternatives__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20119:1: ( ( WHEN ) )
            // InternalOpenCypherParser.g:20120:1: ( WHEN )
            {
            // InternalOpenCypherParser.g:20120:1: ( WHEN )
            // InternalOpenCypherParser.g:20121:2: WHEN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0()); 
            }
            match(input,WHEN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getWHENKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__0__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__1"
    // InternalOpenCypherParser.g:20130:1: rule__CaseAlternatives__Group__1 : rule__CaseAlternatives__Group__1__Impl rule__CaseAlternatives__Group__2 ;
    public final void rule__CaseAlternatives__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20134:1: ( rule__CaseAlternatives__Group__1__Impl rule__CaseAlternatives__Group__2 )
            // InternalOpenCypherParser.g:20135:2: rule__CaseAlternatives__Group__1__Impl rule__CaseAlternatives__Group__2
            {
            pushFollow(FOLLOW_127);
            rule__CaseAlternatives__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__1"


    // $ANTLR start "rule__CaseAlternatives__Group__1__Impl"
    // InternalOpenCypherParser.g:20142:1: rule__CaseAlternatives__Group__1__Impl : ( ( rule__CaseAlternatives__WhenAssignment_1 ) ) ;
    public final void rule__CaseAlternatives__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20146:1: ( ( ( rule__CaseAlternatives__WhenAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20147:1: ( ( rule__CaseAlternatives__WhenAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20147:1: ( ( rule__CaseAlternatives__WhenAssignment_1 ) )
            // InternalOpenCypherParser.g:20148:2: ( rule__CaseAlternatives__WhenAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20149:2: ( rule__CaseAlternatives__WhenAssignment_1 )
            // InternalOpenCypherParser.g:20149:3: rule__CaseAlternatives__WhenAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__WhenAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getWhenAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__1__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__2"
    // InternalOpenCypherParser.g:20157:1: rule__CaseAlternatives__Group__2 : rule__CaseAlternatives__Group__2__Impl rule__CaseAlternatives__Group__3 ;
    public final void rule__CaseAlternatives__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20161:1: ( rule__CaseAlternatives__Group__2__Impl rule__CaseAlternatives__Group__3 )
            // InternalOpenCypherParser.g:20162:2: rule__CaseAlternatives__Group__2__Impl rule__CaseAlternatives__Group__3
            {
            pushFollow(FOLLOW_36);
            rule__CaseAlternatives__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__2"


    // $ANTLR start "rule__CaseAlternatives__Group__2__Impl"
    // InternalOpenCypherParser.g:20169:1: rule__CaseAlternatives__Group__2__Impl : ( THEN ) ;
    public final void rule__CaseAlternatives__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20173:1: ( ( THEN ) )
            // InternalOpenCypherParser.g:20174:1: ( THEN )
            {
            // InternalOpenCypherParser.g:20174:1: ( THEN )
            // InternalOpenCypherParser.g:20175:2: THEN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2()); 
            }
            match(input,THEN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getTHENKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__2__Impl"


    // $ANTLR start "rule__CaseAlternatives__Group__3"
    // InternalOpenCypherParser.g:20184:1: rule__CaseAlternatives__Group__3 : rule__CaseAlternatives__Group__3__Impl ;
    public final void rule__CaseAlternatives__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20188:1: ( rule__CaseAlternatives__Group__3__Impl )
            // InternalOpenCypherParser.g:20189:2: rule__CaseAlternatives__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__3"


    // $ANTLR start "rule__CaseAlternatives__Group__3__Impl"
    // InternalOpenCypherParser.g:20195:1: rule__CaseAlternatives__Group__3__Impl : ( ( rule__CaseAlternatives__ThenAssignment_3 ) ) ;
    public final void rule__CaseAlternatives__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20199:1: ( ( ( rule__CaseAlternatives__ThenAssignment_3 ) ) )
            // InternalOpenCypherParser.g:20200:1: ( ( rule__CaseAlternatives__ThenAssignment_3 ) )
            {
            // InternalOpenCypherParser.g:20200:1: ( ( rule__CaseAlternatives__ThenAssignment_3 ) )
            // InternalOpenCypherParser.g:20201:2: ( rule__CaseAlternatives__ThenAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3()); 
            }
            // InternalOpenCypherParser.g:20202:2: ( rule__CaseAlternatives__ThenAssignment_3 )
            // InternalOpenCypherParser.g:20202:3: rule__CaseAlternatives__ThenAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__CaseAlternatives__ThenAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getThenAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__Group__3__Impl"


    // $ANTLR start "rule__VariableDeclaration__Group__0"
    // InternalOpenCypherParser.g:20211:1: rule__VariableDeclaration__Group__0 : rule__VariableDeclaration__Group__0__Impl rule__VariableDeclaration__Group__1 ;
    public final void rule__VariableDeclaration__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20215:1: ( rule__VariableDeclaration__Group__0__Impl rule__VariableDeclaration__Group__1 )
            // InternalOpenCypherParser.g:20216:2: rule__VariableDeclaration__Group__0__Impl rule__VariableDeclaration__Group__1
            {
            pushFollow(FOLLOW_9);
            rule__VariableDeclaration__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__0"


    // $ANTLR start "rule__VariableDeclaration__Group__0__Impl"
    // InternalOpenCypherParser.g:20223:1: rule__VariableDeclaration__Group__0__Impl : ( () ) ;
    public final void rule__VariableDeclaration__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20227:1: ( ( () ) )
            // InternalOpenCypherParser.g:20228:1: ( () )
            {
            // InternalOpenCypherParser.g:20228:1: ( () )
            // InternalOpenCypherParser.g:20229:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); 
            }
            // InternalOpenCypherParser.g:20230:2: ()
            // InternalOpenCypherParser.g:20230:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__0__Impl"


    // $ANTLR start "rule__VariableDeclaration__Group__1"
    // InternalOpenCypherParser.g:20238:1: rule__VariableDeclaration__Group__1 : rule__VariableDeclaration__Group__1__Impl ;
    public final void rule__VariableDeclaration__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20242:1: ( rule__VariableDeclaration__Group__1__Impl )
            // InternalOpenCypherParser.g:20243:2: rule__VariableDeclaration__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__1"


    // $ANTLR start "rule__VariableDeclaration__Group__1__Impl"
    // InternalOpenCypherParser.g:20249:1: rule__VariableDeclaration__Group__1__Impl : ( ( rule__VariableDeclaration__NameAssignment_1 ) ) ;
    public final void rule__VariableDeclaration__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20253:1: ( ( ( rule__VariableDeclaration__NameAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20254:1: ( ( rule__VariableDeclaration__NameAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20254:1: ( ( rule__VariableDeclaration__NameAssignment_1 ) )
            // InternalOpenCypherParser.g:20255:2: ( rule__VariableDeclaration__NameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20256:2: ( rule__VariableDeclaration__NameAssignment_1 )
            // InternalOpenCypherParser.g:20256:3: rule__VariableDeclaration__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__VariableDeclaration__NameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__Group__1__Impl"


    // $ANTLR start "rule__MapLiteral__Group__0"
    // InternalOpenCypherParser.g:20265:1: rule__MapLiteral__Group__0 : rule__MapLiteral__Group__0__Impl rule__MapLiteral__Group__1 ;
    public final void rule__MapLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20269:1: ( rule__MapLiteral__Group__0__Impl rule__MapLiteral__Group__1 )
            // InternalOpenCypherParser.g:20270:2: rule__MapLiteral__Group__0__Impl rule__MapLiteral__Group__1
            {
            pushFollow(FOLLOW_128);
            rule__MapLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__0"


    // $ANTLR start "rule__MapLiteral__Group__0__Impl"
    // InternalOpenCypherParser.g:20277:1: rule__MapLiteral__Group__0__Impl : ( () ) ;
    public final void rule__MapLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20281:1: ( ( () ) )
            // InternalOpenCypherParser.g:20282:1: ( () )
            {
            // InternalOpenCypherParser.g:20282:1: ( () )
            // InternalOpenCypherParser.g:20283:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); 
            }
            // InternalOpenCypherParser.g:20284:2: ()
            // InternalOpenCypherParser.g:20284:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getMapLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__0__Impl"


    // $ANTLR start "rule__MapLiteral__Group__1"
    // InternalOpenCypherParser.g:20292:1: rule__MapLiteral__Group__1 : rule__MapLiteral__Group__1__Impl rule__MapLiteral__Group__2 ;
    public final void rule__MapLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20296:1: ( rule__MapLiteral__Group__1__Impl rule__MapLiteral__Group__2 )
            // InternalOpenCypherParser.g:20297:2: rule__MapLiteral__Group__1__Impl rule__MapLiteral__Group__2
            {
            pushFollow(FOLLOW_129);
            rule__MapLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__1"


    // $ANTLR start "rule__MapLiteral__Group__1__Impl"
    // InternalOpenCypherParser.g:20304:1: rule__MapLiteral__Group__1__Impl : ( LeftCurlyBracket ) ;
    public final void rule__MapLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20308:1: ( ( LeftCurlyBracket ) )
            // InternalOpenCypherParser.g:20309:1: ( LeftCurlyBracket )
            {
            // InternalOpenCypherParser.g:20309:1: ( LeftCurlyBracket )
            // InternalOpenCypherParser.g:20310:2: LeftCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__1__Impl"


    // $ANTLR start "rule__MapLiteral__Group__2"
    // InternalOpenCypherParser.g:20319:1: rule__MapLiteral__Group__2 : rule__MapLiteral__Group__2__Impl rule__MapLiteral__Group__3 ;
    public final void rule__MapLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20323:1: ( rule__MapLiteral__Group__2__Impl rule__MapLiteral__Group__3 )
            // InternalOpenCypherParser.g:20324:2: rule__MapLiteral__Group__2__Impl rule__MapLiteral__Group__3
            {
            pushFollow(FOLLOW_129);
            rule__MapLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__2"


    // $ANTLR start "rule__MapLiteral__Group__2__Impl"
    // InternalOpenCypherParser.g:20331:1: rule__MapLiteral__Group__2__Impl : ( ( rule__MapLiteral__Group_2__0 )? ) ;
    public final void rule__MapLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20335:1: ( ( ( rule__MapLiteral__Group_2__0 )? ) )
            // InternalOpenCypherParser.g:20336:1: ( ( rule__MapLiteral__Group_2__0 )? )
            {
            // InternalOpenCypherParser.g:20336:1: ( ( rule__MapLiteral__Group_2__0 )? )
            // InternalOpenCypherParser.g:20337:2: ( rule__MapLiteral__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getGroup_2()); 
            }
            // InternalOpenCypherParser.g:20338:2: ( rule__MapLiteral__Group_2__0 )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( ((LA135_0>=ALLSHORTESTPATHS && LA135_0<=WHERE)||(LA135_0>=CASE && LA135_0<=XOR)||(LA135_0>=AS && LA135_0<=OR)||LA135_0==RULE_ID) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // InternalOpenCypherParser.g:20338:3: rule__MapLiteral__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__MapLiteral__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__2__Impl"


    // $ANTLR start "rule__MapLiteral__Group__3"
    // InternalOpenCypherParser.g:20346:1: rule__MapLiteral__Group__3 : rule__MapLiteral__Group__3__Impl ;
    public final void rule__MapLiteral__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20350:1: ( rule__MapLiteral__Group__3__Impl )
            // InternalOpenCypherParser.g:20351:2: rule__MapLiteral__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__3"


    // $ANTLR start "rule__MapLiteral__Group__3__Impl"
    // InternalOpenCypherParser.g:20357:1: rule__MapLiteral__Group__3__Impl : ( RightCurlyBracket ) ;
    public final void rule__MapLiteral__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20361:1: ( ( RightCurlyBracket ) )
            // InternalOpenCypherParser.g:20362:1: ( RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:20362:1: ( RightCurlyBracket )
            // InternalOpenCypherParser.g:20363:2: RightCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }
            match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group__3__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2__0"
    // InternalOpenCypherParser.g:20373:1: rule__MapLiteral__Group_2__0 : rule__MapLiteral__Group_2__0__Impl rule__MapLiteral__Group_2__1 ;
    public final void rule__MapLiteral__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20377:1: ( rule__MapLiteral__Group_2__0__Impl rule__MapLiteral__Group_2__1 )
            // InternalOpenCypherParser.g:20378:2: rule__MapLiteral__Group_2__0__Impl rule__MapLiteral__Group_2__1
            {
            pushFollow(FOLLOW_48);
            rule__MapLiteral__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__0"


    // $ANTLR start "rule__MapLiteral__Group_2__0__Impl"
    // InternalOpenCypherParser.g:20385:1: rule__MapLiteral__Group_2__0__Impl : ( ( rule__MapLiteral__EntriesAssignment_2_0 ) ) ;
    public final void rule__MapLiteral__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20389:1: ( ( ( rule__MapLiteral__EntriesAssignment_2_0 ) ) )
            // InternalOpenCypherParser.g:20390:1: ( ( rule__MapLiteral__EntriesAssignment_2_0 ) )
            {
            // InternalOpenCypherParser.g:20390:1: ( ( rule__MapLiteral__EntriesAssignment_2_0 ) )
            // InternalOpenCypherParser.g:20391:2: ( rule__MapLiteral__EntriesAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0()); 
            }
            // InternalOpenCypherParser.g:20392:2: ( rule__MapLiteral__EntriesAssignment_2_0 )
            // InternalOpenCypherParser.g:20392:3: rule__MapLiteral__EntriesAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__EntriesAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__0__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2__1"
    // InternalOpenCypherParser.g:20400:1: rule__MapLiteral__Group_2__1 : rule__MapLiteral__Group_2__1__Impl ;
    public final void rule__MapLiteral__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20404:1: ( rule__MapLiteral__Group_2__1__Impl )
            // InternalOpenCypherParser.g:20405:2: rule__MapLiteral__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__1"


    // $ANTLR start "rule__MapLiteral__Group_2__1__Impl"
    // InternalOpenCypherParser.g:20411:1: rule__MapLiteral__Group_2__1__Impl : ( ( rule__MapLiteral__Group_2_1__0 )* ) ;
    public final void rule__MapLiteral__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20415:1: ( ( ( rule__MapLiteral__Group_2_1__0 )* ) )
            // InternalOpenCypherParser.g:20416:1: ( ( rule__MapLiteral__Group_2_1__0 )* )
            {
            // InternalOpenCypherParser.g:20416:1: ( ( rule__MapLiteral__Group_2_1__0 )* )
            // InternalOpenCypherParser.g:20417:2: ( rule__MapLiteral__Group_2_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getGroup_2_1()); 
            }
            // InternalOpenCypherParser.g:20418:2: ( rule__MapLiteral__Group_2_1__0 )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==Comma) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // InternalOpenCypherParser.g:20418:3: rule__MapLiteral__Group_2_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__MapLiteral__Group_2_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2__1__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2_1__0"
    // InternalOpenCypherParser.g:20427:1: rule__MapLiteral__Group_2_1__0 : rule__MapLiteral__Group_2_1__0__Impl rule__MapLiteral__Group_2_1__1 ;
    public final void rule__MapLiteral__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20431:1: ( rule__MapLiteral__Group_2_1__0__Impl rule__MapLiteral__Group_2_1__1 )
            // InternalOpenCypherParser.g:20432:2: rule__MapLiteral__Group_2_1__0__Impl rule__MapLiteral__Group_2_1__1
            {
            pushFollow(FOLLOW_9);
            rule__MapLiteral__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__0"


    // $ANTLR start "rule__MapLiteral__Group_2_1__0__Impl"
    // InternalOpenCypherParser.g:20439:1: rule__MapLiteral__Group_2_1__0__Impl : ( Comma ) ;
    public final void rule__MapLiteral__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20443:1: ( ( Comma ) )
            // InternalOpenCypherParser.g:20444:1: ( Comma )
            {
            // InternalOpenCypherParser.g:20444:1: ( Comma )
            // InternalOpenCypherParser.g:20445:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getCommaKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__0__Impl"


    // $ANTLR start "rule__MapLiteral__Group_2_1__1"
    // InternalOpenCypherParser.g:20454:1: rule__MapLiteral__Group_2_1__1 : rule__MapLiteral__Group_2_1__1__Impl ;
    public final void rule__MapLiteral__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20458:1: ( rule__MapLiteral__Group_2_1__1__Impl )
            // InternalOpenCypherParser.g:20459:2: rule__MapLiteral__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__1"


    // $ANTLR start "rule__MapLiteral__Group_2_1__1__Impl"
    // InternalOpenCypherParser.g:20465:1: rule__MapLiteral__Group_2_1__1__Impl : ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) ) ;
    public final void rule__MapLiteral__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20469:1: ( ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) ) )
            // InternalOpenCypherParser.g:20470:1: ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) )
            {
            // InternalOpenCypherParser.g:20470:1: ( ( rule__MapLiteral__EntriesAssignment_2_1_1 ) )
            // InternalOpenCypherParser.g:20471:2: ( rule__MapLiteral__EntriesAssignment_2_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1()); 
            }
            // InternalOpenCypherParser.g:20472:2: ( rule__MapLiteral__EntriesAssignment_2_1_1 )
            // InternalOpenCypherParser.g:20472:3: rule__MapLiteral__EntriesAssignment_2_1_1
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteral__EntriesAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__Group_2_1__1__Impl"


    // $ANTLR start "rule__MapLiteralEntry__Group__0"
    // InternalOpenCypherParser.g:20481:1: rule__MapLiteralEntry__Group__0 : rule__MapLiteralEntry__Group__0__Impl rule__MapLiteralEntry__Group__1 ;
    public final void rule__MapLiteralEntry__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20485:1: ( rule__MapLiteralEntry__Group__0__Impl rule__MapLiteralEntry__Group__1 )
            // InternalOpenCypherParser.g:20486:2: rule__MapLiteralEntry__Group__0__Impl rule__MapLiteralEntry__Group__1
            {
            pushFollow(FOLLOW_22);
            rule__MapLiteralEntry__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__0"


    // $ANTLR start "rule__MapLiteralEntry__Group__0__Impl"
    // InternalOpenCypherParser.g:20493:1: rule__MapLiteralEntry__Group__0__Impl : ( ( rule__MapLiteralEntry__KeyAssignment_0 ) ) ;
    public final void rule__MapLiteralEntry__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20497:1: ( ( ( rule__MapLiteralEntry__KeyAssignment_0 ) ) )
            // InternalOpenCypherParser.g:20498:1: ( ( rule__MapLiteralEntry__KeyAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:20498:1: ( ( rule__MapLiteralEntry__KeyAssignment_0 ) )
            // InternalOpenCypherParser.g:20499:2: ( rule__MapLiteralEntry__KeyAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0()); 
            }
            // InternalOpenCypherParser.g:20500:2: ( rule__MapLiteralEntry__KeyAssignment_0 )
            // InternalOpenCypherParser.g:20500:3: rule__MapLiteralEntry__KeyAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__KeyAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getKeyAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__0__Impl"


    // $ANTLR start "rule__MapLiteralEntry__Group__1"
    // InternalOpenCypherParser.g:20508:1: rule__MapLiteralEntry__Group__1 : rule__MapLiteralEntry__Group__1__Impl rule__MapLiteralEntry__Group__2 ;
    public final void rule__MapLiteralEntry__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20512:1: ( rule__MapLiteralEntry__Group__1__Impl rule__MapLiteralEntry__Group__2 )
            // InternalOpenCypherParser.g:20513:2: rule__MapLiteralEntry__Group__1__Impl rule__MapLiteralEntry__Group__2
            {
            pushFollow(FOLLOW_36);
            rule__MapLiteralEntry__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__1"


    // $ANTLR start "rule__MapLiteralEntry__Group__1__Impl"
    // InternalOpenCypherParser.g:20520:1: rule__MapLiteralEntry__Group__1__Impl : ( Colon ) ;
    public final void rule__MapLiteralEntry__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20524:1: ( ( Colon ) )
            // InternalOpenCypherParser.g:20525:1: ( Colon )
            {
            // InternalOpenCypherParser.g:20525:1: ( Colon )
            // InternalOpenCypherParser.g:20526:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__1__Impl"


    // $ANTLR start "rule__MapLiteralEntry__Group__2"
    // InternalOpenCypherParser.g:20535:1: rule__MapLiteralEntry__Group__2 : rule__MapLiteralEntry__Group__2__Impl ;
    public final void rule__MapLiteralEntry__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20539:1: ( rule__MapLiteralEntry__Group__2__Impl )
            // InternalOpenCypherParser.g:20540:2: rule__MapLiteralEntry__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__2"


    // $ANTLR start "rule__MapLiteralEntry__Group__2__Impl"
    // InternalOpenCypherParser.g:20546:1: rule__MapLiteralEntry__Group__2__Impl : ( ( rule__MapLiteralEntry__ValueAssignment_2 ) ) ;
    public final void rule__MapLiteralEntry__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20550:1: ( ( ( rule__MapLiteralEntry__ValueAssignment_2 ) ) )
            // InternalOpenCypherParser.g:20551:1: ( ( rule__MapLiteralEntry__ValueAssignment_2 ) )
            {
            // InternalOpenCypherParser.g:20551:1: ( ( rule__MapLiteralEntry__ValueAssignment_2 ) )
            // InternalOpenCypherParser.g:20552:2: ( rule__MapLiteralEntry__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2()); 
            }
            // InternalOpenCypherParser.g:20553:2: ( rule__MapLiteralEntry__ValueAssignment_2 )
            // InternalOpenCypherParser.g:20553:3: rule__MapLiteralEntry__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__MapLiteralEntry__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__Group__2__Impl"


    // $ANTLR start "rule__LegacyParameter__Group__0"
    // InternalOpenCypherParser.g:20562:1: rule__LegacyParameter__Group__0 : rule__LegacyParameter__Group__0__Impl rule__LegacyParameter__Group__1 ;
    public final void rule__LegacyParameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20566:1: ( rule__LegacyParameter__Group__0__Impl rule__LegacyParameter__Group__1 )
            // InternalOpenCypherParser.g:20567:2: rule__LegacyParameter__Group__0__Impl rule__LegacyParameter__Group__1
            {
            pushFollow(FOLLOW_7);
            rule__LegacyParameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__0"


    // $ANTLR start "rule__LegacyParameter__Group__0__Impl"
    // InternalOpenCypherParser.g:20574:1: rule__LegacyParameter__Group__0__Impl : ( LeftCurlyBracket ) ;
    public final void rule__LegacyParameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20578:1: ( ( LeftCurlyBracket ) )
            // InternalOpenCypherParser.g:20579:1: ( LeftCurlyBracket )
            {
            // InternalOpenCypherParser.g:20579:1: ( LeftCurlyBracket )
            // InternalOpenCypherParser.g:20580:2: LeftCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0()); 
            }
            match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getLeftCurlyBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__0__Impl"


    // $ANTLR start "rule__LegacyParameter__Group__1"
    // InternalOpenCypherParser.g:20589:1: rule__LegacyParameter__Group__1 : rule__LegacyParameter__Group__1__Impl rule__LegacyParameter__Group__2 ;
    public final void rule__LegacyParameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20593:1: ( rule__LegacyParameter__Group__1__Impl rule__LegacyParameter__Group__2 )
            // InternalOpenCypherParser.g:20594:2: rule__LegacyParameter__Group__1__Impl rule__LegacyParameter__Group__2
            {
            pushFollow(FOLLOW_130);
            rule__LegacyParameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__1"


    // $ANTLR start "rule__LegacyParameter__Group__1__Impl"
    // InternalOpenCypherParser.g:20601:1: rule__LegacyParameter__Group__1__Impl : ( ( rule__LegacyParameter__ParameterAssignment_1 ) ) ;
    public final void rule__LegacyParameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20605:1: ( ( ( rule__LegacyParameter__ParameterAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20606:1: ( ( rule__LegacyParameter__ParameterAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20606:1: ( ( rule__LegacyParameter__ParameterAssignment_1 ) )
            // InternalOpenCypherParser.g:20607:2: ( rule__LegacyParameter__ParameterAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20608:2: ( rule__LegacyParameter__ParameterAssignment_1 )
            // InternalOpenCypherParser.g:20608:3: rule__LegacyParameter__ParameterAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__ParameterAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getParameterAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__1__Impl"


    // $ANTLR start "rule__LegacyParameter__Group__2"
    // InternalOpenCypherParser.g:20616:1: rule__LegacyParameter__Group__2 : rule__LegacyParameter__Group__2__Impl ;
    public final void rule__LegacyParameter__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20620:1: ( rule__LegacyParameter__Group__2__Impl )
            // InternalOpenCypherParser.g:20621:2: rule__LegacyParameter__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__2"


    // $ANTLR start "rule__LegacyParameter__Group__2__Impl"
    // InternalOpenCypherParser.g:20627:1: rule__LegacyParameter__Group__2__Impl : ( RightCurlyBracket ) ;
    public final void rule__LegacyParameter__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20631:1: ( ( RightCurlyBracket ) )
            // InternalOpenCypherParser.g:20632:1: ( RightCurlyBracket )
            {
            // InternalOpenCypherParser.g:20632:1: ( RightCurlyBracket )
            // InternalOpenCypherParser.g:20633:2: RightCurlyBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2()); 
            }
            match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__Group__2__Impl"


    // $ANTLR start "rule__Parameter__Group__0"
    // InternalOpenCypherParser.g:20643:1: rule__Parameter__Group__0 : rule__Parameter__Group__0__Impl rule__Parameter__Group__1 ;
    public final void rule__Parameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20647:1: ( rule__Parameter__Group__0__Impl rule__Parameter__Group__1 )
            // InternalOpenCypherParser.g:20648:2: rule__Parameter__Group__0__Impl rule__Parameter__Group__1
            {
            pushFollow(FOLLOW_7);
            rule__Parameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__0"


    // $ANTLR start "rule__Parameter__Group__0__Impl"
    // InternalOpenCypherParser.g:20655:1: rule__Parameter__Group__0__Impl : ( DollarSign ) ;
    public final void rule__Parameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20659:1: ( ( DollarSign ) )
            // InternalOpenCypherParser.g:20660:1: ( DollarSign )
            {
            // InternalOpenCypherParser.g:20660:1: ( DollarSign )
            // InternalOpenCypherParser.g:20661:2: DollarSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getDollarSignKeyword_0()); 
            }
            match(input,DollarSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getDollarSignKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__0__Impl"


    // $ANTLR start "rule__Parameter__Group__1"
    // InternalOpenCypherParser.g:20670:1: rule__Parameter__Group__1 : rule__Parameter__Group__1__Impl ;
    public final void rule__Parameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20674:1: ( rule__Parameter__Group__1__Impl )
            // InternalOpenCypherParser.g:20675:2: rule__Parameter__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__1"


    // $ANTLR start "rule__Parameter__Group__1__Impl"
    // InternalOpenCypherParser.g:20681:1: rule__Parameter__Group__1__Impl : ( ( rule__Parameter__ParameterAssignment_1 ) ) ;
    public final void rule__Parameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20685:1: ( ( ( rule__Parameter__ParameterAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20686:1: ( ( rule__Parameter__ParameterAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20686:1: ( ( rule__Parameter__ParameterAssignment_1 ) )
            // InternalOpenCypherParser.g:20687:2: ( rule__Parameter__ParameterAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getParameterAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20688:2: ( rule__Parameter__ParameterAssignment_1 )
            // InternalOpenCypherParser.g:20688:3: rule__Parameter__ParameterAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__ParameterAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getParameterAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__Group__1__Impl"


    // $ANTLR start "rule__PropertyExpression__Group__0"
    // InternalOpenCypherParser.g:20697:1: rule__PropertyExpression__Group__0 : rule__PropertyExpression__Group__0__Impl rule__PropertyExpression__Group__1 ;
    public final void rule__PropertyExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20701:1: ( rule__PropertyExpression__Group__0__Impl rule__PropertyExpression__Group__1 )
            // InternalOpenCypherParser.g:20702:2: rule__PropertyExpression__Group__0__Impl rule__PropertyExpression__Group__1
            {
            pushFollow(FOLLOW_108);
            rule__PropertyExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__0"


    // $ANTLR start "rule__PropertyExpression__Group__0__Impl"
    // InternalOpenCypherParser.g:20709:1: rule__PropertyExpression__Group__0__Impl : ( ( rule__PropertyExpression__LeftAssignment_0 ) ) ;
    public final void rule__PropertyExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20713:1: ( ( ( rule__PropertyExpression__LeftAssignment_0 ) ) )
            // InternalOpenCypherParser.g:20714:1: ( ( rule__PropertyExpression__LeftAssignment_0 ) )
            {
            // InternalOpenCypherParser.g:20714:1: ( ( rule__PropertyExpression__LeftAssignment_0 ) )
            // InternalOpenCypherParser.g:20715:2: ( rule__PropertyExpression__LeftAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getLeftAssignment_0()); 
            }
            // InternalOpenCypherParser.g:20716:2: ( rule__PropertyExpression__LeftAssignment_0 )
            // InternalOpenCypherParser.g:20716:3: rule__PropertyExpression__LeftAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__LeftAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getLeftAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__0__Impl"


    // $ANTLR start "rule__PropertyExpression__Group__1"
    // InternalOpenCypherParser.g:20724:1: rule__PropertyExpression__Group__1 : rule__PropertyExpression__Group__1__Impl ;
    public final void rule__PropertyExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20728:1: ( rule__PropertyExpression__Group__1__Impl )
            // InternalOpenCypherParser.g:20729:2: rule__PropertyExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__PropertyExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__1"


    // $ANTLR start "rule__PropertyExpression__Group__1__Impl"
    // InternalOpenCypherParser.g:20735:1: rule__PropertyExpression__Group__1__Impl : ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) ) ;
    public final void rule__PropertyExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20739:1: ( ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) ) )
            // InternalOpenCypherParser.g:20740:1: ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) )
            {
            // InternalOpenCypherParser.g:20740:1: ( ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* ) )
            // InternalOpenCypherParser.g:20741:2: ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) ) ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* )
            {
            // InternalOpenCypherParser.g:20741:2: ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 ) )
            // InternalOpenCypherParser.g:20742:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20743:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )
            // InternalOpenCypherParser.g:20743:4: rule__PropertyExpression__PropertyLookupsAssignment_1
            {
            pushFollow(FOLLOW_109);
            rule__PropertyExpression__PropertyLookupsAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }

            }

            // InternalOpenCypherParser.g:20746:2: ( ( rule__PropertyExpression__PropertyLookupsAssignment_1 )* )
            // InternalOpenCypherParser.g:20747:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20748:3: ( rule__PropertyExpression__PropertyLookupsAssignment_1 )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==FullStop) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // InternalOpenCypherParser.g:20748:4: rule__PropertyExpression__PropertyLookupsAssignment_1
            	    {
            	    pushFollow(FOLLOW_109);
            	    rule__PropertyExpression__PropertyLookupsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsAssignment_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__Group__1__Impl"


    // $ANTLR start "rule__DecimalInteger__Group__0"
    // InternalOpenCypherParser.g:20758:1: rule__DecimalInteger__Group__0 : rule__DecimalInteger__Group__0__Impl rule__DecimalInteger__Group__1 ;
    public final void rule__DecimalInteger__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20762:1: ( rule__DecimalInteger__Group__0__Impl rule__DecimalInteger__Group__1 )
            // InternalOpenCypherParser.g:20763:2: rule__DecimalInteger__Group__0__Impl rule__DecimalInteger__Group__1
            {
            pushFollow(FOLLOW_17);
            rule__DecimalInteger__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__0"


    // $ANTLR start "rule__DecimalInteger__Group__0__Impl"
    // InternalOpenCypherParser.g:20770:1: rule__DecimalInteger__Group__0__Impl : ( () ) ;
    public final void rule__DecimalInteger__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20774:1: ( ( () ) )
            // InternalOpenCypherParser.g:20775:1: ( () )
            {
            // InternalOpenCypherParser.g:20775:1: ( () )
            // InternalOpenCypherParser.g:20776:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0()); 
            }
            // InternalOpenCypherParser.g:20777:2: ()
            // InternalOpenCypherParser.g:20777:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getDecimalIntegerAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__0__Impl"


    // $ANTLR start "rule__DecimalInteger__Group__1"
    // InternalOpenCypherParser.g:20785:1: rule__DecimalInteger__Group__1 : rule__DecimalInteger__Group__1__Impl ;
    public final void rule__DecimalInteger__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20789:1: ( rule__DecimalInteger__Group__1__Impl )
            // InternalOpenCypherParser.g:20790:2: rule__DecimalInteger__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__1"


    // $ANTLR start "rule__DecimalInteger__Group__1__Impl"
    // InternalOpenCypherParser.g:20796:1: rule__DecimalInteger__Group__1__Impl : ( ( rule__DecimalInteger__ValueAssignment_1 ) ) ;
    public final void rule__DecimalInteger__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20800:1: ( ( ( rule__DecimalInteger__ValueAssignment_1 ) ) )
            // InternalOpenCypherParser.g:20801:1: ( ( rule__DecimalInteger__ValueAssignment_1 ) )
            {
            // InternalOpenCypherParser.g:20801:1: ( ( rule__DecimalInteger__ValueAssignment_1 ) )
            // InternalOpenCypherParser.g:20802:2: ( rule__DecimalInteger__ValueAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1()); 
            }
            // InternalOpenCypherParser.g:20803:2: ( rule__DecimalInteger__ValueAssignment_1 )
            // InternalOpenCypherParser.g:20803:3: rule__DecimalInteger__ValueAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__DecimalInteger__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__Group__1__Impl"


    // $ANTLR start "rule__Number__Group_1__0"
    // InternalOpenCypherParser.g:20812:1: rule__Number__Group_1__0 : rule__Number__Group_1__0__Impl rule__Number__Group_1__1 ;
    public final void rule__Number__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20816:1: ( rule__Number__Group_1__0__Impl rule__Number__Group_1__1 )
            // InternalOpenCypherParser.g:20817:2: rule__Number__Group_1__0__Impl rule__Number__Group_1__1
            {
            pushFollow(FOLLOW_108);
            rule__Number__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__0"


    // $ANTLR start "rule__Number__Group_1__0__Impl"
    // InternalOpenCypherParser.g:20824:1: rule__Number__Group_1__0__Impl : ( ( rule__Number__Alternatives_1_0 ) ) ;
    public final void rule__Number__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20828:1: ( ( ( rule__Number__Alternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:20829:1: ( ( rule__Number__Alternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:20829:1: ( ( rule__Number__Alternatives_1_0 ) )
            // InternalOpenCypherParser.g:20830:2: ( rule__Number__Alternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:20831:2: ( rule__Number__Alternatives_1_0 )
            // InternalOpenCypherParser.g:20831:3: rule__Number__Alternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__0__Impl"


    // $ANTLR start "rule__Number__Group_1__1"
    // InternalOpenCypherParser.g:20839:1: rule__Number__Group_1__1 : rule__Number__Group_1__1__Impl ;
    public final void rule__Number__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20843:1: ( rule__Number__Group_1__1__Impl )
            // InternalOpenCypherParser.g:20844:2: rule__Number__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__1"


    // $ANTLR start "rule__Number__Group_1__1__Impl"
    // InternalOpenCypherParser.g:20850:1: rule__Number__Group_1__1__Impl : ( ( rule__Number__Group_1_1__0 )? ) ;
    public final void rule__Number__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20854:1: ( ( ( rule__Number__Group_1_1__0 )? ) )
            // InternalOpenCypherParser.g:20855:1: ( ( rule__Number__Group_1_1__0 )? )
            {
            // InternalOpenCypherParser.g:20855:1: ( ( rule__Number__Group_1_1__0 )? )
            // InternalOpenCypherParser.g:20856:2: ( rule__Number__Group_1_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getGroup_1_1()); 
            }
            // InternalOpenCypherParser.g:20857:2: ( rule__Number__Group_1_1__0 )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==FullStop) ) {
                int LA138_1 = input.LA(2);

                if ( ((LA138_1>=RULE_INT && LA138_1<=RULE_DECIMAL)) ) {
                    alt138=1;
                }
            }
            switch (alt138) {
                case 1 :
                    // InternalOpenCypherParser.g:20857:3: rule__Number__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1__1__Impl"


    // $ANTLR start "rule__Number__Group_1_1__0"
    // InternalOpenCypherParser.g:20866:1: rule__Number__Group_1_1__0 : rule__Number__Group_1_1__0__Impl rule__Number__Group_1_1__1 ;
    public final void rule__Number__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20870:1: ( rule__Number__Group_1_1__0__Impl rule__Number__Group_1_1__1 )
            // InternalOpenCypherParser.g:20871:2: rule__Number__Group_1_1__0__Impl rule__Number__Group_1_1__1
            {
            pushFollow(FOLLOW_131);
            rule__Number__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__0"


    // $ANTLR start "rule__Number__Group_1_1__0__Impl"
    // InternalOpenCypherParser.g:20878:1: rule__Number__Group_1_1__0__Impl : ( FullStop ) ;
    public final void rule__Number__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20882:1: ( ( FullStop ) )
            // InternalOpenCypherParser.g:20883:1: ( FullStop )
            {
            // InternalOpenCypherParser.g:20883:1: ( FullStop )
            // InternalOpenCypherParser.g:20884:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__0__Impl"


    // $ANTLR start "rule__Number__Group_1_1__1"
    // InternalOpenCypherParser.g:20893:1: rule__Number__Group_1_1__1 : rule__Number__Group_1_1__1__Impl ;
    public final void rule__Number__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20897:1: ( rule__Number__Group_1_1__1__Impl )
            // InternalOpenCypherParser.g:20898:2: rule__Number__Group_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__1"


    // $ANTLR start "rule__Number__Group_1_1__1__Impl"
    // InternalOpenCypherParser.g:20904:1: rule__Number__Group_1_1__1__Impl : ( ( rule__Number__Alternatives_1_1_1 ) ) ;
    public final void rule__Number__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:20908:1: ( ( ( rule__Number__Alternatives_1_1_1 ) ) )
            // InternalOpenCypherParser.g:20909:1: ( ( rule__Number__Alternatives_1_1_1 ) )
            {
            // InternalOpenCypherParser.g:20909:1: ( ( rule__Number__Alternatives_1_1_1 ) )
            // InternalOpenCypherParser.g:20910:2: ( rule__Number__Alternatives_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); 
            }
            // InternalOpenCypherParser.g:20911:2: ( rule__Number__Alternatives_1_1_1 )
            // InternalOpenCypherParser.g:20911:3: rule__Number__Alternatives_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_1_1__1__Impl"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1"
    // InternalOpenCypherParser.g:20920:1: rule__QueryOptions__UnorderedGroup_1 : ( rule__QueryOptions__UnorderedGroup_1__0 )? ;
    public final void rule__QueryOptions__UnorderedGroup_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
        	
        try {
            // InternalOpenCypherParser.g:20925:1: ( ( rule__QueryOptions__UnorderedGroup_1__0 )? )
            // InternalOpenCypherParser.g:20926:2: ( rule__QueryOptions__UnorderedGroup_1__0 )?
            {
            // InternalOpenCypherParser.g:20926:2: ( rule__QueryOptions__UnorderedGroup_1__0 )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( LA139_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt139=1;
            }
            else if ( LA139_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt139=1;
            }
            else if ( LA139_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // InternalOpenCypherParser.g:0:0: rule__QueryOptions__UnorderedGroup_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__UnorderedGroup_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__Impl"
    // InternalOpenCypherParser.g:20934:1: rule__QueryOptions__UnorderedGroup_1__Impl : ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) ) ;
    public final void rule__QueryOptions__UnorderedGroup_1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalOpenCypherParser.g:20939:1: ( ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) ) )
            // InternalOpenCypherParser.g:20940:3: ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) )
            {
            // InternalOpenCypherParser.g:20940:3: ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) | ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) | ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) ) )
            int alt141=3;
            int LA141_0 = input.LA(1);

            if ( LA141_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt141=1;
            }
            else if ( LA141_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt141=2;
            }
            else if ( LA141_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt141=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // InternalOpenCypherParser.g:20941:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
                    {
                    // InternalOpenCypherParser.g:20941:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
                    // InternalOpenCypherParser.g:20942:4: {...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__QueryOptions__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
                    }
                    // InternalOpenCypherParser.g:20942:108: ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
                    // InternalOpenCypherParser.g:20943:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
                    selected = true;
                    // InternalOpenCypherParser.g:20949:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
                    // InternalOpenCypherParser.g:20950:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); 
                    }
                    // InternalOpenCypherParser.g:20951:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
                    // InternalOpenCypherParser.g:20951:7: rule__QueryOptions__ExplainAssignment_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__ExplainAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalOpenCypherParser.g:20956:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
                    {
                    // InternalOpenCypherParser.g:20956:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
                    // InternalOpenCypherParser.g:20957:4: {...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__QueryOptions__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
                    }
                    // InternalOpenCypherParser.g:20957:108: ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
                    // InternalOpenCypherParser.g:20958:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
                    selected = true;
                    // InternalOpenCypherParser.g:20964:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
                    // InternalOpenCypherParser.g:20965:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); 
                    }
                    // InternalOpenCypherParser.g:20966:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
                    // InternalOpenCypherParser.g:20966:7: rule__QueryOptions__ProfileAssignment_1_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__ProfileAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalOpenCypherParser.g:20971:3: ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) )
                    {
                    // InternalOpenCypherParser.g:20971:3: ({...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) ) )
                    // InternalOpenCypherParser.g:20972:4: {...}? => ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__QueryOptions__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2)");
                    }
                    // InternalOpenCypherParser.g:20972:108: ( ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) ) )
                    // InternalOpenCypherParser.g:20973:5: ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2);
                    selected = true;
                    // InternalOpenCypherParser.g:20979:5: ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* ) )
                    // InternalOpenCypherParser.g:20980:6: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) ) ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* )
                    {
                    // InternalOpenCypherParser.g:20980:6: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 ) )
                    // InternalOpenCypherParser.g:20981:7: ( rule__QueryOptions__CypherOptionAssignment_1_2 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }
                    // InternalOpenCypherParser.g:20982:7: ( rule__QueryOptions__CypherOptionAssignment_1_2 )
                    // InternalOpenCypherParser.g:20982:8: rule__QueryOptions__CypherOptionAssignment_1_2
                    {
                    pushFollow(FOLLOW_132);
                    rule__QueryOptions__CypherOptionAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }

                    }

                    // InternalOpenCypherParser.g:20985:6: ( ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )* )
                    // InternalOpenCypherParser.g:20986:7: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }
                    // InternalOpenCypherParser.g:20987:7: ( ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2 )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==CYPHER) ) {
                            int LA140_2 = input.LA(2);

                            if ( (synpred276_InternalOpenCypherParser()) ) {
                                alt140=1;
                            }


                        }


                        switch (alt140) {
                    	case 1 :
                    	    // InternalOpenCypherParser.g:20987:8: ( rule__QueryOptions__CypherOptionAssignment_1_2 )=> rule__QueryOptions__CypherOptionAssignment_1_2
                    	    {
                    	    pushFollow(FOLLOW_132);
                    	    rule__QueryOptions__CypherOptionAssignment_1_2();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getQueryOptionsAccess().getCypherOptionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__Impl"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__0"
    // InternalOpenCypherParser.g:21001:1: rule__QueryOptions__UnorderedGroup_1__0 : rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__1 )? ;
    public final void rule__QueryOptions__UnorderedGroup_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21005:1: ( rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__1 )? )
            // InternalOpenCypherParser.g:21006:2: rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__1 )?
            {
            pushFollow(FOLLOW_132);
            rule__QueryOptions__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalOpenCypherParser.g:21007:2: ( rule__QueryOptions__UnorderedGroup_1__1 )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( LA142_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt142=1;
            }
            else if ( LA142_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt142=1;
            }
            else if ( LA142_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // InternalOpenCypherParser.g:0:0: rule__QueryOptions__UnorderedGroup_1__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__UnorderedGroup_1__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__0"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__1"
    // InternalOpenCypherParser.g:21013:1: rule__QueryOptions__UnorderedGroup_1__1 : rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__2 )? ;
    public final void rule__QueryOptions__UnorderedGroup_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21017:1: ( rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__2 )? )
            // InternalOpenCypherParser.g:21018:2: rule__QueryOptions__UnorderedGroup_1__Impl ( rule__QueryOptions__UnorderedGroup_1__2 )?
            {
            pushFollow(FOLLOW_132);
            rule__QueryOptions__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalOpenCypherParser.g:21019:2: ( rule__QueryOptions__UnorderedGroup_1__2 )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( LA143_0 == EXPLAIN && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
                alt143=1;
            }
            else if ( LA143_0 == PROFILE && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
                alt143=1;
            }
            else if ( LA143_0 == CYPHER && getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 2) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // InternalOpenCypherParser.g:0:0: rule__QueryOptions__UnorderedGroup_1__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__QueryOptions__UnorderedGroup_1__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__1"


    // $ANTLR start "rule__QueryOptions__UnorderedGroup_1__2"
    // InternalOpenCypherParser.g:21025:1: rule__QueryOptions__UnorderedGroup_1__2 : rule__QueryOptions__UnorderedGroup_1__Impl ;
    public final void rule__QueryOptions__UnorderedGroup_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21029:1: ( rule__QueryOptions__UnorderedGroup_1__Impl )
            // InternalOpenCypherParser.g:21030:2: rule__QueryOptions__UnorderedGroup_1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__QueryOptions__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__UnorderedGroup_1__2"


    // $ANTLR start "rule__Cypher__QueryOptionsAssignment_1"
    // InternalOpenCypherParser.g:21037:1: rule__Cypher__QueryOptionsAssignment_1 : ( ruleQueryOptions ) ;
    public final void rule__Cypher__QueryOptionsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21041:1: ( ( ruleQueryOptions ) )
            // InternalOpenCypherParser.g:21042:2: ( ruleQueryOptions )
            {
            // InternalOpenCypherParser.g:21042:2: ( ruleQueryOptions )
            // InternalOpenCypherParser.g:21043:3: ruleQueryOptions
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleQueryOptions();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getQueryOptionsQueryOptionsParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__QueryOptionsAssignment_1"


    // $ANTLR start "rule__Cypher__StatementAssignment_2"
    // InternalOpenCypherParser.g:21052:1: rule__Cypher__StatementAssignment_2 : ( ruleStatement ) ;
    public final void rule__Cypher__StatementAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21056:1: ( ( ruleStatement ) )
            // InternalOpenCypherParser.g:21057:2: ( ruleStatement )
            {
            // InternalOpenCypherParser.g:21057:2: ( ruleStatement )
            // InternalOpenCypherParser.g:21058:3: ruleStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherAccess().getStatementStatementParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherAccess().getStatementStatementParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Cypher__StatementAssignment_2"


    // $ANTLR start "rule__QueryOptions__ExplainAssignment_1_0"
    // InternalOpenCypherParser.g:21067:1: rule__QueryOptions__ExplainAssignment_1_0 : ( ( EXPLAIN ) ) ;
    public final void rule__QueryOptions__ExplainAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21071:1: ( ( ( EXPLAIN ) ) )
            // InternalOpenCypherParser.g:21072:2: ( ( EXPLAIN ) )
            {
            // InternalOpenCypherParser.g:21072:2: ( ( EXPLAIN ) )
            // InternalOpenCypherParser.g:21073:3: ( EXPLAIN )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }
            // InternalOpenCypherParser.g:21074:3: ( EXPLAIN )
            // InternalOpenCypherParser.g:21075:4: EXPLAIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }
            match(input,EXPLAIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getExplainEXPLAINKeyword_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__ExplainAssignment_1_0"


    // $ANTLR start "rule__QueryOptions__ProfileAssignment_1_1"
    // InternalOpenCypherParser.g:21086:1: rule__QueryOptions__ProfileAssignment_1_1 : ( ( PROFILE ) ) ;
    public final void rule__QueryOptions__ProfileAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21090:1: ( ( ( PROFILE ) ) )
            // InternalOpenCypherParser.g:21091:2: ( ( PROFILE ) )
            {
            // InternalOpenCypherParser.g:21091:2: ( ( PROFILE ) )
            // InternalOpenCypherParser.g:21092:3: ( PROFILE )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:21093:3: ( PROFILE )
            // InternalOpenCypherParser.g:21094:4: PROFILE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }
            match(input,PROFILE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getProfilePROFILEKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__ProfileAssignment_1_1"


    // $ANTLR start "rule__QueryOptions__CypherOptionAssignment_1_2"
    // InternalOpenCypherParser.g:21105:1: rule__QueryOptions__CypherOptionAssignment_1_2 : ( ruleCypherOption ) ;
    public final void rule__QueryOptions__CypherOptionAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21109:1: ( ( ruleCypherOption ) )
            // InternalOpenCypherParser.g:21110:2: ( ruleCypherOption )
            {
            // InternalOpenCypherParser.g:21110:2: ( ruleCypherOption )
            // InternalOpenCypherParser.g:21111:3: ruleCypherOption
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCypherOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getQueryOptionsAccess().getCypherOptionCypherOptionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__QueryOptions__CypherOptionAssignment_1_2"


    // $ANTLR start "rule__CypherOption__VersionNumberAssignment_2"
    // InternalOpenCypherParser.g:21120:1: rule__CypherOption__VersionNumberAssignment_2 : ( ruleVersionNumber ) ;
    public final void rule__CypherOption__VersionNumberAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21124:1: ( ( ruleVersionNumber ) )
            // InternalOpenCypherParser.g:21125:2: ( ruleVersionNumber )
            {
            // InternalOpenCypherParser.g:21125:2: ( ruleVersionNumber )
            // InternalOpenCypherParser.g:21126:3: ruleVersionNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVersionNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getVersionNumberVersionNumberParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__VersionNumberAssignment_2"


    // $ANTLR start "rule__CypherOption__ConfigurationOptionAssignment_3"
    // InternalOpenCypherParser.g:21135:1: rule__CypherOption__ConfigurationOptionAssignment_3 : ( ruleConfigurationOption ) ;
    public final void rule__CypherOption__ConfigurationOptionAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21139:1: ( ( ruleConfigurationOption ) )
            // InternalOpenCypherParser.g:21140:2: ( ruleConfigurationOption )
            {
            // InternalOpenCypherParser.g:21140:2: ( ruleConfigurationOption )
            // InternalOpenCypherParser.g:21141:3: ruleConfigurationOption
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleConfigurationOption();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCypherOptionAccess().getConfigurationOptionConfigurationOptionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CypherOption__ConfigurationOptionAssignment_3"


    // $ANTLR start "rule__VersionNumber__VersionNumberAssignment"
    // InternalOpenCypherParser.g:21150:1: rule__VersionNumber__VersionNumberAssignment : ( ruleNumber ) ;
    public final void rule__VersionNumber__VersionNumberAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21154:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:21155:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:21155:2: ( ruleNumber )
            // InternalOpenCypherParser.g:21156:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVersionNumberAccess().getVersionNumberNumberParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VersionNumber__VersionNumberAssignment"


    // $ANTLR start "rule__ConfigurationOption__KeyAssignment_0"
    // InternalOpenCypherParser.g:21165:1: rule__ConfigurationOption__KeyAssignment_0 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__ConfigurationOption__KeyAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21169:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:21170:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:21170:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:21171:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getKeySYMBOLIC_NAME_XParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__KeyAssignment_0"


    // $ANTLR start "rule__ConfigurationOption__ValueAssignment_2"
    // InternalOpenCypherParser.g:21180:1: rule__ConfigurationOption__ValueAssignment_2 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__ConfigurationOption__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21184:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:21185:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:21185:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:21186:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getConfigurationOptionAccess().getValueSYMBOLIC_NAME_XParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ConfigurationOption__ValueAssignment_2"


    // $ANTLR start "rule__RegularQuery__UnionAssignment_1_1"
    // InternalOpenCypherParser.g:21195:1: rule__RegularQuery__UnionAssignment_1_1 : ( ruleUnion ) ;
    public final void rule__RegularQuery__UnionAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21199:1: ( ( ruleUnion ) )
            // InternalOpenCypherParser.g:21200:2: ( ruleUnion )
            {
            // InternalOpenCypherParser.g:21200:2: ( ruleUnion )
            // InternalOpenCypherParser.g:21201:3: ruleUnion
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUnion();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRegularQueryAccess().getUnionUnionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RegularQuery__UnionAssignment_1_1"


    // $ANTLR start "rule__BulkImportQuery__PeriodicCommitHintAssignment_0"
    // InternalOpenCypherParser.g:21210:1: rule__BulkImportQuery__PeriodicCommitHintAssignment_0 : ( rulePeriodicCommitHint ) ;
    public final void rule__BulkImportQuery__PeriodicCommitHintAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21214:1: ( ( rulePeriodicCommitHint ) )
            // InternalOpenCypherParser.g:21215:2: ( rulePeriodicCommitHint )
            {
            // InternalOpenCypherParser.g:21215:2: ( rulePeriodicCommitHint )
            // InternalOpenCypherParser.g:21216:3: rulePeriodicCommitHint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePeriodicCommitHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getPeriodicCommitHintPeriodicCommitHintParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__PeriodicCommitHintAssignment_0"


    // $ANTLR start "rule__BulkImportQuery__LoadCSVQueryAssignment_1"
    // InternalOpenCypherParser.g:21225:1: rule__BulkImportQuery__LoadCSVQueryAssignment_1 : ( ruleLoadCSVQuery ) ;
    public final void rule__BulkImportQuery__LoadCSVQueryAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21229:1: ( ( ruleLoadCSVQuery ) )
            // InternalOpenCypherParser.g:21230:2: ( ruleLoadCSVQuery )
            {
            // InternalOpenCypherParser.g:21230:2: ( ruleLoadCSVQuery )
            // InternalOpenCypherParser.g:21231:3: ruleLoadCSVQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLoadCSVQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBulkImportQueryAccess().getLoadCSVQueryLoadCSVQueryParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BulkImportQuery__LoadCSVQueryAssignment_1"


    // $ANTLR start "rule__SingleQuery__ClausesAssignment_0"
    // InternalOpenCypherParser.g:21240:1: rule__SingleQuery__ClausesAssignment_0 : ( ruleClause ) ;
    public final void rule__SingleQuery__ClausesAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21244:1: ( ( ruleClause ) )
            // InternalOpenCypherParser.g:21245:2: ( ruleClause )
            {
            // InternalOpenCypherParser.g:21245:2: ( ruleClause )
            // InternalOpenCypherParser.g:21246:3: ruleClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__ClausesAssignment_0"


    // $ANTLR start "rule__SingleQuery__ClausesAssignment_1"
    // InternalOpenCypherParser.g:21255:1: rule__SingleQuery__ClausesAssignment_1 : ( ruleClause ) ;
    public final void rule__SingleQuery__ClausesAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21259:1: ( ( ruleClause ) )
            // InternalOpenCypherParser.g:21260:2: ( ruleClause )
            {
            // InternalOpenCypherParser.g:21260:2: ( ruleClause )
            // InternalOpenCypherParser.g:21261:3: ruleClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSingleQueryAccess().getClausesClauseParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SingleQuery__ClausesAssignment_1"


    // $ANTLR start "rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4"
    // InternalOpenCypherParser.g:21270:1: rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4 : ( ruleDecimalInteger ) ;
    public final void rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21274:1: ( ( ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:21275:2: ( ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:21275:2: ( ruleDecimalInteger )
            // InternalOpenCypherParser.g:21276:3: ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPeriodicCommitHintAccess().getNumberOfRowsPerCommitDecimalIntegerParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PeriodicCommitHint__NumberOfRowsPerCommitAssignment_4"


    // $ANTLR start "rule__LoadCSVQuery__LoadCSVAssignment_0"
    // InternalOpenCypherParser.g:21285:1: rule__LoadCSVQuery__LoadCSVAssignment_0 : ( ruleLoadCSV ) ;
    public final void rule__LoadCSVQuery__LoadCSVAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21289:1: ( ( ruleLoadCSV ) )
            // InternalOpenCypherParser.g:21290:2: ( ruleLoadCSV )
            {
            // InternalOpenCypherParser.g:21290:2: ( ruleLoadCSV )
            // InternalOpenCypherParser.g:21291:3: ruleLoadCSV
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLoadCSV();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getLoadCSVLoadCSVParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__LoadCSVAssignment_0"


    // $ANTLR start "rule__LoadCSVQuery__ClausesAssignment_1"
    // InternalOpenCypherParser.g:21300:1: rule__LoadCSVQuery__ClausesAssignment_1 : ( ruleClause ) ;
    public final void rule__LoadCSVQuery__ClausesAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21304:1: ( ( ruleClause ) )
            // InternalOpenCypherParser.g:21305:2: ( ruleClause )
            {
            // InternalOpenCypherParser.g:21305:2: ( ruleClause )
            // InternalOpenCypherParser.g:21306:3: ruleClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVQueryAccess().getClausesClauseParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVQueryAccess().getClausesClauseParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSVQuery__ClausesAssignment_1"


    // $ANTLR start "rule__Union__AllAssignment_1"
    // InternalOpenCypherParser.g:21315:1: rule__Union__AllAssignment_1 : ( ( ALL ) ) ;
    public final void rule__Union__AllAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21319:1: ( ( ( ALL ) ) )
            // InternalOpenCypherParser.g:21320:2: ( ( ALL ) )
            {
            // InternalOpenCypherParser.g:21320:2: ( ( ALL ) )
            // InternalOpenCypherParser.g:21321:3: ( ALL )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }
            // InternalOpenCypherParser.g:21322:3: ( ALL )
            // InternalOpenCypherParser.g:21323:4: ALL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }
            match(input,ALL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getAllALLKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__AllAssignment_1"


    // $ANTLR start "rule__Union__SingleQueryAssignment_2"
    // InternalOpenCypherParser.g:21334:1: rule__Union__SingleQueryAssignment_2 : ( ruleSingleQuery ) ;
    public final void rule__Union__SingleQueryAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21338:1: ( ( ruleSingleQuery ) )
            // InternalOpenCypherParser.g:21339:2: ( ruleSingleQuery )
            {
            // InternalOpenCypherParser.g:21339:2: ( ruleSingleQuery )
            // InternalOpenCypherParser.g:21340:3: ruleSingleQuery
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSingleQuery();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnionAccess().getSingleQuerySingleQueryParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Union__SingleQueryAssignment_2"


    // $ANTLR start "rule__CreateIndex__IndexAssignment_1"
    // InternalOpenCypherParser.g:21349:1: rule__CreateIndex__IndexAssignment_1 : ( ruleIndex ) ;
    public final void rule__CreateIndex__IndexAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21353:1: ( ( ruleIndex ) )
            // InternalOpenCypherParser.g:21354:2: ( ruleIndex )
            {
            // InternalOpenCypherParser.g:21354:2: ( ruleIndex )
            // InternalOpenCypherParser.g:21355:3: ruleIndex
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CreateIndex__IndexAssignment_1"


    // $ANTLR start "rule__DropUniqueConstraint__UniqueConstraintAssignment_1"
    // InternalOpenCypherParser.g:21364:1: rule__DropUniqueConstraint__UniqueConstraintAssignment_1 : ( ruleUniqueConstraint ) ;
    public final void rule__DropUniqueConstraint__UniqueConstraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21368:1: ( ( ruleUniqueConstraint ) )
            // InternalOpenCypherParser.g:21369:2: ( ruleUniqueConstraint )
            {
            // InternalOpenCypherParser.g:21369:2: ( ruleUniqueConstraint )
            // InternalOpenCypherParser.g:21370:3: ruleUniqueConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUniqueConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropUniqueConstraintAccess().getUniqueConstraintUniqueConstraintParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropUniqueConstraint__UniqueConstraintAssignment_1"


    // $ANTLR start "rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1"
    // InternalOpenCypherParser.g:21379:1: rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1 : ( ruleNodePropertyExistenceConstraint ) ;
    public final void rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21383:1: ( ( ruleNodePropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:21384:2: ( ruleNodePropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:21384:2: ( ruleNodePropertyExistenceConstraint )
            // InternalOpenCypherParser.g:21385:3: ruleNodePropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropNodePropertyExistenceConstraintAccess().getNodePropertyExistenceConstraintNodePropertyExistenceConstraintParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropNodePropertyExistenceConstraint__NodePropertyExistenceConstraintAssignment_1"


    // $ANTLR start "rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1"
    // InternalOpenCypherParser.g:21394:1: rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1 : ( ruleRelationshipPropertyExistenceConstraint ) ;
    public final void rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21398:1: ( ( ruleRelationshipPropertyExistenceConstraint ) )
            // InternalOpenCypherParser.g:21399:2: ( ruleRelationshipPropertyExistenceConstraint )
            {
            // InternalOpenCypherParser.g:21399:2: ( ruleRelationshipPropertyExistenceConstraint )
            // InternalOpenCypherParser.g:21400:3: ruleRelationshipPropertyExistenceConstraint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPropertyExistenceConstraint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropRelationshipPropertyExistenceConstraintAccess().getRelationshipPropertyExistenceConstraintRelationshipPropertyExistenceConstraintParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropRelationshipPropertyExistenceConstraint__RelationshipPropertyExistenceConstraintAssignment_1"


    // $ANTLR start "rule__DropIndex__IndexAssignment_1"
    // InternalOpenCypherParser.g:21409:1: rule__DropIndex__IndexAssignment_1 : ( ruleIndex ) ;
    public final void rule__DropIndex__IndexAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21413:1: ( ( ruleIndex ) )
            // InternalOpenCypherParser.g:21414:2: ( ruleIndex )
            {
            // InternalOpenCypherParser.g:21414:2: ( ruleIndex )
            // InternalOpenCypherParser.g:21415:3: ruleIndex
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIndex();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDropIndexAccess().getIndexIndexParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DropIndex__IndexAssignment_1"


    // $ANTLR start "rule__Index__NodeLabelAssignment_2"
    // InternalOpenCypherParser.g:21424:1: rule__Index__NodeLabelAssignment_2 : ( ruleNodeLabel ) ;
    public final void rule__Index__NodeLabelAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21428:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:21429:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:21429:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:21430:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getNodeLabelNodeLabelParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__NodeLabelAssignment_2"


    // $ANTLR start "rule__Index__PropertyKeyNameAssignment_4"
    // InternalOpenCypherParser.g:21439:1: rule__Index__PropertyKeyNameAssignment_4 : ( rulePropertyKeyName ) ;
    public final void rule__Index__PropertyKeyNameAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21443:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:21444:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:21444:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:21445:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Index__PropertyKeyNameAssignment_4"


    // $ANTLR start "rule__UniqueConstraint__VariableAssignment_3"
    // InternalOpenCypherParser.g:21454:1: rule__UniqueConstraint__VariableAssignment_3 : ( ruleVariableDeclaration ) ;
    public final void rule__UniqueConstraint__VariableAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21458:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21459:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21459:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21460:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__VariableAssignment_3"


    // $ANTLR start "rule__UniqueConstraint__NodeLabelAssignment_4"
    // InternalOpenCypherParser.g:21469:1: rule__UniqueConstraint__NodeLabelAssignment_4 : ( ruleNodeLabel ) ;
    public final void rule__UniqueConstraint__NodeLabelAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21473:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:21474:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:21474:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:21475:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__NodeLabelAssignment_4"


    // $ANTLR start "rule__UniqueConstraint__PropertyExpressionAssignment_7"
    // InternalOpenCypherParser.g:21484:1: rule__UniqueConstraint__PropertyExpressionAssignment_7 : ( rulePropertyExpression ) ;
    public final void rule__UniqueConstraint__PropertyExpressionAssignment_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21488:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:21489:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:21489:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:21490:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUniqueConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UniqueConstraint__PropertyExpressionAssignment_7"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__VariableAssignment_3"
    // InternalOpenCypherParser.g:21499:1: rule__NodePropertyExistenceConstraint__VariableAssignment_3 : ( ruleVariableDeclaration ) ;
    public final void rule__NodePropertyExistenceConstraint__VariableAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21503:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21504:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21504:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21505:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__VariableAssignment_3"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4"
    // InternalOpenCypherParser.g:21514:1: rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4 : ( ruleNodeLabel ) ;
    public final void rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21518:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:21519:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:21519:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:21520:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getNodeLabelNodeLabelParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__NodeLabelAssignment_4"


    // $ANTLR start "rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9"
    // InternalOpenCypherParser.g:21529:1: rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9 : ( rulePropertyExpression ) ;
    public final void rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21533:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:21534:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:21534:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:21535:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePropertyExistenceConstraint__PropertyExpressionAssignment_9"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2"
    // InternalOpenCypherParser.g:21544:1: rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2 : ( ruleRelationshipPatternSyntax ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21548:1: ( ( ruleRelationshipPatternSyntax ) )
            // InternalOpenCypherParser.g:21549:2: ( ruleRelationshipPatternSyntax )
            {
            // InternalOpenCypherParser.g:21549:2: ( ruleRelationshipPatternSyntax )
            // InternalOpenCypherParser.g:21550:3: ruleRelationshipPatternSyntax
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPatternSyntax();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getRelationshipPatternRelationshipPatternSyntaxParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__RelationshipPatternAssignment_2"


    // $ANTLR start "rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6"
    // InternalOpenCypherParser.g:21559:1: rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6 : ( rulePropertyExpression ) ;
    public final void rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21563:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:21564:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:21564:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:21565:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPropertyExistenceConstraintAccess().getPropertyExpressionPropertyExpressionParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPropertyExistenceConstraint__PropertyExpressionAssignment_6"


    // $ANTLR start "rule__RelationshipPatternSyntax__IncomingAssignment_2"
    // InternalOpenCypherParser.g:21574:1: rule__RelationshipPatternSyntax__IncomingAssignment_2 : ( ruleLeftArrowHead ) ;
    public final void rule__RelationshipPatternSyntax__IncomingAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21578:1: ( ( ruleLeftArrowHead ) )
            // InternalOpenCypherParser.g:21579:2: ( ruleLeftArrowHead )
            {
            // InternalOpenCypherParser.g:21579:2: ( ruleLeftArrowHead )
            // InternalOpenCypherParser.g:21580:3: ruleLeftArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getIncomingLeftArrowHeadParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__IncomingAssignment_2"


    // $ANTLR start "rule__RelationshipPatternSyntax__VariableAssignment_5"
    // InternalOpenCypherParser.g:21589:1: rule__RelationshipPatternSyntax__VariableAssignment_5 : ( ruleVariableDeclaration ) ;
    public final void rule__RelationshipPatternSyntax__VariableAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21593:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21594:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21594:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21595:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getVariableVariableDeclarationParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__VariableAssignment_5"


    // $ANTLR start "rule__RelationshipPatternSyntax__RelTypeAssignment_6"
    // InternalOpenCypherParser.g:21604:1: rule__RelationshipPatternSyntax__RelTypeAssignment_6 : ( ruleRelType ) ;
    public final void rule__RelationshipPatternSyntax__RelTypeAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21608:1: ( ( ruleRelType ) )
            // InternalOpenCypherParser.g:21609:2: ( ruleRelType )
            {
            // InternalOpenCypherParser.g:21609:2: ( ruleRelType )
            // InternalOpenCypherParser.g:21610:3: ruleRelType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getRelTypeRelTypeParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__RelTypeAssignment_6"


    // $ANTLR start "rule__RelationshipPatternSyntax__OutgoingAssignment_9"
    // InternalOpenCypherParser.g:21619:1: rule__RelationshipPatternSyntax__OutgoingAssignment_9 : ( ruleRightArrowHead ) ;
    public final void rule__RelationshipPatternSyntax__OutgoingAssignment_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21623:1: ( ( ruleRightArrowHead ) )
            // InternalOpenCypherParser.g:21624:2: ( ruleRightArrowHead )
            {
            // InternalOpenCypherParser.g:21624:2: ( ruleRightArrowHead )
            // InternalOpenCypherParser.g:21625:3: ruleRightArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternSyntaxAccess().getOutgoingRightArrowHeadParserRuleCall_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPatternSyntax__OutgoingAssignment_9"


    // $ANTLR start "rule__LoadCSV__WithHeadersAssignment_3"
    // InternalOpenCypherParser.g:21634:1: rule__LoadCSV__WithHeadersAssignment_3 : ( ruleLoadCSVWithHeaders ) ;
    public final void rule__LoadCSV__WithHeadersAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21638:1: ( ( ruleLoadCSVWithHeaders ) )
            // InternalOpenCypherParser.g:21639:2: ( ruleLoadCSVWithHeaders )
            {
            // InternalOpenCypherParser.g:21639:2: ( ruleLoadCSVWithHeaders )
            // InternalOpenCypherParser.g:21640:3: ruleLoadCSVWithHeaders
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLoadCSVWithHeaders();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getWithHeadersLoadCSVWithHeadersParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__WithHeadersAssignment_3"


    // $ANTLR start "rule__LoadCSV__ExpressionAssignment_5"
    // InternalOpenCypherParser.g:21649:1: rule__LoadCSV__ExpressionAssignment_5 : ( ruleExpression ) ;
    public final void rule__LoadCSV__ExpressionAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21653:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:21654:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:21654:2: ( ruleExpression )
            // InternalOpenCypherParser.g:21655:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__ExpressionAssignment_5"


    // $ANTLR start "rule__LoadCSV__VariableAssignment_7"
    // InternalOpenCypherParser.g:21664:1: rule__LoadCSV__VariableAssignment_7 : ( ruleVariableDeclaration ) ;
    public final void rule__LoadCSV__VariableAssignment_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21668:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21669:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21669:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21670:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getVariableVariableDeclarationParserRuleCall_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__VariableAssignment_7"


    // $ANTLR start "rule__LoadCSV__FieldterminatorAssignment_8_1"
    // InternalOpenCypherParser.g:21679:1: rule__LoadCSV__FieldterminatorAssignment_8_1 : ( RULE_STRING_LITERAL ) ;
    public final void rule__LoadCSV__FieldterminatorAssignment_8_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21683:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:21684:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:21684:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:21685:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLoadCSVAccess().getFieldterminatorSTRING_LITERALTerminalRuleCall_8_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LoadCSV__FieldterminatorAssignment_8_1"


    // $ANTLR start "rule__Match__OptionalAssignment_0"
    // InternalOpenCypherParser.g:21694:1: rule__Match__OptionalAssignment_0 : ( ( OPTIONAL ) ) ;
    public final void rule__Match__OptionalAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21698:1: ( ( ( OPTIONAL ) ) )
            // InternalOpenCypherParser.g:21699:2: ( ( OPTIONAL ) )
            {
            // InternalOpenCypherParser.g:21699:2: ( ( OPTIONAL ) )
            // InternalOpenCypherParser.g:21700:3: ( OPTIONAL )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:21701:3: ( OPTIONAL )
            // InternalOpenCypherParser.g:21702:4: OPTIONAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }
            match(input,OPTIONAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getOptionalOPTIONALKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__OptionalAssignment_0"


    // $ANTLR start "rule__Match__PatternAssignment_2"
    // InternalOpenCypherParser.g:21713:1: rule__Match__PatternAssignment_2 : ( rulePattern ) ;
    public final void rule__Match__PatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21717:1: ( ( rulePattern ) )
            // InternalOpenCypherParser.g:21718:2: ( rulePattern )
            {
            // InternalOpenCypherParser.g:21718:2: ( rulePattern )
            // InternalOpenCypherParser.g:21719:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getPatternPatternParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__PatternAssignment_2"


    // $ANTLR start "rule__Match__HintsAssignment_3"
    // InternalOpenCypherParser.g:21728:1: rule__Match__HintsAssignment_3 : ( ruleHint ) ;
    public final void rule__Match__HintsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21732:1: ( ( ruleHint ) )
            // InternalOpenCypherParser.g:21733:2: ( ruleHint )
            {
            // InternalOpenCypherParser.g:21733:2: ( ruleHint )
            // InternalOpenCypherParser.g:21734:3: ruleHint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleHint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getHintsHintParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__HintsAssignment_3"


    // $ANTLR start "rule__Match__WhereAssignment_4"
    // InternalOpenCypherParser.g:21743:1: rule__Match__WhereAssignment_4 : ( ruleWhere ) ;
    public final void rule__Match__WhereAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21747:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:21748:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:21748:2: ( ruleWhere )
            // InternalOpenCypherParser.g:21749:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMatchAccess().getWhereWhereParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Match__WhereAssignment_4"


    // $ANTLR start "rule__Unwind__ExpressionAssignment_1"
    // InternalOpenCypherParser.g:21758:1: rule__Unwind__ExpressionAssignment_1 : ( ruleExpression ) ;
    public final void rule__Unwind__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21762:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:21763:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:21763:2: ( ruleExpression )
            // InternalOpenCypherParser.g:21764:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__ExpressionAssignment_1"


    // $ANTLR start "rule__Unwind__VariableAssignment_3"
    // InternalOpenCypherParser.g:21773:1: rule__Unwind__VariableAssignment_3 : ( ruleVariableDeclaration ) ;
    public final void rule__Unwind__VariableAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21777:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21778:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21778:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21779:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnwindAccess().getVariableVariableDeclarationParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Unwind__VariableAssignment_3"


    // $ANTLR start "rule__Merge__PatternPartAssignment_1"
    // InternalOpenCypherParser.g:21788:1: rule__Merge__PatternPartAssignment_1 : ( rulePatternPart ) ;
    public final void rule__Merge__PatternPartAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21792:1: ( ( rulePatternPart ) )
            // InternalOpenCypherParser.g:21793:2: ( rulePatternPart )
            {
            // InternalOpenCypherParser.g:21793:2: ( rulePatternPart )
            // InternalOpenCypherParser.g:21794:3: rulePatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getPatternPartPatternPartParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__PatternPartAssignment_1"


    // $ANTLR start "rule__Merge__MergeActionsAssignment_2"
    // InternalOpenCypherParser.g:21803:1: rule__Merge__MergeActionsAssignment_2 : ( ruleMergeAction ) ;
    public final void rule__Merge__MergeActionsAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21807:1: ( ( ruleMergeAction ) )
            // InternalOpenCypherParser.g:21808:2: ( ruleMergeAction )
            {
            // InternalOpenCypherParser.g:21808:2: ( ruleMergeAction )
            // InternalOpenCypherParser.g:21809:3: ruleMergeAction
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMergeAction();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeAccess().getMergeActionsMergeActionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Merge__MergeActionsAssignment_2"


    // $ANTLR start "rule__MergeAction__ActionAssignment_1"
    // InternalOpenCypherParser.g:21818:1: rule__MergeAction__ActionAssignment_1 : ( ( rule__MergeAction__ActionAlternatives_1_0 ) ) ;
    public final void rule__MergeAction__ActionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21822:1: ( ( ( rule__MergeAction__ActionAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:21823:2: ( ( rule__MergeAction__ActionAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:21823:2: ( ( rule__MergeAction__ActionAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:21824:3: ( rule__MergeAction__ActionAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:21825:3: ( rule__MergeAction__ActionAlternatives_1_0 )
            // InternalOpenCypherParser.g:21825:4: rule__MergeAction__ActionAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__MergeAction__ActionAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getActionAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__ActionAssignment_1"


    // $ANTLR start "rule__MergeAction__SetAssignment_2"
    // InternalOpenCypherParser.g:21833:1: rule__MergeAction__SetAssignment_2 : ( ruleSet ) ;
    public final void rule__MergeAction__SetAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21837:1: ( ( ruleSet ) )
            // InternalOpenCypherParser.g:21838:2: ( ruleSet )
            {
            // InternalOpenCypherParser.g:21838:2: ( ruleSet )
            // InternalOpenCypherParser.g:21839:3: ruleSet
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSet();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMergeActionAccess().getSetSetParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MergeAction__SetAssignment_2"


    // $ANTLR start "rule__Create__UniqueAssignment_1"
    // InternalOpenCypherParser.g:21848:1: rule__Create__UniqueAssignment_1 : ( ( UNIQUE ) ) ;
    public final void rule__Create__UniqueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21852:1: ( ( ( UNIQUE ) ) )
            // InternalOpenCypherParser.g:21853:2: ( ( UNIQUE ) )
            {
            // InternalOpenCypherParser.g:21853:2: ( ( UNIQUE ) )
            // InternalOpenCypherParser.g:21854:3: ( UNIQUE )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getUniqueUNIQUEKeyword_1_0()); 
            }
            // InternalOpenCypherParser.g:21855:3: ( UNIQUE )
            // InternalOpenCypherParser.g:21856:4: UNIQUE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getUniqueUNIQUEKeyword_1_0()); 
            }
            match(input,UNIQUE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getUniqueUNIQUEKeyword_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getUniqueUNIQUEKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__UniqueAssignment_1"


    // $ANTLR start "rule__Create__PatternAssignment_2"
    // InternalOpenCypherParser.g:21867:1: rule__Create__PatternAssignment_2 : ( rulePattern ) ;
    public final void rule__Create__PatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21871:1: ( ( rulePattern ) )
            // InternalOpenCypherParser.g:21872:2: ( rulePattern )
            {
            // InternalOpenCypherParser.g:21872:2: ( rulePattern )
            // InternalOpenCypherParser.g:21873:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCreateAccess().getPatternPatternParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Create__PatternAssignment_2"


    // $ANTLR start "rule__Set__SetItemsAssignment_1"
    // InternalOpenCypherParser.g:21882:1: rule__Set__SetItemsAssignment_1 : ( ruleSetItem ) ;
    public final void rule__Set__SetItemsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21886:1: ( ( ruleSetItem ) )
            // InternalOpenCypherParser.g:21887:2: ( ruleSetItem )
            {
            // InternalOpenCypherParser.g:21887:2: ( ruleSetItem )
            // InternalOpenCypherParser.g:21888:3: ruleSetItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSetItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__SetItemsAssignment_1"


    // $ANTLR start "rule__Set__SetItemsAssignment_2_1"
    // InternalOpenCypherParser.g:21897:1: rule__Set__SetItemsAssignment_2_1 : ( ruleSetItem ) ;
    public final void rule__Set__SetItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21901:1: ( ( ruleSetItem ) )
            // InternalOpenCypherParser.g:21902:2: ( ruleSetItem )
            {
            // InternalOpenCypherParser.g:21902:2: ( ruleSetItem )
            // InternalOpenCypherParser.g:21903:3: ruleSetItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSetItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetAccess().getSetItemsSetItemParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Set__SetItemsAssignment_2_1"


    // $ANTLR start "rule__SetItem__PropertyExpressionAssignment_0_0"
    // InternalOpenCypherParser.g:21912:1: rule__SetItem__PropertyExpressionAssignment_0_0 : ( rulePropertyExpression ) ;
    public final void rule__SetItem__PropertyExpressionAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21916:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:21917:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:21917:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:21918:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__PropertyExpressionAssignment_0_0"


    // $ANTLR start "rule__SetItem__ExpressionAssignment_0_2"
    // InternalOpenCypherParser.g:21927:1: rule__SetItem__ExpressionAssignment_0_2 : ( ruleExpression ) ;
    public final void rule__SetItem__ExpressionAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21931:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:21932:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:21932:2: ( ruleExpression )
            // InternalOpenCypherParser.g:21933:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__ExpressionAssignment_0_2"


    // $ANTLR start "rule__SetItem__VariableAssignment_1_0"
    // InternalOpenCypherParser.g:21942:1: rule__SetItem__VariableAssignment_1_0 : ( ruleVariableDeclaration ) ;
    public final void rule__SetItem__VariableAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21946:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21947:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21947:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21948:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__VariableAssignment_1_0"


    // $ANTLR start "rule__SetItem__ExpressionAssignment_1_2"
    // InternalOpenCypherParser.g:21957:1: rule__SetItem__ExpressionAssignment_1_2 : ( ruleExpression ) ;
    public final void rule__SetItem__ExpressionAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21961:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:21962:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:21962:2: ( ruleExpression )
            // InternalOpenCypherParser.g:21963:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__ExpressionAssignment_1_2"


    // $ANTLR start "rule__SetItem__VariableAssignment_2_0"
    // InternalOpenCypherParser.g:21972:1: rule__SetItem__VariableAssignment_2_0 : ( ruleVariableDeclaration ) ;
    public final void rule__SetItem__VariableAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21976:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:21977:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:21977:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:21978:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__VariableAssignment_2_0"


    // $ANTLR start "rule__SetItem__ExpressionAssignment_2_2"
    // InternalOpenCypherParser.g:21987:1: rule__SetItem__ExpressionAssignment_2_2 : ( ruleExpression ) ;
    public final void rule__SetItem__ExpressionAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:21991:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:21992:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:21992:2: ( ruleExpression )
            // InternalOpenCypherParser.g:21993:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getExpressionExpressionParserRuleCall_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__ExpressionAssignment_2_2"


    // $ANTLR start "rule__SetItem__VariableAssignment_3_0"
    // InternalOpenCypherParser.g:22002:1: rule__SetItem__VariableAssignment_3_0 : ( ruleVariableDeclaration ) ;
    public final void rule__SetItem__VariableAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22006:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22007:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22007:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22008:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getVariableVariableDeclarationParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__VariableAssignment_3_0"


    // $ANTLR start "rule__SetItem__NodeLabelsAssignment_3_1"
    // InternalOpenCypherParser.g:22017:1: rule__SetItem__NodeLabelsAssignment_3_1 : ( ruleNodeLabels ) ;
    public final void rule__SetItem__NodeLabelsAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22021:1: ( ( ruleNodeLabels ) )
            // InternalOpenCypherParser.g:22022:2: ( ruleNodeLabels )
            {
            // InternalOpenCypherParser.g:22022:2: ( ruleNodeLabels )
            // InternalOpenCypherParser.g:22023:3: ruleNodeLabels
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSetItemAccess().getNodeLabelsNodeLabelsParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSetItemAccess().getNodeLabelsNodeLabelsParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SetItem__NodeLabelsAssignment_3_1"


    // $ANTLR start "rule__Delete__DetachAssignment_0"
    // InternalOpenCypherParser.g:22032:1: rule__Delete__DetachAssignment_0 : ( ( DETACH ) ) ;
    public final void rule__Delete__DetachAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22036:1: ( ( ( DETACH ) ) )
            // InternalOpenCypherParser.g:22037:2: ( ( DETACH ) )
            {
            // InternalOpenCypherParser.g:22037:2: ( ( DETACH ) )
            // InternalOpenCypherParser.g:22038:3: ( DETACH )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:22039:3: ( DETACH )
            // InternalOpenCypherParser.g:22040:4: DETACH
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }
            match(input,DETACH,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getDetachDETACHKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__DetachAssignment_0"


    // $ANTLR start "rule__Delete__ExpressionsAssignment_2"
    // InternalOpenCypherParser.g:22051:1: rule__Delete__ExpressionsAssignment_2 : ( ruleExpression ) ;
    public final void rule__Delete__ExpressionsAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22055:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22056:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22056:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22057:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__ExpressionsAssignment_2"


    // $ANTLR start "rule__Delete__ExpressionsAssignment_3_1"
    // InternalOpenCypherParser.g:22066:1: rule__Delete__ExpressionsAssignment_3_1 : ( ruleExpression ) ;
    public final void rule__Delete__ExpressionsAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22070:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22071:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22071:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22072:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDeleteAccess().getExpressionsExpressionParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Delete__ExpressionsAssignment_3_1"


    // $ANTLR start "rule__Remove__RemoveItemsAssignment_1"
    // InternalOpenCypherParser.g:22081:1: rule__Remove__RemoveItemsAssignment_1 : ( ruleRemoveItem ) ;
    public final void rule__Remove__RemoveItemsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22085:1: ( ( ruleRemoveItem ) )
            // InternalOpenCypherParser.g:22086:2: ( ruleRemoveItem )
            {
            // InternalOpenCypherParser.g:22086:2: ( ruleRemoveItem )
            // InternalOpenCypherParser.g:22087:3: ruleRemoveItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRemoveItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__RemoveItemsAssignment_1"


    // $ANTLR start "rule__Remove__RemoveItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22096:1: rule__Remove__RemoveItemsAssignment_2_1 : ( ruleRemoveItem ) ;
    public final void rule__Remove__RemoveItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22100:1: ( ( ruleRemoveItem ) )
            // InternalOpenCypherParser.g:22101:2: ( ruleRemoveItem )
            {
            // InternalOpenCypherParser.g:22101:2: ( ruleRemoveItem )
            // InternalOpenCypherParser.g:22102:3: ruleRemoveItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRemoveItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveAccess().getRemoveItemsRemoveItemParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Remove__RemoveItemsAssignment_2_1"


    // $ANTLR start "rule__RemoveItem__VariableAssignment_0_1"
    // InternalOpenCypherParser.g:22111:1: rule__RemoveItem__VariableAssignment_0_1 : ( ruleVariableDeclaration ) ;
    public final void rule__RemoveItem__VariableAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22115:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22116:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22116:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22117:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getVariableVariableDeclarationParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__VariableAssignment_0_1"


    // $ANTLR start "rule__RemoveItem__NodeLabelsAssignment_0_2"
    // InternalOpenCypherParser.g:22126:1: rule__RemoveItem__NodeLabelsAssignment_0_2 : ( ruleNodeLabels ) ;
    public final void rule__RemoveItem__NodeLabelsAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22130:1: ( ( ruleNodeLabels ) )
            // InternalOpenCypherParser.g:22131:2: ( ruleNodeLabels )
            {
            // InternalOpenCypherParser.g:22131:2: ( ruleNodeLabels )
            // InternalOpenCypherParser.g:22132:3: ruleNodeLabels
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getNodeLabelsNodeLabelsParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getNodeLabelsNodeLabelsParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__NodeLabelsAssignment_0_2"


    // $ANTLR start "rule__RemoveItem__PropertyExpressionAssignment_1_1"
    // InternalOpenCypherParser.g:22141:1: rule__RemoveItem__PropertyExpressionAssignment_1_1 : ( rulePropertyExpression ) ;
    public final void rule__RemoveItem__PropertyExpressionAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22145:1: ( ( rulePropertyExpression ) )
            // InternalOpenCypherParser.g:22146:2: ( rulePropertyExpression )
            {
            // InternalOpenCypherParser.g:22146:2: ( rulePropertyExpression )
            // InternalOpenCypherParser.g:22147:3: rulePropertyExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRemoveItemAccess().getPropertyExpressionPropertyExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RemoveItem__PropertyExpressionAssignment_1_1"


    // $ANTLR start "rule__Foreach__VariableAssignment_2"
    // InternalOpenCypherParser.g:22156:1: rule__Foreach__VariableAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__Foreach__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22160:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22161:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22161:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22162:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__VariableAssignment_2"


    // $ANTLR start "rule__Foreach__ExpressionAssignment_4"
    // InternalOpenCypherParser.g:22171:1: rule__Foreach__ExpressionAssignment_4 : ( ruleExpression ) ;
    public final void rule__Foreach__ExpressionAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22175:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22176:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22176:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22177:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getExpressionExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__ExpressionAssignment_4"


    // $ANTLR start "rule__Foreach__ClausesAssignment_6"
    // InternalOpenCypherParser.g:22186:1: rule__Foreach__ClausesAssignment_6 : ( ruleClause ) ;
    public final void rule__Foreach__ClausesAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22190:1: ( ( ruleClause ) )
            // InternalOpenCypherParser.g:22191:2: ( ruleClause )
            {
            // InternalOpenCypherParser.g:22191:2: ( ruleClause )
            // InternalOpenCypherParser.g:22192:3: ruleClause
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getForeachAccess().getClausesClauseParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleClause();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getForeachAccess().getClausesClauseParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foreach__ClausesAssignment_6"


    // $ANTLR start "rule__InQueryCall__InvocationAssignment_1"
    // InternalOpenCypherParser.g:22201:1: rule__InQueryCall__InvocationAssignment_1 : ( ruleExplicitProcedureInvocation ) ;
    public final void rule__InQueryCall__InvocationAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22205:1: ( ( ruleExplicitProcedureInvocation ) )
            // InternalOpenCypherParser.g:22206:2: ( ruleExplicitProcedureInvocation )
            {
            // InternalOpenCypherParser.g:22206:2: ( ruleExplicitProcedureInvocation )
            // InternalOpenCypherParser.g:22207:3: ruleExplicitProcedureInvocation
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExplicitProcedureInvocation();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getInvocationExplicitProcedureInvocationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__InvocationAssignment_1"


    // $ANTLR start "rule__InQueryCall__YieldItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22216:1: rule__InQueryCall__YieldItemsAssignment_2_1 : ( ruleYieldItems ) ;
    public final void rule__InQueryCall__YieldItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22220:1: ( ( ruleYieldItems ) )
            // InternalOpenCypherParser.g:22221:2: ( ruleYieldItems )
            {
            // InternalOpenCypherParser.g:22221:2: ( ruleYieldItems )
            // InternalOpenCypherParser.g:22222:3: ruleYieldItems
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInQueryCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InQueryCall__YieldItemsAssignment_2_1"


    // $ANTLR start "rule__StandaloneCall__InvocationAssignment_1"
    // InternalOpenCypherParser.g:22231:1: rule__StandaloneCall__InvocationAssignment_1 : ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) ) ;
    public final void rule__StandaloneCall__InvocationAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22235:1: ( ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:22236:2: ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:22236:2: ( ( rule__StandaloneCall__InvocationAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:22237:3: ( rule__StandaloneCall__InvocationAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:22238:3: ( rule__StandaloneCall__InvocationAlternatives_1_0 )
            // InternalOpenCypherParser.g:22238:4: rule__StandaloneCall__InvocationAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__StandaloneCall__InvocationAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getInvocationAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__InvocationAssignment_1"


    // $ANTLR start "rule__StandaloneCall__YieldItemsAssignment_2_1"
    // InternalOpenCypherParser.g:22246:1: rule__StandaloneCall__YieldItemsAssignment_2_1 : ( ruleYieldItems ) ;
    public final void rule__StandaloneCall__YieldItemsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22250:1: ( ( ruleYieldItems ) )
            // InternalOpenCypherParser.g:22251:2: ( ruleYieldItems )
            {
            // InternalOpenCypherParser.g:22251:2: ( ruleYieldItems )
            // InternalOpenCypherParser.g:22252:3: ruleYieldItems
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStandaloneCallAccess().getYieldItemsYieldItemsParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StandaloneCall__YieldItemsAssignment_2_1"


    // $ANTLR start "rule__YieldItems__ItemsAssignment_1_0_0"
    // InternalOpenCypherParser.g:22261:1: rule__YieldItems__ItemsAssignment_1_0_0 : ( ruleYieldItem ) ;
    public final void rule__YieldItems__ItemsAssignment_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22265:1: ( ( ruleYieldItem ) )
            // InternalOpenCypherParser.g:22266:2: ( ruleYieldItem )
            {
            // InternalOpenCypherParser.g:22266:2: ( ruleYieldItem )
            // InternalOpenCypherParser.g:22267:3: ruleYieldItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__ItemsAssignment_1_0_0"


    // $ANTLR start "rule__YieldItems__ItemsAssignment_1_0_1_1"
    // InternalOpenCypherParser.g:22276:1: rule__YieldItems__ItemsAssignment_1_0_1_1 : ( ruleYieldItem ) ;
    public final void rule__YieldItems__ItemsAssignment_1_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22280:1: ( ( ruleYieldItem ) )
            // InternalOpenCypherParser.g:22281:2: ( ruleYieldItem )
            {
            // InternalOpenCypherParser.g:22281:2: ( ruleYieldItem )
            // InternalOpenCypherParser.g:22282:3: ruleYieldItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleYieldItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemsAccess().getItemsYieldItemParserRuleCall_1_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItems__ItemsAssignment_1_0_1_1"


    // $ANTLR start "rule__YieldItem__FieldAssignment_0_0"
    // InternalOpenCypherParser.g:22291:1: rule__YieldItem__FieldAssignment_0_0 : ( ruleProcedureResultField ) ;
    public final void rule__YieldItem__FieldAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22295:1: ( ( ruleProcedureResultField ) )
            // InternalOpenCypherParser.g:22296:2: ( ruleProcedureResultField )
            {
            // InternalOpenCypherParser.g:22296:2: ( ruleProcedureResultField )
            // InternalOpenCypherParser.g:22297:3: ruleProcedureResultField
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProcedureResultField();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getFieldProcedureResultFieldParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__FieldAssignment_0_0"


    // $ANTLR start "rule__YieldItem__VariableAssignment_1"
    // InternalOpenCypherParser.g:22306:1: rule__YieldItem__VariableAssignment_1 : ( ruleVariableDeclaration ) ;
    public final void rule__YieldItem__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22310:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22311:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22311:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22312:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getYieldItemAccess().getVariableVariableDeclarationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__YieldItem__VariableAssignment_1"


    // $ANTLR start "rule__With__DistintAssignment_1"
    // InternalOpenCypherParser.g:22321:1: rule__With__DistintAssignment_1 : ( ( DISTINCT ) ) ;
    public final void rule__With__DistintAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22325:1: ( ( ( DISTINCT ) ) )
            // InternalOpenCypherParser.g:22326:2: ( ( DISTINCT ) )
            {
            // InternalOpenCypherParser.g:22326:2: ( ( DISTINCT ) )
            // InternalOpenCypherParser.g:22327:3: ( DISTINCT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getDistintDISTINCTKeyword_1_0()); 
            }
            // InternalOpenCypherParser.g:22328:3: ( DISTINCT )
            // InternalOpenCypherParser.g:22329:4: DISTINCT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getDistintDISTINCTKeyword_1_0()); 
            }
            match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getDistintDISTINCTKeyword_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getDistintDISTINCTKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__DistintAssignment_1"


    // $ANTLR start "rule__With__ReturnBodyAssignment_2"
    // InternalOpenCypherParser.g:22340:1: rule__With__ReturnBodyAssignment_2 : ( ruleReturnBody ) ;
    public final void rule__With__ReturnBodyAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22344:1: ( ( ruleReturnBody ) )
            // InternalOpenCypherParser.g:22345:2: ( ruleReturnBody )
            {
            // InternalOpenCypherParser.g:22345:2: ( ruleReturnBody )
            // InternalOpenCypherParser.g:22346:3: ruleReturnBody
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnBody();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getReturnBodyReturnBodyParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__ReturnBodyAssignment_2"


    // $ANTLR start "rule__With__WhereAssignment_3"
    // InternalOpenCypherParser.g:22355:1: rule__With__WhereAssignment_3 : ( ruleWhere ) ;
    public final void rule__With__WhereAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22359:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:22360:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:22360:2: ( ruleWhere )
            // InternalOpenCypherParser.g:22361:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWithAccess().getWhereWhereParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__With__WhereAssignment_3"


    // $ANTLR start "rule__Return__ReturnAssignment_0"
    // InternalOpenCypherParser.g:22370:1: rule__Return__ReturnAssignment_0 : ( ( RETURN ) ) ;
    public final void rule__Return__ReturnAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22374:1: ( ( ( RETURN ) ) )
            // InternalOpenCypherParser.g:22375:2: ( ( RETURN ) )
            {
            // InternalOpenCypherParser.g:22375:2: ( ( RETURN ) )
            // InternalOpenCypherParser.g:22376:3: ( RETURN )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }
            // InternalOpenCypherParser.g:22377:3: ( RETURN )
            // InternalOpenCypherParser.g:22378:4: RETURN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }
            match(input,RETURN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getReturnRETURNKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__ReturnAssignment_0"


    // $ANTLR start "rule__Return__DistinctAssignment_1"
    // InternalOpenCypherParser.g:22389:1: rule__Return__DistinctAssignment_1 : ( ( DISTINCT ) ) ;
    public final void rule__Return__DistinctAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22393:1: ( ( ( DISTINCT ) ) )
            // InternalOpenCypherParser.g:22394:2: ( ( DISTINCT ) )
            {
            // InternalOpenCypherParser.g:22394:2: ( ( DISTINCT ) )
            // InternalOpenCypherParser.g:22395:3: ( DISTINCT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getDistinctDISTINCTKeyword_1_0()); 
            }
            // InternalOpenCypherParser.g:22396:3: ( DISTINCT )
            // InternalOpenCypherParser.g:22397:4: DISTINCT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getDistinctDISTINCTKeyword_1_0()); 
            }
            match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getDistinctDISTINCTKeyword_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getDistinctDISTINCTKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__DistinctAssignment_1"


    // $ANTLR start "rule__Return__BodyAssignment_2"
    // InternalOpenCypherParser.g:22408:1: rule__Return__BodyAssignment_2 : ( ruleReturnBody ) ;
    public final void rule__Return__BodyAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22412:1: ( ( ruleReturnBody ) )
            // InternalOpenCypherParser.g:22413:2: ( ruleReturnBody )
            {
            // InternalOpenCypherParser.g:22413:2: ( ruleReturnBody )
            // InternalOpenCypherParser.g:22414:3: ruleReturnBody
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnBody();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnAccess().getBodyReturnBodyParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Return__BodyAssignment_2"


    // $ANTLR start "rule__ReturnBody__ReturnItemsAssignment_0"
    // InternalOpenCypherParser.g:22423:1: rule__ReturnBody__ReturnItemsAssignment_0 : ( ruleReturnItems ) ;
    public final void rule__ReturnBody__ReturnItemsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22427:1: ( ( ruleReturnItems ) )
            // InternalOpenCypherParser.g:22428:2: ( ruleReturnItems )
            {
            // InternalOpenCypherParser.g:22428:2: ( ruleReturnItems )
            // InternalOpenCypherParser.g:22429:3: ruleReturnItems
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItems();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getReturnItemsReturnItemsParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__ReturnItemsAssignment_0"


    // $ANTLR start "rule__ReturnBody__OrderAssignment_1"
    // InternalOpenCypherParser.g:22438:1: rule__ReturnBody__OrderAssignment_1 : ( ruleOrder ) ;
    public final void rule__ReturnBody__OrderAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22442:1: ( ( ruleOrder ) )
            // InternalOpenCypherParser.g:22443:2: ( ruleOrder )
            {
            // InternalOpenCypherParser.g:22443:2: ( ruleOrder )
            // InternalOpenCypherParser.g:22444:3: ruleOrder
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleOrder();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getOrderOrderParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__OrderAssignment_1"


    // $ANTLR start "rule__ReturnBody__SkipAssignment_2"
    // InternalOpenCypherParser.g:22453:1: rule__ReturnBody__SkipAssignment_2 : ( ruleSkip ) ;
    public final void rule__ReturnBody__SkipAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22457:1: ( ( ruleSkip ) )
            // InternalOpenCypherParser.g:22458:2: ( ruleSkip )
            {
            // InternalOpenCypherParser.g:22458:2: ( ruleSkip )
            // InternalOpenCypherParser.g:22459:3: ruleSkip
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSkip();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getSkipSkipParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__SkipAssignment_2"


    // $ANTLR start "rule__ReturnBody__LimitAssignment_3"
    // InternalOpenCypherParser.g:22468:1: rule__ReturnBody__LimitAssignment_3 : ( ruleLimit ) ;
    public final void rule__ReturnBody__LimitAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22472:1: ( ( ruleLimit ) )
            // InternalOpenCypherParser.g:22473:2: ( ruleLimit )
            {
            // InternalOpenCypherParser.g:22473:2: ( ruleLimit )
            // InternalOpenCypherParser.g:22474:3: ruleLimit
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLimit();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnBodyAccess().getLimitLimitParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnBody__LimitAssignment_3"


    // $ANTLR start "rule__ReturnItems__AllAssignment_0_1_0"
    // InternalOpenCypherParser.g:22483:1: rule__ReturnItems__AllAssignment_0_1_0 : ( ( Asterisk ) ) ;
    public final void rule__ReturnItems__AllAssignment_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22487:1: ( ( ( Asterisk ) ) )
            // InternalOpenCypherParser.g:22488:2: ( ( Asterisk ) )
            {
            // InternalOpenCypherParser.g:22488:2: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:22489:3: ( Asterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }
            // InternalOpenCypherParser.g:22490:3: ( Asterisk )
            // InternalOpenCypherParser.g:22491:4: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getAllAsteriskKeyword_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__AllAssignment_0_1_0"


    // $ANTLR start "rule__ReturnItems__ItemsAssignment_0_1_1_1"
    // InternalOpenCypherParser.g:22502:1: rule__ReturnItems__ItemsAssignment_0_1_1_1 : ( ruleReturnItem ) ;
    public final void rule__ReturnItems__ItemsAssignment_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22506:1: ( ( ruleReturnItem ) )
            // InternalOpenCypherParser.g:22507:2: ( ruleReturnItem )
            {
            // InternalOpenCypherParser.g:22507:2: ( ruleReturnItem )
            // InternalOpenCypherParser.g:22508:3: ruleReturnItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__ItemsAssignment_0_1_1_1"


    // $ANTLR start "rule__ReturnItems__ItemsAssignment_1_0"
    // InternalOpenCypherParser.g:22517:1: rule__ReturnItems__ItemsAssignment_1_0 : ( ruleReturnItem ) ;
    public final void rule__ReturnItems__ItemsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22521:1: ( ( ruleReturnItem ) )
            // InternalOpenCypherParser.g:22522:2: ( ruleReturnItem )
            {
            // InternalOpenCypherParser.g:22522:2: ( ruleReturnItem )
            // InternalOpenCypherParser.g:22523:3: ruleReturnItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__ItemsAssignment_1_0"


    // $ANTLR start "rule__ReturnItems__ItemsAssignment_1_1_1"
    // InternalOpenCypherParser.g:22532:1: rule__ReturnItems__ItemsAssignment_1_1_1 : ( ruleReturnItem ) ;
    public final void rule__ReturnItems__ItemsAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22536:1: ( ( ruleReturnItem ) )
            // InternalOpenCypherParser.g:22537:2: ( ruleReturnItem )
            {
            // InternalOpenCypherParser.g:22537:2: ( ruleReturnItem )
            // InternalOpenCypherParser.g:22538:3: ruleReturnItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleReturnItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemsAccess().getItemsReturnItemParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItems__ItemsAssignment_1_1_1"


    // $ANTLR start "rule__ReturnItem__ExpressionAssignment_0"
    // InternalOpenCypherParser.g:22547:1: rule__ReturnItem__ExpressionAssignment_0 : ( ruleExpression ) ;
    public final void rule__ReturnItem__ExpressionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22551:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22552:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22552:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22553:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__ExpressionAssignment_0"


    // $ANTLR start "rule__ReturnItem__AliasAssignment_1_1"
    // InternalOpenCypherParser.g:22562:1: rule__ReturnItem__AliasAssignment_1_1 : ( ruleVariableDeclaration ) ;
    public final void rule__ReturnItem__AliasAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22566:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22567:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22567:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22568:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReturnItemAccess().getAliasVariableDeclarationParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ReturnItem__AliasAssignment_1_1"


    // $ANTLR start "rule__Order__OrderByAssignment_2"
    // InternalOpenCypherParser.g:22577:1: rule__Order__OrderByAssignment_2 : ( ruleSortItem ) ;
    public final void rule__Order__OrderByAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22581:1: ( ( ruleSortItem ) )
            // InternalOpenCypherParser.g:22582:2: ( ruleSortItem )
            {
            // InternalOpenCypherParser.g:22582:2: ( ruleSortItem )
            // InternalOpenCypherParser.g:22583:3: ruleSortItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSortItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__OrderByAssignment_2"


    // $ANTLR start "rule__Order__OrderByAssignment_3_1"
    // InternalOpenCypherParser.g:22592:1: rule__Order__OrderByAssignment_3_1 : ( ruleSortItem ) ;
    public final void rule__Order__OrderByAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22596:1: ( ( ruleSortItem ) )
            // InternalOpenCypherParser.g:22597:2: ( ruleSortItem )
            {
            // InternalOpenCypherParser.g:22597:2: ( ruleSortItem )
            // InternalOpenCypherParser.g:22598:3: ruleSortItem
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSortItem();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrderAccess().getOrderBySortItemParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Order__OrderByAssignment_3_1"


    // $ANTLR start "rule__Skip__SkipAssignment_1"
    // InternalOpenCypherParser.g:22607:1: rule__Skip__SkipAssignment_1 : ( ruleExpression ) ;
    public final void rule__Skip__SkipAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22611:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22612:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22612:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22613:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSkipAccess().getSkipExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Skip__SkipAssignment_1"


    // $ANTLR start "rule__Limit__LimitAssignment_1"
    // InternalOpenCypherParser.g:22622:1: rule__Limit__LimitAssignment_1 : ( ruleExpression ) ;
    public final void rule__Limit__LimitAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22626:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22627:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22627:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22628:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLimitAccess().getLimitExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Limit__LimitAssignment_1"


    // $ANTLR start "rule__SortItem__ExpressionAssignment_0"
    // InternalOpenCypherParser.g:22637:1: rule__SortItem__ExpressionAssignment_0 : ( ruleExpression ) ;
    public final void rule__SortItem__ExpressionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22641:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:22642:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:22642:2: ( ruleExpression )
            // InternalOpenCypherParser.g:22643:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getExpressionExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__ExpressionAssignment_0"


    // $ANTLR start "rule__SortItem__SortAssignment_1"
    // InternalOpenCypherParser.g:22652:1: rule__SortItem__SortAssignment_1 : ( ( rule__SortItem__SortAlternatives_1_0 ) ) ;
    public final void rule__SortItem__SortAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22656:1: ( ( ( rule__SortItem__SortAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:22657:2: ( ( rule__SortItem__SortAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:22657:2: ( ( rule__SortItem__SortAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:22658:3: ( rule__SortItem__SortAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSortItemAccess().getSortAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:22659:3: ( rule__SortItem__SortAlternatives_1_0 )
            // InternalOpenCypherParser.g:22659:4: rule__SortItem__SortAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__SortItem__SortAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSortItemAccess().getSortAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__SortItem__SortAssignment_1"


    // $ANTLR start "rule__Hint__VariableAssignment_0_5"
    // InternalOpenCypherParser.g:22667:1: rule__Hint__VariableAssignment_0_5 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariableAssignment_0_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22671:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22672:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22672:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22673:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_0_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariableAssignment_0_5"


    // $ANTLR start "rule__Hint__NodeLabelAssignment_0_6"
    // InternalOpenCypherParser.g:22682:1: rule__Hint__NodeLabelAssignment_0_6 : ( ruleNodeLabel ) ;
    public final void rule__Hint__NodeLabelAssignment_0_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22686:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:22687:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:22687:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:22688:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_0_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__NodeLabelAssignment_0_6"


    // $ANTLR start "rule__Hint__PropertyKeyNameAssignment_0_9"
    // InternalOpenCypherParser.g:22697:1: rule__Hint__PropertyKeyNameAssignment_0_9 : ( rulePropertyKeyName ) ;
    public final void rule__Hint__PropertyKeyNameAssignment_0_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22701:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:22702:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:22702:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:22703:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_0_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__PropertyKeyNameAssignment_0_9"


    // $ANTLR start "rule__Hint__VariablesAssignment_1_1_5"
    // InternalOpenCypherParser.g:22712:1: rule__Hint__VariablesAssignment_1_1_5 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariablesAssignment_1_1_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22716:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22717:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22717:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22718:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariablesAssignment_1_1_5"


    // $ANTLR start "rule__Hint__VariablesAssignment_1_1_6_1"
    // InternalOpenCypherParser.g:22727:1: rule__Hint__VariablesAssignment_1_1_6_1 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariablesAssignment_1_1_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22731:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22732:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22732:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22733:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariablesVariableDeclarationParserRuleCall_1_1_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariablesAssignment_1_1_6_1"


    // $ANTLR start "rule__Hint__VariableAssignment_2_1_4"
    // InternalOpenCypherParser.g:22742:1: rule__Hint__VariableAssignment_2_1_4 : ( ruleVariableDeclaration ) ;
    public final void rule__Hint__VariableAssignment_2_1_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22746:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22747:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22747:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22748:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getVariableVariableDeclarationParserRuleCall_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__VariableAssignment_2_1_4"


    // $ANTLR start "rule__Hint__NodeLabelAssignment_2_1_5"
    // InternalOpenCypherParser.g:22757:1: rule__Hint__NodeLabelAssignment_2_1_5 : ( ruleNodeLabel ) ;
    public final void rule__Hint__NodeLabelAssignment_2_1_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22761:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:22762:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:22762:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:22763:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHintAccess().getNodeLabelNodeLabelParserRuleCall_2_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Hint__NodeLabelAssignment_2_1_5"


    // $ANTLR start "rule__Start__StartPointAssignment_1"
    // InternalOpenCypherParser.g:22772:1: rule__Start__StartPointAssignment_1 : ( ruleStartPoint ) ;
    public final void rule__Start__StartPointAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22776:1: ( ( ruleStartPoint ) )
            // InternalOpenCypherParser.g:22777:2: ( ruleStartPoint )
            {
            // InternalOpenCypherParser.g:22777:2: ( ruleStartPoint )
            // InternalOpenCypherParser.g:22778:3: ruleStartPoint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleStartPoint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__StartPointAssignment_1"


    // $ANTLR start "rule__Start__StartPointAssignment_2_1"
    // InternalOpenCypherParser.g:22787:1: rule__Start__StartPointAssignment_2_1 : ( ruleStartPoint ) ;
    public final void rule__Start__StartPointAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22791:1: ( ( ruleStartPoint ) )
            // InternalOpenCypherParser.g:22792:2: ( ruleStartPoint )
            {
            // InternalOpenCypherParser.g:22792:2: ( ruleStartPoint )
            // InternalOpenCypherParser.g:22793:3: ruleStartPoint
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleStartPoint();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getStartPointStartPointParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__StartPointAssignment_2_1"


    // $ANTLR start "rule__Start__WhereAssignment_3"
    // InternalOpenCypherParser.g:22802:1: rule__Start__WhereAssignment_3 : ( ruleWhere ) ;
    public final void rule__Start__WhereAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22806:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:22807:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:22807:2: ( ruleWhere )
            // InternalOpenCypherParser.g:22808:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartAccess().getWhereWhereParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Start__WhereAssignment_3"


    // $ANTLR start "rule__StartPoint__VariableAssignment_0"
    // InternalOpenCypherParser.g:22817:1: rule__StartPoint__VariableAssignment_0 : ( ruleVariableDeclaration ) ;
    public final void rule__StartPoint__VariableAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22821:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:22822:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:22822:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:22823:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__VariableAssignment_0"


    // $ANTLR start "rule__StartPoint__LookupAssignment_2"
    // InternalOpenCypherParser.g:22832:1: rule__StartPoint__LookupAssignment_2 : ( ruleLookup ) ;
    public final void rule__StartPoint__LookupAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22836:1: ( ( ruleLookup ) )
            // InternalOpenCypherParser.g:22837:2: ( ruleLookup )
            {
            // InternalOpenCypherParser.g:22837:2: ( ruleLookup )
            // InternalOpenCypherParser.g:22838:3: ruleLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getStartPointAccess().getLookupLookupParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__StartPoint__LookupAssignment_2"


    // $ANTLR start "rule__IdentifiedIndexLookup__IndexNameAssignment_1"
    // InternalOpenCypherParser.g:22847:1: rule__IdentifiedIndexLookup__IndexNameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__IdentifiedIndexLookup__IndexNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22851:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:22852:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:22852:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:22853:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__IndexNameAssignment_1"


    // $ANTLR start "rule__IdentifiedIndexLookup__KeyAssignment_3"
    // InternalOpenCypherParser.g:22862:1: rule__IdentifiedIndexLookup__KeyAssignment_3 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__IdentifiedIndexLookup__KeyAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22866:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:22867:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:22867:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:22868:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getKeySYMBOLIC_NAME_XParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__KeyAssignment_3"


    // $ANTLR start "rule__IdentifiedIndexLookup__ValueAssignment_5_0"
    // InternalOpenCypherParser.g:22877:1: rule__IdentifiedIndexLookup__ValueAssignment_5_0 : ( RULE_STRING_LITERAL ) ;
    public final void rule__IdentifiedIndexLookup__ValueAssignment_5_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22881:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:22882:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:22882:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:22883:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getValueSTRING_LITERALTerminalRuleCall_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__ValueAssignment_5_0"


    // $ANTLR start "rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1"
    // InternalOpenCypherParser.g:22892:1: rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1 : ( ruleLegacyParameter ) ;
    public final void rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22896:1: ( ( ruleLegacyParameter ) )
            // InternalOpenCypherParser.g:22897:2: ( ruleLegacyParameter )
            {
            // InternalOpenCypherParser.g:22897:2: ( ruleLegacyParameter )
            // InternalOpenCypherParser.g:22898:3: ruleLegacyParameter
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLegacyParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdentifiedIndexLookupAccess().getLegacyParameterLegacyParameterParserRuleCall_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdentifiedIndexLookup__LegacyParameterAssignment_5_1"


    // $ANTLR start "rule__IndexQuery__IndexNameAssignment_1"
    // InternalOpenCypherParser.g:22907:1: rule__IndexQuery__IndexNameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__IndexQuery__IndexNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22911:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:22912:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:22912:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:22913:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getIndexNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__IndexNameAssignment_1"


    // $ANTLR start "rule__IndexQuery__QueryAssignment_3_0"
    // InternalOpenCypherParser.g:22922:1: rule__IndexQuery__QueryAssignment_3_0 : ( RULE_STRING_LITERAL ) ;
    public final void rule__IndexQuery__QueryAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22926:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:22927:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:22927:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:22928:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getQuerySTRING_LITERALTerminalRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__QueryAssignment_3_0"


    // $ANTLR start "rule__IndexQuery__ParameterAssignment_3_1"
    // InternalOpenCypherParser.g:22937:1: rule__IndexQuery__ParameterAssignment_3_1 : ( ruleParameter ) ;
    public final void rule__IndexQuery__ParameterAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22941:1: ( ( ruleParameter ) )
            // InternalOpenCypherParser.g:22942:2: ( ruleParameter )
            {
            // InternalOpenCypherParser.g:22942:2: ( ruleParameter )
            // InternalOpenCypherParser.g:22943:3: ruleParameter
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIndexQueryAccess().getParameterParameterParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IndexQuery__ParameterAssignment_3_1"


    // $ANTLR start "rule__IdLookup__IdsAssignment_1_0"
    // InternalOpenCypherParser.g:22952:1: rule__IdLookup__IdsAssignment_1_0 : ( ruleLiteralIds ) ;
    public final void rule__IdLookup__IdsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22956:1: ( ( ruleLiteralIds ) )
            // InternalOpenCypherParser.g:22957:2: ( ruleLiteralIds )
            {
            // InternalOpenCypherParser.g:22957:2: ( ruleLiteralIds )
            // InternalOpenCypherParser.g:22958:3: ruleLiteralIds
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLiteralIds();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getIdsLiteralIdsParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__IdsAssignment_1_0"


    // $ANTLR start "rule__IdLookup__LegacyParameterAssignment_1_1"
    // InternalOpenCypherParser.g:22967:1: rule__IdLookup__LegacyParameterAssignment_1_1 : ( ruleParameter ) ;
    public final void rule__IdLookup__LegacyParameterAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22971:1: ( ( ruleParameter ) )
            // InternalOpenCypherParser.g:22972:2: ( ruleParameter )
            {
            // InternalOpenCypherParser.g:22972:2: ( ruleParameter )
            // InternalOpenCypherParser.g:22973:3: ruleParameter
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getLegacyParameterParameterParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__LegacyParameterAssignment_1_1"


    // $ANTLR start "rule__IdLookup__WildcardAssignment_1_2"
    // InternalOpenCypherParser.g:22982:1: rule__IdLookup__WildcardAssignment_1_2 : ( ( Asterisk ) ) ;
    public final void rule__IdLookup__WildcardAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:22986:1: ( ( ( Asterisk ) ) )
            // InternalOpenCypherParser.g:22987:2: ( ( Asterisk ) )
            {
            // InternalOpenCypherParser.g:22987:2: ( ( Asterisk ) )
            // InternalOpenCypherParser.g:22988:3: ( Asterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }
            // InternalOpenCypherParser.g:22989:3: ( Asterisk )
            // InternalOpenCypherParser.g:22990:4: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdLookupAccess().getWildcardAsteriskKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdLookup__WildcardAssignment_1_2"


    // $ANTLR start "rule__LiteralIds__IdsAssignment_0"
    // InternalOpenCypherParser.g:23001:1: rule__LiteralIds__IdsAssignment_0 : ( ruleDecimalInteger ) ;
    public final void rule__LiteralIds__IdsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23005:1: ( ( ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:23006:2: ( ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:23006:2: ( ruleDecimalInteger )
            // InternalOpenCypherParser.g:23007:3: ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__IdsAssignment_0"


    // $ANTLR start "rule__LiteralIds__IdsAssignment_1_1"
    // InternalOpenCypherParser.g:23016:1: rule__LiteralIds__IdsAssignment_1_1 : ( ruleDecimalInteger ) ;
    public final void rule__LiteralIds__IdsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23020:1: ( ( ruleDecimalInteger ) )
            // InternalOpenCypherParser.g:23021:2: ( ruleDecimalInteger )
            {
            // InternalOpenCypherParser.g:23021:2: ( ruleDecimalInteger )
            // InternalOpenCypherParser.g:23022:3: ruleDecimalInteger
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDecimalInteger();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLiteralIdsAccess().getIdsDecimalIntegerParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LiteralIds__IdsAssignment_1_1"


    // $ANTLR start "rule__Where__ExpressionAssignment_1"
    // InternalOpenCypherParser.g:23031:1: rule__Where__ExpressionAssignment_1 : ( ruleExpression ) ;
    public final void rule__Where__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23035:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23036:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23036:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23037:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getWhereAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Where__ExpressionAssignment_1"


    // $ANTLR start "rule__Pattern__PatternsAssignment_0"
    // InternalOpenCypherParser.g:23046:1: rule__Pattern__PatternsAssignment_0 : ( rulePatternPart ) ;
    public final void rule__Pattern__PatternsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23050:1: ( ( rulePatternPart ) )
            // InternalOpenCypherParser.g:23051:2: ( rulePatternPart )
            {
            // InternalOpenCypherParser.g:23051:2: ( rulePatternPart )
            // InternalOpenCypherParser.g:23052:3: rulePatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__PatternsAssignment_0"


    // $ANTLR start "rule__Pattern__PatternsAssignment_1_1"
    // InternalOpenCypherParser.g:23061:1: rule__Pattern__PatternsAssignment_1_1 : ( rulePatternPart ) ;
    public final void rule__Pattern__PatternsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23065:1: ( ( rulePatternPart ) )
            // InternalOpenCypherParser.g:23066:2: ( rulePatternPart )
            {
            // InternalOpenCypherParser.g:23066:2: ( rulePatternPart )
            // InternalOpenCypherParser.g:23067:3: rulePatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getPatternsPatternPartParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__PatternsAssignment_1_1"


    // $ANTLR start "rule__PatternPart__VarAssignment_0_0"
    // InternalOpenCypherParser.g:23076:1: rule__PatternPart__VarAssignment_0_0 : ( ruleVariableDeclaration ) ;
    public final void rule__PatternPart__VarAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23080:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23081:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23081:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23082:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getVarVariableDeclarationParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__VarAssignment_0_0"


    // $ANTLR start "rule__PatternPart__PartAssignment_0_2"
    // InternalOpenCypherParser.g:23091:1: rule__PatternPart__PartAssignment_0_2 : ( ruleAnonymousPatternPart ) ;
    public final void rule__PatternPart__PartAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23095:1: ( ( ruleAnonymousPatternPart ) )
            // InternalOpenCypherParser.g:23096:2: ( ruleAnonymousPatternPart )
            {
            // InternalOpenCypherParser.g:23096:2: ( ruleAnonymousPatternPart )
            // InternalOpenCypherParser.g:23097:3: ruleAnonymousPatternPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAnonymousPatternPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternPartAccess().getPartAnonymousPatternPartParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternPart__PartAssignment_0_2"


    // $ANTLR start "rule__ShortestPathPattern__PatternElementAssignment_0_3"
    // InternalOpenCypherParser.g:23106:1: rule__ShortestPathPattern__PatternElementAssignment_0_3 : ( rulePatternElement ) ;
    public final void rule__ShortestPathPattern__PatternElementAssignment_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23110:1: ( ( rulePatternElement ) )
            // InternalOpenCypherParser.g:23111:2: ( rulePatternElement )
            {
            // InternalOpenCypherParser.g:23111:2: ( rulePatternElement )
            // InternalOpenCypherParser.g:23112:3: rulePatternElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__PatternElementAssignment_0_3"


    // $ANTLR start "rule__ShortestPathPattern__PatternElementAssignment_1_3"
    // InternalOpenCypherParser.g:23121:1: rule__ShortestPathPattern__PatternElementAssignment_1_3 : ( rulePatternElement ) ;
    public final void rule__ShortestPathPattern__PatternElementAssignment_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23125:1: ( ( rulePatternElement ) )
            // InternalOpenCypherParser.g:23126:2: ( rulePatternElement )
            {
            // InternalOpenCypherParser.g:23126:2: ( rulePatternElement )
            // InternalOpenCypherParser.g:23127:3: rulePatternElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getShortestPathPatternAccess().getPatternElementPatternElementParserRuleCall_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShortestPathPattern__PatternElementAssignment_1_3"


    // $ANTLR start "rule__PatternElement__NodepatternAssignment_0_0"
    // InternalOpenCypherParser.g:23136:1: rule__PatternElement__NodepatternAssignment_0_0 : ( ruleNodePattern ) ;
    public final void rule__PatternElement__NodepatternAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23140:1: ( ( ruleNodePattern ) )
            // InternalOpenCypherParser.g:23141:2: ( ruleNodePattern )
            {
            // InternalOpenCypherParser.g:23141:2: ( ruleNodePattern )
            // InternalOpenCypherParser.g:23142:3: ruleNodePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getNodepatternNodePatternParserRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__NodepatternAssignment_0_0"


    // $ANTLR start "rule__PatternElement__ChainAssignment_0_1"
    // InternalOpenCypherParser.g:23151:1: rule__PatternElement__ChainAssignment_0_1 : ( rulePatternElementChain ) ;
    public final void rule__PatternElement__ChainAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23155:1: ( ( rulePatternElementChain ) )
            // InternalOpenCypherParser.g:23156:2: ( rulePatternElementChain )
            {
            // InternalOpenCypherParser.g:23156:2: ( rulePatternElementChain )
            // InternalOpenCypherParser.g:23157:3: rulePatternElementChain
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElementChain();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementAccess().getChainPatternElementChainParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElement__ChainAssignment_0_1"


    // $ANTLR start "rule__NodePattern__VariableAssignment_2"
    // InternalOpenCypherParser.g:23166:1: rule__NodePattern__VariableAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__NodePattern__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23170:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23171:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23171:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23172:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__VariableAssignment_2"


    // $ANTLR start "rule__NodePattern__NodeLabelsAssignment_3"
    // InternalOpenCypherParser.g:23181:1: rule__NodePattern__NodeLabelsAssignment_3 : ( ruleNodeLabels ) ;
    public final void rule__NodePattern__NodeLabelsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23185:1: ( ( ruleNodeLabels ) )
            // InternalOpenCypherParser.g:23186:2: ( ruleNodeLabels )
            {
            // InternalOpenCypherParser.g:23186:2: ( ruleNodeLabels )
            // InternalOpenCypherParser.g:23187:3: ruleNodeLabels
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getNodeLabelsNodeLabelsParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabels();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getNodeLabelsNodeLabelsParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__NodeLabelsAssignment_3"


    // $ANTLR start "rule__NodePattern__PropertiesAssignment_4"
    // InternalOpenCypherParser.g:23196:1: rule__NodePattern__PropertiesAssignment_4 : ( ruleProperties ) ;
    public final void rule__NodePattern__PropertiesAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23200:1: ( ( ruleProperties ) )
            // InternalOpenCypherParser.g:23201:2: ( ruleProperties )
            {
            // InternalOpenCypherParser.g:23201:2: ( ruleProperties )
            // InternalOpenCypherParser.g:23202:3: ruleProperties
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProperties();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodePatternAccess().getPropertiesPropertiesParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodePattern__PropertiesAssignment_4"


    // $ANTLR start "rule__PatternElementChain__RelationshipPatternAssignment_0"
    // InternalOpenCypherParser.g:23211:1: rule__PatternElementChain__RelationshipPatternAssignment_0 : ( ruleRelationshipPattern ) ;
    public final void rule__PatternElementChain__RelationshipPatternAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23215:1: ( ( ruleRelationshipPattern ) )
            // InternalOpenCypherParser.g:23216:2: ( ruleRelationshipPattern )
            {
            // InternalOpenCypherParser.g:23216:2: ( ruleRelationshipPattern )
            // InternalOpenCypherParser.g:23217:3: ruleRelationshipPattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getRelationshipPatternRelationshipPatternParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__RelationshipPatternAssignment_0"


    // $ANTLR start "rule__PatternElementChain__NodePatternAssignment_1"
    // InternalOpenCypherParser.g:23226:1: rule__PatternElementChain__NodePatternAssignment_1 : ( ruleNodePattern ) ;
    public final void rule__PatternElementChain__NodePatternAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23230:1: ( ( ruleNodePattern ) )
            // InternalOpenCypherParser.g:23231:2: ( ruleNodePattern )
            {
            // InternalOpenCypherParser.g:23231:2: ( ruleNodePattern )
            // InternalOpenCypherParser.g:23232:3: ruleNodePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternElementChainAccess().getNodePatternNodePatternParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternElementChain__NodePatternAssignment_1"


    // $ANTLR start "rule__RelationshipPattern__IncomingAssignment_1_0"
    // InternalOpenCypherParser.g:23241:1: rule__RelationshipPattern__IncomingAssignment_1_0 : ( ruleLeftArrowHead ) ;
    public final void rule__RelationshipPattern__IncomingAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23245:1: ( ( ruleLeftArrowHead ) )
            // InternalOpenCypherParser.g:23246:2: ( ruleLeftArrowHead )
            {
            // InternalOpenCypherParser.g:23246:2: ( ruleLeftArrowHead )
            // InternalOpenCypherParser.g:23247:3: ruleLeftArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLeftArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getIncomingLeftArrowHeadParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__IncomingAssignment_1_0"


    // $ANTLR start "rule__RelationshipPattern__DetailAssignment_1_2"
    // InternalOpenCypherParser.g:23256:1: rule__RelationshipPattern__DetailAssignment_1_2 : ( ruleRelationshipDetail ) ;
    public final void rule__RelationshipPattern__DetailAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23260:1: ( ( ruleRelationshipDetail ) )
            // InternalOpenCypherParser.g:23261:2: ( ruleRelationshipDetail )
            {
            // InternalOpenCypherParser.g:23261:2: ( ruleRelationshipDetail )
            // InternalOpenCypherParser.g:23262:3: ruleRelationshipDetail
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipDetail();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getDetailRelationshipDetailParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__DetailAssignment_1_2"


    // $ANTLR start "rule__RelationshipPattern__OutgoingAssignment_1_4"
    // InternalOpenCypherParser.g:23271:1: rule__RelationshipPattern__OutgoingAssignment_1_4 : ( ruleRightArrowHead ) ;
    public final void rule__RelationshipPattern__OutgoingAssignment_1_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23275:1: ( ( ruleRightArrowHead ) )
            // InternalOpenCypherParser.g:23276:2: ( ruleRightArrowHead )
            {
            // InternalOpenCypherParser.g:23276:2: ( ruleRightArrowHead )
            // InternalOpenCypherParser.g:23277:3: ruleRightArrowHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRightArrowHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipPatternAccess().getOutgoingRightArrowHeadParserRuleCall_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipPattern__OutgoingAssignment_1_4"


    // $ANTLR start "rule__RelationshipDetail__VariableAssignment_2"
    // InternalOpenCypherParser.g:23286:1: rule__RelationshipDetail__VariableAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__RelationshipDetail__VariableAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23290:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:23291:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:23291:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:23292:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getVariableVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__VariableAssignment_2"


    // $ANTLR start "rule__RelationshipDetail__OptionalAssignment_3"
    // InternalOpenCypherParser.g:23301:1: rule__RelationshipDetail__OptionalAssignment_3 : ( ( QuestionMark ) ) ;
    public final void rule__RelationshipDetail__OptionalAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23305:1: ( ( ( QuestionMark ) ) )
            // InternalOpenCypherParser.g:23306:2: ( ( QuestionMark ) )
            {
            // InternalOpenCypherParser.g:23306:2: ( ( QuestionMark ) )
            // InternalOpenCypherParser.g:23307:3: ( QuestionMark )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }
            // InternalOpenCypherParser.g:23308:3: ( QuestionMark )
            // InternalOpenCypherParser.g:23309:4: QuestionMark
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }
            match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getOptionalQuestionMarkKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__OptionalAssignment_3"


    // $ANTLR start "rule__RelationshipDetail__TypesAssignment_4"
    // InternalOpenCypherParser.g:23320:1: rule__RelationshipDetail__TypesAssignment_4 : ( ruleRelationshipTypes ) ;
    public final void rule__RelationshipDetail__TypesAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23324:1: ( ( ruleRelationshipTypes ) )
            // InternalOpenCypherParser.g:23325:2: ( ruleRelationshipTypes )
            {
            // InternalOpenCypherParser.g:23325:2: ( ruleRelationshipTypes )
            // InternalOpenCypherParser.g:23326:3: ruleRelationshipTypes
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getTypesRelationshipTypesParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipTypes();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getTypesRelationshipTypesParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__TypesAssignment_4"


    // $ANTLR start "rule__RelationshipDetail__RangeAssignment_5"
    // InternalOpenCypherParser.g:23335:1: rule__RelationshipDetail__RangeAssignment_5 : ( ruleRangeLiteral ) ;
    public final void rule__RelationshipDetail__RangeAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23339:1: ( ( ruleRangeLiteral ) )
            // InternalOpenCypherParser.g:23340:2: ( ruleRangeLiteral )
            {
            // InternalOpenCypherParser.g:23340:2: ( ruleRangeLiteral )
            // InternalOpenCypherParser.g:23341:3: ruleRangeLiteral
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRangeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getRangeRangeLiteralParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__RangeAssignment_5"


    // $ANTLR start "rule__RelationshipDetail__PropertiesAssignment_6"
    // InternalOpenCypherParser.g:23350:1: rule__RelationshipDetail__PropertiesAssignment_6 : ( ruleProperties ) ;
    public final void rule__RelationshipDetail__PropertiesAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23354:1: ( ( ruleProperties ) )
            // InternalOpenCypherParser.g:23355:2: ( ruleProperties )
            {
            // InternalOpenCypherParser.g:23355:2: ( ruleProperties )
            // InternalOpenCypherParser.g:23356:3: ruleProperties
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProperties();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipDetailAccess().getPropertiesPropertiesParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipDetail__PropertiesAssignment_6"


    // $ANTLR start "rule__RelationshipTypes__RelTypeNameAssignment_1"
    // InternalOpenCypherParser.g:23365:1: rule__RelationshipTypes__RelTypeNameAssignment_1 : ( ruleRelTypeName ) ;
    public final void rule__RelationshipTypes__RelTypeNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23369:1: ( ( ruleRelTypeName ) )
            // InternalOpenCypherParser.g:23370:2: ( ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:23370:2: ( ruleRelTypeName )
            // InternalOpenCypherParser.g:23371:3: ruleRelTypeName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__RelTypeNameAssignment_1"


    // $ANTLR start "rule__RelationshipTypes__RelTypeNameAssignment_2_2"
    // InternalOpenCypherParser.g:23380:1: rule__RelationshipTypes__RelTypeNameAssignment_2_2 : ( ruleRelTypeName ) ;
    public final void rule__RelationshipTypes__RelTypeNameAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23384:1: ( ( ruleRelTypeName ) )
            // InternalOpenCypherParser.g:23385:2: ( ruleRelTypeName )
            {
            // InternalOpenCypherParser.g:23385:2: ( ruleRelTypeName )
            // InternalOpenCypherParser.g:23386:3: ruleRelTypeName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelTypeName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipTypesAccess().getRelTypeNameRelTypeNameParserRuleCall_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipTypes__RelTypeNameAssignment_2_2"


    // $ANTLR start "rule__NodeLabels__NodeLabelsAssignment_0"
    // InternalOpenCypherParser.g:23395:1: rule__NodeLabels__NodeLabelsAssignment_0 : ( ruleNodeLabel ) ;
    public final void rule__NodeLabels__NodeLabelsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23399:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:23400:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:23400:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:23401:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__NodeLabelsAssignment_0"


    // $ANTLR start "rule__NodeLabels__NodeLabelsAssignment_1"
    // InternalOpenCypherParser.g:23410:1: rule__NodeLabels__NodeLabelsAssignment_1 : ( ruleNodeLabel ) ;
    public final void rule__NodeLabels__NodeLabelsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23414:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:23415:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:23415:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:23416:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelsAccess().getNodeLabelsNodeLabelParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabels__NodeLabelsAssignment_1"


    // $ANTLR start "rule__NodeLabel__LabelNameAssignment_1"
    // InternalOpenCypherParser.g:23425:1: rule__NodeLabel__LabelNameAssignment_1 : ( ruleLabelName ) ;
    public final void rule__NodeLabel__LabelNameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23429:1: ( ( ruleLabelName ) )
            // InternalOpenCypherParser.g:23430:2: ( ruleLabelName )
            {
            // InternalOpenCypherParser.g:23430:2: ( ruleLabelName )
            // InternalOpenCypherParser.g:23431:3: ruleLabelName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLabelName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNodeLabelAccess().getLabelNameLabelNameParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__NodeLabel__LabelNameAssignment_1"


    // $ANTLR start "rule__RangeLiteral__LowerAssignment_2_0"
    // InternalOpenCypherParser.g:23440:1: rule__RangeLiteral__LowerAssignment_2_0 : ( ruleNumber ) ;
    public final void rule__RangeLiteral__LowerAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23444:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:23445:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:23445:2: ( ruleNumber )
            // InternalOpenCypherParser.g:23446:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getLowerNumberParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__LowerAssignment_2_0"


    // $ANTLR start "rule__RangeLiteral__UpperAssignment_2_1_1"
    // InternalOpenCypherParser.g:23455:1: rule__RangeLiteral__UpperAssignment_2_1_1 : ( ruleNumber ) ;
    public final void rule__RangeLiteral__UpperAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23459:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:23460:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:23460:2: ( ruleNumber )
            // InternalOpenCypherParser.g:23461:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRangeLiteralAccess().getUpperNumberParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RangeLiteral__UpperAssignment_2_1_1"


    // $ANTLR start "rule__ExpressionOr__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23470:1: rule__ExpressionOr__OperatorAssignment_1_1 : ( ( OR ) ) ;
    public final void rule__ExpressionOr__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23474:1: ( ( ( OR ) ) )
            // InternalOpenCypherParser.g:23475:2: ( ( OR ) )
            {
            // InternalOpenCypherParser.g:23475:2: ( ( OR ) )
            // InternalOpenCypherParser.g:23476:3: ( OR )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getOperatorORKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23477:3: ( OR )
            // InternalOpenCypherParser.g:23478:4: OR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getOperatorORKeyword_1_1_0()); 
            }
            match(input,OR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getOperatorORKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getOperatorORKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionOr__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23489:1: rule__ExpressionOr__RightAssignment_1_2 : ( ruleExpressionXor ) ;
    public final void rule__ExpressionOr__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23493:1: ( ( ruleExpressionXor ) )
            // InternalOpenCypherParser.g:23494:2: ( ruleExpressionXor )
            {
            // InternalOpenCypherParser.g:23494:2: ( ruleExpressionXor )
            // InternalOpenCypherParser.g:23495:3: ruleExpressionXor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionOrAccess().getRightExpressionXorParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionXor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionOrAccess().getRightExpressionXorParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionOr__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionXor__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23504:1: rule__ExpressionXor__OperatorAssignment_1_1 : ( ( XOR ) ) ;
    public final void rule__ExpressionXor__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23508:1: ( ( ( XOR ) ) )
            // InternalOpenCypherParser.g:23509:2: ( ( XOR ) )
            {
            // InternalOpenCypherParser.g:23509:2: ( ( XOR ) )
            // InternalOpenCypherParser.g:23510:3: ( XOR )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getOperatorXORKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23511:3: ( XOR )
            // InternalOpenCypherParser.g:23512:4: XOR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getOperatorXORKeyword_1_1_0()); 
            }
            match(input,XOR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getOperatorXORKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getOperatorXORKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionXor__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23523:1: rule__ExpressionXor__RightAssignment_1_2 : ( ruleExpressionAnd ) ;
    public final void rule__ExpressionXor__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23527:1: ( ( ruleExpressionAnd ) )
            // InternalOpenCypherParser.g:23528:2: ( ruleExpressionAnd )
            {
            // InternalOpenCypherParser.g:23528:2: ( ruleExpressionAnd )
            // InternalOpenCypherParser.g:23529:3: ruleExpressionAnd
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionXorAccess().getRightExpressionAndParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionAnd();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionXorAccess().getRightExpressionAndParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionXor__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionAnd__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23538:1: rule__ExpressionAnd__OperatorAssignment_1_1 : ( ( AND ) ) ;
    public final void rule__ExpressionAnd__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23542:1: ( ( ( AND ) ) )
            // InternalOpenCypherParser.g:23543:2: ( ( AND ) )
            {
            // InternalOpenCypherParser.g:23543:2: ( ( AND ) )
            // InternalOpenCypherParser.g:23544:3: ( AND )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getOperatorANDKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23545:3: ( AND )
            // InternalOpenCypherParser.g:23546:4: AND
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getOperatorANDKeyword_1_1_0()); 
            }
            match(input,AND,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getOperatorANDKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getOperatorANDKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionAnd__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23557:1: rule__ExpressionAnd__RightAssignment_1_2 : ( ruleExpressionNot ) ;
    public final void rule__ExpressionAnd__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23561:1: ( ( ruleExpressionNot ) )
            // InternalOpenCypherParser.g:23562:2: ( ruleExpressionNot )
            {
            // InternalOpenCypherParser.g:23562:2: ( ruleExpressionNot )
            // InternalOpenCypherParser.g:23563:3: ruleExpressionNot
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionAndAccess().getRightExpressionNotParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNot();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionAndAccess().getRightExpressionNotParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionAnd__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionNot__OperatorAssignment_0_1"
    // InternalOpenCypherParser.g:23572:1: rule__ExpressionNot__OperatorAssignment_0_1 : ( ( NOT ) ) ;
    public final void rule__ExpressionNot__OperatorAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23576:1: ( ( ( NOT ) ) )
            // InternalOpenCypherParser.g:23577:2: ( ( NOT ) )
            {
            // InternalOpenCypherParser.g:23577:2: ( ( NOT ) )
            // InternalOpenCypherParser.g:23578:3: ( NOT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getOperatorNOTKeyword_0_1_0()); 
            }
            // InternalOpenCypherParser.g:23579:3: ( NOT )
            // InternalOpenCypherParser.g:23580:4: NOT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getOperatorNOTKeyword_0_1_0()); 
            }
            match(input,NOT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getOperatorNOTKeyword_0_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getOperatorNOTKeyword_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__OperatorAssignment_0_1"


    // $ANTLR start "rule__ExpressionNot__LeftAssignment_0_2"
    // InternalOpenCypherParser.g:23591:1: rule__ExpressionNot__LeftAssignment_0_2 : ( ruleExpressionNot ) ;
    public final void rule__ExpressionNot__LeftAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23595:1: ( ( ruleExpressionNot ) )
            // InternalOpenCypherParser.g:23596:2: ( ruleExpressionNot )
            {
            // InternalOpenCypherParser.g:23596:2: ( ruleExpressionNot )
            // InternalOpenCypherParser.g:23597:3: ruleExpressionNot
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNotAccess().getLeftExpressionNotParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNot();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNotAccess().getLeftExpressionNotParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNot__LeftAssignment_0_2"


    // $ANTLR start "rule__ExpressionComparison__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23606:1: rule__ExpressionComparison__OperatorAssignment_1_1 : ( ( rule__ExpressionComparison__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__ExpressionComparison__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23610:1: ( ( ( rule__ExpressionComparison__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:23611:2: ( ( rule__ExpressionComparison__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:23611:2: ( ( rule__ExpressionComparison__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:23612:3: ( rule__ExpressionComparison__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23613:3: ( rule__ExpressionComparison__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:23613:4: rule__ExpressionComparison__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionComparison__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionComparison__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23621:1: rule__ExpressionComparison__RightAssignment_1_2 : ( ruleExpressionPlusMinus ) ;
    public final void rule__ExpressionComparison__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23625:1: ( ( ruleExpressionPlusMinus ) )
            // InternalOpenCypherParser.g:23626:2: ( ruleExpressionPlusMinus )
            {
            // InternalOpenCypherParser.g:23626:2: ( ruleExpressionPlusMinus )
            // InternalOpenCypherParser.g:23627:3: ruleExpressionPlusMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionComparisonAccess().getRightExpressionPlusMinusParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionComparisonAccess().getRightExpressionPlusMinusParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionComparison__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionPlusMinus__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23636:1: rule__ExpressionPlusMinus__OperatorAssignment_1_1 : ( ( rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__ExpressionPlusMinus__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23640:1: ( ( ( rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:23641:2: ( ( rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:23641:2: ( ( rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:23642:3: ( rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23643:3: ( rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:23643:4: rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionPlusMinus__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionPlusMinus__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23651:1: rule__ExpressionPlusMinus__RightAssignment_1_2 : ( ruleExpressionMulDiv ) ;
    public final void rule__ExpressionPlusMinus__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23655:1: ( ( ruleExpressionMulDiv ) )
            // InternalOpenCypherParser.g:23656:2: ( ruleExpressionMulDiv )
            {
            // InternalOpenCypherParser.g:23656:2: ( ruleExpressionMulDiv )
            // InternalOpenCypherParser.g:23657:3: ruleExpressionMulDiv
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPlusMinusAccess().getRightExpressionMulDivParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionMulDiv();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPlusMinusAccess().getRightExpressionMulDivParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPlusMinus__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionMulDiv__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23666:1: rule__ExpressionMulDiv__OperatorAssignment_1_1 : ( ( rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__ExpressionMulDiv__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23670:1: ( ( ( rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:23671:2: ( ( rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:23671:2: ( ( rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:23672:3: ( rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23673:3: ( rule__ExpressionMulDiv__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:23673:4: rule__ExpressionMulDiv__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionMulDiv__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionMulDiv__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23681:1: rule__ExpressionMulDiv__RightAssignment_1_2 : ( ruleExpressionPower ) ;
    public final void rule__ExpressionMulDiv__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23685:1: ( ( ruleExpressionPower ) )
            // InternalOpenCypherParser.g:23686:2: ( ruleExpressionPower )
            {
            // InternalOpenCypherParser.g:23686:2: ( ruleExpressionPower )
            // InternalOpenCypherParser.g:23687:3: ruleExpressionPower
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionMulDivAccess().getRightExpressionPowerParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionPower();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionMulDivAccess().getRightExpressionPowerParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionMulDiv__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionPower__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23696:1: rule__ExpressionPower__OperatorAssignment_1_1 : ( ( CircumflexAccent ) ) ;
    public final void rule__ExpressionPower__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23700:1: ( ( ( CircumflexAccent ) ) )
            // InternalOpenCypherParser.g:23701:2: ( ( CircumflexAccent ) )
            {
            // InternalOpenCypherParser.g:23701:2: ( ( CircumflexAccent ) )
            // InternalOpenCypherParser.g:23702:3: ( CircumflexAccent )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23703:3: ( CircumflexAccent )
            // InternalOpenCypherParser.g:23704:4: CircumflexAccent
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }
            match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getOperatorCircumflexAccentKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionPower__RightAssignment_1_2"
    // InternalOpenCypherParser.g:23715:1: rule__ExpressionPower__RightAssignment_1_2 : ( ruleExpressionUnaryPlusMinus ) ;
    public final void rule__ExpressionPower__RightAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23719:1: ( ( ruleExpressionUnaryPlusMinus ) )
            // InternalOpenCypherParser.g:23720:2: ( ruleExpressionUnaryPlusMinus )
            {
            // InternalOpenCypherParser.g:23720:2: ( ruleExpressionUnaryPlusMinus )
            // InternalOpenCypherParser.g:23721:3: ruleExpressionUnaryPlusMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionPowerAccess().getRightExpressionUnaryPlusMinusParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionPowerAccess().getRightExpressionUnaryPlusMinusParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionPower__RightAssignment_1_2"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1"
    // InternalOpenCypherParser.g:23730:1: rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1 : ( ( rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 ) ) ;
    public final void rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23734:1: ( ( ( rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 ) ) )
            // InternalOpenCypherParser.g:23735:2: ( ( rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 ) )
            {
            // InternalOpenCypherParser.g:23735:2: ( ( rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 ) )
            // InternalOpenCypherParser.g:23736:3: ( rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorAlternatives_1_1_0()); 
            }
            // InternalOpenCypherParser.g:23737:3: ( rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0 )
            // InternalOpenCypherParser.g:23737:4: rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0
            {
            pushFollow(FOLLOW_2);
            rule__ExpressionUnaryPlusMinus__OperatorAlternatives_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusAccess().getOperatorAlternatives_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__OperatorAssignment_1_1"


    // $ANTLR start "rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2"
    // InternalOpenCypherParser.g:23745:1: rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2 : ( ruleExpressionUnaryPlusMinus ) ;
    public final void rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23749:1: ( ( ruleExpressionUnaryPlusMinus ) )
            // InternalOpenCypherParser.g:23750:2: ( ruleExpressionUnaryPlusMinus )
            {
            // InternalOpenCypherParser.g:23750:2: ( ruleExpressionUnaryPlusMinus )
            // InternalOpenCypherParser.g:23751:3: ruleExpressionUnaryPlusMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftExpressionUnaryPlusMinusParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionUnaryPlusMinus();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionUnaryPlusMinusAccess().getLeftExpressionUnaryPlusMinusParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionUnaryPlusMinus__LeftAssignment_1_2"


    // $ANTLR start "rule__Expression3__ExpressionAssignment_1_0_2"
    // InternalOpenCypherParser.g:23760:1: rule__Expression3__ExpressionAssignment_1_0_2 : ( ruleExpression ) ;
    public final void rule__Expression3__ExpressionAssignment_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23764:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23765:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23765:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23766:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getExpressionExpressionParserRuleCall_1_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getExpressionExpressionParserRuleCall_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__ExpressionAssignment_1_0_2"


    // $ANTLR start "rule__Expression3__UpperAssignment_1_0_3_1"
    // InternalOpenCypherParser.g:23775:1: rule__Expression3__UpperAssignment_1_0_3_1 : ( ruleExpression ) ;
    public final void rule__Expression3__UpperAssignment_1_0_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23779:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23780:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23780:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23781:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getUpperExpressionParserRuleCall_1_0_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getUpperExpressionParserRuleCall_1_0_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__UpperAssignment_1_0_3_1"


    // $ANTLR start "rule__Expression3__RightAssignment_1_1_2"
    // InternalOpenCypherParser.g:23790:1: rule__Expression3__RightAssignment_1_1_2 : ( ruleExpressionNodeLabelsAndPropertyLookup ) ;
    public final void rule__Expression3__RightAssignment_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23794:1: ( ( ruleExpressionNodeLabelsAndPropertyLookup ) )
            // InternalOpenCypherParser.g:23795:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            {
            // InternalOpenCypherParser.g:23795:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            // InternalOpenCypherParser.g:23796:3: ruleExpressionNodeLabelsAndPropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__RightAssignment_1_1_2"


    // $ANTLR start "rule__Expression3__RightAssignment_1_2_2"
    // InternalOpenCypherParser.g:23805:1: rule__Expression3__RightAssignment_1_2_2 : ( ruleExpressionNodeLabelsAndPropertyLookup ) ;
    public final void rule__Expression3__RightAssignment_1_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23809:1: ( ( ruleExpressionNodeLabelsAndPropertyLookup ) )
            // InternalOpenCypherParser.g:23810:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            {
            // InternalOpenCypherParser.g:23810:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            // InternalOpenCypherParser.g:23811:3: ruleExpressionNodeLabelsAndPropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__RightAssignment_1_2_2"


    // $ANTLR start "rule__Expression3__RightAssignment_1_3_3"
    // InternalOpenCypherParser.g:23820:1: rule__Expression3__RightAssignment_1_3_3 : ( ruleExpressionNodeLabelsAndPropertyLookup ) ;
    public final void rule__Expression3__RightAssignment_1_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23824:1: ( ( ruleExpressionNodeLabelsAndPropertyLookup ) )
            // InternalOpenCypherParser.g:23825:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            {
            // InternalOpenCypherParser.g:23825:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            // InternalOpenCypherParser.g:23826:3: ruleExpressionNodeLabelsAndPropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_3_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__RightAssignment_1_3_3"


    // $ANTLR start "rule__Expression3__RightAssignment_1_4_3"
    // InternalOpenCypherParser.g:23835:1: rule__Expression3__RightAssignment_1_4_3 : ( ruleExpressionNodeLabelsAndPropertyLookup ) ;
    public final void rule__Expression3__RightAssignment_1_4_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23839:1: ( ( ruleExpressionNodeLabelsAndPropertyLookup ) )
            // InternalOpenCypherParser.g:23840:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            {
            // InternalOpenCypherParser.g:23840:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            // InternalOpenCypherParser.g:23841:3: ruleExpressionNodeLabelsAndPropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_4_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_4_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__RightAssignment_1_4_3"


    // $ANTLR start "rule__Expression3__RightAssignment_1_5_2"
    // InternalOpenCypherParser.g:23850:1: rule__Expression3__RightAssignment_1_5_2 : ( ruleExpressionNodeLabelsAndPropertyLookup ) ;
    public final void rule__Expression3__RightAssignment_1_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23854:1: ( ( ruleExpressionNodeLabelsAndPropertyLookup ) )
            // InternalOpenCypherParser.g:23855:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            {
            // InternalOpenCypherParser.g:23855:2: ( ruleExpressionNodeLabelsAndPropertyLookup )
            // InternalOpenCypherParser.g:23856:3: ruleExpressionNodeLabelsAndPropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_5_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpressionNodeLabelsAndPropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpression3Access().getRightExpressionNodeLabelsAndPropertyLookupParserRuleCall_1_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Expression3__RightAssignment_1_5_2"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1"
    // InternalOpenCypherParser.g:23865:1: rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1 : ( rulePropertyLookup ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23869:1: ( ( rulePropertyLookup ) )
            // InternalOpenCypherParser.g:23870:2: ( rulePropertyLookup )
            {
            // InternalOpenCypherParser.g:23870:2: ( rulePropertyLookup )
            // InternalOpenCypherParser.g:23871:3: rulePropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__PropertyLookupsAssignment_1_1"


    // $ANTLR start "rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1"
    // InternalOpenCypherParser.g:23880:1: rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1 : ( ruleNodeLabel ) ;
    public final void rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23884:1: ( ( ruleNodeLabel ) )
            // InternalOpenCypherParser.g:23885:2: ( ruleNodeLabel )
            {
            // InternalOpenCypherParser.g:23885:2: ( ruleNodeLabel )
            // InternalOpenCypherParser.g:23886:3: ruleNodeLabel
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsNodeLabelParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodeLabel();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExpressionNodeLabelsAndPropertyLookupAccess().getNodeLabelsNodeLabelParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExpressionNodeLabelsAndPropertyLookup__NodeLabelsAssignment_2_1"


    // $ANTLR start "rule__Atom__ValueAssignment_0_1"
    // InternalOpenCypherParser.g:23895:1: rule__Atom__ValueAssignment_0_1 : ( ruleNumber ) ;
    public final void rule__Atom__ValueAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23899:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:23900:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:23900:2: ( ruleNumber )
            // InternalOpenCypherParser.g:23901:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getValueNumberParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getValueNumberParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ValueAssignment_0_1"


    // $ANTLR start "rule__Atom__ValueAssignment_1_1"
    // InternalOpenCypherParser.g:23910:1: rule__Atom__ValueAssignment_1_1 : ( RULE_STRING_LITERAL ) ;
    public final void rule__Atom__ValueAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23914:1: ( ( RULE_STRING_LITERAL ) )
            // InternalOpenCypherParser.g:23915:2: ( RULE_STRING_LITERAL )
            {
            // InternalOpenCypherParser.g:23915:2: ( RULE_STRING_LITERAL )
            // InternalOpenCypherParser.g:23916:3: RULE_STRING_LITERAL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getValueSTRING_LITERALTerminalRuleCall_1_1_0()); 
            }
            match(input,RULE_STRING_LITERAL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getValueSTRING_LITERALTerminalRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ValueAssignment_1_1"


    // $ANTLR start "rule__Atom__ValueAssignment_4_1"
    // InternalOpenCypherParser.g:23925:1: rule__Atom__ValueAssignment_4_1 : ( ( rule__Atom__ValueAlternatives_4_1_0 ) ) ;
    public final void rule__Atom__ValueAssignment_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23929:1: ( ( ( rule__Atom__ValueAlternatives_4_1_0 ) ) )
            // InternalOpenCypherParser.g:23930:2: ( ( rule__Atom__ValueAlternatives_4_1_0 ) )
            {
            // InternalOpenCypherParser.g:23930:2: ( ( rule__Atom__ValueAlternatives_4_1_0 ) )
            // InternalOpenCypherParser.g:23931:3: ( rule__Atom__ValueAlternatives_4_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getValueAlternatives_4_1_0()); 
            }
            // InternalOpenCypherParser.g:23932:3: ( rule__Atom__ValueAlternatives_4_1_0 )
            // InternalOpenCypherParser.g:23932:4: rule__Atom__ValueAlternatives_4_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Atom__ValueAlternatives_4_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getValueAlternatives_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ValueAssignment_4_1"


    // $ANTLR start "rule__Atom__ExpressionsAssignment_11_1_1_0"
    // InternalOpenCypherParser.g:23940:1: rule__Atom__ExpressionsAssignment_11_1_1_0 : ( ruleExpression ) ;
    public final void rule__Atom__ExpressionsAssignment_11_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23944:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23945:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23945:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23946:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ExpressionsAssignment_11_1_1_0"


    // $ANTLR start "rule__Atom__ExpressionsAssignment_11_1_1_1_1"
    // InternalOpenCypherParser.g:23955:1: rule__Atom__ExpressionsAssignment_11_1_1_1_1 : ( ruleExpression ) ;
    public final void rule__Atom__ExpressionsAssignment_11_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23959:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23960:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23960:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23961:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionsExpressionParserRuleCall_11_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ExpressionsAssignment_11_1_1_1_1"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_12_3"
    // InternalOpenCypherParser.g:23970:1: rule__Atom__FilterExpressionAssignment_12_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_12_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23974:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:23975:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:23975:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:23976:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_12_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_12_3"


    // $ANTLR start "rule__Atom__ExpressionAssignment_12_4_1"
    // InternalOpenCypherParser.g:23985:1: rule__Atom__ExpressionAssignment_12_4_1 : ( ruleExpression ) ;
    public final void rule__Atom__ExpressionAssignment_12_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:23989:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:23990:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:23990:2: ( ruleExpression )
            // InternalOpenCypherParser.g:23991:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_12_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_12_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__ExpressionAssignment_12_4_1"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_14_3"
    // InternalOpenCypherParser.g:24000:1: rule__Atom__FilterExpressionAssignment_14_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_14_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24004:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24005:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24005:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24006:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_14_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_14_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_14_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_15_3"
    // InternalOpenCypherParser.g:24015:1: rule__Atom__FilterExpressionAssignment_15_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_15_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24019:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24020:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24020:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24021:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_15_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_15_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_15_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_16_3"
    // InternalOpenCypherParser.g:24030:1: rule__Atom__FilterExpressionAssignment_16_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_16_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24034:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24035:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24035:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24036:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_16_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_16_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_16_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_17_3"
    // InternalOpenCypherParser.g:24045:1: rule__Atom__FilterExpressionAssignment_17_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_17_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24049:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24050:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24050:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24051:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_17_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_17_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_17_3"


    // $ANTLR start "rule__Atom__FilterExpressionAssignment_18_3"
    // InternalOpenCypherParser.g:24060:1: rule__Atom__FilterExpressionAssignment_18_3 : ( ruleFilterExpression ) ;
    public final void rule__Atom__FilterExpressionAssignment_18_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24064:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24065:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24065:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24066:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_18_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getFilterExpressionFilterExpressionParserRuleCall_18_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__FilterExpressionAssignment_18_3"


    // $ANTLR start "rule__Atom__VariableRefAssignment_23_1"
    // InternalOpenCypherParser.g:24075:1: rule__Atom__VariableRefAssignment_23_1 : ( ( ruleSYMBOLIC_NAME_X ) ) ;
    public final void rule__Atom__VariableRefAssignment_23_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24079:1: ( ( ( ruleSYMBOLIC_NAME_X ) ) )
            // InternalOpenCypherParser.g:24080:2: ( ( ruleSYMBOLIC_NAME_X ) )
            {
            // InternalOpenCypherParser.g:24080:2: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:24081:3: ( ruleSYMBOLIC_NAME_X )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationCrossReference_23_1_0()); 
            }
            // InternalOpenCypherParser.g:24082:3: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:24083:4: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationSYMBOLIC_NAME_XParserRuleCall_23_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationSYMBOLIC_NAME_XParserRuleCall_23_1_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAtomAccess().getVariableRefVariableDeclarationCrossReference_23_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Atom__VariableRefAssignment_23_1"


    // $ANTLR start "rule__Reduce__AccumulatorAssignment_2"
    // InternalOpenCypherParser.g:24094:1: rule__Reduce__AccumulatorAssignment_2 : ( ruleVariableDeclaration ) ;
    public final void rule__Reduce__AccumulatorAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24098:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:24099:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:24099:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:24100:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorVariableDeclarationParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__AccumulatorAssignment_2"


    // $ANTLR start "rule__Reduce__AccumulatorExpressionAssignment_4"
    // InternalOpenCypherParser.g:24109:1: rule__Reduce__AccumulatorExpressionAssignment_4 : ( ruleExpression ) ;
    public final void rule__Reduce__AccumulatorExpressionAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24113:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24114:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24114:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24115:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getAccumulatorExpressionExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__AccumulatorExpressionAssignment_4"


    // $ANTLR start "rule__Reduce__IdInCollAssignment_6"
    // InternalOpenCypherParser.g:24124:1: rule__Reduce__IdInCollAssignment_6 : ( ruleIdInColl ) ;
    public final void rule__Reduce__IdInCollAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24128:1: ( ( ruleIdInColl ) )
            // InternalOpenCypherParser.g:24129:2: ( ruleIdInColl )
            {
            // InternalOpenCypherParser.g:24129:2: ( ruleIdInColl )
            // InternalOpenCypherParser.g:24130:3: ruleIdInColl
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIdInColl();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getIdInCollIdInCollParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__IdInCollAssignment_6"


    // $ANTLR start "rule__Reduce__ExpressionAssignment_8"
    // InternalOpenCypherParser.g:24139:1: rule__Reduce__ExpressionAssignment_8 : ( ruleExpression ) ;
    public final void rule__Reduce__ExpressionAssignment_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24143:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24144:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24144:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24145:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getReduceAccess().getExpressionExpressionParserRuleCall_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Reduce__ExpressionAssignment_8"


    // $ANTLR start "rule__ParenthesizedExpression__ExpressionAssignment_1"
    // InternalOpenCypherParser.g:24154:1: rule__ParenthesizedExpression__ExpressionAssignment_1 : ( ruleExpression ) ;
    public final void rule__ParenthesizedExpression__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24158:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24159:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24159:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24160:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getParenthesizedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ParenthesizedExpression__ExpressionAssignment_1"


    // $ANTLR start "rule__RelationshipsPattern__NodePatternAssignment_0"
    // InternalOpenCypherParser.g:24169:1: rule__RelationshipsPattern__NodePatternAssignment_0 : ( ruleNodePattern ) ;
    public final void rule__RelationshipsPattern__NodePatternAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24173:1: ( ( ruleNodePattern ) )
            // InternalOpenCypherParser.g:24174:2: ( ruleNodePattern )
            {
            // InternalOpenCypherParser.g:24174:2: ( ruleNodePattern )
            // InternalOpenCypherParser.g:24175:3: ruleNodePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNodePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getNodePatternNodePatternParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__NodePatternAssignment_0"


    // $ANTLR start "rule__RelationshipsPattern__ChainAssignment_1"
    // InternalOpenCypherParser.g:24184:1: rule__RelationshipsPattern__ChainAssignment_1 : ( rulePatternElementChain ) ;
    public final void rule__RelationshipsPattern__ChainAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24188:1: ( ( rulePatternElementChain ) )
            // InternalOpenCypherParser.g:24189:2: ( rulePatternElementChain )
            {
            // InternalOpenCypherParser.g:24189:2: ( rulePatternElementChain )
            // InternalOpenCypherParser.g:24190:3: rulePatternElementChain
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePatternElementChain();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationshipsPatternAccess().getChainPatternElementChainParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__RelationshipsPattern__ChainAssignment_1"


    // $ANTLR start "rule__FilterExpression__IdInCollAssignment_0"
    // InternalOpenCypherParser.g:24199:1: rule__FilterExpression__IdInCollAssignment_0 : ( ruleIdInColl ) ;
    public final void rule__FilterExpression__IdInCollAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24203:1: ( ( ruleIdInColl ) )
            // InternalOpenCypherParser.g:24204:2: ( ruleIdInColl )
            {
            // InternalOpenCypherParser.g:24204:2: ( ruleIdInColl )
            // InternalOpenCypherParser.g:24205:3: ruleIdInColl
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleIdInColl();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getIdInCollIdInCollParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__IdInCollAssignment_0"


    // $ANTLR start "rule__FilterExpression__WhereAssignment_1"
    // InternalOpenCypherParser.g:24214:1: rule__FilterExpression__WhereAssignment_1 : ( ruleWhere ) ;
    public final void rule__FilterExpression__WhereAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24218:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:24219:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:24219:2: ( ruleWhere )
            // InternalOpenCypherParser.g:24220:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFilterExpressionAccess().getWhereWhereParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FilterExpression__WhereAssignment_1"


    // $ANTLR start "rule__IdInColl__VariableAssignment_0"
    // InternalOpenCypherParser.g:24229:1: rule__IdInColl__VariableAssignment_0 : ( ruleVariableDeclaration ) ;
    public final void rule__IdInColl__VariableAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24233:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:24234:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:24234:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:24235:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getVariableVariableDeclarationParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__VariableAssignment_0"


    // $ANTLR start "rule__IdInColl__ExpressionAssignment_2"
    // InternalOpenCypherParser.g:24244:1: rule__IdInColl__ExpressionAssignment_2 : ( ruleExpression ) ;
    public final void rule__IdInColl__ExpressionAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24248:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24249:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24249:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24250:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getIdInCollAccess().getExpressionExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__IdInColl__ExpressionAssignment_2"


    // $ANTLR start "rule__FunctionInvocation__FunctionNameAssignment_0"
    // InternalOpenCypherParser.g:24259:1: rule__FunctionInvocation__FunctionNameAssignment_0 : ( ruleFunctionName ) ;
    public final void rule__FunctionInvocation__FunctionNameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24263:1: ( ( ruleFunctionName ) )
            // InternalOpenCypherParser.g:24264:2: ( ruleFunctionName )
            {
            // InternalOpenCypherParser.g:24264:2: ( ruleFunctionName )
            // InternalOpenCypherParser.g:24265:3: ruleFunctionName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFunctionName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getFunctionNameFunctionNameParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__FunctionNameAssignment_0"


    // $ANTLR start "rule__FunctionInvocation__DistinctAssignment_2"
    // InternalOpenCypherParser.g:24274:1: rule__FunctionInvocation__DistinctAssignment_2 : ( ( DISTINCT ) ) ;
    public final void rule__FunctionInvocation__DistinctAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24278:1: ( ( ( DISTINCT ) ) )
            // InternalOpenCypherParser.g:24279:2: ( ( DISTINCT ) )
            {
            // InternalOpenCypherParser.g:24279:2: ( ( DISTINCT ) )
            // InternalOpenCypherParser.g:24280:3: ( DISTINCT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }
            // InternalOpenCypherParser.g:24281:3: ( DISTINCT )
            // InternalOpenCypherParser.g:24282:4: DISTINCT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }
            match(input,DISTINCT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getDistinctDISTINCTKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__DistinctAssignment_2"


    // $ANTLR start "rule__FunctionInvocation__ParameterAssignment_3_0"
    // InternalOpenCypherParser.g:24293:1: rule__FunctionInvocation__ParameterAssignment_3_0 : ( ruleExpression ) ;
    public final void rule__FunctionInvocation__ParameterAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24297:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24298:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24298:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24299:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__ParameterAssignment_3_0"


    // $ANTLR start "rule__FunctionInvocation__ParameterAssignment_3_1_1"
    // InternalOpenCypherParser.g:24308:1: rule__FunctionInvocation__ParameterAssignment_3_1_1 : ( ruleExpression ) ;
    public final void rule__FunctionInvocation__ParameterAssignment_3_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24312:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24313:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24313:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24314:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFunctionInvocationAccess().getParameterExpressionParserRuleCall_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FunctionInvocation__ParameterAssignment_3_1_1"


    // $ANTLR start "rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0"
    // InternalOpenCypherParser.g:24323:1: rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0 : ( ruleProcedureName ) ;
    public final void rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24327:1: ( ( ruleProcedureName ) )
            // InternalOpenCypherParser.g:24328:2: ( ruleProcedureName )
            {
            // InternalOpenCypherParser.g:24328:2: ( ruleProcedureName )
            // InternalOpenCypherParser.g:24329:3: ruleProcedureName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleProcedureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getProcedureNameProcedureNameParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__ProcedureNameAssignment_0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__ParameterAssignment_2_0"
    // InternalOpenCypherParser.g:24338:1: rule__ExplicitProcedureInvocation__ParameterAssignment_2_0 : ( ruleExpression ) ;
    public final void rule__ExplicitProcedureInvocation__ParameterAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24342:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24343:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24343:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24344:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__ParameterAssignment_2_0"


    // $ANTLR start "rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1"
    // InternalOpenCypherParser.g:24353:1: rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1 : ( ruleExpression ) ;
    public final void rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24357:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24358:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24358:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24359:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getExplicitProcedureInvocationAccess().getParameterExpressionParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ExplicitProcedureInvocation__ParameterAssignment_2_1_1"


    // $ANTLR start "rule__ProcedureName__NamespaceAssignment_0"
    // InternalOpenCypherParser.g:24368:1: rule__ProcedureName__NamespaceAssignment_0 : ( ruleNamespace ) ;
    public final void rule__ProcedureName__NamespaceAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24372:1: ( ( ruleNamespace ) )
            // InternalOpenCypherParser.g:24373:2: ( ruleNamespace )
            {
            // InternalOpenCypherParser.g:24373:2: ( ruleNamespace )
            // InternalOpenCypherParser.g:24374:3: ruleNamespace
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNamespace();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNamespaceNamespaceParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__NamespaceAssignment_0"


    // $ANTLR start "rule__ProcedureName__NameAssignment_1"
    // InternalOpenCypherParser.g:24383:1: rule__ProcedureName__NameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__ProcedureName__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24387:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:24388:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:24388:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:24389:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getProcedureNameAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ProcedureName__NameAssignment_1"


    // $ANTLR start "rule__ListComprehension__FilterExpressionAssignment_1"
    // InternalOpenCypherParser.g:24398:1: rule__ListComprehension__FilterExpressionAssignment_1 : ( ruleFilterExpression ) ;
    public final void rule__ListComprehension__FilterExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24402:1: ( ( ruleFilterExpression ) )
            // InternalOpenCypherParser.g:24403:2: ( ruleFilterExpression )
            {
            // InternalOpenCypherParser.g:24403:2: ( ruleFilterExpression )
            // InternalOpenCypherParser.g:24404:3: ruleFilterExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFilterExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getFilterExpressionFilterExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__FilterExpressionAssignment_1"


    // $ANTLR start "rule__ListComprehension__ExpressionAssignment_2_1"
    // InternalOpenCypherParser.g:24413:1: rule__ListComprehension__ExpressionAssignment_2_1 : ( ruleExpression ) ;
    public final void rule__ListComprehension__ExpressionAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24417:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24418:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24418:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24419:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getListComprehensionAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ListComprehension__ExpressionAssignment_2_1"


    // $ANTLR start "rule__PatternComprehension__PathVariableAssignment_1_0"
    // InternalOpenCypherParser.g:24428:1: rule__PatternComprehension__PathVariableAssignment_1_0 : ( ruleVariableDeclaration ) ;
    public final void rule__PatternComprehension__PathVariableAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24432:1: ( ( ruleVariableDeclaration ) )
            // InternalOpenCypherParser.g:24433:2: ( ruleVariableDeclaration )
            {
            // InternalOpenCypherParser.g:24433:2: ( ruleVariableDeclaration )
            // InternalOpenCypherParser.g:24434:3: ruleVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPathVariableVariableDeclarationParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__PathVariableAssignment_1_0"


    // $ANTLR start "rule__PatternComprehension__PatternAssignment_2"
    // InternalOpenCypherParser.g:24443:1: rule__PatternComprehension__PatternAssignment_2 : ( ruleRelationshipsPattern ) ;
    public final void rule__PatternComprehension__PatternAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24447:1: ( ( ruleRelationshipsPattern ) )
            // InternalOpenCypherParser.g:24448:2: ( ruleRelationshipsPattern )
            {
            // InternalOpenCypherParser.g:24448:2: ( ruleRelationshipsPattern )
            // InternalOpenCypherParser.g:24449:3: ruleRelationshipsPattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRelationshipsPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getPatternRelationshipsPatternParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__PatternAssignment_2"


    // $ANTLR start "rule__PatternComprehension__WhereAssignment_3"
    // InternalOpenCypherParser.g:24458:1: rule__PatternComprehension__WhereAssignment_3 : ( ruleWhere ) ;
    public final void rule__PatternComprehension__WhereAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24462:1: ( ( ruleWhere ) )
            // InternalOpenCypherParser.g:24463:2: ( ruleWhere )
            {
            // InternalOpenCypherParser.g:24463:2: ( ruleWhere )
            // InternalOpenCypherParser.g:24464:3: ruleWhere
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleWhere();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getWhereWhereParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__WhereAssignment_3"


    // $ANTLR start "rule__PatternComprehension__ExpressionAssignment_5"
    // InternalOpenCypherParser.g:24473:1: rule__PatternComprehension__ExpressionAssignment_5 : ( ruleExpression ) ;
    public final void rule__PatternComprehension__ExpressionAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24477:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24478:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24478:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24479:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternComprehensionAccess().getExpressionExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PatternComprehension__ExpressionAssignment_5"


    // $ANTLR start "rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0"
    // InternalOpenCypherParser.g:24488:1: rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0 : ( rulePropertyKeyName ) ;
    public final void rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24492:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:24493:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:24493:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:24494:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyKeyNameAssignment_1_0_0"


    // $ANTLR start "rule__PropertyLookup__PropertyOperatorAssignment_1_0_1"
    // InternalOpenCypherParser.g:24503:1: rule__PropertyLookup__PropertyOperatorAssignment_1_0_1 : ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) ) ;
    public final void rule__PropertyLookup__PropertyOperatorAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24507:1: ( ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) ) )
            // InternalOpenCypherParser.g:24508:2: ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) )
            {
            // InternalOpenCypherParser.g:24508:2: ( ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 ) )
            // InternalOpenCypherParser.g:24509:3: ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0()); 
            }
            // InternalOpenCypherParser.g:24510:3: ( rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0 )
            // InternalOpenCypherParser.g:24510:4: rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0
            {
            pushFollow(FOLLOW_2);
            rule__PropertyLookup__PropertyOperatorAlternatives_1_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyOperatorAlternatives_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyOperatorAssignment_1_0_1"


    // $ANTLR start "rule__PropertyLookup__PropertyKeyNameAssignment_1_1"
    // InternalOpenCypherParser.g:24518:1: rule__PropertyLookup__PropertyKeyNameAssignment_1_1 : ( rulePropertyKeyName ) ;
    public final void rule__PropertyLookup__PropertyKeyNameAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24522:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:24523:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:24523:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:24524:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyLookupAccess().getPropertyKeyNamePropertyKeyNameParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyLookup__PropertyKeyNameAssignment_1_1"


    // $ANTLR start "rule__CaseExpression__CaseAlternativesAssignment_0_0_1"
    // InternalOpenCypherParser.g:24533:1: rule__CaseExpression__CaseAlternativesAssignment_0_0_1 : ( ruleCaseAlternatives ) ;
    public final void rule__CaseExpression__CaseAlternativesAssignment_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24537:1: ( ( ruleCaseAlternatives ) )
            // InternalOpenCypherParser.g:24538:2: ( ruleCaseAlternatives )
            {
            // InternalOpenCypherParser.g:24538:2: ( ruleCaseAlternatives )
            // InternalOpenCypherParser.g:24539:3: ruleCaseAlternatives
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__CaseAlternativesAssignment_0_0_1"


    // $ANTLR start "rule__CaseExpression__CaseExpressionAssignment_0_1_1"
    // InternalOpenCypherParser.g:24548:1: rule__CaseExpression__CaseExpressionAssignment_0_1_1 : ( ruleExpression ) ;
    public final void rule__CaseExpression__CaseExpressionAssignment_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24552:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24553:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24553:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24554:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseExpressionExpressionParserRuleCall_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__CaseExpressionAssignment_0_1_1"


    // $ANTLR start "rule__CaseExpression__CaseAlternativesAssignment_0_1_2"
    // InternalOpenCypherParser.g:24563:1: rule__CaseExpression__CaseAlternativesAssignment_0_1_2 : ( ruleCaseAlternatives ) ;
    public final void rule__CaseExpression__CaseAlternativesAssignment_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24567:1: ( ( ruleCaseAlternatives ) )
            // InternalOpenCypherParser.g:24568:2: ( ruleCaseAlternatives )
            {
            // InternalOpenCypherParser.g:24568:2: ( ruleCaseAlternatives )
            // InternalOpenCypherParser.g:24569:3: ruleCaseAlternatives
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCaseAlternatives();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getCaseAlternativesCaseAlternativesParserRuleCall_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__CaseAlternativesAssignment_0_1_2"


    // $ANTLR start "rule__CaseExpression__ElseExpressionAssignment_1_1"
    // InternalOpenCypherParser.g:24578:1: rule__CaseExpression__ElseExpressionAssignment_1_1 : ( ruleExpression ) ;
    public final void rule__CaseExpression__ElseExpressionAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24582:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24583:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24583:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24584:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseExpressionAccess().getElseExpressionExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseExpression__ElseExpressionAssignment_1_1"


    // $ANTLR start "rule__CaseAlternatives__WhenAssignment_1"
    // InternalOpenCypherParser.g:24593:1: rule__CaseAlternatives__WhenAssignment_1 : ( ruleExpression ) ;
    public final void rule__CaseAlternatives__WhenAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24597:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24598:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24598:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24599:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getWhenExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__WhenAssignment_1"


    // $ANTLR start "rule__CaseAlternatives__ThenAssignment_3"
    // InternalOpenCypherParser.g:24608:1: rule__CaseAlternatives__ThenAssignment_3 : ( ruleExpression ) ;
    public final void rule__CaseAlternatives__ThenAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24612:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24613:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24613:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24614:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCaseAlternativesAccess().getThenExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CaseAlternatives__ThenAssignment_3"


    // $ANTLR start "rule__VariableDeclaration__NameAssignment_1"
    // InternalOpenCypherParser.g:24623:1: rule__VariableDeclaration__NameAssignment_1 : ( ruleSYMBOLIC_NAME_X ) ;
    public final void rule__VariableDeclaration__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24627:1: ( ( ruleSYMBOLIC_NAME_X ) )
            // InternalOpenCypherParser.g:24628:2: ( ruleSYMBOLIC_NAME_X )
            {
            // InternalOpenCypherParser.g:24628:2: ( ruleSYMBOLIC_NAME_X )
            // InternalOpenCypherParser.g:24629:3: ruleSYMBOLIC_NAME_X
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSYMBOLIC_NAME_X();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getVariableDeclarationAccess().getNameSYMBOLIC_NAME_XParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__VariableDeclaration__NameAssignment_1"


    // $ANTLR start "rule__MapLiteral__EntriesAssignment_2_0"
    // InternalOpenCypherParser.g:24638:1: rule__MapLiteral__EntriesAssignment_2_0 : ( ruleMapLiteralEntry ) ;
    public final void rule__MapLiteral__EntriesAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24642:1: ( ( ruleMapLiteralEntry ) )
            // InternalOpenCypherParser.g:24643:2: ( ruleMapLiteralEntry )
            {
            // InternalOpenCypherParser.g:24643:2: ( ruleMapLiteralEntry )
            // InternalOpenCypherParser.g:24644:3: ruleMapLiteralEntry
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__EntriesAssignment_2_0"


    // $ANTLR start "rule__MapLiteral__EntriesAssignment_2_1_1"
    // InternalOpenCypherParser.g:24653:1: rule__MapLiteral__EntriesAssignment_2_1_1 : ( ruleMapLiteralEntry ) ;
    public final void rule__MapLiteral__EntriesAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24657:1: ( ( ruleMapLiteralEntry ) )
            // InternalOpenCypherParser.g:24658:2: ( ruleMapLiteralEntry )
            {
            // InternalOpenCypherParser.g:24658:2: ( ruleMapLiteralEntry )
            // InternalOpenCypherParser.g:24659:3: ruleMapLiteralEntry
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMapLiteralEntry();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralAccess().getEntriesMapLiteralEntryParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteral__EntriesAssignment_2_1_1"


    // $ANTLR start "rule__MapLiteralEntry__KeyAssignment_0"
    // InternalOpenCypherParser.g:24668:1: rule__MapLiteralEntry__KeyAssignment_0 : ( rulePropertyKeyName ) ;
    public final void rule__MapLiteralEntry__KeyAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24672:1: ( ( rulePropertyKeyName ) )
            // InternalOpenCypherParser.g:24673:2: ( rulePropertyKeyName )
            {
            // InternalOpenCypherParser.g:24673:2: ( rulePropertyKeyName )
            // InternalOpenCypherParser.g:24674:3: rulePropertyKeyName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyKeyName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getKeyPropertyKeyNameParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__KeyAssignment_0"


    // $ANTLR start "rule__MapLiteralEntry__ValueAssignment_2"
    // InternalOpenCypherParser.g:24683:1: rule__MapLiteralEntry__ValueAssignment_2 : ( ruleExpression ) ;
    public final void rule__MapLiteralEntry__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24687:1: ( ( ruleExpression ) )
            // InternalOpenCypherParser.g:24688:2: ( ruleExpression )
            {
            // InternalOpenCypherParser.g:24688:2: ( ruleExpression )
            // InternalOpenCypherParser.g:24689:3: ruleExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getMapLiteralEntryAccess().getValueExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MapLiteralEntry__ValueAssignment_2"


    // $ANTLR start "rule__LegacyParameter__ParameterAssignment_1"
    // InternalOpenCypherParser.g:24698:1: rule__LegacyParameter__ParameterAssignment_1 : ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) ) ;
    public final void rule__LegacyParameter__ParameterAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24702:1: ( ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:24703:2: ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:24703:2: ( ( rule__LegacyParameter__ParameterAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:24704:3: ( rule__LegacyParameter__ParameterAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:24705:3: ( rule__LegacyParameter__ParameterAlternatives_1_0 )
            // InternalOpenCypherParser.g:24705:4: rule__LegacyParameter__ParameterAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__LegacyParameter__ParameterAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegacyParameterAccess().getParameterAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegacyParameter__ParameterAssignment_1"


    // $ANTLR start "rule__Parameter__ParameterAssignment_1"
    // InternalOpenCypherParser.g:24713:1: rule__Parameter__ParameterAssignment_1 : ( ( rule__Parameter__ParameterAlternatives_1_0 ) ) ;
    public final void rule__Parameter__ParameterAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24717:1: ( ( ( rule__Parameter__ParameterAlternatives_1_0 ) ) )
            // InternalOpenCypherParser.g:24718:2: ( ( rule__Parameter__ParameterAlternatives_1_0 ) )
            {
            // InternalOpenCypherParser.g:24718:2: ( ( rule__Parameter__ParameterAlternatives_1_0 ) )
            // InternalOpenCypherParser.g:24719:3: ( rule__Parameter__ParameterAlternatives_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); 
            }
            // InternalOpenCypherParser.g:24720:3: ( rule__Parameter__ParameterAlternatives_1_0 )
            // InternalOpenCypherParser.g:24720:4: rule__Parameter__ParameterAlternatives_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__ParameterAlternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Parameter__ParameterAssignment_1"


    // $ANTLR start "rule__PropertyExpression__LeftAssignment_0"
    // InternalOpenCypherParser.g:24728:1: rule__PropertyExpression__LeftAssignment_0 : ( ruleAtom ) ;
    public final void rule__PropertyExpression__LeftAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24732:1: ( ( ruleAtom ) )
            // InternalOpenCypherParser.g:24733:2: ( ruleAtom )
            {
            // InternalOpenCypherParser.g:24733:2: ( ruleAtom )
            // InternalOpenCypherParser.g:24734:3: ruleAtom
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getLeftAtomParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAtom();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getLeftAtomParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__LeftAssignment_0"


    // $ANTLR start "rule__PropertyExpression__PropertyLookupsAssignment_1"
    // InternalOpenCypherParser.g:24743:1: rule__PropertyExpression__PropertyLookupsAssignment_1 : ( rulePropertyLookup ) ;
    public final void rule__PropertyExpression__PropertyLookupsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24747:1: ( ( rulePropertyLookup ) )
            // InternalOpenCypherParser.g:24748:2: ( rulePropertyLookup )
            {
            // InternalOpenCypherParser.g:24748:2: ( rulePropertyLookup )
            // InternalOpenCypherParser.g:24749:3: rulePropertyLookup
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePropertyLookup();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPropertyExpressionAccess().getPropertyLookupsPropertyLookupParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PropertyExpression__PropertyLookupsAssignment_1"


    // $ANTLR start "rule__DecimalInteger__ValueAssignment_1"
    // InternalOpenCypherParser.g:24758:1: rule__DecimalInteger__ValueAssignment_1 : ( ruleNumber ) ;
    public final void rule__DecimalInteger__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalOpenCypherParser.g:24762:1: ( ( ruleNumber ) )
            // InternalOpenCypherParser.g:24763:2: ( ruleNumber )
            {
            // InternalOpenCypherParser.g:24763:2: ( ruleNumber )
            // InternalOpenCypherParser.g:24764:3: ruleNumber
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDecimalIntegerAccess().getValueNumberParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DecimalInteger__ValueAssignment_1"

    // $ANTLR start synpred3_InternalOpenCypherParser
    public final void synpred3_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3328:2: ( ( ruleRegularQuery ) )
        // InternalOpenCypherParser.g:3328:2: ( ruleRegularQuery )
        {
        // InternalOpenCypherParser.g:3328:2: ( ruleRegularQuery )
        // InternalOpenCypherParser.g:3329:3: ruleRegularQuery
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryAccess().getRegularQueryParserRuleCall_0()); 
        }
        pushFollow(FOLLOW_2);
        ruleRegularQuery();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred3_InternalOpenCypherParser

    // $ANTLR start synpred4_InternalOpenCypherParser
    public final void synpred4_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3334:2: ( ( ruleStandaloneCall ) )
        // InternalOpenCypherParser.g:3334:2: ( ruleStandaloneCall )
        {
        // InternalOpenCypherParser.g:3334:2: ( ruleStandaloneCall )
        // InternalOpenCypherParser.g:3335:3: ruleStandaloneCall
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryAccess().getStandaloneCallParserRuleCall_1()); 
        }
        pushFollow(FOLLOW_2);
        ruleStandaloneCall();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred4_InternalOpenCypherParser

    // $ANTLR start synpred17_InternalOpenCypherParser
    public final void synpred17_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3442:2: ( ( ruleCreateIndex ) )
        // InternalOpenCypherParser.g:3442:2: ( ruleCreateIndex )
        {
        // InternalOpenCypherParser.g:3442:2: ( ruleCreateIndex )
        // InternalOpenCypherParser.g:3443:3: ruleCreateIndex
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateIndexParserRuleCall_0()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateIndex();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred17_InternalOpenCypherParser

    // $ANTLR start synpred18_InternalOpenCypherParser
    public final void synpred18_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3448:2: ( ( ruleDropIndex ) )
        // InternalOpenCypherParser.g:3448:2: ( ruleDropIndex )
        {
        // InternalOpenCypherParser.g:3448:2: ( ruleDropIndex )
        // InternalOpenCypherParser.g:3449:3: ruleDropIndex
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getDropIndexParserRuleCall_1()); 
        }
        pushFollow(FOLLOW_2);
        ruleDropIndex();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred18_InternalOpenCypherParser

    // $ANTLR start synpred19_InternalOpenCypherParser
    public final void synpred19_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3454:2: ( ( ruleCreateUniqueConstraint ) )
        // InternalOpenCypherParser.g:3454:2: ( ruleCreateUniqueConstraint )
        {
        // InternalOpenCypherParser.g:3454:2: ( ruleCreateUniqueConstraint )
        // InternalOpenCypherParser.g:3455:3: ruleCreateUniqueConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateUniqueConstraintParserRuleCall_2()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred19_InternalOpenCypherParser

    // $ANTLR start synpred20_InternalOpenCypherParser
    public final void synpred20_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3460:2: ( ( ruleDropUniqueConstraint ) )
        // InternalOpenCypherParser.g:3460:2: ( ruleDropUniqueConstraint )
        {
        // InternalOpenCypherParser.g:3460:2: ( ruleDropUniqueConstraint )
        // InternalOpenCypherParser.g:3461:3: ruleDropUniqueConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getDropUniqueConstraintParserRuleCall_3()); 
        }
        pushFollow(FOLLOW_2);
        ruleDropUniqueConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred20_InternalOpenCypherParser

    // $ANTLR start synpred21_InternalOpenCypherParser
    public final void synpred21_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3466:2: ( ( ruleCreateNodePropertyExistenceConstraint ) )
        // InternalOpenCypherParser.g:3466:2: ( ruleCreateNodePropertyExistenceConstraint )
        {
        // InternalOpenCypherParser.g:3466:2: ( ruleCreateNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:3467:3: ruleCreateNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateNodePropertyExistenceConstraintParserRuleCall_4()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred21_InternalOpenCypherParser

    // $ANTLR start synpred22_InternalOpenCypherParser
    public final void synpred22_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3472:2: ( ( ruleDropNodePropertyExistenceConstraint ) )
        // InternalOpenCypherParser.g:3472:2: ( ruleDropNodePropertyExistenceConstraint )
        {
        // InternalOpenCypherParser.g:3472:2: ( ruleDropNodePropertyExistenceConstraint )
        // InternalOpenCypherParser.g:3473:3: ruleDropNodePropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getDropNodePropertyExistenceConstraintParserRuleCall_5()); 
        }
        pushFollow(FOLLOW_2);
        ruleDropNodePropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred22_InternalOpenCypherParser

    // $ANTLR start synpred23_InternalOpenCypherParser
    public final void synpred23_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3478:2: ( ( ruleCreateRelationshipPropertyExistenceConstraint ) )
        // InternalOpenCypherParser.g:3478:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
        {
        // InternalOpenCypherParser.g:3478:2: ( ruleCreateRelationshipPropertyExistenceConstraint )
        // InternalOpenCypherParser.g:3479:3: ruleCreateRelationshipPropertyExistenceConstraint
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCommandAccess().getCreateRelationshipPropertyExistenceConstraintParserRuleCall_6()); 
        }
        pushFollow(FOLLOW_2);
        ruleCreateRelationshipPropertyExistenceConstraint();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred23_InternalOpenCypherParser

    // $ANTLR start synpred53_InternalOpenCypherParser
    public final void synpred53_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:3973:2: ( ( ( rule__ExpressionNot__Group_0__0 ) ) )
        // InternalOpenCypherParser.g:3973:2: ( ( rule__ExpressionNot__Group_0__0 ) )
        {
        // InternalOpenCypherParser.g:3973:2: ( ( rule__ExpressionNot__Group_0__0 ) )
        // InternalOpenCypherParser.g:3974:3: ( rule__ExpressionNot__Group_0__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getExpressionNotAccess().getGroup_0()); 
        }
        // InternalOpenCypherParser.g:3975:3: ( rule__ExpressionNot__Group_0__0 )
        // InternalOpenCypherParser.g:3975:4: rule__ExpressionNot__Group_0__0
        {
        pushFollow(FOLLOW_2);
        rule__ExpressionNot__Group_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred53_InternalOpenCypherParser

    // $ANTLR start synpred74_InternalOpenCypherParser
    public final void synpred74_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4204:2: ( ( ruleLegacyParameter ) )
        // InternalOpenCypherParser.g:4204:2: ( ruleLegacyParameter )
        {
        // InternalOpenCypherParser.g:4204:2: ( ruleLegacyParameter )
        // InternalOpenCypherParser.g:4205:3: ruleLegacyParameter
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getLegacyParameterParserRuleCall_3()); 
        }
        pushFollow(FOLLOW_2);
        ruleLegacyParameter();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred74_InternalOpenCypherParser

    // $ANTLR start synpred75_InternalOpenCypherParser
    public final void synpred75_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4210:2: ( ( ( rule__Atom__Group_4__0 ) ) )
        // InternalOpenCypherParser.g:4210:2: ( ( rule__Atom__Group_4__0 ) )
        {
        // InternalOpenCypherParser.g:4210:2: ( ( rule__Atom__Group_4__0 ) )
        // InternalOpenCypherParser.g:4211:3: ( rule__Atom__Group_4__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_4()); 
        }
        // InternalOpenCypherParser.g:4212:3: ( rule__Atom__Group_4__0 )
        // InternalOpenCypherParser.g:4212:4: rule__Atom__Group_4__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_4__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred75_InternalOpenCypherParser

    // $ANTLR start synpred76_InternalOpenCypherParser
    public final void synpred76_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4216:2: ( ( ( rule__Atom__Group_5__0 ) ) )
        // InternalOpenCypherParser.g:4216:2: ( ( rule__Atom__Group_5__0 ) )
        {
        // InternalOpenCypherParser.g:4216:2: ( ( rule__Atom__Group_5__0 ) )
        // InternalOpenCypherParser.g:4217:3: ( rule__Atom__Group_5__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_5()); 
        }
        // InternalOpenCypherParser.g:4218:3: ( rule__Atom__Group_5__0 )
        // InternalOpenCypherParser.g:4218:4: rule__Atom__Group_5__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_5__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred76_InternalOpenCypherParser

    // $ANTLR start synpred77_InternalOpenCypherParser
    public final void synpred77_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4222:2: ( ( ruleCaseExpression ) )
        // InternalOpenCypherParser.g:4222:2: ( ruleCaseExpression )
        {
        // InternalOpenCypherParser.g:4222:2: ( ruleCaseExpression )
        // InternalOpenCypherParser.g:4223:3: ruleCaseExpression
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getCaseExpressionParserRuleCall_6()); 
        }
        pushFollow(FOLLOW_2);
        ruleCaseExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred77_InternalOpenCypherParser

    // $ANTLR start synpred78_InternalOpenCypherParser
    public final void synpred78_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4228:2: ( ( ( rule__Atom__Group_7__0 ) ) )
        // InternalOpenCypherParser.g:4228:2: ( ( rule__Atom__Group_7__0 ) )
        {
        // InternalOpenCypherParser.g:4228:2: ( ( rule__Atom__Group_7__0 ) )
        // InternalOpenCypherParser.g:4229:3: ( rule__Atom__Group_7__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_7()); 
        }
        // InternalOpenCypherParser.g:4230:3: ( rule__Atom__Group_7__0 )
        // InternalOpenCypherParser.g:4230:4: rule__Atom__Group_7__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_7__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred78_InternalOpenCypherParser

    // $ANTLR start synpred79_InternalOpenCypherParser
    public final void synpred79_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4234:2: ( ( ruleMapLiteral ) )
        // InternalOpenCypherParser.g:4234:2: ( ruleMapLiteral )
        {
        // InternalOpenCypherParser.g:4234:2: ( ruleMapLiteral )
        // InternalOpenCypherParser.g:4235:3: ruleMapLiteral
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getMapLiteralParserRuleCall_8()); 
        }
        pushFollow(FOLLOW_2);
        ruleMapLiteral();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred79_InternalOpenCypherParser

    // $ANTLR start synpred80_InternalOpenCypherParser
    public final void synpred80_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4240:2: ( ( ruleListComprehension ) )
        // InternalOpenCypherParser.g:4240:2: ( ruleListComprehension )
        {
        // InternalOpenCypherParser.g:4240:2: ( ruleListComprehension )
        // InternalOpenCypherParser.g:4241:3: ruleListComprehension
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getListComprehensionParserRuleCall_9()); 
        }
        pushFollow(FOLLOW_2);
        ruleListComprehension();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred80_InternalOpenCypherParser

    // $ANTLR start synpred81_InternalOpenCypherParser
    public final void synpred81_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4246:2: ( ( rulePatternComprehension ) )
        // InternalOpenCypherParser.g:4246:2: ( rulePatternComprehension )
        {
        // InternalOpenCypherParser.g:4246:2: ( rulePatternComprehension )
        // InternalOpenCypherParser.g:4247:3: rulePatternComprehension
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getPatternComprehensionParserRuleCall_10()); 
        }
        pushFollow(FOLLOW_2);
        rulePatternComprehension();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred81_InternalOpenCypherParser

    // $ANTLR start synpred82_InternalOpenCypherParser
    public final void synpred82_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4252:2: ( ( ( rule__Atom__Group_11__0 ) ) )
        // InternalOpenCypherParser.g:4252:2: ( ( rule__Atom__Group_11__0 ) )
        {
        // InternalOpenCypherParser.g:4252:2: ( ( rule__Atom__Group_11__0 ) )
        // InternalOpenCypherParser.g:4253:3: ( rule__Atom__Group_11__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_11()); 
        }
        // InternalOpenCypherParser.g:4254:3: ( rule__Atom__Group_11__0 )
        // InternalOpenCypherParser.g:4254:4: rule__Atom__Group_11__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_11__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred82_InternalOpenCypherParser

    // $ANTLR start synpred83_InternalOpenCypherParser
    public final void synpred83_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4258:2: ( ( ( rule__Atom__Group_12__0 ) ) )
        // InternalOpenCypherParser.g:4258:2: ( ( rule__Atom__Group_12__0 ) )
        {
        // InternalOpenCypherParser.g:4258:2: ( ( rule__Atom__Group_12__0 ) )
        // InternalOpenCypherParser.g:4259:3: ( rule__Atom__Group_12__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_12()); 
        }
        // InternalOpenCypherParser.g:4260:3: ( rule__Atom__Group_12__0 )
        // InternalOpenCypherParser.g:4260:4: rule__Atom__Group_12__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_12__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred83_InternalOpenCypherParser

    // $ANTLR start synpred84_InternalOpenCypherParser
    public final void synpred84_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4264:2: ( ( ruleReduce ) )
        // InternalOpenCypherParser.g:4264:2: ( ruleReduce )
        {
        // InternalOpenCypherParser.g:4264:2: ( ruleReduce )
        // InternalOpenCypherParser.g:4265:3: ruleReduce
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getReduceParserRuleCall_13()); 
        }
        pushFollow(FOLLOW_2);
        ruleReduce();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred84_InternalOpenCypherParser

    // $ANTLR start synpred85_InternalOpenCypherParser
    public final void synpred85_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4270:2: ( ( ( rule__Atom__Group_14__0 ) ) )
        // InternalOpenCypherParser.g:4270:2: ( ( rule__Atom__Group_14__0 ) )
        {
        // InternalOpenCypherParser.g:4270:2: ( ( rule__Atom__Group_14__0 ) )
        // InternalOpenCypherParser.g:4271:3: ( rule__Atom__Group_14__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_14()); 
        }
        // InternalOpenCypherParser.g:4272:3: ( rule__Atom__Group_14__0 )
        // InternalOpenCypherParser.g:4272:4: rule__Atom__Group_14__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_14__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred85_InternalOpenCypherParser

    // $ANTLR start synpred86_InternalOpenCypherParser
    public final void synpred86_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4276:2: ( ( ( rule__Atom__Group_15__0 ) ) )
        // InternalOpenCypherParser.g:4276:2: ( ( rule__Atom__Group_15__0 ) )
        {
        // InternalOpenCypherParser.g:4276:2: ( ( rule__Atom__Group_15__0 ) )
        // InternalOpenCypherParser.g:4277:3: ( rule__Atom__Group_15__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_15()); 
        }
        // InternalOpenCypherParser.g:4278:3: ( rule__Atom__Group_15__0 )
        // InternalOpenCypherParser.g:4278:4: rule__Atom__Group_15__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_15__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred86_InternalOpenCypherParser

    // $ANTLR start synpred87_InternalOpenCypherParser
    public final void synpred87_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4282:2: ( ( ( rule__Atom__Group_16__0 ) ) )
        // InternalOpenCypherParser.g:4282:2: ( ( rule__Atom__Group_16__0 ) )
        {
        // InternalOpenCypherParser.g:4282:2: ( ( rule__Atom__Group_16__0 ) )
        // InternalOpenCypherParser.g:4283:3: ( rule__Atom__Group_16__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_16()); 
        }
        // InternalOpenCypherParser.g:4284:3: ( rule__Atom__Group_16__0 )
        // InternalOpenCypherParser.g:4284:4: rule__Atom__Group_16__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_16__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred87_InternalOpenCypherParser

    // $ANTLR start synpred88_InternalOpenCypherParser
    public final void synpred88_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4288:2: ( ( ( rule__Atom__Group_17__0 ) ) )
        // InternalOpenCypherParser.g:4288:2: ( ( rule__Atom__Group_17__0 ) )
        {
        // InternalOpenCypherParser.g:4288:2: ( ( rule__Atom__Group_17__0 ) )
        // InternalOpenCypherParser.g:4289:3: ( rule__Atom__Group_17__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_17()); 
        }
        // InternalOpenCypherParser.g:4290:3: ( rule__Atom__Group_17__0 )
        // InternalOpenCypherParser.g:4290:4: rule__Atom__Group_17__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_17__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred88_InternalOpenCypherParser

    // $ANTLR start synpred89_InternalOpenCypherParser
    public final void synpred89_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4294:2: ( ( ( rule__Atom__Group_18__0 ) ) )
        // InternalOpenCypherParser.g:4294:2: ( ( rule__Atom__Group_18__0 ) )
        {
        // InternalOpenCypherParser.g:4294:2: ( ( rule__Atom__Group_18__0 ) )
        // InternalOpenCypherParser.g:4295:3: ( rule__Atom__Group_18__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getGroup_18()); 
        }
        // InternalOpenCypherParser.g:4296:3: ( rule__Atom__Group_18__0 )
        // InternalOpenCypherParser.g:4296:4: rule__Atom__Group_18__0
        {
        pushFollow(FOLLOW_2);
        rule__Atom__Group_18__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred89_InternalOpenCypherParser

    // $ANTLR start synpred90_InternalOpenCypherParser
    public final void synpred90_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4300:2: ( ( ruleShortestPathPattern ) )
        // InternalOpenCypherParser.g:4300:2: ( ruleShortestPathPattern )
        {
        // InternalOpenCypherParser.g:4300:2: ( ruleShortestPathPattern )
        // InternalOpenCypherParser.g:4301:3: ruleShortestPathPattern
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getShortestPathPatternParserRuleCall_19()); 
        }
        pushFollow(FOLLOW_2);
        ruleShortestPathPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred90_InternalOpenCypherParser

    // $ANTLR start synpred91_InternalOpenCypherParser
    public final void synpred91_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4306:2: ( ( ruleRelationshipsPattern ) )
        // InternalOpenCypherParser.g:4306:2: ( ruleRelationshipsPattern )
        {
        // InternalOpenCypherParser.g:4306:2: ( ruleRelationshipsPattern )
        // InternalOpenCypherParser.g:4307:3: ruleRelationshipsPattern
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getRelationshipsPatternParserRuleCall_20()); 
        }
        pushFollow(FOLLOW_2);
        ruleRelationshipsPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred91_InternalOpenCypherParser

    // $ANTLR start synpred92_InternalOpenCypherParser
    public final void synpred92_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4312:2: ( ( ruleParenthesizedExpression ) )
        // InternalOpenCypherParser.g:4312:2: ( ruleParenthesizedExpression )
        {
        // InternalOpenCypherParser.g:4312:2: ( ruleParenthesizedExpression )
        // InternalOpenCypherParser.g:4313:3: ruleParenthesizedExpression
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getParenthesizedExpressionParserRuleCall_21()); 
        }
        pushFollow(FOLLOW_2);
        ruleParenthesizedExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred92_InternalOpenCypherParser

    // $ANTLR start synpred93_InternalOpenCypherParser
    public final void synpred93_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4318:2: ( ( ruleFunctionInvocation ) )
        // InternalOpenCypherParser.g:4318:2: ( ruleFunctionInvocation )
        {
        // InternalOpenCypherParser.g:4318:2: ( ruleFunctionInvocation )
        // InternalOpenCypherParser.g:4319:3: ruleFunctionInvocation
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getAtomAccess().getFunctionInvocationParserRuleCall_22()); 
        }
        pushFollow(FOLLOW_2);
        ruleFunctionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred93_InternalOpenCypherParser

    // $ANTLR start synpred97_InternalOpenCypherParser
    public final void synpred97_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:4402:2: ( ( ( rule__CaseExpression__Group_0_0__0 ) ) )
        // InternalOpenCypherParser.g:4402:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
        {
        // InternalOpenCypherParser.g:4402:2: ( ( rule__CaseExpression__Group_0_0__0 ) )
        // InternalOpenCypherParser.g:4403:3: ( rule__CaseExpression__Group_0_0__0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getCaseExpressionAccess().getGroup_0_0()); 
        }
        // InternalOpenCypherParser.g:4404:3: ( rule__CaseExpression__Group_0_0__0 )
        // InternalOpenCypherParser.g:4404:4: rule__CaseExpression__Group_0_0__0
        {
        pushFollow(FOLLOW_2);
        rule__CaseExpression__Group_0_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred97_InternalOpenCypherParser

    // $ANTLR start synpred205_InternalOpenCypherParser
    public final void synpred205_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:10043:3: ( rule__With__DistintAssignment_1 )
        // InternalOpenCypherParser.g:10043:3: rule__With__DistintAssignment_1
        {
        pushFollow(FOLLOW_2);
        rule__With__DistintAssignment_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_InternalOpenCypherParser

    // $ANTLR start synpred207_InternalOpenCypherParser
    public final void synpred207_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:10151:3: ( rule__Return__DistinctAssignment_1 )
        // InternalOpenCypherParser.g:10151:3: rule__Return__DistinctAssignment_1
        {
        pushFollow(FOLLOW_2);
        rule__Return__DistinctAssignment_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_InternalOpenCypherParser

    // $ANTLR start synpred236_InternalOpenCypherParser
    public final void synpred236_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:14335:3: ( rule__RangeLiteral__Group_2__0 )
        // InternalOpenCypherParser.g:14335:3: rule__RangeLiteral__Group_2__0
        {
        pushFollow(FOLLOW_2);
        rule__RangeLiteral__Group_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_InternalOpenCypherParser

    // $ANTLR start synpred256_InternalOpenCypherParser
    public final void synpred256_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:18594:4: ( rule__RelationshipsPattern__ChainAssignment_1 )
        // InternalOpenCypherParser.g:18594:4: rule__RelationshipsPattern__ChainAssignment_1
        {
        pushFollow(FOLLOW_2);
        rule__RelationshipsPattern__ChainAssignment_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_InternalOpenCypherParser

    // $ANTLR start synpred258_InternalOpenCypherParser
    public final void synpred258_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:18812:3: ( rule__FunctionInvocation__DistinctAssignment_2 )
        // InternalOpenCypherParser.g:18812:3: rule__FunctionInvocation__DistinctAssignment_2
        {
        pushFollow(FOLLOW_2);
        rule__FunctionInvocation__DistinctAssignment_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_InternalOpenCypherParser

    // $ANTLR start synpred273_InternalOpenCypherParser
    public final void synpred273_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:20926:2: ( rule__QueryOptions__UnorderedGroup_1__0 )
        // InternalOpenCypherParser.g:20926:2: rule__QueryOptions__UnorderedGroup_1__0
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__UnorderedGroup_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_InternalOpenCypherParser

    // $ANTLR start synpred274_InternalOpenCypherParser
    public final void synpred274_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:20941:3: ( ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) ) )
        // InternalOpenCypherParser.g:20941:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
        {
        // InternalOpenCypherParser.g:20941:3: ({...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) ) )
        // InternalOpenCypherParser.g:20942:4: {...}? => ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred274_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalOpenCypherParser.g:20942:108: ( ( ( rule__QueryOptions__ExplainAssignment_1_0 ) ) )
        // InternalOpenCypherParser.g:20943:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 0);
        // InternalOpenCypherParser.g:20949:5: ( ( rule__QueryOptions__ExplainAssignment_1_0 ) )
        // InternalOpenCypherParser.g:20950:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryOptionsAccess().getExplainAssignment_1_0()); 
        }
        // InternalOpenCypherParser.g:20951:6: ( rule__QueryOptions__ExplainAssignment_1_0 )
        // InternalOpenCypherParser.g:20951:7: rule__QueryOptions__ExplainAssignment_1_0
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__ExplainAssignment_1_0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred274_InternalOpenCypherParser

    // $ANTLR start synpred275_InternalOpenCypherParser
    public final void synpred275_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:20956:3: ( ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) ) )
        // InternalOpenCypherParser.g:20956:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
        {
        // InternalOpenCypherParser.g:20956:3: ({...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) ) )
        // InternalOpenCypherParser.g:20957:4: {...}? => ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred275_InternalOpenCypherParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalOpenCypherParser.g:20957:108: ( ( ( rule__QueryOptions__ProfileAssignment_1_1 ) ) )
        // InternalOpenCypherParser.g:20958:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getQueryOptionsAccess().getUnorderedGroup_1(), 1);
        // InternalOpenCypherParser.g:20964:5: ( ( rule__QueryOptions__ProfileAssignment_1_1 ) )
        // InternalOpenCypherParser.g:20965:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getQueryOptionsAccess().getProfileAssignment_1_1()); 
        }
        // InternalOpenCypherParser.g:20966:6: ( rule__QueryOptions__ProfileAssignment_1_1 )
        // InternalOpenCypherParser.g:20966:7: rule__QueryOptions__ProfileAssignment_1_1
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__ProfileAssignment_1_1();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred275_InternalOpenCypherParser

    // $ANTLR start synpred276_InternalOpenCypherParser
    public final void synpred276_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:20987:8: ( rule__QueryOptions__CypherOptionAssignment_1_2 )
        // InternalOpenCypherParser.g:20987:9: rule__QueryOptions__CypherOptionAssignment_1_2
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__CypherOptionAssignment_1_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_InternalOpenCypherParser

    // $ANTLR start synpred277_InternalOpenCypherParser
    public final void synpred277_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21007:2: ( rule__QueryOptions__UnorderedGroup_1__1 )
        // InternalOpenCypherParser.g:21007:2: rule__QueryOptions__UnorderedGroup_1__1
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__UnorderedGroup_1__1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_InternalOpenCypherParser

    // $ANTLR start synpred278_InternalOpenCypherParser
    public final void synpred278_InternalOpenCypherParser_fragment() throws RecognitionException {   
        // InternalOpenCypherParser.g:21019:2: ( rule__QueryOptions__UnorderedGroup_1__2 )
        // InternalOpenCypherParser.g:21019:2: rule__QueryOptions__UnorderedGroup_1__2
        {
        pushFollow(FOLLOW_2);
        rule__QueryOptions__UnorderedGroup_1__2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_InternalOpenCypherParser

    // Delegated rules

    public final boolean synpred84_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalOpenCypherParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalOpenCypherParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA122 dfa122 = new DFA122(this);
    static final String dfa_1s = "\117\uffff";
    static final String dfa_2s = "\1\1\1\uffff\114\1\1\uffff";
    static final String dfa_3s = "\1\4\1\uffff\114\56\1\uffff";
    static final String dfa_4s = "\1\156\1\uffff\114\143\1\uffff";
    static final String dfa_5s = "\1\uffff\1\2\114\uffff\1\1";
    static final String dfa_6s = "\117\uffff}>";
    static final String[] dfa_7s = {
            "\1\67\1\32\1\63\1\66\1\17\1\53\1\55\1\76\1\45\1\33\1\7\1\4\1\104\1\43\1\27\1\5\1\20\1\10\1\13\1\3\1\40\1\41\1\23\1\103\1\110\1\42\1\46\1\107\1\74\1\22\1\35\1\102\1\101\1\14\1\52\1\34\1\36\1\47\1\61\1\11\1\6\1\65\2\uffff\1\111\1\54\1\16\1\112\1\75\1\30\1\57\1\24\1\62\1\106\1\77\1\60\1\51\1\115\1\100\1\114\1\26\1\12\1\72\1\105\1\56\1\25\1\113\1\73\1\64\1\37\1\71\6\uffff\1\31\1\50\1\44\1\21\1\15\1\70\27\uffff\1\2",
            "",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            "\1\1\53\uffff\1\1\5\uffff\1\116\2\uffff\1\1",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()* loopback of 2836:3: ( rule__Namespace__Group__0 )*";
        }
    }
    static final String dfa_8s = "\22\uffff";
    static final String dfa_9s = "\1\15\16\uffff\1\0\2\uffff";
    static final String dfa_10s = "\1\111\16\uffff\1\0\2\uffff";
    static final String dfa_11s = "\1\uffff\1\1\16\uffff\1\3\1\2";
    static final String dfa_12s = "\17\uffff\1\0\2\uffff}>";
    static final String[] dfa_13s = {
            "\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\20\2\uffff\1\17\7\uffff\1\1\10\uffff\1\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "3323:1: rule__Query__Alternatives : ( ( ruleRegularQuery ) | ( ruleStandaloneCall ) | ( ruleBulkImportQuery ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_15 = input.LA(1);

                         
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalOpenCypherParser()) ) {s = 1;}

                        else if ( (synpred4_InternalOpenCypherParser()) ) {s = 17;}

                         
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\13\uffff";
    static final String dfa_15s = "\1\26\2\0\10\uffff";
    static final String dfa_16s = "\1\62\2\0\10\uffff";
    static final String dfa_17s = "\3\uffff\1\1\1\3\1\5\1\7\1\2\1\4\1\6\1\10";
    static final String dfa_18s = "\1\uffff\1\0\1\1\10\uffff}>";
    static final String[] dfa_19s = {
            "\1\1\33\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "3437:1: rule__Command__Alternatives : ( ( ruleCreateIndex ) | ( ruleDropIndex ) | ( ruleCreateUniqueConstraint ) | ( ruleDropUniqueConstraint ) | ( ruleCreateNodePropertyExistenceConstraint ) | ( ruleDropNodePropertyExistenceConstraint ) | ( ruleCreateRelationshipPropertyExistenceConstraint ) | ( ruleDropRelationshipPropertyExistenceConstraint ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalOpenCypherParser()) ) {s = 3;}

                        else if ( (synpred19_InternalOpenCypherParser()) ) {s = 4;}

                        else if ( (synpred21_InternalOpenCypherParser()) ) {s = 5;}

                        else if ( (synpred23_InternalOpenCypherParser()) ) {s = 6;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalOpenCypherParser()) ) {s = 7;}

                        else if ( (synpred20_InternalOpenCypherParser()) ) {s = 8;}

                        else if ( (synpred22_InternalOpenCypherParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_20s = "\121\uffff";
    static final String dfa_21s = "\1\4\1\uffff\3\113\1\4\110\113\3\uffff";
    static final String dfa_22s = "\1\165\1\uffff\3\145\1\165\110\145\3\uffff";
    static final String dfa_23s = "\1\uffff\1\1\114\uffff\1\3\1\2\1\4";
    static final String dfa_24s = "\121\uffff}>";
    static final String[] dfa_25s = {
            "\1\17\1\47\1\100\1\16\1\34\1\70\1\72\1\111\1\62\1\50\1\25\1\22\1\7\1\60\1\44\1\23\1\35\1\26\1\30\1\21\1\55\1\56\1\40\1\11\1\10\1\57\1\63\1\15\1\107\1\37\1\52\1\6\1\3\1\31\1\67\1\51\1\53\1\64\1\76\1\27\1\24\1\102\2\uffff\1\5\1\71\1\33\1\112\1\110\1\45\1\74\1\41\1\77\1\14\1\4\1\75\1\66\1\115\1\2\1\114\1\43\1\12\1\105\1\13\1\73\1\42\1\113\1\106\1\101\1\54\1\104\6\uffff\1\46\1\65\1\61\1\36\1\32\1\103\1\uffff\1\1\1\uffff\1\1\15\uffff\1\1\2\uffff\1\1\2\uffff\1\20\3\uffff\4\1",
            "",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\52\1\2\uffff\33\1\1\116\5\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\120\2\uffff\1\117\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "\1\116\16\uffff\1\1\5\uffff\1\1\1\uffff\1\120\2\uffff\1\117",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "3515:1: rule__SetItem__Alternatives : ( ( ( rule__SetItem__Group_0__0 ) ) | ( ( rule__SetItem__Group_1__0 ) ) | ( ( rule__SetItem__Group_2__0 ) ) | ( ( rule__SetItem__Group_3__0 ) ) );";
        }
    }
    static final String dfa_26s = "\1\4\107\132\1\4\4\132\2\uffff";
    static final String dfa_27s = "\1\165\107\142\1\165\4\142\2\uffff";
    static final String dfa_28s = "\115\uffff\1\2\1\1";
    static final String[] dfa_29s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\1\uffff\1\115\1\uffff\1\115\15\uffff\1\115\2\uffff\1\115\2\uffff\1\1\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\52\115\2\uffff\33\115\6\uffff\6\115\1\uffff\1\115\1\uffff\1\115\2\uffff\1\115\1\uffff\2\115\1\uffff\1\116\5\uffff\1\115\2\uffff\1\115\2\uffff\1\115\3\uffff\4\115",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "\1\115\5\uffff\1\115\1\uffff\1\116",
            "",
            ""
    };
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[][] dfa_29 = unpackEncodedStringArray(dfa_29s);

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_26;
            this.max = dfa_27;
            this.accept = dfa_28;
            this.special = dfa_6;
            this.transition = dfa_29;
        }
        public String getDescription() {
            return "3548:1: rule__RemoveItem__Alternatives : ( ( ( rule__RemoveItem__Group_0__0 ) ) | ( ( rule__RemoveItem__Group_1__0 ) ) );";
        }
    }
    static final String dfa_30s = "\120\uffff";
    static final String dfa_31s = "\1\uffff\114\115\3\uffff";
    static final String dfa_32s = "\1\4\114\56\1\uffff\1\4\1\uffff";
    static final String dfa_33s = "\1\156\114\143\1\uffff\1\156\1\uffff";
    static final String dfa_34s = "\115\uffff\1\2\1\uffff\1\1";
    static final String dfa_35s = "\120\uffff}>";
    static final String[] dfa_36s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "\1\115\53\uffff\1\117\5\uffff\1\116\2\uffff\1\115",
            "",
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            ""
    };

    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final char[] dfa_32 = DFA.unpackEncodedStringToUnsignedChars(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[][] dfa_36 = unpackEncodedStringArray(dfa_36s);

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = dfa_30;
            this.eof = dfa_31;
            this.min = dfa_32;
            this.max = dfa_33;
            this.accept = dfa_34;
            this.special = dfa_35;
            this.transition = dfa_36;
        }
        public String getDescription() {
            return "3569:1: rule__StandaloneCall__InvocationAlternatives_1_0 : ( ( ruleExplicitProcedureInvocation ) | ( ruleImplicitProcedureInvocation ) );";
        }
    }
    static final String dfa_37s = "\122\uffff";
    static final String dfa_38s = "\1\132\1\4\1\uffff\114\132\1\4\2\uffff";
    static final String dfa_39s = "\1\142\1\156\1\uffff\114\132\1\162\2\uffff";
    static final String dfa_40s = "\2\uffff\1\3\115\uffff\1\2\1\1";
    static final String dfa_41s = "\122\uffff}>";
    static final String[] dfa_42s = {
            "\1\2\7\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\27\uffff\1\3",
            "",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\1\117",
            "\52\121\2\uffff\33\121\6\uffff\6\121\1\uffff\1\120\25\uffff\1\121\3\uffff\1\120",
            "",
            ""
    };

    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final short[][] dfa_42 = unpackEncodedStringArray(dfa_42s);

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = dfa_37;
            this.eof = dfa_37;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_41;
            this.transition = dfa_42;
        }
        public String getDescription() {
            return "3713:1: rule__NodeLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );";
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = dfa_37;
            this.eof = dfa_37;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_41;
            this.transition = dfa_42;
        }
        public String getDescription() {
            return "3761:1: rule__RelationshipLookup__Alternatives_1 : ( ( ruleIdentifiedIndexLookup ) | ( ruleIndexQuery ) | ( ruleIdLookup ) );";
        }
    }
    static final String dfa_43s = "\1\130\1\4\1\uffff\114\142\2\uffff";
    static final String dfa_44s = "\1\153\1\165\1\uffff\114\155\2\uffff";
    static final String dfa_45s = "\2\uffff\1\2\114\uffff\1\1\1\3";
    static final String[] dfa_46s = {
            "\1\2\22\uffff\1\1",
            "\1\70\1\33\1\64\1\67\1\20\1\54\1\56\1\77\1\46\1\34\1\10\1\5\1\105\1\44\1\30\1\6\1\21\1\11\1\14\1\4\1\41\1\42\1\24\1\104\1\111\1\43\1\47\1\110\1\75\1\23\1\36\1\103\1\102\1\15\1\53\1\35\1\37\1\50\1\62\1\12\1\7\1\66\2\uffff\1\112\1\55\1\17\1\113\1\76\1\31\1\60\1\25\1\63\1\107\1\100\1\61\1\52\1\116\1\101\1\115\1\27\1\13\1\73\1\106\1\57\1\26\1\114\1\74\1\65\1\40\1\72\6\uffff\1\32\1\51\1\45\1\22\1\16\1\71\26\uffff\1\117\1\3\4\uffff\3\120",
            "",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "\1\117\12\uffff\1\120",
            "",
            ""
    };
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final char[] dfa_44 = DFA.unpackEncodedStringToUnsignedChars(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[][] dfa_46 = unpackEncodedStringArray(dfa_46s);

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_43;
            this.max = dfa_44;
            this.accept = dfa_45;
            this.special = dfa_24;
            this.transition = dfa_46;
        }
        public String getDescription() {
            return "3941:1: rule__Properties__Alternatives : ( ( ruleMapLiteral ) | ( ruleParameter ) | ( ruleLegacyParameter ) );";
        }
    }
    static final String dfa_47s = "\130\uffff";
    static final String dfa_48s = "\1\4\1\0\126\uffff";
    static final String dfa_49s = "\1\165\1\0\126\uffff";
    static final String dfa_50s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_51s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_52s = {
            "\52\2\2\uffff\27\2\1\1\3\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "3968:1: rule__ExpressionNot__Alternatives : ( ( ( rule__ExpressionNot__Group_0__0 ) ) | ( ruleExpressionComparison ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_53s = "\12\uffff";
    static final String dfa_54s = "\1\13\6\uffff\1\72\2\uffff";
    static final String dfa_55s = "\1\150\6\uffff\1\107\2\uffff";
    static final String dfa_56s = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10";
    static final String dfa_57s = "\12\uffff}>";
    static final String[] dfa_58s = {
            "\1\6\24\uffff\1\4\23\uffff\1\5\32\uffff\1\2\3\uffff\1\3\1\7\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\14\uffff\1\11",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final char[] dfa_54 = DFA.unpackEncodedStringToUnsignedChars(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[][] dfa_58 = unpackEncodedStringArray(dfa_58s);

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = dfa_53;
            this.eof = dfa_53;
            this.min = dfa_54;
            this.max = dfa_55;
            this.accept = dfa_56;
            this.special = dfa_57;
            this.transition = dfa_58;
        }
        public String getDescription() {
            return "4124:1: rule__Expression3__Alternatives_1 : ( ( ( rule__Expression3__Group_1_0__0 ) ) | ( ( rule__Expression3__Group_1_1__0 ) ) | ( ( rule__Expression3__Group_1_2__0 ) ) | ( ( rule__Expression3__Group_1_3__0 ) ) | ( ( rule__Expression3__Group_1_4__0 ) ) | ( ( rule__Expression3__Group_1_5__0 ) ) | ( ( rule__Expression3__Group_1_6__0 ) ) | ( ( rule__Expression3__Group_1_7__0 ) ) );";
        }
    }
    static final String dfa_59s = "\152\uffff";
    static final String dfa_60s = "\1\4\5\uffff\117\0\25\uffff";
    static final String dfa_61s = "\1\165\5\uffff\117\0\25\uffff";
    static final String dfa_62s = "\1\uffff\1\1\2\uffff\1\2\1\3\117\uffff\1\4\1\11\1\5\1\27\1\30\1\6\1\7\1\10\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26";
    static final String dfa_63s = "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\25\uffff}>";
    static final String[] dfa_64s = {
            "\1\25\1\56\1\107\1\24\1\43\1\77\1\101\1\120\1\71\1\57\1\34\1\31\1\15\1\67\1\53\1\32\1\44\1\35\1\37\1\30\1\64\1\65\1\47\1\17\1\16\1\66\1\72\1\23\1\116\1\46\1\61\1\13\1\10\1\40\1\76\1\60\1\62\1\73\1\105\1\36\1\33\1\111\2\uffff\1\12\1\100\1\42\1\121\1\117\1\54\1\103\1\50\1\106\1\22\1\11\1\104\1\75\1\124\1\7\1\123\1\52\1\20\1\114\1\21\1\102\1\51\1\122\1\115\1\110\1\63\1\113\6\uffff\1\55\1\74\1\70\1\45\1\41\1\112\1\uffff\1\5\1\uffff\1\26\15\uffff\1\14\2\uffff\1\6\2\uffff\1\27\3\uffff\1\4\3\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final char[] dfa_60 = DFA.unpackEncodedStringToUnsignedChars(dfa_60s);
    static final char[] dfa_61 = DFA.unpackEncodedStringToUnsignedChars(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[][] dfa_64 = unpackEncodedStringArray(dfa_64s);

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = dfa_59;
            this.eof = dfa_59;
            this.min = dfa_60;
            this.max = dfa_61;
            this.accept = dfa_62;
            this.special = dfa_63;
            this.transition = dfa_64;
        }
        public String getDescription() {
            return "4181:1: rule__Atom__Alternatives : ( ( ( rule__Atom__Group_0__0 ) ) | ( ( rule__Atom__Group_1__0 ) ) | ( ruleParameter ) | ( ruleLegacyParameter ) | ( ( rule__Atom__Group_4__0 ) ) | ( ( rule__Atom__Group_5__0 ) ) | ( ruleCaseExpression ) | ( ( rule__Atom__Group_7__0 ) ) | ( ruleMapLiteral ) | ( ruleListComprehension ) | ( rulePatternComprehension ) | ( ( rule__Atom__Group_11__0 ) ) | ( ( rule__Atom__Group_12__0 ) ) | ( ruleReduce ) | ( ( rule__Atom__Group_14__0 ) ) | ( ( rule__Atom__Group_15__0 ) ) | ( ( rule__Atom__Group_16__0 ) ) | ( ( rule__Atom__Group_17__0 ) ) | ( ( rule__Atom__Group_18__0 ) ) | ( ruleShortestPathPattern ) | ( ruleRelationshipsPattern ) | ( ruleParenthesizedExpression ) | ( ruleFunctionInvocation ) | ( ( rule__Atom__Group_23__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_6 = input.LA(1);

                         
                        int index33_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalOpenCypherParser()) ) {s = 85;}

                        else if ( (synpred79_InternalOpenCypherParser()) ) {s = 86;}

                         
                        input.seek(index33_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_7 = input.LA(1);

                         
                        int index33_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_InternalOpenCypherParser()) ) {s = 87;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_InternalOpenCypherParser()) ) {s = 90;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_10 = input.LA(1);

                         
                        int index33_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_InternalOpenCypherParser()) ) {s = 91;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_11 = input.LA(1);

                         
                        int index33_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalOpenCypherParser()) ) {s = 92;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA33_12 = input.LA(1);

                         
                        int index33_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_InternalOpenCypherParser()) ) {s = 93;}

                        else if ( (synpred81_InternalOpenCypherParser()) ) {s = 94;}

                        else if ( (synpred82_InternalOpenCypherParser()) ) {s = 95;}

                         
                        input.seek(index33_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA33_13 = input.LA(1);

                         
                        int index33_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalOpenCypherParser()) ) {s = 96;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA33_14 = input.LA(1);

                         
                        int index33_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalOpenCypherParser()) ) {s = 97;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA33_15 = input.LA(1);

                         
                        int index33_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalOpenCypherParser()) ) {s = 98;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA33_16 = input.LA(1);

                         
                        int index33_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalOpenCypherParser()) ) {s = 99;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA33_17 = input.LA(1);

                         
                        int index33_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalOpenCypherParser()) ) {s = 100;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA33_18 = input.LA(1);

                         
                        int index33_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalOpenCypherParser()) ) {s = 101;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA33_19 = input.LA(1);

                         
                        int index33_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalOpenCypherParser()) ) {s = 102;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA33_20 = input.LA(1);

                         
                        int index33_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalOpenCypherParser()) ) {s = 103;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA33_21 = input.LA(1);

                         
                        int index33_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalOpenCypherParser()) ) {s = 103;}

                        else if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA33_22 = input.LA(1);

                         
                        int index33_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalOpenCypherParser()) ) {s = 104;}

                        else if ( (synpred92_InternalOpenCypherParser()) ) {s = 105;}

                         
                        input.seek(index33_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA33_23 = input.LA(1);

                         
                        int index33_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA33_24 = input.LA(1);

                         
                        int index33_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA33_25 = input.LA(1);

                         
                        int index33_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA33_26 = input.LA(1);

                         
                        int index33_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA33_27 = input.LA(1);

                         
                        int index33_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA33_28 = input.LA(1);

                         
                        int index33_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA33_29 = input.LA(1);

                         
                        int index33_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_29);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA33_30 = input.LA(1);

                         
                        int index33_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA33_31 = input.LA(1);

                         
                        int index33_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA33_32 = input.LA(1);

                         
                        int index33_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA33_33 = input.LA(1);

                         
                        int index33_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA33_34 = input.LA(1);

                         
                        int index33_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA33_35 = input.LA(1);

                         
                        int index33_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA33_36 = input.LA(1);

                         
                        int index33_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA33_37 = input.LA(1);

                         
                        int index33_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA33_38 = input.LA(1);

                         
                        int index33_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA33_39 = input.LA(1);

                         
                        int index33_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA33_40 = input.LA(1);

                         
                        int index33_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA33_41 = input.LA(1);

                         
                        int index33_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA33_42 = input.LA(1);

                         
                        int index33_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA33_43 = input.LA(1);

                         
                        int index33_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA33_44 = input.LA(1);

                         
                        int index33_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA33_45 = input.LA(1);

                         
                        int index33_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA33_46 = input.LA(1);

                         
                        int index33_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA33_47 = input.LA(1);

                         
                        int index33_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_47);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA33_48 = input.LA(1);

                         
                        int index33_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_48);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA33_49 = input.LA(1);

                         
                        int index33_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA33_50 = input.LA(1);

                         
                        int index33_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_50);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA33_51 = input.LA(1);

                         
                        int index33_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_51);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA33_52 = input.LA(1);

                         
                        int index33_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA33_53 = input.LA(1);

                         
                        int index33_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_53);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA33_54 = input.LA(1);

                         
                        int index33_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA33_55 = input.LA(1);

                         
                        int index33_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_55);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA33_56 = input.LA(1);

                         
                        int index33_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_56);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA33_57 = input.LA(1);

                         
                        int index33_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_57);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA33_58 = input.LA(1);

                         
                        int index33_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_58);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA33_59 = input.LA(1);

                         
                        int index33_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_59);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA33_60 = input.LA(1);

                         
                        int index33_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_60);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA33_61 = input.LA(1);

                         
                        int index33_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_61);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA33_62 = input.LA(1);

                         
                        int index33_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_62);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA33_63 = input.LA(1);

                         
                        int index33_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_63);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA33_64 = input.LA(1);

                         
                        int index33_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_64);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA33_65 = input.LA(1);

                         
                        int index33_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_65);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA33_66 = input.LA(1);

                         
                        int index33_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_66);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA33_67 = input.LA(1);

                         
                        int index33_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_67);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA33_68 = input.LA(1);

                         
                        int index33_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_68);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA33_69 = input.LA(1);

                         
                        int index33_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_69);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA33_70 = input.LA(1);

                         
                        int index33_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_70);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA33_71 = input.LA(1);

                         
                        int index33_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_71);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA33_72 = input.LA(1);

                         
                        int index33_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_72);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA33_73 = input.LA(1);

                         
                        int index33_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_73);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA33_74 = input.LA(1);

                         
                        int index33_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_74);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA33_75 = input.LA(1);

                         
                        int index33_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_75);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA33_76 = input.LA(1);

                         
                        int index33_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_76);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA33_77 = input.LA(1);

                         
                        int index33_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_77);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA33_78 = input.LA(1);

                         
                        int index33_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_78);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA33_79 = input.LA(1);

                         
                        int index33_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_79);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA33_80 = input.LA(1);

                         
                        int index33_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_80);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA33_81 = input.LA(1);

                         
                        int index33_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_81);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA33_82 = input.LA(1);

                         
                        int index33_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_82);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA33_83 = input.LA(1);

                         
                        int index33_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_83);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA33_84 = input.LA(1);

                         
                        int index33_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 89;}

                         
                        input.seek(index33_84);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_65s = "\1\uffff\114\116\2\uffff";
    static final String dfa_66s = "\1\4\114\11\2\uffff";
    static final String dfa_67s = "\1\156\114\155\2\uffff";
    static final String dfa_68s = "\115\uffff\1\1\1\2";
    static final String[] dfa_69s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "\3\116\1\uffff\1\116\3\uffff\1\116\4\uffff\1\116\1\uffff\2\116\3\uffff\2\116\1\uffff\1\116\1\uffff\1\116\3\uffff\6\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\1\uffff\2\116\2\uffff\1\116\4\uffff\2\116\1\uffff\2\116\1\uffff\1\116\1\uffff\1\116\1\uffff\1\116\2\uffff\2\116\1\uffff\6\116\1\uffff\4\116\1\115\1\uffff\1\116\1\uffff\14\116\1\115\3\116\1\uffff\2\116",
            "",
            ""
    };
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final char[] dfa_67 = DFA.unpackEncodedStringToUnsignedChars(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[][] dfa_69 = unpackEncodedStringArray(dfa_69s);

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = dfa_1;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_6;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "4355:1: rule__PropertyLookup__Alternatives_1 : ( ( ( rule__PropertyLookup__Group_1_0__0 ) ) | ( ( rule__PropertyLookup__PropertyKeyNameAssignment_1_1 ) ) );";
        }
    }
    static final String dfa_70s = "\26\uffff";
    static final String dfa_71s = "\1\1\1\uffff\3\1\21\uffff";
    static final String dfa_72s = "\1\4\1\uffff\1\4\2\15\1\4\1\10\1\105\1\4\1\47\4\4\1\30\2\4\1\132\2\4\1\16\1\uffff";
    static final String dfa_73s = "\1\156\1\uffff\1\165\2\145\1\156\2\145\1\156\1\145\1\156\1\165\1\156\1\165\1\145\2\165\1\145\2\165\1\145\1\uffff";
    static final String dfa_74s = "\1\uffff\1\2\23\uffff\1\1";
    static final String dfa_75s = "\26\uffff}>";
    static final String[] dfa_76s = {
            "\11\25\1\11\1\25\1\3\1\25\1\21\1\25\1\4\2\25\1\5\1\2\1\17\1\16\3\25\1\20\1\23\3\25\1\13\4\25\1\12\1\14\1\25\1\10\1\25\1\24\1\25\1\uffff\1\1\2\25\1\6\4\25\1\7\10\25\1\22\10\25\1\15\1\25\6\uffff\6\25\27\uffff\1\25",
            "",
            "\52\1\1\uffff\34\1\6\uffff\6\1\16\uffff\1\25\10\uffff\1\1\4\uffff\3\1",
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\33\uffff\1\25",
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff\2\1\3\uffff\1\1\4\uffff\2\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\1\10\uffff\1\1\10\uffff\1\1\33\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\3\uffff\1\1\12\uffff\1\25\10\uffff\1\1",
            "\1\1\34\uffff\1\1\77\uffff\1\25",
            "\1\1\37\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\16\uffff\1\25\10\uffff\1\1",
            "\1\1\75\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\3\uffff\1\1\12\uffff\1\25\10\uffff\1\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\3\uffff\1\1\12\uffff\1\25\10\uffff\1\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\12\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\1\114\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\12\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\1\12\uffff\1\25",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\52\1\2\uffff\33\1\6\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\1\5\uffff\1\25\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\4\1",
            "\1\1\126\uffff\1\25",
            ""
    };

    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final char[] dfa_73 = DFA.unpackEncodedStringToUnsignedChars(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final short[][] dfa_76 = unpackEncodedStringArray(dfa_76s);

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = dfa_70;
            this.eof = dfa_71;
            this.min = dfa_72;
            this.max = dfa_73;
            this.accept = dfa_74;
            this.special = dfa_75;
            this.transition = dfa_76;
        }
        public String getDescription() {
            return "()* loopback of 5249:2: ( rule__CypherOption__ConfigurationOptionAssignment_3 )*";
        }
    }
    static final String dfa_77s = "\1\uffff\114\115\2\uffff";
    static final String dfa_78s = "\1\4\114\15\2\uffff";
    static final String dfa_79s = "\1\156\114\143\2\uffff";
    static final String[] dfa_80s = {
            "\1\66\1\31\1\62\1\65\1\16\1\52\1\54\1\75\1\44\1\32\1\6\1\3\1\103\1\42\1\26\1\4\1\17\1\7\1\12\1\2\1\37\1\40\1\22\1\102\1\107\1\41\1\45\1\106\1\73\1\21\1\34\1\101\1\100\1\13\1\51\1\33\1\35\1\46\1\60\1\10\1\5\1\64\2\uffff\1\110\1\53\1\15\1\111\1\74\1\27\1\56\1\23\1\61\1\105\1\76\1\57\1\50\1\114\1\77\1\113\1\25\1\11\1\71\1\104\1\55\1\24\1\112\1\72\1\63\1\36\1\70\6\uffff\1\30\1\47\1\43\1\20\1\14\1\67\27\uffff\1\1",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "\1\115\3\uffff\1\115\4\uffff\1\115\1\uffff\2\115\3\uffff\2\115\3\uffff\1\115\4\uffff\2\115\1\uffff\2\115\3\uffff\1\115\7\uffff\1\115\10\uffff\1\115\10\uffff\1\115\7\uffff\1\116\11\uffff\1\115\2\uffff\1\115\4\uffff\1\115",
            "",
            ""
    };
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final char[] dfa_78 = DFA.unpackEncodedStringToUnsignedChars(dfa_78s);
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final short[][] dfa_80 = unpackEncodedStringArray(dfa_80s);

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = dfa_1;
            this.eof = dfa_77;
            this.min = dfa_78;
            this.max = dfa_79;
            this.accept = dfa_28;
            this.special = dfa_6;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "9908:2: ( rule__YieldItem__Group_0__0 )?";
        }
    }
    static final String dfa_81s = "\131\uffff";
    static final String dfa_82s = "\1\4\1\0\127\uffff";
    static final String dfa_83s = "\1\165\1\0\127\uffff";
    static final String dfa_84s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_85s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_86s = {
            "\10\2\1\1\41\2\2\uffff\33\2\6\uffff\6\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\10\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\4\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "10043:2: ( rule__With__DistintAssignment_1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred205_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "10151:2: ( rule__Return__DistinctAssignment_1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred207_InternalOpenCypherParser()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index73_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_87s = "\100\uffff";
    static final String dfa_88s = "\1\1\77\uffff";
    static final String dfa_89s = "\1\11\17\uffff\1\0\2\uffff\1\0\54\uffff";
    static final String dfa_90s = "\1\155\17\uffff\1\0\2\uffff\1\0\54\uffff";
    static final String dfa_91s = "\1\uffff\1\2\75\uffff\1\1";
    static final String dfa_92s = "\20\uffff\1\0\2\uffff\1\1\54\uffff}>";
    static final String[] dfa_93s = {
            "\3\1\1\uffff\1\1\3\uffff\1\1\4\uffff\1\1\1\uffff\2\1\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\6\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\6\1\1\uffff\4\1\2\uffff\1\1\1\uffff\4\1\1\20\4\1\1\23\2\1\1\uffff\3\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final char[] dfa_90 = DFA.unpackEncodedStringToUnsignedChars(dfa_90s);
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final short[] dfa_92 = DFA.unpackEncodedString(dfa_92s);
    static final short[][] dfa_93 = unpackEncodedStringArray(dfa_93s);

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = dfa_87;
            this.eof = dfa_88;
            this.min = dfa_89;
            this.max = dfa_90;
            this.accept = dfa_91;
            this.special = dfa_92;
            this.transition = dfa_93;
        }
        public String getDescription() {
            return "()* loopback of 18594:3: ( rule__RelationshipsPattern__ChainAssignment_1 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_16 = input.LA(1);

                         
                        int index122_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalOpenCypherParser()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_19 = input.LA(1);

                         
                        int index122_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalOpenCypherParser()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF2L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000888000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0084958463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00384000007E07FFL});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000007E07FFL});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000201L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0080858463422002L,0x0000000000000201L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0038000000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0080858463422000L,0x0000000000000203L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900057E07FFL});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000004004000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900A57E07FFL});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000008000002000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000047E07FFL});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000300000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000008000400000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000003000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004000807E07FFL});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900B57E07FFL});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x1000024000000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0002000000000600L,0x0000000000000010L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000200000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0100000000000040L,0x0000000000000100L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000404000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0004080000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0004000001000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0038000011000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000090L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000002L,0x0000001080000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004804097E07FFL});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000011080000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004A84117E07FFL});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00004004007E07FFL});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0038000000001000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000000L,0x0000007000016000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000007000016000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x00000000A0000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000000L,0x0000000212000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000000212000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0010000100000800L,0x0000010000188000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0010000100000802L,0x0000010000188000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000000L,0x0000020000001000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x4000001000000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4B00A57E07FFL});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000100008000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x003C4900AD7E07FFL});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000200000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000000L,0x0000008000800000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0xFFFF3FFFFFFFFFF0L,0x00006000007E07FFL});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000888002L});

}
